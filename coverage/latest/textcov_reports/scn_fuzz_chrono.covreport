_ZN3scn2v46detail23chrono_datetime_scannerIc2tmE5parseINS0_24basic_scan_parse_contextIcEEEENT_8iteratorERS8_:
 1522|  59.2k|    {
 1523|  59.2k|        return detail::chrono_parse_impl<T, CharT>(pctx, m_fmt_str);
 1524|  59.2k|    }
_ZN3scn2v46detail17chrono_parse_implI2tmcNS0_24basic_scan_parse_contextIcEEEENT1_8iteratorERS6_RNSt3__117basic_string_viewIT0_NS9_11char_traitsISB_EEEE:
 1493|  59.2k|{
 1494|  59.2k|    auto it = pctx.begin();
 1495|  59.2k|    auto end = pctx.end();
 1496|  59.2k|    if (it == end || *it == CharT{'}'}) {
  ------------------
  |  Branch (1496:9): [True: 1.71k, False: 57.5k]
  |  Branch (1496:22): [True: 0, False: 57.5k]
  ------------------
 1497|  1.71k|        pctx.on_error(
 1498|  1.71k|            "Format string without specifiers is not valid for this type");
 1499|  1.71k|        return it;
 1500|  1.71k|    }
 1501|       |
 1502|  57.5k|    auto checker = detail::tm_format_checker<T>{};
 1503|  57.5k|    end = detail::parse_chrono_format_specs(it, end, checker);
 1504|  57.5k|    if (end != it) {
  ------------------
  |  Branch (1504:9): [True: 57.5k, False: 0]
  ------------------
 1505|  57.5k|        fmt_str = detail::make_string_view_from_pointers(it, end);
 1506|  57.5k|    }
 1507|  57.5k|    if (auto e = checker.get_error(); SCN_UNLIKELY(!e)) {
  ------------------
  |  | 1039|  57.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 57.5k]
  |  |  ------------------
  ------------------
 1508|      0|        assert(e.error().code() == scan_error::invalid_format_string);
 1509|      0|        pctx.on_error(e.error().msg());
 1510|      0|    }
 1511|  57.5k|    return end;
 1512|  57.5k|}
_ZN3scn2v46detail12setter_stateC2Ev:
  742|   714k|        : localized(0),
  743|   714k|          subsec_set(0),
  744|   714k|          sec_set(0),
  745|   714k|          min_set(0),
  746|   714k|          hour24_set(0),
  747|   714k|          hour12_set(0),
  748|   714k|          mday_set(0),
  749|   714k|          mon_set(0),
  750|   714k|          full_year_set(0),
  751|   714k|          century_set(0),
  752|   714k|          short_year_set(0),
  753|   714k|          wday_set(0),
  754|   714k|          yday_set(0),
  755|   714k|          tzoff_set(0),
  756|   714k|          tzname_set(0),
  757|   714k|          am_pm_set(0),
  758|   714k|          epoch_ticks_set(0),
  759|   714k|          duration_ticks_set(0),
  760|   714k|          duration_suffix_set(0),
  761|   714k|          is_pm(0)
  762|   714k|    {
  763|   714k|    }
_ZN3scn2v46detail25parse_chrono_format_specsIcRNS1_17tm_format_checkerI2tmEEEEPKT_S9_S9_OT0_:
  376|  57.5k|{
  377|  57.5k|    if (begin == end || *begin == CharT{'}'}) {
  ------------------
  |  Branch (377:9): [True: 0, False: 57.5k]
  |  Branch (377:25): [True: 0, False: 57.5k]
  ------------------
  378|      0|        handler.on_error("chrono format specs can't be empty");
  379|      0|        return begin;
  380|      0|    }
  381|       |
  382|  57.5k|    auto p = begin;
  383|  57.5k|    if (*p == CharT{'L'}) {
  ------------------
  |  Branch (383:9): [True: 0, False: 57.5k]
  ------------------
  384|      0|        handler.on_localized();
  385|      0|        begin = ++p;
  386|      0|        if (p == end) {
  ------------------
  |  Branch (386:13): [True: 0, False: 0]
  ------------------
  387|      0|            handler.on_error("chrono format specs can't be empty");
  388|      0|            return p;
  389|      0|        }
  390|      0|    }
  391|       |
  392|  57.5k|    if (p == end || *p != CharT{'%'}) {
  ------------------
  |  Branch (392:9): [True: 0, False: 57.5k]
  |  Branch (392:21): [True: 0, False: 57.5k]
  ------------------
  393|      0|        handler.on_error(
  394|      0|            "chrono format spec must start with a conversion specifier (%...)");
  395|      0|        return p;
  396|      0|    }
  397|       |
  398|   152k|    while (p != end) {
  ------------------
  |  Branch (398:12): [True: 152k, False: 0]
  ------------------
  399|   152k|        auto ch = *p;
  400|   152k|        if (ch == CharT{'}'}) {
  ------------------
  |  Branch (400:13): [True: 57.5k, False: 95.2k]
  ------------------
  401|  57.5k|            break;
  402|  57.5k|        }
  403|  95.2k|        if (ch != CharT{'%'}) {
  ------------------
  |  Branch (403:13): [True: 17.1k, False: 78.1k]
  ------------------
  404|  17.1k|            if (ch == 0x20 || (ch >= 0x09 && ch <= 0x0d)) {
  ------------------
  |  Branch (404:17): [True: 0, False: 17.1k]
  |  Branch (404:32): [True: 17.1k, False: 0]
  |  Branch (404:46): [True: 0, False: 17.1k]
  ------------------
  405|       |                // Simple ASCII space
  406|      0|                handler.on_text(begin, p);
  407|      0|                handler.on_whitespace();
  408|      0|                begin = p += 1;
  409|      0|                continue;
  410|      0|            }
  411|  17.1k|            const auto cp_len =
  412|  17.1k|                detail::code_point_length_by_starting_code_unit(ch);
  413|  17.1k|            if (cp_len == 0) {
  ------------------
  |  Branch (413:17): [True: 0, False: 17.1k]
  ------------------
  414|      0|                handler.on_error("Invalid literal character");
  415|      0|                return p;
  416|      0|            }
  417|  17.1k|            if (cp_len > 1) {
  ------------------
  |  Branch (417:17): [True: 0, False: 17.1k]
  ------------------
  418|       |                // Multi code unit code point,
  419|       |                // possible space
  420|      0|                auto cp_start_p = p;
  421|      0|                CharT buffer[4] = {};
  422|      0|                for (std::size_t i = 0; i < cp_len; ++i) {
  ------------------
  |  Branch (422:41): [True: 0, False: 0]
  ------------------
  423|      0|                    if (p == end) {
  ------------------
  |  Branch (423:25): [True: 0, False: 0]
  ------------------
  424|      0|                        handler.on_error("Invalid literal character");
  425|      0|                        return p;
  426|      0|                    }
  427|      0|                    buffer[i] = *p;
  428|      0|                    ++p;
  429|      0|                }
  430|      0|                if (is_cp_space(decode_code_point_exhaustive(
  ------------------
  |  Branch (430:21): [True: 0, False: 0]
  ------------------
  431|      0|                        std::basic_string_view<CharT>{buffer, cp_len}))) {
  432|      0|                    handler.on_text(begin, cp_start_p);
  433|      0|                    handler.on_whitespace();
  434|      0|                    begin = p;
  435|      0|                    continue;
  436|      0|                }
  437|      0|            }
  438|  17.1k|            ++p;
  439|  17.1k|            continue;
  440|  17.1k|        }
  441|  78.1k|        if (begin != p) {
  ------------------
  |  Branch (441:13): [True: 17.1k, False: 60.9k]
  ------------------
  442|  17.1k|            handler.on_text(begin, p);
  443|  17.1k|        }
  444|  78.1k|        ++p;  // Consume '%'
  445|  78.1k|        if (p == end) {
  ------------------
  |  Branch (445:13): [True: 0, False: 78.1k]
  ------------------
  446|      0|            handler.on_error("Unexpected end of chrono format string");
  447|      0|            return p;
  448|      0|        }
  449|       |
  450|  78.1k|        ch = *p;
  451|  78.1k|        ++p;
  452|       |
  453|  78.1k|        switch (ch) {
  454|      0|            case CharT{'%'}:
  ------------------
  |  Branch (454:13): [True: 0, False: 78.1k]
  ------------------
  455|      0|                handler.on_text(&ch, &ch + 1);
  456|      0|                break;
  457|      0|            case CharT{'n'}:
  ------------------
  |  Branch (457:13): [True: 0, False: 78.1k]
  ------------------
  458|      0|            case CharT{'t'}:
  ------------------
  |  Branch (458:13): [True: 0, False: 78.1k]
  ------------------
  459|      0|                handler.on_whitespace();
  460|      0|                break;
  461|       |            // Year
  462|  3.42k|            case CharT{'Y'}:
  ------------------
  |  Branch (462:13): [True: 3.42k, False: 74.7k]
  ------------------
  463|  3.42k|                handler.on_full_year();
  464|  3.42k|                break;
  465|      0|            case CharT{'y'}:
  ------------------
  |  Branch (465:13): [True: 0, False: 78.1k]
  ------------------
  466|      0|                handler.on_short_year();
  467|      0|                break;
  468|      0|            case CharT{'C'}:
  ------------------
  |  Branch (468:13): [True: 0, False: 78.1k]
  ------------------
  469|      0|                handler.on_century();
  470|      0|                break;
  471|      0|            case CharT{'G'}:
  ------------------
  |  Branch (471:13): [True: 0, False: 78.1k]
  ------------------
  472|      0|                handler.on_iso_week_based_year();
  473|      0|                break;
  474|      0|            case CharT{'g'}:
  ------------------
  |  Branch (474:13): [True: 0, False: 78.1k]
  ------------------
  475|      0|                handler.on_iso_week_based_short_year();
  476|      0|                break;
  477|       |            // Month
  478|  9.07k|            case CharT{'b'}:
  ------------------
  |  Branch (478:13): [True: 9.07k, False: 69.0k]
  ------------------
  479|  9.07k|            case CharT{'B'}:
  ------------------
  |  Branch (479:13): [True: 0, False: 78.1k]
  ------------------
  480|  9.07k|            case CharT{'h'}:
  ------------------
  |  Branch (480:13): [True: 0, False: 78.1k]
  ------------------
  481|  9.07k|                handler.on_month_name();
  482|  9.07k|                break;
  483|  3.42k|            case CharT{'m'}:
  ------------------
  |  Branch (483:13): [True: 3.42k, False: 74.7k]
  ------------------
  484|  3.42k|                handler.on_dec_month();
  485|  3.42k|                break;
  486|       |            // Week
  487|      0|            case CharT{'U'}:
  ------------------
  |  Branch (487:13): [True: 0, False: 78.1k]
  ------------------
  488|      0|                handler.on_dec0_week_of_year();
  489|      0|                break;
  490|      0|            case CharT{'W'}:
  ------------------
  |  Branch (490:13): [True: 0, False: 78.1k]
  ------------------
  491|      0|                handler.on_dec1_week_of_year();
  492|      0|                break;
  493|      0|            case CharT{'V'}:
  ------------------
  |  Branch (493:13): [True: 0, False: 78.1k]
  ------------------
  494|      0|                handler.on_iso_week_of_year();
  495|      0|                break;
  496|       |            // Day of year
  497|      0|            case CharT{'j'}:
  ------------------
  |  Branch (497:13): [True: 0, False: 78.1k]
  ------------------
  498|      0|                handler.on_day_of_year();
  499|      0|                break;
  500|       |            // Day of month
  501|  3.42k|            case CharT{'d'}:
  ------------------
  |  Branch (501:13): [True: 3.42k, False: 74.7k]
  ------------------
  502|  3.42k|            case CharT{'e'}:
  ------------------
  |  Branch (502:13): [True: 0, False: 78.1k]
  ------------------
  503|  3.42k|                handler.on_day_of_month();
  504|  3.42k|                break;
  505|       |            // Day of week
  506|  6.89k|            case CharT{'a'}:
  ------------------
  |  Branch (506:13): [True: 6.89k, False: 71.2k]
  ------------------
  507|  6.89k|            case CharT{'A'}:
  ------------------
  |  Branch (507:13): [True: 0, False: 78.1k]
  ------------------
  508|  6.89k|                handler.on_weekday_name();
  509|  6.89k|                break;
  510|      0|            case CharT{'w'}:
  ------------------
  |  Branch (510:13): [True: 0, False: 78.1k]
  ------------------
  511|      0|                handler.on_dec0_weekday();
  512|      0|                break;
  513|      0|            case CharT{'u'}:
  ------------------
  |  Branch (513:13): [True: 0, False: 78.1k]
  ------------------
  514|      0|                handler.on_dec1_weekday();
  515|      0|                break;
  516|       |            // Hour
  517|  3.42k|            case CharT{'H'}:
  ------------------
  |  Branch (517:13): [True: 3.42k, False: 74.7k]
  ------------------
  518|  3.42k|            case CharT{'k'}:
  ------------------
  |  Branch (518:13): [True: 0, False: 78.1k]
  ------------------
  519|  3.42k|                handler.on_24_hour();
  520|  3.42k|                break;
  521|      0|            case CharT{'I'}:
  ------------------
  |  Branch (521:13): [True: 0, False: 78.1k]
  ------------------
  522|      0|            case CharT{'l'}:
  ------------------
  |  Branch (522:13): [True: 0, False: 78.1k]
  ------------------
  523|      0|                handler.on_12_hour();
  524|      0|                break;
  525|       |            // Minute
  526|  3.42k|            case CharT{'M'}:
  ------------------
  |  Branch (526:13): [True: 3.42k, False: 74.7k]
  ------------------
  527|  3.42k|                handler.on_minute();
  528|  3.42k|                break;
  529|       |            // Second
  530|  3.42k|            case CharT{'S'}:
  ------------------
  |  Branch (530:13): [True: 3.42k, False: 74.7k]
  ------------------
  531|  3.42k|                handler.on_second();
  532|  3.42k|                break;
  533|       |            // Subsecond
  534|      0|            case CharT{'.'}: {
  ------------------
  |  Branch (534:13): [True: 0, False: 78.1k]
  ------------------
  535|       |                // p already increased before the switch
  536|      0|                if (p == end) {
  ------------------
  |  Branch (536:21): [True: 0, False: 0]
  ------------------
  537|      0|                    handler.on_error("Unexpected end of chrono format string");
  538|      0|                    return p;
  539|      0|                }
  540|      0|                bool use_alternate = false;
  541|      0|                if (*p == CharT{'E'} || *p == CharT{'O'}) {
  ------------------
  |  Branch (541:21): [True: 0, False: 0]
  |  Branch (541:41): [True: 0, False: 0]
  ------------------
  542|      0|                    ++p;
  543|      0|                    if (p == end) {
  ------------------
  |  Branch (543:25): [True: 0, False: 0]
  ------------------
  544|      0|                        handler.on_error(
  545|      0|                            "Unexpected end of chrono format string");
  546|      0|                        return p;
  547|      0|                    }
  548|      0|                    use_alternate = true;
  549|      0|                }
  550|      0|                if (*p != CharT{'S'}) {
  ------------------
  |  Branch (550:21): [True: 0, False: 0]
  ------------------
  551|      0|                    handler.on_error(
  552|      0|                        "Expected `S` after `%.` in format string");
  553|      0|                    return p;
  554|      0|                }
  555|      0|                ++p;
  556|      0|                handler.on_subsecond(use_alternate
  ------------------
  |  Branch (556:38): [True: 0, False: 0]
  ------------------
  557|      0|                                         ? numeric_system::alternative_e
  558|      0|                                         : numeric_system::standard);
  559|      0|                break;
  560|      0|            }
  561|       |            // Timezones
  562|  3.42k|            case CharT{'z'}:
  ------------------
  |  Branch (562:13): [True: 3.42k, False: 74.7k]
  ------------------
  563|  3.42k|                handler.on_tz_offset();
  564|  3.42k|                break;
  565|      0|            case CharT{'Z'}:
  ------------------
  |  Branch (565:13): [True: 0, False: 78.1k]
  ------------------
  566|      0|                handler.on_tz_name();
  567|      0|                break;
  568|       |            // Other
  569|      0|            case CharT{'c'}:
  ------------------
  |  Branch (569:13): [True: 0, False: 78.1k]
  ------------------
  570|      0|                handler.on_loc_datetime();
  571|      0|                break;
  572|      0|            case CharT{'x'}:
  ------------------
  |  Branch (572:13): [True: 0, False: 78.1k]
  ------------------
  573|      0|                handler.on_loc_date();
  574|      0|                break;
  575|      0|            case CharT{'X'}:
  ------------------
  |  Branch (575:13): [True: 0, False: 78.1k]
  ------------------
  576|      0|                handler.on_loc_time();
  577|      0|                break;
  578|  7.69k|            case CharT{'D'}:
  ------------------
  |  Branch (578:13): [True: 7.69k, False: 70.4k]
  ------------------
  579|  7.69k|                handler.on_us_date();
  580|  7.69k|                break;
  581|  4.10k|            case CharT{'F'}:
  ------------------
  |  Branch (581:13): [True: 4.10k, False: 74.0k]
  ------------------
  582|  4.10k|                handler.on_iso_date();
  583|  4.10k|                break;
  584|      0|            case CharT{'r'}:
  ------------------
  |  Branch (584:13): [True: 0, False: 78.1k]
  ------------------
  585|      0|                handler.on_loc_12_hour_time();
  586|      0|                break;
  587|  20.5k|            case CharT{'R'}:
  ------------------
  |  Branch (587:13): [True: 20.5k, False: 57.5k]
  ------------------
  588|  20.5k|                handler.on_24_hour_time();
  589|  20.5k|                break;
  590|  5.80k|            case CharT{'T'}:
  ------------------
  |  Branch (590:13): [True: 5.80k, False: 72.3k]
  ------------------
  591|  5.80k|                handler.on_iso_time();
  592|  5.80k|                break;
  593|      0|            case CharT{'p'}:
  ------------------
  |  Branch (593:13): [True: 0, False: 78.1k]
  ------------------
  594|      0|            case CharT{'P'}:
  ------------------
  |  Branch (594:13): [True: 0, False: 78.1k]
  ------------------
  595|      0|                handler.on_am_pm();
  596|      0|                break;
  597|      0|            case CharT{'s'}:
  ------------------
  |  Branch (597:13): [True: 0, False: 78.1k]
  ------------------
  598|      0|                handler.on_epoch_offset();
  599|      0|                break;
  600|      0|            case CharT{'Q'}:
  ------------------
  |  Branch (600:13): [True: 0, False: 78.1k]
  ------------------
  601|      0|                handler.on_duration_tick_count();
  602|      0|                break;
  603|      0|            case CharT{'q'}:
  ------------------
  |  Branch (603:13): [True: 0, False: 78.1k]
  ------------------
  604|      0|                handler.on_duration_suffix();
  605|      0|                break;
  606|       |            // 'E'
  607|      0|            case CharT{'E'}: {
  ------------------
  |  Branch (607:13): [True: 0, False: 78.1k]
  ------------------
  608|      0|                if (p == end) {
  ------------------
  |  Branch (608:21): [True: 0, False: 0]
  ------------------
  609|      0|                    handler.on_error("Unexpected end of chrono format string");
  610|      0|                    return p;
  611|      0|                }
  612|      0|                ch = *p;
  613|      0|                ++p;
  614|       |
  615|      0|                switch (ch) {
  616|      0|                    case CharT{'c'}:
  ------------------
  |  Branch (616:21): [True: 0, False: 0]
  ------------------
  617|      0|                        handler.on_loc_datetime(numeric_system::alternative_e);
  618|      0|                        break;
  619|      0|                    case CharT{'C'}:
  ------------------
  |  Branch (619:21): [True: 0, False: 0]
  ------------------
  620|      0|                        handler.on_century(numeric_system::alternative_e);
  621|      0|                        break;
  622|      0|                    case CharT{'x'}:
  ------------------
  |  Branch (622:21): [True: 0, False: 0]
  ------------------
  623|      0|                        handler.on_loc_date(numeric_system::alternative_e);
  624|      0|                        break;
  625|      0|                    case CharT{'X'}:
  ------------------
  |  Branch (625:21): [True: 0, False: 0]
  ------------------
  626|      0|                        handler.on_loc_time(numeric_system::alternative_e);
  627|      0|                        break;
  628|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (628:21): [True: 0, False: 0]
  ------------------
  629|      0|                        handler.on_loc_offset_year();
  630|      0|                        break;
  631|      0|                    case CharT{'Y'}:
  ------------------
  |  Branch (631:21): [True: 0, False: 0]
  ------------------
  632|      0|                        handler.on_full_year(numeric_system::alternative_e);
  633|      0|                        break;
  634|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (634:21): [True: 0, False: 0]
  ------------------
  635|      0|                        handler.on_tz_offset(numeric_system::alternative_e);
  636|      0|                        break;
  637|      0|                    default:
  ------------------
  |  Branch (637:21): [True: 0, False: 0]
  ------------------
  638|      0|                        handler.on_error(
  639|      0|                            "Invalid character following 'E' in chrono format "
  640|      0|                            "string");
  641|      0|                        return p;
  642|      0|                }
  643|      0|                break;
  644|      0|            }
  645|       |            // 'O'
  646|      0|            case CharT{'O'}: {
  ------------------
  |  Branch (646:13): [True: 0, False: 78.1k]
  ------------------
  647|      0|                if (p == end) {
  ------------------
  |  Branch (647:21): [True: 0, False: 0]
  ------------------
  648|      0|                    handler.on_error("Unexpected end of chrono format string");
  649|      0|                    return p;
  650|      0|                }
  651|      0|                ch = *p;
  652|      0|                ++p;
  653|       |
  654|      0|                switch (ch) {
  655|      0|                    case CharT{'d'}:
  ------------------
  |  Branch (655:21): [True: 0, False: 0]
  ------------------
  656|      0|                    case CharT{'e'}:
  ------------------
  |  Branch (656:21): [True: 0, False: 0]
  ------------------
  657|      0|                        handler.on_day_of_month(numeric_system::alternative_o);
  658|      0|                        break;
  659|      0|                    case CharT{'H'}:
  ------------------
  |  Branch (659:21): [True: 0, False: 0]
  ------------------
  660|      0|                    case CharT{'k'}:
  ------------------
  |  Branch (660:21): [True: 0, False: 0]
  ------------------
  661|      0|                        handler.on_24_hour(numeric_system::alternative_o);
  662|      0|                        break;
  663|      0|                    case CharT{'I'}:
  ------------------
  |  Branch (663:21): [True: 0, False: 0]
  ------------------
  664|      0|                    case CharT{'l'}:
  ------------------
  |  Branch (664:21): [True: 0, False: 0]
  ------------------
  665|      0|                        handler.on_12_hour(numeric_system::alternative_o);
  666|      0|                        break;
  667|      0|                    case CharT{'m'}:
  ------------------
  |  Branch (667:21): [True: 0, False: 0]
  ------------------
  668|      0|                        handler.on_dec_month(numeric_system::alternative_o);
  669|      0|                        break;
  670|      0|                    case CharT{'M'}:
  ------------------
  |  Branch (670:21): [True: 0, False: 0]
  ------------------
  671|      0|                        handler.on_minute(numeric_system::alternative_o);
  672|      0|                        break;
  673|      0|                    case CharT{'S'}:
  ------------------
  |  Branch (673:21): [True: 0, False: 0]
  ------------------
  674|      0|                        handler.on_second(numeric_system::alternative_o);
  675|      0|                        break;
  676|      0|                    case CharT{'U'}:
  ------------------
  |  Branch (676:21): [True: 0, False: 0]
  ------------------
  677|      0|                        handler.on_dec0_week_of_year(
  678|      0|                            numeric_system::alternative_o);
  679|      0|                        break;
  680|      0|                    case CharT{'w'}:
  ------------------
  |  Branch (680:21): [True: 0, False: 0]
  ------------------
  681|      0|                        handler.on_dec0_weekday(numeric_system::alternative_o);
  682|      0|                        break;
  683|      0|                    case CharT{'W'}:
  ------------------
  |  Branch (683:21): [True: 0, False: 0]
  ------------------
  684|      0|                        handler.on_dec1_weekday(numeric_system::alternative_o);
  685|      0|                        break;
  686|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (686:21): [True: 0, False: 0]
  ------------------
  687|      0|                        handler.on_short_year(numeric_system::alternative_o);
  688|      0|                        break;
  689|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (689:21): [True: 0, False: 0]
  ------------------
  690|      0|                        handler.on_tz_offset(numeric_system::alternative_o);
  691|      0|                        break;
  692|      0|                    default:
  ------------------
  |  Branch (692:21): [True: 0, False: 0]
  ------------------
  693|      0|                        handler.on_error(
  694|      0|                            "Invalid character following 'O' in chrono format "
  695|      0|                            "string");
  696|      0|                        return p;
  697|      0|                }
  698|      0|                break;
  699|      0|            }
  700|      0|            default:
  ------------------
  |  Branch (700:13): [True: 0, False: 78.1k]
  ------------------
  701|      0|                handler.on_error("Invalid character in chrono format string");
  702|      0|                return p;
  703|  78.1k|        }
  704|  78.1k|        begin = p;
  705|       |
  706|  78.1k|        if (!handler.get_error()) {
  ------------------
  |  Branch (706:13): [True: 0, False: 78.1k]
  ------------------
  707|      0|            return p;
  708|      0|        }
  709|  78.1k|    }
  710|  57.5k|    if (begin != p) {
  ------------------
  |  Branch (710:9): [True: 0, False: 57.5k]
  ------------------
  711|      0|        handler.on_text(begin, p);
  712|      0|    }
  713|  57.5k|    handler.verify();
  714|  57.5k|    return p;
  715|  57.5k|}
_ZN3scn2v46detail17tm_format_checkerI2tmE7on_textIcEEvPKT_S8_:
 1176|  17.1k|    {
 1177|  17.1k|    }
_ZN3scn2v46detail17tm_format_checkerI2tmE12on_full_yearENS1_14numeric_systemE:
 1188|  21.2k|    {
 1189|  21.2k|        if (!always_supports_field<T, field_tags::year>::value) {
  ------------------
  |  Branch (1189:13): [Folded - Ignored]
  ------------------
 1190|      0|            on_error("Years not supported with this type");
 1191|      0|        }
 1192|  21.2k|        st.set_full_year(*this);
 1193|  21.2k|    }
_ZN3scn2v46detail12setter_state13set_full_yearINS1_17tm_format_checkerI2tmEEEEvRT_:
  768|  21.2k|    {                                                                \
  769|  21.2k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  21.2k|        field##_set = 1;                                             \
  774|  21.2k|    }
_ZN3scn2v46detail17tm_format_checkerI2tmE13on_short_yearENS1_14numeric_systemE:
 1195|  14.5k|    {
 1196|  14.5k|        if (!always_supports_field<T, field_tags::year>::value) {
  ------------------
  |  Branch (1196:13): [Folded - Ignored]
  ------------------
 1197|      0|            on_error("Years not supported with this type");
 1198|      0|        }
 1199|  14.5k|        st.set_short_year(*this);
 1200|  14.5k|    }
_ZN3scn2v46detail12setter_state14set_short_yearINS1_17tm_format_checkerI2tmEEEEvRT_:
  768|  14.5k|    {                                                                \
  769|  14.5k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  14.5k|        field##_set = 1;                                             \
  774|  14.5k|    }
_ZN3scn2v46detail17tm_format_checkerI2tmE13on_month_nameEv:
 1231|  17.2k|    {
 1232|  17.2k|        if (!always_supports_field<T, field_tags::mon>::value) {
  ------------------
  |  Branch (1232:13): [Folded - Ignored]
  ------------------
 1233|      0|            on_error("Months not supported with this type");
 1234|      0|        }
 1235|  17.2k|    }
_ZN3scn2v46detail17tm_format_checkerI2tmE12on_dec_monthENS1_14numeric_systemE:
 1237|  35.8k|    {
 1238|  35.8k|        if (!always_supports_field<T, field_tags::mon>::value) {
  ------------------
  |  Branch (1238:13): [Folded - Ignored]
  ------------------
 1239|      0|            on_error("Months not supported with this type");
 1240|      0|        }
 1241|  35.8k|        st.set_mon(*this);
 1242|  35.8k|    }
_ZN3scn2v46detail12setter_state7set_monINS1_17tm_format_checkerI2tmEEEEvRT_:
  768|  35.8k|    {                                                                \
  769|  35.8k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  35.8k|        field##_set = 1;                                             \
  774|  35.8k|    }
_ZN3scn2v46detail17tm_format_checkerI2tmE15on_day_of_monthENS1_14numeric_systemE:
 1265|  35.8k|    {
 1266|  35.8k|        if (!always_supports_field<T, field_tags::mday>::value) {
  ------------------
  |  Branch (1266:13): [Folded - Ignored]
  ------------------
 1267|      0|            on_error("Day-of-month not supported with this type");
 1268|      0|        }
 1269|  35.8k|        st.set_mday(*this);
 1270|  35.8k|    }
_ZN3scn2v46detail12setter_state8set_mdayINS1_17tm_format_checkerI2tmEEEEvRT_:
  768|  35.8k|    {                                                                \
  769|  35.8k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  35.8k|        field##_set = 1;                                             \
  774|  35.8k|    }
_ZN3scn2v46detail17tm_format_checkerI2tmE15on_weekday_nameEv:
 1273|  13.7k|    {
 1274|  13.7k|        if (!always_supports_field<T, field_tags::wday>::value) {
  ------------------
  |  Branch (1274:13): [Folded - Ignored]
  ------------------
 1275|      0|            on_error("Day-of-week not supported with this type");
 1276|      0|        }
 1277|  13.7k|        st.set_wday(*this);
 1278|  13.7k|    }
_ZN3scn2v46detail12setter_state8set_wdayINS1_17tm_format_checkerI2tmEEEEvRT_:
  768|  13.7k|    {                                                                \
  769|  13.7k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  13.7k|        field##_set = 1;                                             \
  774|  13.7k|    }
_ZN3scn2v46detail17tm_format_checkerI2tmE10on_24_hourENS1_14numeric_systemE:
 1295|  63.2k|    {
 1296|  63.2k|        if (!always_supports_field<T, field_tags::hour>::value) {
  ------------------
  |  Branch (1296:13): [Folded - Ignored]
  ------------------
 1297|      0|            on_error("Hours not supported with this type");
 1298|      0|        }
 1299|  63.2k|        st.set_hour24(*this);
 1300|  63.2k|    }
_ZN3scn2v46detail12setter_state10set_hour24INS1_17tm_format_checkerI2tmEEEEvRT_:
  768|  63.2k|    {                                                                \
  769|  63.2k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  63.2k|        field##_set = 1;                                             \
  774|  63.2k|    }
_ZN3scn2v46detail17tm_format_checkerI2tmE9on_minuteENS1_14numeric_systemE:
 1309|  63.2k|    {
 1310|  63.2k|        if (!always_supports_field<T, field_tags::min>::value) {
  ------------------
  |  Branch (1310:13): [Folded - Ignored]
  ------------------
 1311|      0|            on_error("Minutes not supported with this type");
 1312|      0|        }
 1313|  63.2k|        st.set_min(*this);
 1314|  63.2k|    }
_ZN3scn2v46detail12setter_state7set_minINS1_17tm_format_checkerI2tmEEEEvRT_:
  768|  63.2k|    {                                                                \
  769|  63.2k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  63.2k|        field##_set = 1;                                             \
  774|  63.2k|    }
_ZN3scn2v46detail17tm_format_checkerI2tmE9on_secondENS1_14numeric_systemE:
 1316|  23.3k|    {
 1317|  23.3k|        if (!always_supports_field<T, field_tags::sec>::value) {
  ------------------
  |  Branch (1317:13): [Folded - Ignored]
  ------------------
 1318|      0|            on_error("Seconds not supported with this type");
 1319|      0|        }
 1320|  23.3k|        st.set_sec(*this);
 1321|  23.3k|    }
_ZN3scn2v46detail12setter_state7set_secINS1_17tm_format_checkerI2tmEEEEvRT_:
  768|  23.3k|    {                                                                \
  769|  23.3k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  23.3k|        field##_set = 1;                                             \
  774|  23.3k|    }
_ZN3scn2v46detail17tm_format_checkerI2tmE12on_tz_offsetENS1_14numeric_systemE:
 1335|  10.2k|    {
 1336|  10.2k|        if (!always_supports_field<T, field_tags::tzoff>::value) {
  ------------------
  |  Branch (1336:13): [Folded - Ignored]
  ------------------
 1337|      0|            on_error("Timezone offsets not supported with this type");
 1338|      0|        }
 1339|  10.2k|        st.set_tzoff(*this);
 1340|  10.2k|    }
_ZN3scn2v46detail12setter_state9set_tzoffINS1_17tm_format_checkerI2tmEEEEvRT_:
  768|  10.2k|    {                                                                \
  769|  10.2k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  10.2k|        field##_set = 1;                                             \
  774|  10.2k|    }
_ZN3scn2v46detail17tm_format_checkerI2tmE10on_us_dateEv:
 1368|  14.5k|    {
 1369|  14.5k|        on_dec_month();
 1370|  14.5k|        on_day_of_month();
 1371|  14.5k|        on_short_year();
 1372|  14.5k|    }
_ZN3scn2v46detail17tm_format_checkerI2tmE11on_iso_dateEv:
 1374|  10.9k|    {
 1375|  10.9k|        on_full_year();
 1376|  10.9k|        on_dec_month();
 1377|  10.9k|        on_day_of_month();
 1378|  10.9k|    }
_ZN3scn2v46detail17tm_format_checkerI2tmE15on_24_hour_timeEv:
 1386|  39.9k|    {
 1387|  39.9k|        on_24_hour();
 1388|  39.9k|        on_minute();
 1389|  39.9k|    }
_ZN3scn2v46detail17tm_format_checkerI2tmE11on_iso_timeEv:
 1391|  13.0k|    {
 1392|  13.0k|        on_24_hour();
 1393|  13.0k|        on_minute();
 1394|  13.0k|        on_second();
 1395|  13.0k|    }
_ZN3scn2v46detail17tm_format_checkerI2tmE6verifyEv:
 1418|   119k|    {
 1419|   119k|        if (always_requires_field<T, field_tags::subsec>::value &&
  ------------------
  |  Branch (1419:13): [Folded - Ignored]
  ------------------
 1420|   119k|            !st.subsec_set) {
  ------------------
  |  Branch (1420:13): [True: 0, False: 0]
  ------------------
 1421|      0|            on_error("Sub-seconds not set by the format string");
 1422|      0|        }
 1423|   119k|        if (always_requires_field<T, field_tags::sec>::value && !st.sec_set) {
  ------------------
  |  Branch (1423:13): [Folded - Ignored]
  |  Branch (1423:65): [True: 0, False: 0]
  ------------------
 1424|      0|            on_error("Seconds not set by the format string");
 1425|      0|        }
 1426|   119k|        if (always_requires_field<T, field_tags::min>::value && !st.min_set) {
  ------------------
  |  Branch (1426:13): [Folded - Ignored]
  |  Branch (1426:65): [True: 0, False: 0]
  ------------------
 1427|      0|            on_error("Minutes not set by the format string");
 1428|      0|        }
 1429|   119k|        if (always_requires_field<T, field_tags::hour>::value &&
  ------------------
  |  Branch (1429:13): [Folded - Ignored]
  ------------------
 1430|   119k|            !st.hour24_set && !st.hour12_set) {
  ------------------
  |  Branch (1430:13): [True: 0, False: 0]
  |  Branch (1430:31): [True: 0, False: 0]
  ------------------
 1431|      0|            on_error("Hours not set by the format string");
 1432|      0|        }
 1433|   119k|        if (always_requires_field<T, field_tags::mday>::value && !st.mday_set) {
  ------------------
  |  Branch (1433:13): [Folded - Ignored]
  |  Branch (1433:66): [True: 0, False: 0]
  ------------------
 1434|      0|            on_error("Day not set by the format string");
 1435|      0|        }
 1436|   119k|        if (always_requires_field<T, field_tags::mon>::value && !st.mon_set) {
  ------------------
  |  Branch (1436:13): [Folded - Ignored]
  |  Branch (1436:65): [True: 0, False: 0]
  ------------------
 1437|      0|            on_error("Month not set by the format string");
 1438|      0|        }
 1439|   119k|        if (always_requires_field<T, field_tags::year>::value &&
  ------------------
  |  Branch (1439:13): [Folded - Ignored]
  ------------------
 1440|   119k|            !st.full_year_set && !st.century_set && !st.short_year_set) {
  ------------------
  |  Branch (1440:13): [True: 0, False: 0]
  |  Branch (1440:34): [True: 0, False: 0]
  |  Branch (1440:53): [True: 0, False: 0]
  ------------------
 1441|      0|            on_error("Year not set by the format string");
 1442|      0|        }
 1443|   119k|        if (always_requires_field<T, field_tags::wday>::value && !st.wday_set) {
  ------------------
  |  Branch (1443:13): [Folded - Ignored]
  |  Branch (1443:66): [True: 0, False: 0]
  ------------------
 1444|      0|            on_error("Day-of-week not set by the format string");
 1445|      0|        }
 1446|   119k|        if (always_requires_field<T, field_tags::yday>::value && !st.yday_set) {
  ------------------
  |  Branch (1446:13): [Folded - Ignored]
  |  Branch (1446:66): [True: 0, False: 0]
  ------------------
 1447|      0|            on_error("Day-of-year not set by the format string");
 1448|      0|        }
 1449|   119k|        if (always_requires_field<T, field_tags::tzoff>::value &&
  ------------------
  |  Branch (1449:13): [Folded - Ignored]
  ------------------
 1450|   119k|            !st.tzoff_set) {
  ------------------
  |  Branch (1450:13): [True: 0, False: 0]
  ------------------
 1451|      0|            on_error("Timezone offset not set by the format string");
 1452|      0|        }
 1453|   119k|        if (always_requires_field<T, field_tags::tzname>::value &&
  ------------------
  |  Branch (1453:13): [Folded - Ignored]
  ------------------
 1454|   119k|            !st.tzname_set) {
  ------------------
  |  Branch (1454:13): [True: 0, False: 0]
  ------------------
 1455|      0|            on_error("Timezone name not set by the format string");
 1456|      0|        }
 1457|   119k|        if (always_requires_field<T, field_tags::duration>::value &&
  ------------------
  |  Branch (1457:13): [Folded - Ignored]
  ------------------
 1458|   119k|            !st.duration_ticks_set) {
  ------------------
  |  Branch (1458:13): [True: 0, False: 0]
  ------------------
 1459|      0|            on_error("Duration tick count not set by the format string");
 1460|      0|        }
 1461|       |
 1462|   119k|        st.verify(*this);
 1463|   119k|    }
_ZNK3scn2v46detail12setter_state6verifyINS1_17tm_format_checkerI2tmEEEEvRT_:
  799|   119k|    {
  800|   119k|        if (hour24_set && hour12_set) {
  ------------------
  |  Branch (800:13): [True: 63.2k, False: 56.5k]
  |  Branch (800:27): [True: 0, False: 63.2k]
  ------------------
  801|      0|            return handler.set_error(
  802|      0|                {scan_error::invalid_format_string,
  803|      0|                 "24-hour and 12-hour clocks can't both be in use "
  804|      0|                 "simultaneously"});
  805|      0|        }
  806|   119k|        if (am_pm_set) {
  ------------------
  |  Branch (806:13): [True: 0, False: 119k]
  ------------------
  807|      0|            if (!hour12_set) {
  ------------------
  |  Branch (807:17): [True: 0, False: 0]
  ------------------
  808|      0|                return handler.set_error(
  809|      0|                    {scan_error::invalid_format_string,
  810|      0|                     "AM/PM specifier can't be set without an hour set"});
  811|      0|            }
  812|      0|            if (hour24_set) {
  ------------------
  |  Branch (812:17): [True: 0, False: 0]
  ------------------
  813|      0|                return handler.set_error(
  814|      0|                    {scan_error::invalid_format_string,
  815|      0|                     "Can't use AM/PM with a 24-hour clock"});
  816|      0|            }
  817|      0|        }
  818|   119k|        if (full_year_set && (century_set || short_year_set)) {
  ------------------
  |  Branch (818:13): [True: 21.2k, False: 98.5k]
  |  Branch (818:31): [True: 0, False: 21.2k]
  |  Branch (818:46): [True: 0, False: 21.2k]
  ------------------
  819|      0|            return handler.set_error(
  820|      0|                {scan_error::invalid_format_string,
  821|      0|                 "full-year (%Y) can't be used together with "
  822|      0|                 "century (%C) and short-year (%y)"});
  823|      0|        }
  824|   119k|        if (tzoff_set && tzname_set) {
  ------------------
  |  Branch (824:13): [True: 10.2k, False: 109k]
  |  Branch (824:26): [True: 0, False: 10.2k]
  ------------------
  825|      0|            return handler.set_error(
  826|      0|                {scan_error::invalid_format_string,
  827|      0|                 "tzoff (%z) can't be used together with tzname (%Z)"});
  828|      0|        }
  829|   119k|        if ((wday_set || mday_set || yday_set) &&
  ------------------
  |  Branch (829:14): [True: 13.7k, False: 106k]
  |  Branch (829:26): [True: 35.8k, False: 70.2k]
  |  Branch (829:38): [True: 0, False: 70.2k]
  ------------------
  830|   119k|            !(wday_set ^ mday_set ^ yday_set)) {
  ------------------
  |  Branch (830:13): [True: 0, False: 49.5k]
  ------------------
  831|      0|            return handler.set_error(
  832|      0|                {scan_error::invalid_format_string,
  833|      0|                 "Only up to one of wday (%a/%u/%w), mday "
  834|      0|                 "(%d/%e), and yday (%j) can be set at once"});
  835|      0|        }
  836|   119k|    }
_ZNK3scn2v46detail17tm_format_checkerI2tmE9get_errorEv:
 1466|   301k|    {
 1467|   301k|        return err;
 1468|   301k|    }
_ZNK3scn2v46detail23chrono_datetime_scannerIc2tmE4scanINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEENS0_13scan_expectedINT_8iteratorEEERS3_RSA_:
 1529|  57.5k|    {
 1530|  57.5k|        return detail::chrono_scan_impl(m_fmt_str, t, ctx);
 1531|  57.5k|    }
_ZN3scn2v46detail23chrono_datetime_scannerIcNS0_10tm_with_tzEE5parseINS0_24basic_scan_parse_contextIcEEEENT_8iteratorERS8_:
 1522|  59.2k|    {
 1523|  59.2k|        return detail::chrono_parse_impl<T, CharT>(pctx, m_fmt_str);
 1524|  59.2k|    }
_ZN3scn2v46detail17chrono_parse_implINS0_10tm_with_tzEcNS0_24basic_scan_parse_contextIcEEEENT1_8iteratorERS6_RNSt3__117basic_string_viewIT0_NS9_11char_traitsISB_EEEE:
 1493|  59.2k|{
 1494|  59.2k|    auto it = pctx.begin();
 1495|  59.2k|    auto end = pctx.end();
 1496|  59.2k|    if (it == end || *it == CharT{'}'}) {
  ------------------
  |  Branch (1496:9): [True: 1.71k, False: 57.5k]
  |  Branch (1496:22): [True: 0, False: 57.5k]
  ------------------
 1497|  1.71k|        pctx.on_error(
 1498|  1.71k|            "Format string without specifiers is not valid for this type");
 1499|  1.71k|        return it;
 1500|  1.71k|    }
 1501|       |
 1502|  57.5k|    auto checker = detail::tm_format_checker<T>{};
 1503|  57.5k|    end = detail::parse_chrono_format_specs(it, end, checker);
 1504|  57.5k|    if (end != it) {
  ------------------
  |  Branch (1504:9): [True: 57.5k, False: 0]
  ------------------
 1505|  57.5k|        fmt_str = detail::make_string_view_from_pointers(it, end);
 1506|  57.5k|    }
 1507|  57.5k|    if (auto e = checker.get_error(); SCN_UNLIKELY(!e)) {
  ------------------
  |  | 1039|  57.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 57.5k]
  |  |  ------------------
  ------------------
 1508|      0|        assert(e.error().code() == scan_error::invalid_format_string);
 1509|      0|        pctx.on_error(e.error().msg());
 1510|      0|    }
 1511|  57.5k|    return end;
 1512|  57.5k|}
_ZN3scn2v46detail25parse_chrono_format_specsIcRNS1_17tm_format_checkerINS0_10tm_with_tzEEEEEPKT_S9_S9_OT0_:
  376|  57.5k|{
  377|  57.5k|    if (begin == end || *begin == CharT{'}'}) {
  ------------------
  |  Branch (377:9): [True: 0, False: 57.5k]
  |  Branch (377:25): [True: 0, False: 57.5k]
  ------------------
  378|      0|        handler.on_error("chrono format specs can't be empty");
  379|      0|        return begin;
  380|      0|    }
  381|       |
  382|  57.5k|    auto p = begin;
  383|  57.5k|    if (*p == CharT{'L'}) {
  ------------------
  |  Branch (383:9): [True: 0, False: 57.5k]
  ------------------
  384|      0|        handler.on_localized();
  385|      0|        begin = ++p;
  386|      0|        if (p == end) {
  ------------------
  |  Branch (386:13): [True: 0, False: 0]
  ------------------
  387|      0|            handler.on_error("chrono format specs can't be empty");
  388|      0|            return p;
  389|      0|        }
  390|      0|    }
  391|       |
  392|  57.5k|    if (p == end || *p != CharT{'%'}) {
  ------------------
  |  Branch (392:9): [True: 0, False: 57.5k]
  |  Branch (392:21): [True: 0, False: 57.5k]
  ------------------
  393|      0|        handler.on_error(
  394|      0|            "chrono format spec must start with a conversion specifier (%...)");
  395|      0|        return p;
  396|      0|    }
  397|       |
  398|   152k|    while (p != end) {
  ------------------
  |  Branch (398:12): [True: 152k, False: 0]
  ------------------
  399|   152k|        auto ch = *p;
  400|   152k|        if (ch == CharT{'}'}) {
  ------------------
  |  Branch (400:13): [True: 57.5k, False: 95.2k]
  ------------------
  401|  57.5k|            break;
  402|  57.5k|        }
  403|  95.2k|        if (ch != CharT{'%'}) {
  ------------------
  |  Branch (403:13): [True: 17.1k, False: 78.1k]
  ------------------
  404|  17.1k|            if (ch == 0x20 || (ch >= 0x09 && ch <= 0x0d)) {
  ------------------
  |  Branch (404:17): [True: 0, False: 17.1k]
  |  Branch (404:32): [True: 17.1k, False: 0]
  |  Branch (404:46): [True: 0, False: 17.1k]
  ------------------
  405|       |                // Simple ASCII space
  406|      0|                handler.on_text(begin, p);
  407|      0|                handler.on_whitespace();
  408|      0|                begin = p += 1;
  409|      0|                continue;
  410|      0|            }
  411|  17.1k|            const auto cp_len =
  412|  17.1k|                detail::code_point_length_by_starting_code_unit(ch);
  413|  17.1k|            if (cp_len == 0) {
  ------------------
  |  Branch (413:17): [True: 0, False: 17.1k]
  ------------------
  414|      0|                handler.on_error("Invalid literal character");
  415|      0|                return p;
  416|      0|            }
  417|  17.1k|            if (cp_len > 1) {
  ------------------
  |  Branch (417:17): [True: 0, False: 17.1k]
  ------------------
  418|       |                // Multi code unit code point,
  419|       |                // possible space
  420|      0|                auto cp_start_p = p;
  421|      0|                CharT buffer[4] = {};
  422|      0|                for (std::size_t i = 0; i < cp_len; ++i) {
  ------------------
  |  Branch (422:41): [True: 0, False: 0]
  ------------------
  423|      0|                    if (p == end) {
  ------------------
  |  Branch (423:25): [True: 0, False: 0]
  ------------------
  424|      0|                        handler.on_error("Invalid literal character");
  425|      0|                        return p;
  426|      0|                    }
  427|      0|                    buffer[i] = *p;
  428|      0|                    ++p;
  429|      0|                }
  430|      0|                if (is_cp_space(decode_code_point_exhaustive(
  ------------------
  |  Branch (430:21): [True: 0, False: 0]
  ------------------
  431|      0|                        std::basic_string_view<CharT>{buffer, cp_len}))) {
  432|      0|                    handler.on_text(begin, cp_start_p);
  433|      0|                    handler.on_whitespace();
  434|      0|                    begin = p;
  435|      0|                    continue;
  436|      0|                }
  437|      0|            }
  438|  17.1k|            ++p;
  439|  17.1k|            continue;
  440|  17.1k|        }
  441|  78.1k|        if (begin != p) {
  ------------------
  |  Branch (441:13): [True: 17.1k, False: 60.9k]
  ------------------
  442|  17.1k|            handler.on_text(begin, p);
  443|  17.1k|        }
  444|  78.1k|        ++p;  // Consume '%'
  445|  78.1k|        if (p == end) {
  ------------------
  |  Branch (445:13): [True: 0, False: 78.1k]
  ------------------
  446|      0|            handler.on_error("Unexpected end of chrono format string");
  447|      0|            return p;
  448|      0|        }
  449|       |
  450|  78.1k|        ch = *p;
  451|  78.1k|        ++p;
  452|       |
  453|  78.1k|        switch (ch) {
  454|      0|            case CharT{'%'}:
  ------------------
  |  Branch (454:13): [True: 0, False: 78.1k]
  ------------------
  455|      0|                handler.on_text(&ch, &ch + 1);
  456|      0|                break;
  457|      0|            case CharT{'n'}:
  ------------------
  |  Branch (457:13): [True: 0, False: 78.1k]
  ------------------
  458|      0|            case CharT{'t'}:
  ------------------
  |  Branch (458:13): [True: 0, False: 78.1k]
  ------------------
  459|      0|                handler.on_whitespace();
  460|      0|                break;
  461|       |            // Year
  462|  3.42k|            case CharT{'Y'}:
  ------------------
  |  Branch (462:13): [True: 3.42k, False: 74.7k]
  ------------------
  463|  3.42k|                handler.on_full_year();
  464|  3.42k|                break;
  465|      0|            case CharT{'y'}:
  ------------------
  |  Branch (465:13): [True: 0, False: 78.1k]
  ------------------
  466|      0|                handler.on_short_year();
  467|      0|                break;
  468|      0|            case CharT{'C'}:
  ------------------
  |  Branch (468:13): [True: 0, False: 78.1k]
  ------------------
  469|      0|                handler.on_century();
  470|      0|                break;
  471|      0|            case CharT{'G'}:
  ------------------
  |  Branch (471:13): [True: 0, False: 78.1k]
  ------------------
  472|      0|                handler.on_iso_week_based_year();
  473|      0|                break;
  474|      0|            case CharT{'g'}:
  ------------------
  |  Branch (474:13): [True: 0, False: 78.1k]
  ------------------
  475|      0|                handler.on_iso_week_based_short_year();
  476|      0|                break;
  477|       |            // Month
  478|  9.07k|            case CharT{'b'}:
  ------------------
  |  Branch (478:13): [True: 9.07k, False: 69.0k]
  ------------------
  479|  9.07k|            case CharT{'B'}:
  ------------------
  |  Branch (479:13): [True: 0, False: 78.1k]
  ------------------
  480|  9.07k|            case CharT{'h'}:
  ------------------
  |  Branch (480:13): [True: 0, False: 78.1k]
  ------------------
  481|  9.07k|                handler.on_month_name();
  482|  9.07k|                break;
  483|  3.42k|            case CharT{'m'}:
  ------------------
  |  Branch (483:13): [True: 3.42k, False: 74.7k]
  ------------------
  484|  3.42k|                handler.on_dec_month();
  485|  3.42k|                break;
  486|       |            // Week
  487|      0|            case CharT{'U'}:
  ------------------
  |  Branch (487:13): [True: 0, False: 78.1k]
  ------------------
  488|      0|                handler.on_dec0_week_of_year();
  489|      0|                break;
  490|      0|            case CharT{'W'}:
  ------------------
  |  Branch (490:13): [True: 0, False: 78.1k]
  ------------------
  491|      0|                handler.on_dec1_week_of_year();
  492|      0|                break;
  493|      0|            case CharT{'V'}:
  ------------------
  |  Branch (493:13): [True: 0, False: 78.1k]
  ------------------
  494|      0|                handler.on_iso_week_of_year();
  495|      0|                break;
  496|       |            // Day of year
  497|      0|            case CharT{'j'}:
  ------------------
  |  Branch (497:13): [True: 0, False: 78.1k]
  ------------------
  498|      0|                handler.on_day_of_year();
  499|      0|                break;
  500|       |            // Day of month
  501|  3.42k|            case CharT{'d'}:
  ------------------
  |  Branch (501:13): [True: 3.42k, False: 74.7k]
  ------------------
  502|  3.42k|            case CharT{'e'}:
  ------------------
  |  Branch (502:13): [True: 0, False: 78.1k]
  ------------------
  503|  3.42k|                handler.on_day_of_month();
  504|  3.42k|                break;
  505|       |            // Day of week
  506|  6.89k|            case CharT{'a'}:
  ------------------
  |  Branch (506:13): [True: 6.89k, False: 71.2k]
  ------------------
  507|  6.89k|            case CharT{'A'}:
  ------------------
  |  Branch (507:13): [True: 0, False: 78.1k]
  ------------------
  508|  6.89k|                handler.on_weekday_name();
  509|  6.89k|                break;
  510|      0|            case CharT{'w'}:
  ------------------
  |  Branch (510:13): [True: 0, False: 78.1k]
  ------------------
  511|      0|                handler.on_dec0_weekday();
  512|      0|                break;
  513|      0|            case CharT{'u'}:
  ------------------
  |  Branch (513:13): [True: 0, False: 78.1k]
  ------------------
  514|      0|                handler.on_dec1_weekday();
  515|      0|                break;
  516|       |            // Hour
  517|  3.42k|            case CharT{'H'}:
  ------------------
  |  Branch (517:13): [True: 3.42k, False: 74.7k]
  ------------------
  518|  3.42k|            case CharT{'k'}:
  ------------------
  |  Branch (518:13): [True: 0, False: 78.1k]
  ------------------
  519|  3.42k|                handler.on_24_hour();
  520|  3.42k|                break;
  521|      0|            case CharT{'I'}:
  ------------------
  |  Branch (521:13): [True: 0, False: 78.1k]
  ------------------
  522|      0|            case CharT{'l'}:
  ------------------
  |  Branch (522:13): [True: 0, False: 78.1k]
  ------------------
  523|      0|                handler.on_12_hour();
  524|      0|                break;
  525|       |            // Minute
  526|  3.42k|            case CharT{'M'}:
  ------------------
  |  Branch (526:13): [True: 3.42k, False: 74.7k]
  ------------------
  527|  3.42k|                handler.on_minute();
  528|  3.42k|                break;
  529|       |            // Second
  530|  3.42k|            case CharT{'S'}:
  ------------------
  |  Branch (530:13): [True: 3.42k, False: 74.7k]
  ------------------
  531|  3.42k|                handler.on_second();
  532|  3.42k|                break;
  533|       |            // Subsecond
  534|      0|            case CharT{'.'}: {
  ------------------
  |  Branch (534:13): [True: 0, False: 78.1k]
  ------------------
  535|       |                // p already increased before the switch
  536|      0|                if (p == end) {
  ------------------
  |  Branch (536:21): [True: 0, False: 0]
  ------------------
  537|      0|                    handler.on_error("Unexpected end of chrono format string");
  538|      0|                    return p;
  539|      0|                }
  540|      0|                bool use_alternate = false;
  541|      0|                if (*p == CharT{'E'} || *p == CharT{'O'}) {
  ------------------
  |  Branch (541:21): [True: 0, False: 0]
  |  Branch (541:41): [True: 0, False: 0]
  ------------------
  542|      0|                    ++p;
  543|      0|                    if (p == end) {
  ------------------
  |  Branch (543:25): [True: 0, False: 0]
  ------------------
  544|      0|                        handler.on_error(
  545|      0|                            "Unexpected end of chrono format string");
  546|      0|                        return p;
  547|      0|                    }
  548|      0|                    use_alternate = true;
  549|      0|                }
  550|      0|                if (*p != CharT{'S'}) {
  ------------------
  |  Branch (550:21): [True: 0, False: 0]
  ------------------
  551|      0|                    handler.on_error(
  552|      0|                        "Expected `S` after `%.` in format string");
  553|      0|                    return p;
  554|      0|                }
  555|      0|                ++p;
  556|      0|                handler.on_subsecond(use_alternate
  ------------------
  |  Branch (556:38): [True: 0, False: 0]
  ------------------
  557|      0|                                         ? numeric_system::alternative_e
  558|      0|                                         : numeric_system::standard);
  559|      0|                break;
  560|      0|            }
  561|       |            // Timezones
  562|  3.42k|            case CharT{'z'}:
  ------------------
  |  Branch (562:13): [True: 3.42k, False: 74.7k]
  ------------------
  563|  3.42k|                handler.on_tz_offset();
  564|  3.42k|                break;
  565|      0|            case CharT{'Z'}:
  ------------------
  |  Branch (565:13): [True: 0, False: 78.1k]
  ------------------
  566|      0|                handler.on_tz_name();
  567|      0|                break;
  568|       |            // Other
  569|      0|            case CharT{'c'}:
  ------------------
  |  Branch (569:13): [True: 0, False: 78.1k]
  ------------------
  570|      0|                handler.on_loc_datetime();
  571|      0|                break;
  572|      0|            case CharT{'x'}:
  ------------------
  |  Branch (572:13): [True: 0, False: 78.1k]
  ------------------
  573|      0|                handler.on_loc_date();
  574|      0|                break;
  575|      0|            case CharT{'X'}:
  ------------------
  |  Branch (575:13): [True: 0, False: 78.1k]
  ------------------
  576|      0|                handler.on_loc_time();
  577|      0|                break;
  578|  7.69k|            case CharT{'D'}:
  ------------------
  |  Branch (578:13): [True: 7.69k, False: 70.4k]
  ------------------
  579|  7.69k|                handler.on_us_date();
  580|  7.69k|                break;
  581|  4.10k|            case CharT{'F'}:
  ------------------
  |  Branch (581:13): [True: 4.10k, False: 74.0k]
  ------------------
  582|  4.10k|                handler.on_iso_date();
  583|  4.10k|                break;
  584|      0|            case CharT{'r'}:
  ------------------
  |  Branch (584:13): [True: 0, False: 78.1k]
  ------------------
  585|      0|                handler.on_loc_12_hour_time();
  586|      0|                break;
  587|  20.5k|            case CharT{'R'}:
  ------------------
  |  Branch (587:13): [True: 20.5k, False: 57.5k]
  ------------------
  588|  20.5k|                handler.on_24_hour_time();
  589|  20.5k|                break;
  590|  5.80k|            case CharT{'T'}:
  ------------------
  |  Branch (590:13): [True: 5.80k, False: 72.3k]
  ------------------
  591|  5.80k|                handler.on_iso_time();
  592|  5.80k|                break;
  593|      0|            case CharT{'p'}:
  ------------------
  |  Branch (593:13): [True: 0, False: 78.1k]
  ------------------
  594|      0|            case CharT{'P'}:
  ------------------
  |  Branch (594:13): [True: 0, False: 78.1k]
  ------------------
  595|      0|                handler.on_am_pm();
  596|      0|                break;
  597|      0|            case CharT{'s'}:
  ------------------
  |  Branch (597:13): [True: 0, False: 78.1k]
  ------------------
  598|      0|                handler.on_epoch_offset();
  599|      0|                break;
  600|      0|            case CharT{'Q'}:
  ------------------
  |  Branch (600:13): [True: 0, False: 78.1k]
  ------------------
  601|      0|                handler.on_duration_tick_count();
  602|      0|                break;
  603|      0|            case CharT{'q'}:
  ------------------
  |  Branch (603:13): [True: 0, False: 78.1k]
  ------------------
  604|      0|                handler.on_duration_suffix();
  605|      0|                break;
  606|       |            // 'E'
  607|      0|            case CharT{'E'}: {
  ------------------
  |  Branch (607:13): [True: 0, False: 78.1k]
  ------------------
  608|      0|                if (p == end) {
  ------------------
  |  Branch (608:21): [True: 0, False: 0]
  ------------------
  609|      0|                    handler.on_error("Unexpected end of chrono format string");
  610|      0|                    return p;
  611|      0|                }
  612|      0|                ch = *p;
  613|      0|                ++p;
  614|       |
  615|      0|                switch (ch) {
  616|      0|                    case CharT{'c'}:
  ------------------
  |  Branch (616:21): [True: 0, False: 0]
  ------------------
  617|      0|                        handler.on_loc_datetime(numeric_system::alternative_e);
  618|      0|                        break;
  619|      0|                    case CharT{'C'}:
  ------------------
  |  Branch (619:21): [True: 0, False: 0]
  ------------------
  620|      0|                        handler.on_century(numeric_system::alternative_e);
  621|      0|                        break;
  622|      0|                    case CharT{'x'}:
  ------------------
  |  Branch (622:21): [True: 0, False: 0]
  ------------------
  623|      0|                        handler.on_loc_date(numeric_system::alternative_e);
  624|      0|                        break;
  625|      0|                    case CharT{'X'}:
  ------------------
  |  Branch (625:21): [True: 0, False: 0]
  ------------------
  626|      0|                        handler.on_loc_time(numeric_system::alternative_e);
  627|      0|                        break;
  628|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (628:21): [True: 0, False: 0]
  ------------------
  629|      0|                        handler.on_loc_offset_year();
  630|      0|                        break;
  631|      0|                    case CharT{'Y'}:
  ------------------
  |  Branch (631:21): [True: 0, False: 0]
  ------------------
  632|      0|                        handler.on_full_year(numeric_system::alternative_e);
  633|      0|                        break;
  634|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (634:21): [True: 0, False: 0]
  ------------------
  635|      0|                        handler.on_tz_offset(numeric_system::alternative_e);
  636|      0|                        break;
  637|      0|                    default:
  ------------------
  |  Branch (637:21): [True: 0, False: 0]
  ------------------
  638|      0|                        handler.on_error(
  639|      0|                            "Invalid character following 'E' in chrono format "
  640|      0|                            "string");
  641|      0|                        return p;
  642|      0|                }
  643|      0|                break;
  644|      0|            }
  645|       |            // 'O'
  646|      0|            case CharT{'O'}: {
  ------------------
  |  Branch (646:13): [True: 0, False: 78.1k]
  ------------------
  647|      0|                if (p == end) {
  ------------------
  |  Branch (647:21): [True: 0, False: 0]
  ------------------
  648|      0|                    handler.on_error("Unexpected end of chrono format string");
  649|      0|                    return p;
  650|      0|                }
  651|      0|                ch = *p;
  652|      0|                ++p;
  653|       |
  654|      0|                switch (ch) {
  655|      0|                    case CharT{'d'}:
  ------------------
  |  Branch (655:21): [True: 0, False: 0]
  ------------------
  656|      0|                    case CharT{'e'}:
  ------------------
  |  Branch (656:21): [True: 0, False: 0]
  ------------------
  657|      0|                        handler.on_day_of_month(numeric_system::alternative_o);
  658|      0|                        break;
  659|      0|                    case CharT{'H'}:
  ------------------
  |  Branch (659:21): [True: 0, False: 0]
  ------------------
  660|      0|                    case CharT{'k'}:
  ------------------
  |  Branch (660:21): [True: 0, False: 0]
  ------------------
  661|      0|                        handler.on_24_hour(numeric_system::alternative_o);
  662|      0|                        break;
  663|      0|                    case CharT{'I'}:
  ------------------
  |  Branch (663:21): [True: 0, False: 0]
  ------------------
  664|      0|                    case CharT{'l'}:
  ------------------
  |  Branch (664:21): [True: 0, False: 0]
  ------------------
  665|      0|                        handler.on_12_hour(numeric_system::alternative_o);
  666|      0|                        break;
  667|      0|                    case CharT{'m'}:
  ------------------
  |  Branch (667:21): [True: 0, False: 0]
  ------------------
  668|      0|                        handler.on_dec_month(numeric_system::alternative_o);
  669|      0|                        break;
  670|      0|                    case CharT{'M'}:
  ------------------
  |  Branch (670:21): [True: 0, False: 0]
  ------------------
  671|      0|                        handler.on_minute(numeric_system::alternative_o);
  672|      0|                        break;
  673|      0|                    case CharT{'S'}:
  ------------------
  |  Branch (673:21): [True: 0, False: 0]
  ------------------
  674|      0|                        handler.on_second(numeric_system::alternative_o);
  675|      0|                        break;
  676|      0|                    case CharT{'U'}:
  ------------------
  |  Branch (676:21): [True: 0, False: 0]
  ------------------
  677|      0|                        handler.on_dec0_week_of_year(
  678|      0|                            numeric_system::alternative_o);
  679|      0|                        break;
  680|      0|                    case CharT{'w'}:
  ------------------
  |  Branch (680:21): [True: 0, False: 0]
  ------------------
  681|      0|                        handler.on_dec0_weekday(numeric_system::alternative_o);
  682|      0|                        break;
  683|      0|                    case CharT{'W'}:
  ------------------
  |  Branch (683:21): [True: 0, False: 0]
  ------------------
  684|      0|                        handler.on_dec1_weekday(numeric_system::alternative_o);
  685|      0|                        break;
  686|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (686:21): [True: 0, False: 0]
  ------------------
  687|      0|                        handler.on_short_year(numeric_system::alternative_o);
  688|      0|                        break;
  689|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (689:21): [True: 0, False: 0]
  ------------------
  690|      0|                        handler.on_tz_offset(numeric_system::alternative_o);
  691|      0|                        break;
  692|      0|                    default:
  ------------------
  |  Branch (692:21): [True: 0, False: 0]
  ------------------
  693|      0|                        handler.on_error(
  694|      0|                            "Invalid character following 'O' in chrono format "
  695|      0|                            "string");
  696|      0|                        return p;
  697|      0|                }
  698|      0|                break;
  699|      0|            }
  700|      0|            default:
  ------------------
  |  Branch (700:13): [True: 0, False: 78.1k]
  ------------------
  701|      0|                handler.on_error("Invalid character in chrono format string");
  702|      0|                return p;
  703|  78.1k|        }
  704|  78.1k|        begin = p;
  705|       |
  706|  78.1k|        if (!handler.get_error()) {
  ------------------
  |  Branch (706:13): [True: 0, False: 78.1k]
  ------------------
  707|      0|            return p;
  708|      0|        }
  709|  78.1k|    }
  710|  57.5k|    if (begin != p) {
  ------------------
  |  Branch (710:9): [True: 0, False: 57.5k]
  ------------------
  711|      0|        handler.on_text(begin, p);
  712|      0|    }
  713|  57.5k|    handler.verify();
  714|  57.5k|    return p;
  715|  57.5k|}
_ZN3scn2v46detail17tm_format_checkerINS0_10tm_with_tzEE7on_textIcEEvPKT_S8_:
 1176|  17.1k|    {
 1177|  17.1k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_10tm_with_tzEE12on_full_yearENS1_14numeric_systemE:
 1188|  21.2k|    {
 1189|  21.2k|        if (!always_supports_field<T, field_tags::year>::value) {
  ------------------
  |  Branch (1189:13): [Folded - Ignored]
  ------------------
 1190|      0|            on_error("Years not supported with this type");
 1191|      0|        }
 1192|  21.2k|        st.set_full_year(*this);
 1193|  21.2k|    }
_ZN3scn2v46detail12setter_state13set_full_yearINS1_17tm_format_checkerINS0_10tm_with_tzEEEEEvRT_:
  768|  21.2k|    {                                                                \
  769|  21.2k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  21.2k|        field##_set = 1;                                             \
  774|  21.2k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_10tm_with_tzEE13on_short_yearENS1_14numeric_systemE:
 1195|  14.5k|    {
 1196|  14.5k|        if (!always_supports_field<T, field_tags::year>::value) {
  ------------------
  |  Branch (1196:13): [Folded - Ignored]
  ------------------
 1197|      0|            on_error("Years not supported with this type");
 1198|      0|        }
 1199|  14.5k|        st.set_short_year(*this);
 1200|  14.5k|    }
_ZN3scn2v46detail12setter_state14set_short_yearINS1_17tm_format_checkerINS0_10tm_with_tzEEEEEvRT_:
  768|  14.5k|    {                                                                \
  769|  14.5k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  14.5k|        field##_set = 1;                                             \
  774|  14.5k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_10tm_with_tzEE13on_month_nameEv:
 1231|  17.2k|    {
 1232|  17.2k|        if (!always_supports_field<T, field_tags::mon>::value) {
  ------------------
  |  Branch (1232:13): [Folded - Ignored]
  ------------------
 1233|      0|            on_error("Months not supported with this type");
 1234|      0|        }
 1235|  17.2k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_10tm_with_tzEE12on_dec_monthENS1_14numeric_systemE:
 1237|  35.8k|    {
 1238|  35.8k|        if (!always_supports_field<T, field_tags::mon>::value) {
  ------------------
  |  Branch (1238:13): [Folded - Ignored]
  ------------------
 1239|      0|            on_error("Months not supported with this type");
 1240|      0|        }
 1241|  35.8k|        st.set_mon(*this);
 1242|  35.8k|    }
_ZN3scn2v46detail12setter_state7set_monINS1_17tm_format_checkerINS0_10tm_with_tzEEEEEvRT_:
  768|  35.8k|    {                                                                \
  769|  35.8k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  35.8k|        field##_set = 1;                                             \
  774|  35.8k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_10tm_with_tzEE15on_day_of_monthENS1_14numeric_systemE:
 1265|  35.8k|    {
 1266|  35.8k|        if (!always_supports_field<T, field_tags::mday>::value) {
  ------------------
  |  Branch (1266:13): [Folded - Ignored]
  ------------------
 1267|      0|            on_error("Day-of-month not supported with this type");
 1268|      0|        }
 1269|  35.8k|        st.set_mday(*this);
 1270|  35.8k|    }
_ZN3scn2v46detail12setter_state8set_mdayINS1_17tm_format_checkerINS0_10tm_with_tzEEEEEvRT_:
  768|  35.8k|    {                                                                \
  769|  35.8k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  35.8k|        field##_set = 1;                                             \
  774|  35.8k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_10tm_with_tzEE15on_weekday_nameEv:
 1273|  13.7k|    {
 1274|  13.7k|        if (!always_supports_field<T, field_tags::wday>::value) {
  ------------------
  |  Branch (1274:13): [Folded - Ignored]
  ------------------
 1275|      0|            on_error("Day-of-week not supported with this type");
 1276|      0|        }
 1277|  13.7k|        st.set_wday(*this);
 1278|  13.7k|    }
_ZN3scn2v46detail12setter_state8set_wdayINS1_17tm_format_checkerINS0_10tm_with_tzEEEEEvRT_:
  768|  13.7k|    {                                                                \
  769|  13.7k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  13.7k|        field##_set = 1;                                             \
  774|  13.7k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_10tm_with_tzEE10on_24_hourENS1_14numeric_systemE:
 1295|  63.2k|    {
 1296|  63.2k|        if (!always_supports_field<T, field_tags::hour>::value) {
  ------------------
  |  Branch (1296:13): [Folded - Ignored]
  ------------------
 1297|      0|            on_error("Hours not supported with this type");
 1298|      0|        }
 1299|  63.2k|        st.set_hour24(*this);
 1300|  63.2k|    }
_ZN3scn2v46detail12setter_state10set_hour24INS1_17tm_format_checkerINS0_10tm_with_tzEEEEEvRT_:
  768|  63.2k|    {                                                                \
  769|  63.2k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  63.2k|        field##_set = 1;                                             \
  774|  63.2k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_10tm_with_tzEE9on_minuteENS1_14numeric_systemE:
 1309|  63.2k|    {
 1310|  63.2k|        if (!always_supports_field<T, field_tags::min>::value) {
  ------------------
  |  Branch (1310:13): [Folded - Ignored]
  ------------------
 1311|      0|            on_error("Minutes not supported with this type");
 1312|      0|        }
 1313|  63.2k|        st.set_min(*this);
 1314|  63.2k|    }
_ZN3scn2v46detail12setter_state7set_minINS1_17tm_format_checkerINS0_10tm_with_tzEEEEEvRT_:
  768|  63.2k|    {                                                                \
  769|  63.2k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  63.2k|        field##_set = 1;                                             \
  774|  63.2k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_10tm_with_tzEE9on_secondENS1_14numeric_systemE:
 1316|  23.3k|    {
 1317|  23.3k|        if (!always_supports_field<T, field_tags::sec>::value) {
  ------------------
  |  Branch (1317:13): [Folded - Ignored]
  ------------------
 1318|      0|            on_error("Seconds not supported with this type");
 1319|      0|        }
 1320|  23.3k|        st.set_sec(*this);
 1321|  23.3k|    }
_ZN3scn2v46detail12setter_state7set_secINS1_17tm_format_checkerINS0_10tm_with_tzEEEEEvRT_:
  768|  23.3k|    {                                                                \
  769|  23.3k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  23.3k|        field##_set = 1;                                             \
  774|  23.3k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_10tm_with_tzEE12on_tz_offsetENS1_14numeric_systemE:
 1335|  10.2k|    {
 1336|  10.2k|        if (!always_supports_field<T, field_tags::tzoff>::value) {
  ------------------
  |  Branch (1336:13): [Folded - Ignored]
  ------------------
 1337|      0|            on_error("Timezone offsets not supported with this type");
 1338|      0|        }
 1339|  10.2k|        st.set_tzoff(*this);
 1340|  10.2k|    }
_ZN3scn2v46detail12setter_state9set_tzoffINS1_17tm_format_checkerINS0_10tm_with_tzEEEEEvRT_:
  768|  10.2k|    {                                                                \
  769|  10.2k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  10.2k|        field##_set = 1;                                             \
  774|  10.2k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_10tm_with_tzEE10on_us_dateEv:
 1368|  14.5k|    {
 1369|  14.5k|        on_dec_month();
 1370|  14.5k|        on_day_of_month();
 1371|  14.5k|        on_short_year();
 1372|  14.5k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_10tm_with_tzEE11on_iso_dateEv:
 1374|  10.9k|    {
 1375|  10.9k|        on_full_year();
 1376|  10.9k|        on_dec_month();
 1377|  10.9k|        on_day_of_month();
 1378|  10.9k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_10tm_with_tzEE15on_24_hour_timeEv:
 1386|  39.9k|    {
 1387|  39.9k|        on_24_hour();
 1388|  39.9k|        on_minute();
 1389|  39.9k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_10tm_with_tzEE11on_iso_timeEv:
 1391|  13.0k|    {
 1392|  13.0k|        on_24_hour();
 1393|  13.0k|        on_minute();
 1394|  13.0k|        on_second();
 1395|  13.0k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_10tm_with_tzEE6verifyEv:
 1418|   119k|    {
 1419|   119k|        if (always_requires_field<T, field_tags::subsec>::value &&
  ------------------
  |  Branch (1419:13): [Folded - Ignored]
  ------------------
 1420|   119k|            !st.subsec_set) {
  ------------------
  |  Branch (1420:13): [True: 0, False: 0]
  ------------------
 1421|      0|            on_error("Sub-seconds not set by the format string");
 1422|      0|        }
 1423|   119k|        if (always_requires_field<T, field_tags::sec>::value && !st.sec_set) {
  ------------------
  |  Branch (1423:13): [Folded - Ignored]
  |  Branch (1423:65): [True: 0, False: 0]
  ------------------
 1424|      0|            on_error("Seconds not set by the format string");
 1425|      0|        }
 1426|   119k|        if (always_requires_field<T, field_tags::min>::value && !st.min_set) {
  ------------------
  |  Branch (1426:13): [Folded - Ignored]
  |  Branch (1426:65): [True: 0, False: 0]
  ------------------
 1427|      0|            on_error("Minutes not set by the format string");
 1428|      0|        }
 1429|   119k|        if (always_requires_field<T, field_tags::hour>::value &&
  ------------------
  |  Branch (1429:13): [Folded - Ignored]
  ------------------
 1430|   119k|            !st.hour24_set && !st.hour12_set) {
  ------------------
  |  Branch (1430:13): [True: 0, False: 0]
  |  Branch (1430:31): [True: 0, False: 0]
  ------------------
 1431|      0|            on_error("Hours not set by the format string");
 1432|      0|        }
 1433|   119k|        if (always_requires_field<T, field_tags::mday>::value && !st.mday_set) {
  ------------------
  |  Branch (1433:13): [Folded - Ignored]
  |  Branch (1433:66): [True: 0, False: 0]
  ------------------
 1434|      0|            on_error("Day not set by the format string");
 1435|      0|        }
 1436|   119k|        if (always_requires_field<T, field_tags::mon>::value && !st.mon_set) {
  ------------------
  |  Branch (1436:13): [Folded - Ignored]
  |  Branch (1436:65): [True: 0, False: 0]
  ------------------
 1437|      0|            on_error("Month not set by the format string");
 1438|      0|        }
 1439|   119k|        if (always_requires_field<T, field_tags::year>::value &&
  ------------------
  |  Branch (1439:13): [Folded - Ignored]
  ------------------
 1440|   119k|            !st.full_year_set && !st.century_set && !st.short_year_set) {
  ------------------
  |  Branch (1440:13): [True: 0, False: 0]
  |  Branch (1440:34): [True: 0, False: 0]
  |  Branch (1440:53): [True: 0, False: 0]
  ------------------
 1441|      0|            on_error("Year not set by the format string");
 1442|      0|        }
 1443|   119k|        if (always_requires_field<T, field_tags::wday>::value && !st.wday_set) {
  ------------------
  |  Branch (1443:13): [Folded - Ignored]
  |  Branch (1443:66): [True: 0, False: 0]
  ------------------
 1444|      0|            on_error("Day-of-week not set by the format string");
 1445|      0|        }
 1446|   119k|        if (always_requires_field<T, field_tags::yday>::value && !st.yday_set) {
  ------------------
  |  Branch (1446:13): [Folded - Ignored]
  |  Branch (1446:66): [True: 0, False: 0]
  ------------------
 1447|      0|            on_error("Day-of-year not set by the format string");
 1448|      0|        }
 1449|   119k|        if (always_requires_field<T, field_tags::tzoff>::value &&
  ------------------
  |  Branch (1449:13): [Folded - Ignored]
  ------------------
 1450|   119k|            !st.tzoff_set) {
  ------------------
  |  Branch (1450:13): [True: 0, False: 0]
  ------------------
 1451|      0|            on_error("Timezone offset not set by the format string");
 1452|      0|        }
 1453|   119k|        if (always_requires_field<T, field_tags::tzname>::value &&
  ------------------
  |  Branch (1453:13): [Folded - Ignored]
  ------------------
 1454|   119k|            !st.tzname_set) {
  ------------------
  |  Branch (1454:13): [True: 0, False: 0]
  ------------------
 1455|      0|            on_error("Timezone name not set by the format string");
 1456|      0|        }
 1457|   119k|        if (always_requires_field<T, field_tags::duration>::value &&
  ------------------
  |  Branch (1457:13): [Folded - Ignored]
  ------------------
 1458|   119k|            !st.duration_ticks_set) {
  ------------------
  |  Branch (1458:13): [True: 0, False: 0]
  ------------------
 1459|      0|            on_error("Duration tick count not set by the format string");
 1460|      0|        }
 1461|       |
 1462|   119k|        st.verify(*this);
 1463|   119k|    }
_ZNK3scn2v46detail12setter_state6verifyINS1_17tm_format_checkerINS0_10tm_with_tzEEEEEvRT_:
  799|   119k|    {
  800|   119k|        if (hour24_set && hour12_set) {
  ------------------
  |  Branch (800:13): [True: 63.2k, False: 56.5k]
  |  Branch (800:27): [True: 0, False: 63.2k]
  ------------------
  801|      0|            return handler.set_error(
  802|      0|                {scan_error::invalid_format_string,
  803|      0|                 "24-hour and 12-hour clocks can't both be in use "
  804|      0|                 "simultaneously"});
  805|      0|        }
  806|   119k|        if (am_pm_set) {
  ------------------
  |  Branch (806:13): [True: 0, False: 119k]
  ------------------
  807|      0|            if (!hour12_set) {
  ------------------
  |  Branch (807:17): [True: 0, False: 0]
  ------------------
  808|      0|                return handler.set_error(
  809|      0|                    {scan_error::invalid_format_string,
  810|      0|                     "AM/PM specifier can't be set without an hour set"});
  811|      0|            }
  812|      0|            if (hour24_set) {
  ------------------
  |  Branch (812:17): [True: 0, False: 0]
  ------------------
  813|      0|                return handler.set_error(
  814|      0|                    {scan_error::invalid_format_string,
  815|      0|                     "Can't use AM/PM with a 24-hour clock"});
  816|      0|            }
  817|      0|        }
  818|   119k|        if (full_year_set && (century_set || short_year_set)) {
  ------------------
  |  Branch (818:13): [True: 21.2k, False: 98.5k]
  |  Branch (818:31): [True: 0, False: 21.2k]
  |  Branch (818:46): [True: 0, False: 21.2k]
  ------------------
  819|      0|            return handler.set_error(
  820|      0|                {scan_error::invalid_format_string,
  821|      0|                 "full-year (%Y) can't be used together with "
  822|      0|                 "century (%C) and short-year (%y)"});
  823|      0|        }
  824|   119k|        if (tzoff_set && tzname_set) {
  ------------------
  |  Branch (824:13): [True: 10.2k, False: 109k]
  |  Branch (824:26): [True: 0, False: 10.2k]
  ------------------
  825|      0|            return handler.set_error(
  826|      0|                {scan_error::invalid_format_string,
  827|      0|                 "tzoff (%z) can't be used together with tzname (%Z)"});
  828|      0|        }
  829|   119k|        if ((wday_set || mday_set || yday_set) &&
  ------------------
  |  Branch (829:14): [True: 13.7k, False: 106k]
  |  Branch (829:26): [True: 35.8k, False: 70.2k]
  |  Branch (829:38): [True: 0, False: 70.2k]
  ------------------
  830|   119k|            !(wday_set ^ mday_set ^ yday_set)) {
  ------------------
  |  Branch (830:13): [True: 0, False: 49.5k]
  ------------------
  831|      0|            return handler.set_error(
  832|      0|                {scan_error::invalid_format_string,
  833|      0|                 "Only up to one of wday (%a/%u/%w), mday "
  834|      0|                 "(%d/%e), and yday (%j) can be set at once"});
  835|      0|        }
  836|   119k|    }
_ZNK3scn2v46detail17tm_format_checkerINS0_10tm_with_tzEE9get_errorEv:
 1466|   301k|    {
 1467|   301k|        return err;
 1468|   301k|    }
_ZNK3scn2v46detail23chrono_datetime_scannerIcNS0_10tm_with_tzEE4scanINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEENS0_13scan_expectedINT_8iteratorEEERS3_RSA_:
 1529|  57.5k|    {
 1530|  57.5k|        return detail::chrono_scan_impl(m_fmt_str, t, ctx);
 1531|  57.5k|    }
_ZN3scn2v46detail23chrono_datetime_scannerIcNS0_19datetime_componentsEE5parseINS0_24basic_scan_parse_contextIcEEEENT_8iteratorERS8_:
 1522|  59.2k|    {
 1523|  59.2k|        return detail::chrono_parse_impl<T, CharT>(pctx, m_fmt_str);
 1524|  59.2k|    }
_ZN3scn2v46detail17chrono_parse_implINS0_19datetime_componentsEcNS0_24basic_scan_parse_contextIcEEEENT1_8iteratorERS6_RNSt3__117basic_string_viewIT0_NS9_11char_traitsISB_EEEE:
 1493|  59.2k|{
 1494|  59.2k|    auto it = pctx.begin();
 1495|  59.2k|    auto end = pctx.end();
 1496|  59.2k|    if (it == end || *it == CharT{'}'}) {
  ------------------
  |  Branch (1496:9): [True: 1.71k, False: 57.5k]
  |  Branch (1496:22): [True: 0, False: 57.5k]
  ------------------
 1497|  1.71k|        pctx.on_error(
 1498|  1.71k|            "Format string without specifiers is not valid for this type");
 1499|  1.71k|        return it;
 1500|  1.71k|    }
 1501|       |
 1502|  57.5k|    auto checker = detail::tm_format_checker<T>{};
 1503|  57.5k|    end = detail::parse_chrono_format_specs(it, end, checker);
 1504|  57.5k|    if (end != it) {
  ------------------
  |  Branch (1504:9): [True: 57.5k, False: 0]
  ------------------
 1505|  57.5k|        fmt_str = detail::make_string_view_from_pointers(it, end);
 1506|  57.5k|    }
 1507|  57.5k|    if (auto e = checker.get_error(); SCN_UNLIKELY(!e)) {
  ------------------
  |  | 1039|  57.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 57.5k]
  |  |  ------------------
  ------------------
 1508|      0|        assert(e.error().code() == scan_error::invalid_format_string);
 1509|      0|        pctx.on_error(e.error().msg());
 1510|      0|    }
 1511|  57.5k|    return end;
 1512|  57.5k|}
_ZN3scn2v46detail25parse_chrono_format_specsIcRNS1_17tm_format_checkerINS0_19datetime_componentsEEEEEPKT_S9_S9_OT0_:
  376|  57.5k|{
  377|  57.5k|    if (begin == end || *begin == CharT{'}'}) {
  ------------------
  |  Branch (377:9): [True: 0, False: 57.5k]
  |  Branch (377:25): [True: 0, False: 57.5k]
  ------------------
  378|      0|        handler.on_error("chrono format specs can't be empty");
  379|      0|        return begin;
  380|      0|    }
  381|       |
  382|  57.5k|    auto p = begin;
  383|  57.5k|    if (*p == CharT{'L'}) {
  ------------------
  |  Branch (383:9): [True: 0, False: 57.5k]
  ------------------
  384|      0|        handler.on_localized();
  385|      0|        begin = ++p;
  386|      0|        if (p == end) {
  ------------------
  |  Branch (386:13): [True: 0, False: 0]
  ------------------
  387|      0|            handler.on_error("chrono format specs can't be empty");
  388|      0|            return p;
  389|      0|        }
  390|      0|    }
  391|       |
  392|  57.5k|    if (p == end || *p != CharT{'%'}) {
  ------------------
  |  Branch (392:9): [True: 0, False: 57.5k]
  |  Branch (392:21): [True: 0, False: 57.5k]
  ------------------
  393|      0|        handler.on_error(
  394|      0|            "chrono format spec must start with a conversion specifier (%...)");
  395|      0|        return p;
  396|      0|    }
  397|       |
  398|   152k|    while (p != end) {
  ------------------
  |  Branch (398:12): [True: 152k, False: 0]
  ------------------
  399|   152k|        auto ch = *p;
  400|   152k|        if (ch == CharT{'}'}) {
  ------------------
  |  Branch (400:13): [True: 57.5k, False: 95.2k]
  ------------------
  401|  57.5k|            break;
  402|  57.5k|        }
  403|  95.2k|        if (ch != CharT{'%'}) {
  ------------------
  |  Branch (403:13): [True: 17.1k, False: 78.1k]
  ------------------
  404|  17.1k|            if (ch == 0x20 || (ch >= 0x09 && ch <= 0x0d)) {
  ------------------
  |  Branch (404:17): [True: 0, False: 17.1k]
  |  Branch (404:32): [True: 17.1k, False: 0]
  |  Branch (404:46): [True: 0, False: 17.1k]
  ------------------
  405|       |                // Simple ASCII space
  406|      0|                handler.on_text(begin, p);
  407|      0|                handler.on_whitespace();
  408|      0|                begin = p += 1;
  409|      0|                continue;
  410|      0|            }
  411|  17.1k|            const auto cp_len =
  412|  17.1k|                detail::code_point_length_by_starting_code_unit(ch);
  413|  17.1k|            if (cp_len == 0) {
  ------------------
  |  Branch (413:17): [True: 0, False: 17.1k]
  ------------------
  414|      0|                handler.on_error("Invalid literal character");
  415|      0|                return p;
  416|      0|            }
  417|  17.1k|            if (cp_len > 1) {
  ------------------
  |  Branch (417:17): [True: 0, False: 17.1k]
  ------------------
  418|       |                // Multi code unit code point,
  419|       |                // possible space
  420|      0|                auto cp_start_p = p;
  421|      0|                CharT buffer[4] = {};
  422|      0|                for (std::size_t i = 0; i < cp_len; ++i) {
  ------------------
  |  Branch (422:41): [True: 0, False: 0]
  ------------------
  423|      0|                    if (p == end) {
  ------------------
  |  Branch (423:25): [True: 0, False: 0]
  ------------------
  424|      0|                        handler.on_error("Invalid literal character");
  425|      0|                        return p;
  426|      0|                    }
  427|      0|                    buffer[i] = *p;
  428|      0|                    ++p;
  429|      0|                }
  430|      0|                if (is_cp_space(decode_code_point_exhaustive(
  ------------------
  |  Branch (430:21): [True: 0, False: 0]
  ------------------
  431|      0|                        std::basic_string_view<CharT>{buffer, cp_len}))) {
  432|      0|                    handler.on_text(begin, cp_start_p);
  433|      0|                    handler.on_whitespace();
  434|      0|                    begin = p;
  435|      0|                    continue;
  436|      0|                }
  437|      0|            }
  438|  17.1k|            ++p;
  439|  17.1k|            continue;
  440|  17.1k|        }
  441|  78.1k|        if (begin != p) {
  ------------------
  |  Branch (441:13): [True: 17.1k, False: 60.9k]
  ------------------
  442|  17.1k|            handler.on_text(begin, p);
  443|  17.1k|        }
  444|  78.1k|        ++p;  // Consume '%'
  445|  78.1k|        if (p == end) {
  ------------------
  |  Branch (445:13): [True: 0, False: 78.1k]
  ------------------
  446|      0|            handler.on_error("Unexpected end of chrono format string");
  447|      0|            return p;
  448|      0|        }
  449|       |
  450|  78.1k|        ch = *p;
  451|  78.1k|        ++p;
  452|       |
  453|  78.1k|        switch (ch) {
  454|      0|            case CharT{'%'}:
  ------------------
  |  Branch (454:13): [True: 0, False: 78.1k]
  ------------------
  455|      0|                handler.on_text(&ch, &ch + 1);
  456|      0|                break;
  457|      0|            case CharT{'n'}:
  ------------------
  |  Branch (457:13): [True: 0, False: 78.1k]
  ------------------
  458|      0|            case CharT{'t'}:
  ------------------
  |  Branch (458:13): [True: 0, False: 78.1k]
  ------------------
  459|      0|                handler.on_whitespace();
  460|      0|                break;
  461|       |            // Year
  462|  3.42k|            case CharT{'Y'}:
  ------------------
  |  Branch (462:13): [True: 3.42k, False: 74.7k]
  ------------------
  463|  3.42k|                handler.on_full_year();
  464|  3.42k|                break;
  465|      0|            case CharT{'y'}:
  ------------------
  |  Branch (465:13): [True: 0, False: 78.1k]
  ------------------
  466|      0|                handler.on_short_year();
  467|      0|                break;
  468|      0|            case CharT{'C'}:
  ------------------
  |  Branch (468:13): [True: 0, False: 78.1k]
  ------------------
  469|      0|                handler.on_century();
  470|      0|                break;
  471|      0|            case CharT{'G'}:
  ------------------
  |  Branch (471:13): [True: 0, False: 78.1k]
  ------------------
  472|      0|                handler.on_iso_week_based_year();
  473|      0|                break;
  474|      0|            case CharT{'g'}:
  ------------------
  |  Branch (474:13): [True: 0, False: 78.1k]
  ------------------
  475|      0|                handler.on_iso_week_based_short_year();
  476|      0|                break;
  477|       |            // Month
  478|  9.07k|            case CharT{'b'}:
  ------------------
  |  Branch (478:13): [True: 9.07k, False: 69.0k]
  ------------------
  479|  9.07k|            case CharT{'B'}:
  ------------------
  |  Branch (479:13): [True: 0, False: 78.1k]
  ------------------
  480|  9.07k|            case CharT{'h'}:
  ------------------
  |  Branch (480:13): [True: 0, False: 78.1k]
  ------------------
  481|  9.07k|                handler.on_month_name();
  482|  9.07k|                break;
  483|  3.42k|            case CharT{'m'}:
  ------------------
  |  Branch (483:13): [True: 3.42k, False: 74.7k]
  ------------------
  484|  3.42k|                handler.on_dec_month();
  485|  3.42k|                break;
  486|       |            // Week
  487|      0|            case CharT{'U'}:
  ------------------
  |  Branch (487:13): [True: 0, False: 78.1k]
  ------------------
  488|      0|                handler.on_dec0_week_of_year();
  489|      0|                break;
  490|      0|            case CharT{'W'}:
  ------------------
  |  Branch (490:13): [True: 0, False: 78.1k]
  ------------------
  491|      0|                handler.on_dec1_week_of_year();
  492|      0|                break;
  493|      0|            case CharT{'V'}:
  ------------------
  |  Branch (493:13): [True: 0, False: 78.1k]
  ------------------
  494|      0|                handler.on_iso_week_of_year();
  495|      0|                break;
  496|       |            // Day of year
  497|      0|            case CharT{'j'}:
  ------------------
  |  Branch (497:13): [True: 0, False: 78.1k]
  ------------------
  498|      0|                handler.on_day_of_year();
  499|      0|                break;
  500|       |            // Day of month
  501|  3.42k|            case CharT{'d'}:
  ------------------
  |  Branch (501:13): [True: 3.42k, False: 74.7k]
  ------------------
  502|  3.42k|            case CharT{'e'}:
  ------------------
  |  Branch (502:13): [True: 0, False: 78.1k]
  ------------------
  503|  3.42k|                handler.on_day_of_month();
  504|  3.42k|                break;
  505|       |            // Day of week
  506|  6.89k|            case CharT{'a'}:
  ------------------
  |  Branch (506:13): [True: 6.89k, False: 71.2k]
  ------------------
  507|  6.89k|            case CharT{'A'}:
  ------------------
  |  Branch (507:13): [True: 0, False: 78.1k]
  ------------------
  508|  6.89k|                handler.on_weekday_name();
  509|  6.89k|                break;
  510|      0|            case CharT{'w'}:
  ------------------
  |  Branch (510:13): [True: 0, False: 78.1k]
  ------------------
  511|      0|                handler.on_dec0_weekday();
  512|      0|                break;
  513|      0|            case CharT{'u'}:
  ------------------
  |  Branch (513:13): [True: 0, False: 78.1k]
  ------------------
  514|      0|                handler.on_dec1_weekday();
  515|      0|                break;
  516|       |            // Hour
  517|  3.42k|            case CharT{'H'}:
  ------------------
  |  Branch (517:13): [True: 3.42k, False: 74.7k]
  ------------------
  518|  3.42k|            case CharT{'k'}:
  ------------------
  |  Branch (518:13): [True: 0, False: 78.1k]
  ------------------
  519|  3.42k|                handler.on_24_hour();
  520|  3.42k|                break;
  521|      0|            case CharT{'I'}:
  ------------------
  |  Branch (521:13): [True: 0, False: 78.1k]
  ------------------
  522|      0|            case CharT{'l'}:
  ------------------
  |  Branch (522:13): [True: 0, False: 78.1k]
  ------------------
  523|      0|                handler.on_12_hour();
  524|      0|                break;
  525|       |            // Minute
  526|  3.42k|            case CharT{'M'}:
  ------------------
  |  Branch (526:13): [True: 3.42k, False: 74.7k]
  ------------------
  527|  3.42k|                handler.on_minute();
  528|  3.42k|                break;
  529|       |            // Second
  530|  3.42k|            case CharT{'S'}:
  ------------------
  |  Branch (530:13): [True: 3.42k, False: 74.7k]
  ------------------
  531|  3.42k|                handler.on_second();
  532|  3.42k|                break;
  533|       |            // Subsecond
  534|      0|            case CharT{'.'}: {
  ------------------
  |  Branch (534:13): [True: 0, False: 78.1k]
  ------------------
  535|       |                // p already increased before the switch
  536|      0|                if (p == end) {
  ------------------
  |  Branch (536:21): [True: 0, False: 0]
  ------------------
  537|      0|                    handler.on_error("Unexpected end of chrono format string");
  538|      0|                    return p;
  539|      0|                }
  540|      0|                bool use_alternate = false;
  541|      0|                if (*p == CharT{'E'} || *p == CharT{'O'}) {
  ------------------
  |  Branch (541:21): [True: 0, False: 0]
  |  Branch (541:41): [True: 0, False: 0]
  ------------------
  542|      0|                    ++p;
  543|      0|                    if (p == end) {
  ------------------
  |  Branch (543:25): [True: 0, False: 0]
  ------------------
  544|      0|                        handler.on_error(
  545|      0|                            "Unexpected end of chrono format string");
  546|      0|                        return p;
  547|      0|                    }
  548|      0|                    use_alternate = true;
  549|      0|                }
  550|      0|                if (*p != CharT{'S'}) {
  ------------------
  |  Branch (550:21): [True: 0, False: 0]
  ------------------
  551|      0|                    handler.on_error(
  552|      0|                        "Expected `S` after `%.` in format string");
  553|      0|                    return p;
  554|      0|                }
  555|      0|                ++p;
  556|      0|                handler.on_subsecond(use_alternate
  ------------------
  |  Branch (556:38): [True: 0, False: 0]
  ------------------
  557|      0|                                         ? numeric_system::alternative_e
  558|      0|                                         : numeric_system::standard);
  559|      0|                break;
  560|      0|            }
  561|       |            // Timezones
  562|  3.42k|            case CharT{'z'}:
  ------------------
  |  Branch (562:13): [True: 3.42k, False: 74.7k]
  ------------------
  563|  3.42k|                handler.on_tz_offset();
  564|  3.42k|                break;
  565|      0|            case CharT{'Z'}:
  ------------------
  |  Branch (565:13): [True: 0, False: 78.1k]
  ------------------
  566|      0|                handler.on_tz_name();
  567|      0|                break;
  568|       |            // Other
  569|      0|            case CharT{'c'}:
  ------------------
  |  Branch (569:13): [True: 0, False: 78.1k]
  ------------------
  570|      0|                handler.on_loc_datetime();
  571|      0|                break;
  572|      0|            case CharT{'x'}:
  ------------------
  |  Branch (572:13): [True: 0, False: 78.1k]
  ------------------
  573|      0|                handler.on_loc_date();
  574|      0|                break;
  575|      0|            case CharT{'X'}:
  ------------------
  |  Branch (575:13): [True: 0, False: 78.1k]
  ------------------
  576|      0|                handler.on_loc_time();
  577|      0|                break;
  578|  7.69k|            case CharT{'D'}:
  ------------------
  |  Branch (578:13): [True: 7.69k, False: 70.4k]
  ------------------
  579|  7.69k|                handler.on_us_date();
  580|  7.69k|                break;
  581|  4.10k|            case CharT{'F'}:
  ------------------
  |  Branch (581:13): [True: 4.10k, False: 74.0k]
  ------------------
  582|  4.10k|                handler.on_iso_date();
  583|  4.10k|                break;
  584|      0|            case CharT{'r'}:
  ------------------
  |  Branch (584:13): [True: 0, False: 78.1k]
  ------------------
  585|      0|                handler.on_loc_12_hour_time();
  586|      0|                break;
  587|  20.5k|            case CharT{'R'}:
  ------------------
  |  Branch (587:13): [True: 20.5k, False: 57.5k]
  ------------------
  588|  20.5k|                handler.on_24_hour_time();
  589|  20.5k|                break;
  590|  5.80k|            case CharT{'T'}:
  ------------------
  |  Branch (590:13): [True: 5.80k, False: 72.3k]
  ------------------
  591|  5.80k|                handler.on_iso_time();
  592|  5.80k|                break;
  593|      0|            case CharT{'p'}:
  ------------------
  |  Branch (593:13): [True: 0, False: 78.1k]
  ------------------
  594|      0|            case CharT{'P'}:
  ------------------
  |  Branch (594:13): [True: 0, False: 78.1k]
  ------------------
  595|      0|                handler.on_am_pm();
  596|      0|                break;
  597|      0|            case CharT{'s'}:
  ------------------
  |  Branch (597:13): [True: 0, False: 78.1k]
  ------------------
  598|      0|                handler.on_epoch_offset();
  599|      0|                break;
  600|      0|            case CharT{'Q'}:
  ------------------
  |  Branch (600:13): [True: 0, False: 78.1k]
  ------------------
  601|      0|                handler.on_duration_tick_count();
  602|      0|                break;
  603|      0|            case CharT{'q'}:
  ------------------
  |  Branch (603:13): [True: 0, False: 78.1k]
  ------------------
  604|      0|                handler.on_duration_suffix();
  605|      0|                break;
  606|       |            // 'E'
  607|      0|            case CharT{'E'}: {
  ------------------
  |  Branch (607:13): [True: 0, False: 78.1k]
  ------------------
  608|      0|                if (p == end) {
  ------------------
  |  Branch (608:21): [True: 0, False: 0]
  ------------------
  609|      0|                    handler.on_error("Unexpected end of chrono format string");
  610|      0|                    return p;
  611|      0|                }
  612|      0|                ch = *p;
  613|      0|                ++p;
  614|       |
  615|      0|                switch (ch) {
  616|      0|                    case CharT{'c'}:
  ------------------
  |  Branch (616:21): [True: 0, False: 0]
  ------------------
  617|      0|                        handler.on_loc_datetime(numeric_system::alternative_e);
  618|      0|                        break;
  619|      0|                    case CharT{'C'}:
  ------------------
  |  Branch (619:21): [True: 0, False: 0]
  ------------------
  620|      0|                        handler.on_century(numeric_system::alternative_e);
  621|      0|                        break;
  622|      0|                    case CharT{'x'}:
  ------------------
  |  Branch (622:21): [True: 0, False: 0]
  ------------------
  623|      0|                        handler.on_loc_date(numeric_system::alternative_e);
  624|      0|                        break;
  625|      0|                    case CharT{'X'}:
  ------------------
  |  Branch (625:21): [True: 0, False: 0]
  ------------------
  626|      0|                        handler.on_loc_time(numeric_system::alternative_e);
  627|      0|                        break;
  628|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (628:21): [True: 0, False: 0]
  ------------------
  629|      0|                        handler.on_loc_offset_year();
  630|      0|                        break;
  631|      0|                    case CharT{'Y'}:
  ------------------
  |  Branch (631:21): [True: 0, False: 0]
  ------------------
  632|      0|                        handler.on_full_year(numeric_system::alternative_e);
  633|      0|                        break;
  634|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (634:21): [True: 0, False: 0]
  ------------------
  635|      0|                        handler.on_tz_offset(numeric_system::alternative_e);
  636|      0|                        break;
  637|      0|                    default:
  ------------------
  |  Branch (637:21): [True: 0, False: 0]
  ------------------
  638|      0|                        handler.on_error(
  639|      0|                            "Invalid character following 'E' in chrono format "
  640|      0|                            "string");
  641|      0|                        return p;
  642|      0|                }
  643|      0|                break;
  644|      0|            }
  645|       |            // 'O'
  646|      0|            case CharT{'O'}: {
  ------------------
  |  Branch (646:13): [True: 0, False: 78.1k]
  ------------------
  647|      0|                if (p == end) {
  ------------------
  |  Branch (647:21): [True: 0, False: 0]
  ------------------
  648|      0|                    handler.on_error("Unexpected end of chrono format string");
  649|      0|                    return p;
  650|      0|                }
  651|      0|                ch = *p;
  652|      0|                ++p;
  653|       |
  654|      0|                switch (ch) {
  655|      0|                    case CharT{'d'}:
  ------------------
  |  Branch (655:21): [True: 0, False: 0]
  ------------------
  656|      0|                    case CharT{'e'}:
  ------------------
  |  Branch (656:21): [True: 0, False: 0]
  ------------------
  657|      0|                        handler.on_day_of_month(numeric_system::alternative_o);
  658|      0|                        break;
  659|      0|                    case CharT{'H'}:
  ------------------
  |  Branch (659:21): [True: 0, False: 0]
  ------------------
  660|      0|                    case CharT{'k'}:
  ------------------
  |  Branch (660:21): [True: 0, False: 0]
  ------------------
  661|      0|                        handler.on_24_hour(numeric_system::alternative_o);
  662|      0|                        break;
  663|      0|                    case CharT{'I'}:
  ------------------
  |  Branch (663:21): [True: 0, False: 0]
  ------------------
  664|      0|                    case CharT{'l'}:
  ------------------
  |  Branch (664:21): [True: 0, False: 0]
  ------------------
  665|      0|                        handler.on_12_hour(numeric_system::alternative_o);
  666|      0|                        break;
  667|      0|                    case CharT{'m'}:
  ------------------
  |  Branch (667:21): [True: 0, False: 0]
  ------------------
  668|      0|                        handler.on_dec_month(numeric_system::alternative_o);
  669|      0|                        break;
  670|      0|                    case CharT{'M'}:
  ------------------
  |  Branch (670:21): [True: 0, False: 0]
  ------------------
  671|      0|                        handler.on_minute(numeric_system::alternative_o);
  672|      0|                        break;
  673|      0|                    case CharT{'S'}:
  ------------------
  |  Branch (673:21): [True: 0, False: 0]
  ------------------
  674|      0|                        handler.on_second(numeric_system::alternative_o);
  675|      0|                        break;
  676|      0|                    case CharT{'U'}:
  ------------------
  |  Branch (676:21): [True: 0, False: 0]
  ------------------
  677|      0|                        handler.on_dec0_week_of_year(
  678|      0|                            numeric_system::alternative_o);
  679|      0|                        break;
  680|      0|                    case CharT{'w'}:
  ------------------
  |  Branch (680:21): [True: 0, False: 0]
  ------------------
  681|      0|                        handler.on_dec0_weekday(numeric_system::alternative_o);
  682|      0|                        break;
  683|      0|                    case CharT{'W'}:
  ------------------
  |  Branch (683:21): [True: 0, False: 0]
  ------------------
  684|      0|                        handler.on_dec1_weekday(numeric_system::alternative_o);
  685|      0|                        break;
  686|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (686:21): [True: 0, False: 0]
  ------------------
  687|      0|                        handler.on_short_year(numeric_system::alternative_o);
  688|      0|                        break;
  689|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (689:21): [True: 0, False: 0]
  ------------------
  690|      0|                        handler.on_tz_offset(numeric_system::alternative_o);
  691|      0|                        break;
  692|      0|                    default:
  ------------------
  |  Branch (692:21): [True: 0, False: 0]
  ------------------
  693|      0|                        handler.on_error(
  694|      0|                            "Invalid character following 'O' in chrono format "
  695|      0|                            "string");
  696|      0|                        return p;
  697|      0|                }
  698|      0|                break;
  699|      0|            }
  700|      0|            default:
  ------------------
  |  Branch (700:13): [True: 0, False: 78.1k]
  ------------------
  701|      0|                handler.on_error("Invalid character in chrono format string");
  702|      0|                return p;
  703|  78.1k|        }
  704|  78.1k|        begin = p;
  705|       |
  706|  78.1k|        if (!handler.get_error()) {
  ------------------
  |  Branch (706:13): [True: 0, False: 78.1k]
  ------------------
  707|      0|            return p;
  708|      0|        }
  709|  78.1k|    }
  710|  57.5k|    if (begin != p) {
  ------------------
  |  Branch (710:9): [True: 0, False: 57.5k]
  ------------------
  711|      0|        handler.on_text(begin, p);
  712|      0|    }
  713|  57.5k|    handler.verify();
  714|  57.5k|    return p;
  715|  57.5k|}
_ZN3scn2v46detail17tm_format_checkerINS0_19datetime_componentsEE7on_textIcEEvPKT_S8_:
 1176|  17.1k|    {
 1177|  17.1k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_19datetime_componentsEE12on_full_yearENS1_14numeric_systemE:
 1188|  21.2k|    {
 1189|  21.2k|        if (!always_supports_field<T, field_tags::year>::value) {
  ------------------
  |  Branch (1189:13): [Folded - Ignored]
  ------------------
 1190|      0|            on_error("Years not supported with this type");
 1191|      0|        }
 1192|  21.2k|        st.set_full_year(*this);
 1193|  21.2k|    }
_ZN3scn2v46detail12setter_state13set_full_yearINS1_17tm_format_checkerINS0_19datetime_componentsEEEEEvRT_:
  768|  21.2k|    {                                                                \
  769|  21.2k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  21.2k|        field##_set = 1;                                             \
  774|  21.2k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_19datetime_componentsEE13on_short_yearENS1_14numeric_systemE:
 1195|  14.5k|    {
 1196|  14.5k|        if (!always_supports_field<T, field_tags::year>::value) {
  ------------------
  |  Branch (1196:13): [Folded - Ignored]
  ------------------
 1197|      0|            on_error("Years not supported with this type");
 1198|      0|        }
 1199|  14.5k|        st.set_short_year(*this);
 1200|  14.5k|    }
_ZN3scn2v46detail12setter_state14set_short_yearINS1_17tm_format_checkerINS0_19datetime_componentsEEEEEvRT_:
  768|  14.5k|    {                                                                \
  769|  14.5k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  14.5k|        field##_set = 1;                                             \
  774|  14.5k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_19datetime_componentsEE13on_month_nameEv:
 1231|  17.2k|    {
 1232|  17.2k|        if (!always_supports_field<T, field_tags::mon>::value) {
  ------------------
  |  Branch (1232:13): [Folded - Ignored]
  ------------------
 1233|      0|            on_error("Months not supported with this type");
 1234|      0|        }
 1235|  17.2k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_19datetime_componentsEE12on_dec_monthENS1_14numeric_systemE:
 1237|  35.8k|    {
 1238|  35.8k|        if (!always_supports_field<T, field_tags::mon>::value) {
  ------------------
  |  Branch (1238:13): [Folded - Ignored]
  ------------------
 1239|      0|            on_error("Months not supported with this type");
 1240|      0|        }
 1241|  35.8k|        st.set_mon(*this);
 1242|  35.8k|    }
_ZN3scn2v46detail12setter_state7set_monINS1_17tm_format_checkerINS0_19datetime_componentsEEEEEvRT_:
  768|  35.8k|    {                                                                \
  769|  35.8k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  35.8k|        field##_set = 1;                                             \
  774|  35.8k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_19datetime_componentsEE15on_day_of_monthENS1_14numeric_systemE:
 1265|  35.8k|    {
 1266|  35.8k|        if (!always_supports_field<T, field_tags::mday>::value) {
  ------------------
  |  Branch (1266:13): [Folded - Ignored]
  ------------------
 1267|      0|            on_error("Day-of-month not supported with this type");
 1268|      0|        }
 1269|  35.8k|        st.set_mday(*this);
 1270|  35.8k|    }
_ZN3scn2v46detail12setter_state8set_mdayINS1_17tm_format_checkerINS0_19datetime_componentsEEEEEvRT_:
  768|  35.8k|    {                                                                \
  769|  35.8k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  35.8k|        field##_set = 1;                                             \
  774|  35.8k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_19datetime_componentsEE15on_weekday_nameEv:
 1273|  13.7k|    {
 1274|  13.7k|        if (!always_supports_field<T, field_tags::wday>::value) {
  ------------------
  |  Branch (1274:13): [Folded - Ignored]
  ------------------
 1275|      0|            on_error("Day-of-week not supported with this type");
 1276|      0|        }
 1277|  13.7k|        st.set_wday(*this);
 1278|  13.7k|    }
_ZN3scn2v46detail12setter_state8set_wdayINS1_17tm_format_checkerINS0_19datetime_componentsEEEEEvRT_:
  768|  13.7k|    {                                                                \
  769|  13.7k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  13.7k|        field##_set = 1;                                             \
  774|  13.7k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_19datetime_componentsEE10on_24_hourENS1_14numeric_systemE:
 1295|  63.2k|    {
 1296|  63.2k|        if (!always_supports_field<T, field_tags::hour>::value) {
  ------------------
  |  Branch (1296:13): [Folded - Ignored]
  ------------------
 1297|      0|            on_error("Hours not supported with this type");
 1298|      0|        }
 1299|  63.2k|        st.set_hour24(*this);
 1300|  63.2k|    }
_ZN3scn2v46detail12setter_state10set_hour24INS1_17tm_format_checkerINS0_19datetime_componentsEEEEEvRT_:
  768|  63.2k|    {                                                                \
  769|  63.2k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  63.2k|        field##_set = 1;                                             \
  774|  63.2k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_19datetime_componentsEE9on_minuteENS1_14numeric_systemE:
 1309|  63.2k|    {
 1310|  63.2k|        if (!always_supports_field<T, field_tags::min>::value) {
  ------------------
  |  Branch (1310:13): [Folded - Ignored]
  ------------------
 1311|      0|            on_error("Minutes not supported with this type");
 1312|      0|        }
 1313|  63.2k|        st.set_min(*this);
 1314|  63.2k|    }
_ZN3scn2v46detail12setter_state7set_minINS1_17tm_format_checkerINS0_19datetime_componentsEEEEEvRT_:
  768|  63.2k|    {                                                                \
  769|  63.2k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  63.2k|        field##_set = 1;                                             \
  774|  63.2k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_19datetime_componentsEE9on_secondENS1_14numeric_systemE:
 1316|  23.3k|    {
 1317|  23.3k|        if (!always_supports_field<T, field_tags::sec>::value) {
  ------------------
  |  Branch (1317:13): [Folded - Ignored]
  ------------------
 1318|      0|            on_error("Seconds not supported with this type");
 1319|      0|        }
 1320|  23.3k|        st.set_sec(*this);
 1321|  23.3k|    }
_ZN3scn2v46detail12setter_state7set_secINS1_17tm_format_checkerINS0_19datetime_componentsEEEEEvRT_:
  768|  23.3k|    {                                                                \
  769|  23.3k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  23.3k|        field##_set = 1;                                             \
  774|  23.3k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_19datetime_componentsEE12on_tz_offsetENS1_14numeric_systemE:
 1335|  10.2k|    {
 1336|  10.2k|        if (!always_supports_field<T, field_tags::tzoff>::value) {
  ------------------
  |  Branch (1336:13): [Folded - Ignored]
  ------------------
 1337|      0|            on_error("Timezone offsets not supported with this type");
 1338|      0|        }
 1339|  10.2k|        st.set_tzoff(*this);
 1340|  10.2k|    }
_ZN3scn2v46detail12setter_state9set_tzoffINS1_17tm_format_checkerINS0_19datetime_componentsEEEEEvRT_:
  768|  10.2k|    {                                                                \
  769|  10.2k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  10.2k|        field##_set = 1;                                             \
  774|  10.2k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_19datetime_componentsEE10on_us_dateEv:
 1368|  14.5k|    {
 1369|  14.5k|        on_dec_month();
 1370|  14.5k|        on_day_of_month();
 1371|  14.5k|        on_short_year();
 1372|  14.5k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_19datetime_componentsEE11on_iso_dateEv:
 1374|  10.9k|    {
 1375|  10.9k|        on_full_year();
 1376|  10.9k|        on_dec_month();
 1377|  10.9k|        on_day_of_month();
 1378|  10.9k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_19datetime_componentsEE15on_24_hour_timeEv:
 1386|  39.9k|    {
 1387|  39.9k|        on_24_hour();
 1388|  39.9k|        on_minute();
 1389|  39.9k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_19datetime_componentsEE11on_iso_timeEv:
 1391|  13.0k|    {
 1392|  13.0k|        on_24_hour();
 1393|  13.0k|        on_minute();
 1394|  13.0k|        on_second();
 1395|  13.0k|    }
_ZN3scn2v46detail17tm_format_checkerINS0_19datetime_componentsEE6verifyEv:
 1418|   119k|    {
 1419|   119k|        if (always_requires_field<T, field_tags::subsec>::value &&
  ------------------
  |  Branch (1419:13): [Folded - Ignored]
  ------------------
 1420|   119k|            !st.subsec_set) {
  ------------------
  |  Branch (1420:13): [True: 0, False: 0]
  ------------------
 1421|      0|            on_error("Sub-seconds not set by the format string");
 1422|      0|        }
 1423|   119k|        if (always_requires_field<T, field_tags::sec>::value && !st.sec_set) {
  ------------------
  |  Branch (1423:13): [Folded - Ignored]
  |  Branch (1423:65): [True: 0, False: 0]
  ------------------
 1424|      0|            on_error("Seconds not set by the format string");
 1425|      0|        }
 1426|   119k|        if (always_requires_field<T, field_tags::min>::value && !st.min_set) {
  ------------------
  |  Branch (1426:13): [Folded - Ignored]
  |  Branch (1426:65): [True: 0, False: 0]
  ------------------
 1427|      0|            on_error("Minutes not set by the format string");
 1428|      0|        }
 1429|   119k|        if (always_requires_field<T, field_tags::hour>::value &&
  ------------------
  |  Branch (1429:13): [Folded - Ignored]
  ------------------
 1430|   119k|            !st.hour24_set && !st.hour12_set) {
  ------------------
  |  Branch (1430:13): [True: 0, False: 0]
  |  Branch (1430:31): [True: 0, False: 0]
  ------------------
 1431|      0|            on_error("Hours not set by the format string");
 1432|      0|        }
 1433|   119k|        if (always_requires_field<T, field_tags::mday>::value && !st.mday_set) {
  ------------------
  |  Branch (1433:13): [Folded - Ignored]
  |  Branch (1433:66): [True: 0, False: 0]
  ------------------
 1434|      0|            on_error("Day not set by the format string");
 1435|      0|        }
 1436|   119k|        if (always_requires_field<T, field_tags::mon>::value && !st.mon_set) {
  ------------------
  |  Branch (1436:13): [Folded - Ignored]
  |  Branch (1436:65): [True: 0, False: 0]
  ------------------
 1437|      0|            on_error("Month not set by the format string");
 1438|      0|        }
 1439|   119k|        if (always_requires_field<T, field_tags::year>::value &&
  ------------------
  |  Branch (1439:13): [Folded - Ignored]
  ------------------
 1440|   119k|            !st.full_year_set && !st.century_set && !st.short_year_set) {
  ------------------
  |  Branch (1440:13): [True: 0, False: 0]
  |  Branch (1440:34): [True: 0, False: 0]
  |  Branch (1440:53): [True: 0, False: 0]
  ------------------
 1441|      0|            on_error("Year not set by the format string");
 1442|      0|        }
 1443|   119k|        if (always_requires_field<T, field_tags::wday>::value && !st.wday_set) {
  ------------------
  |  Branch (1443:13): [Folded - Ignored]
  |  Branch (1443:66): [True: 0, False: 0]
  ------------------
 1444|      0|            on_error("Day-of-week not set by the format string");
 1445|      0|        }
 1446|   119k|        if (always_requires_field<T, field_tags::yday>::value && !st.yday_set) {
  ------------------
  |  Branch (1446:13): [Folded - Ignored]
  |  Branch (1446:66): [True: 0, False: 0]
  ------------------
 1447|      0|            on_error("Day-of-year not set by the format string");
 1448|      0|        }
 1449|   119k|        if (always_requires_field<T, field_tags::tzoff>::value &&
  ------------------
  |  Branch (1449:13): [Folded - Ignored]
  ------------------
 1450|   119k|            !st.tzoff_set) {
  ------------------
  |  Branch (1450:13): [True: 0, False: 0]
  ------------------
 1451|      0|            on_error("Timezone offset not set by the format string");
 1452|      0|        }
 1453|   119k|        if (always_requires_field<T, field_tags::tzname>::value &&
  ------------------
  |  Branch (1453:13): [Folded - Ignored]
  ------------------
 1454|   119k|            !st.tzname_set) {
  ------------------
  |  Branch (1454:13): [True: 0, False: 0]
  ------------------
 1455|      0|            on_error("Timezone name not set by the format string");
 1456|      0|        }
 1457|   119k|        if (always_requires_field<T, field_tags::duration>::value &&
  ------------------
  |  Branch (1457:13): [Folded - Ignored]
  ------------------
 1458|   119k|            !st.duration_ticks_set) {
  ------------------
  |  Branch (1458:13): [True: 0, False: 0]
  ------------------
 1459|      0|            on_error("Duration tick count not set by the format string");
 1460|      0|        }
 1461|       |
 1462|   119k|        st.verify(*this);
 1463|   119k|    }
_ZNK3scn2v46detail12setter_state6verifyINS1_17tm_format_checkerINS0_19datetime_componentsEEEEEvRT_:
  799|   119k|    {
  800|   119k|        if (hour24_set && hour12_set) {
  ------------------
  |  Branch (800:13): [True: 63.2k, False: 56.5k]
  |  Branch (800:27): [True: 0, False: 63.2k]
  ------------------
  801|      0|            return handler.set_error(
  802|      0|                {scan_error::invalid_format_string,
  803|      0|                 "24-hour and 12-hour clocks can't both be in use "
  804|      0|                 "simultaneously"});
  805|      0|        }
  806|   119k|        if (am_pm_set) {
  ------------------
  |  Branch (806:13): [True: 0, False: 119k]
  ------------------
  807|      0|            if (!hour12_set) {
  ------------------
  |  Branch (807:17): [True: 0, False: 0]
  ------------------
  808|      0|                return handler.set_error(
  809|      0|                    {scan_error::invalid_format_string,
  810|      0|                     "AM/PM specifier can't be set without an hour set"});
  811|      0|            }
  812|      0|            if (hour24_set) {
  ------------------
  |  Branch (812:17): [True: 0, False: 0]
  ------------------
  813|      0|                return handler.set_error(
  814|      0|                    {scan_error::invalid_format_string,
  815|      0|                     "Can't use AM/PM with a 24-hour clock"});
  816|      0|            }
  817|      0|        }
  818|   119k|        if (full_year_set && (century_set || short_year_set)) {
  ------------------
  |  Branch (818:13): [True: 21.2k, False: 98.5k]
  |  Branch (818:31): [True: 0, False: 21.2k]
  |  Branch (818:46): [True: 0, False: 21.2k]
  ------------------
  819|      0|            return handler.set_error(
  820|      0|                {scan_error::invalid_format_string,
  821|      0|                 "full-year (%Y) can't be used together with "
  822|      0|                 "century (%C) and short-year (%y)"});
  823|      0|        }
  824|   119k|        if (tzoff_set && tzname_set) {
  ------------------
  |  Branch (824:13): [True: 10.2k, False: 109k]
  |  Branch (824:26): [True: 0, False: 10.2k]
  ------------------
  825|      0|            return handler.set_error(
  826|      0|                {scan_error::invalid_format_string,
  827|      0|                 "tzoff (%z) can't be used together with tzname (%Z)"});
  828|      0|        }
  829|   119k|        if ((wday_set || mday_set || yday_set) &&
  ------------------
  |  Branch (829:14): [True: 13.7k, False: 106k]
  |  Branch (829:26): [True: 35.8k, False: 70.2k]
  |  Branch (829:38): [True: 0, False: 70.2k]
  ------------------
  830|   119k|            !(wday_set ^ mday_set ^ yday_set)) {
  ------------------
  |  Branch (830:13): [True: 0, False: 49.5k]
  ------------------
  831|      0|            return handler.set_error(
  832|      0|                {scan_error::invalid_format_string,
  833|      0|                 "Only up to one of wday (%a/%u/%w), mday "
  834|      0|                 "(%d/%e), and yday (%j) can be set at once"});
  835|      0|        }
  836|   119k|    }
_ZNK3scn2v46detail17tm_format_checkerINS0_19datetime_componentsEE9get_errorEv:
 1466|   301k|    {
 1467|   301k|        return err;
 1468|   301k|    }
_ZNK3scn2v46detail23chrono_datetime_scannerIcNS0_19datetime_componentsEE4scanINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEENS0_13scan_expectedINT_8iteratorEEERS3_RSA_:
 1529|  57.5k|    {
 1530|  57.5k|        return detail::chrono_scan_impl(m_fmt_str, t, ctx);
 1531|  57.5k|    }
_ZN3scn2v46detail23chrono_datetime_scannerIw2tmE5parseINS0_24basic_scan_parse_contextIwEEEENT_8iteratorERS8_:
 1522|  65.6k|    {
 1523|  65.6k|        return detail::chrono_parse_impl<T, CharT>(pctx, m_fmt_str);
 1524|  65.6k|    }
_ZN3scn2v46detail17chrono_parse_implI2tmwNS0_24basic_scan_parse_contextIwEEEENT1_8iteratorERS6_RNSt3__117basic_string_viewIT0_NS9_11char_traitsISB_EEEE:
 1493|  65.6k|{
 1494|  65.6k|    auto it = pctx.begin();
 1495|  65.6k|    auto end = pctx.end();
 1496|  65.6k|    if (it == end || *it == CharT{'}'}) {
  ------------------
  |  Branch (1496:9): [True: 3.42k, False: 62.2k]
  |  Branch (1496:22): [True: 0, False: 62.2k]
  ------------------
 1497|  3.42k|        pctx.on_error(
 1498|  3.42k|            "Format string without specifiers is not valid for this type");
 1499|  3.42k|        return it;
 1500|  3.42k|    }
 1501|       |
 1502|  62.2k|    auto checker = detail::tm_format_checker<T>{};
 1503|  62.2k|    end = detail::parse_chrono_format_specs(it, end, checker);
 1504|  62.2k|    if (end != it) {
  ------------------
  |  Branch (1504:9): [True: 62.2k, False: 0]
  ------------------
 1505|  62.2k|        fmt_str = detail::make_string_view_from_pointers(it, end);
 1506|  62.2k|    }
 1507|  62.2k|    if (auto e = checker.get_error(); SCN_UNLIKELY(!e)) {
  ------------------
  |  | 1039|  62.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 62.2k]
  |  |  ------------------
  ------------------
 1508|      0|        assert(e.error().code() == scan_error::invalid_format_string);
 1509|      0|        pctx.on_error(e.error().msg());
 1510|      0|    }
 1511|  62.2k|    return end;
 1512|  62.2k|}
_ZN3scn2v46detail25parse_chrono_format_specsIwRNS1_17tm_format_checkerI2tmEEEEPKT_S9_S9_OT0_:
  376|  62.2k|{
  377|  62.2k|    if (begin == end || *begin == CharT{'}'}) {
  ------------------
  |  Branch (377:9): [True: 0, False: 62.2k]
  |  Branch (377:25): [True: 0, False: 62.2k]
  ------------------
  378|      0|        handler.on_error("chrono format specs can't be empty");
  379|      0|        return begin;
  380|      0|    }
  381|       |
  382|  62.2k|    auto p = begin;
  383|  62.2k|    if (*p == CharT{'L'}) {
  ------------------
  |  Branch (383:9): [True: 0, False: 62.2k]
  ------------------
  384|      0|        handler.on_localized();
  385|      0|        begin = ++p;
  386|      0|        if (p == end) {
  ------------------
  |  Branch (386:13): [True: 0, False: 0]
  ------------------
  387|      0|            handler.on_error("chrono format specs can't be empty");
  388|      0|            return p;
  389|      0|        }
  390|      0|    }
  391|       |
  392|  62.2k|    if (p == end || *p != CharT{'%'}) {
  ------------------
  |  Branch (392:9): [True: 0, False: 62.2k]
  |  Branch (392:21): [True: 0, False: 62.2k]
  ------------------
  393|      0|        handler.on_error(
  394|      0|            "chrono format spec must start with a conversion specifier (%...)");
  395|      0|        return p;
  396|      0|    }
  397|       |
  398|   199k|    while (p != end) {
  ------------------
  |  Branch (398:12): [True: 199k, False: 0]
  ------------------
  399|   199k|        auto ch = *p;
  400|   199k|        if (ch == CharT{'}'}) {
  ------------------
  |  Branch (400:13): [True: 62.2k, False: 137k]
  ------------------
  401|  62.2k|            break;
  402|  62.2k|        }
  403|   137k|        if (ch != CharT{'%'}) {
  ------------------
  |  Branch (403:13): [True: 34.2k, False: 103k]
  ------------------
  404|  34.2k|            if (ch == 0x20 || (ch >= 0x09 && ch <= 0x0d)) {
  ------------------
  |  Branch (404:17): [True: 0, False: 34.2k]
  |  Branch (404:32): [True: 34.2k, False: 0]
  |  Branch (404:46): [True: 0, False: 34.2k]
  ------------------
  405|       |                // Simple ASCII space
  406|      0|                handler.on_text(begin, p);
  407|      0|                handler.on_whitespace();
  408|      0|                begin = p += 1;
  409|      0|                continue;
  410|      0|            }
  411|  34.2k|            const auto cp_len =
  412|  34.2k|                detail::code_point_length_by_starting_code_unit(ch);
  413|  34.2k|            if (cp_len == 0) {
  ------------------
  |  Branch (413:17): [True: 0, False: 34.2k]
  ------------------
  414|      0|                handler.on_error("Invalid literal character");
  415|      0|                return p;
  416|      0|            }
  417|  34.2k|            if (cp_len > 1) {
  ------------------
  |  Branch (417:17): [True: 0, False: 34.2k]
  ------------------
  418|       |                // Multi code unit code point,
  419|       |                // possible space
  420|      0|                auto cp_start_p = p;
  421|      0|                CharT buffer[4] = {};
  422|      0|                for (std::size_t i = 0; i < cp_len; ++i) {
  ------------------
  |  Branch (422:41): [True: 0, False: 0]
  ------------------
  423|      0|                    if (p == end) {
  ------------------
  |  Branch (423:25): [True: 0, False: 0]
  ------------------
  424|      0|                        handler.on_error("Invalid literal character");
  425|      0|                        return p;
  426|      0|                    }
  427|      0|                    buffer[i] = *p;
  428|      0|                    ++p;
  429|      0|                }
  430|      0|                if (is_cp_space(decode_code_point_exhaustive(
  ------------------
  |  Branch (430:21): [True: 0, False: 0]
  ------------------
  431|      0|                        std::basic_string_view<CharT>{buffer, cp_len}))) {
  432|      0|                    handler.on_text(begin, cp_start_p);
  433|      0|                    handler.on_whitespace();
  434|      0|                    begin = p;
  435|      0|                    continue;
  436|      0|                }
  437|      0|            }
  438|  34.2k|            ++p;
  439|  34.2k|            continue;
  440|  34.2k|        }
  441|   103k|        if (begin != p) {
  ------------------
  |  Branch (441:13): [True: 34.2k, False: 69.1k]
  ------------------
  442|  34.2k|            handler.on_text(begin, p);
  443|  34.2k|        }
  444|   103k|        ++p;  // Consume '%'
  445|   103k|        if (p == end) {
  ------------------
  |  Branch (445:13): [True: 0, False: 103k]
  ------------------
  446|      0|            handler.on_error("Unexpected end of chrono format string");
  447|      0|            return p;
  448|      0|        }
  449|       |
  450|   103k|        ch = *p;
  451|   103k|        ++p;
  452|       |
  453|   103k|        switch (ch) {
  454|      0|            case CharT{'%'}:
  ------------------
  |  Branch (454:13): [True: 0, False: 103k]
  ------------------
  455|      0|                handler.on_text(&ch, &ch + 1);
  456|      0|                break;
  457|      0|            case CharT{'n'}:
  ------------------
  |  Branch (457:13): [True: 0, False: 103k]
  ------------------
  458|      0|            case CharT{'t'}:
  ------------------
  |  Branch (458:13): [True: 0, False: 103k]
  ------------------
  459|      0|                handler.on_whitespace();
  460|      0|                break;
  461|       |            // Year
  462|  6.85k|            case CharT{'Y'}:
  ------------------
  |  Branch (462:13): [True: 6.85k, False: 96.5k]
  ------------------
  463|  6.85k|                handler.on_full_year();
  464|  6.85k|                break;
  465|      0|            case CharT{'y'}:
  ------------------
  |  Branch (465:13): [True: 0, False: 103k]
  ------------------
  466|      0|                handler.on_short_year();
  467|      0|                break;
  468|      0|            case CharT{'C'}:
  ------------------
  |  Branch (468:13): [True: 0, False: 103k]
  ------------------
  469|      0|                handler.on_century();
  470|      0|                break;
  471|      0|            case CharT{'G'}:
  ------------------
  |  Branch (471:13): [True: 0, False: 103k]
  ------------------
  472|      0|                handler.on_iso_week_based_year();
  473|      0|                break;
  474|      0|            case CharT{'g'}:
  ------------------
  |  Branch (474:13): [True: 0, False: 103k]
  ------------------
  475|      0|                handler.on_iso_week_based_short_year();
  476|      0|                break;
  477|       |            // Month
  478|  8.19k|            case CharT{'b'}:
  ------------------
  |  Branch (478:13): [True: 8.19k, False: 95.1k]
  ------------------
  479|  8.19k|            case CharT{'B'}:
  ------------------
  |  Branch (479:13): [True: 0, False: 103k]
  ------------------
  480|  8.19k|            case CharT{'h'}:
  ------------------
  |  Branch (480:13): [True: 0, False: 103k]
  ------------------
  481|  8.19k|                handler.on_month_name();
  482|  8.19k|                break;
  483|  6.85k|            case CharT{'m'}:
  ------------------
  |  Branch (483:13): [True: 6.85k, False: 96.5k]
  ------------------
  484|  6.85k|                handler.on_dec_month();
  485|  6.85k|                break;
  486|       |            // Week
  487|      0|            case CharT{'U'}:
  ------------------
  |  Branch (487:13): [True: 0, False: 103k]
  ------------------
  488|      0|                handler.on_dec0_week_of_year();
  489|      0|                break;
  490|      0|            case CharT{'W'}:
  ------------------
  |  Branch (490:13): [True: 0, False: 103k]
  ------------------
  491|      0|                handler.on_dec1_week_of_year();
  492|      0|                break;
  493|      0|            case CharT{'V'}:
  ------------------
  |  Branch (493:13): [True: 0, False: 103k]
  ------------------
  494|      0|                handler.on_iso_week_of_year();
  495|      0|                break;
  496|       |            // Day of year
  497|      0|            case CharT{'j'}:
  ------------------
  |  Branch (497:13): [True: 0, False: 103k]
  ------------------
  498|      0|                handler.on_day_of_year();
  499|      0|                break;
  500|       |            // Day of month
  501|  6.85k|            case CharT{'d'}:
  ------------------
  |  Branch (501:13): [True: 6.85k, False: 96.5k]
  ------------------
  502|  6.85k|            case CharT{'e'}:
  ------------------
  |  Branch (502:13): [True: 0, False: 103k]
  ------------------
  503|  6.85k|                handler.on_day_of_month();
  504|  6.85k|                break;
  505|       |            // Day of week
  506|  6.85k|            case CharT{'a'}:
  ------------------
  |  Branch (506:13): [True: 6.85k, False: 96.5k]
  ------------------
  507|  6.85k|            case CharT{'A'}:
  ------------------
  |  Branch (507:13): [True: 0, False: 103k]
  ------------------
  508|  6.85k|                handler.on_weekday_name();
  509|  6.85k|                break;
  510|      0|            case CharT{'w'}:
  ------------------
  |  Branch (510:13): [True: 0, False: 103k]
  ------------------
  511|      0|                handler.on_dec0_weekday();
  512|      0|                break;
  513|      0|            case CharT{'u'}:
  ------------------
  |  Branch (513:13): [True: 0, False: 103k]
  ------------------
  514|      0|                handler.on_dec1_weekday();
  515|      0|                break;
  516|       |            // Hour
  517|  6.85k|            case CharT{'H'}:
  ------------------
  |  Branch (517:13): [True: 6.85k, False: 96.5k]
  ------------------
  518|  6.85k|            case CharT{'k'}:
  ------------------
  |  Branch (518:13): [True: 0, False: 103k]
  ------------------
  519|  6.85k|                handler.on_24_hour();
  520|  6.85k|                break;
  521|      0|            case CharT{'I'}:
  ------------------
  |  Branch (521:13): [True: 0, False: 103k]
  ------------------
  522|      0|            case CharT{'l'}:
  ------------------
  |  Branch (522:13): [True: 0, False: 103k]
  ------------------
  523|      0|                handler.on_12_hour();
  524|      0|                break;
  525|       |            // Minute
  526|  6.85k|            case CharT{'M'}:
  ------------------
  |  Branch (526:13): [True: 6.85k, False: 96.5k]
  ------------------
  527|  6.85k|                handler.on_minute();
  528|  6.85k|                break;
  529|       |            // Second
  530|  6.85k|            case CharT{'S'}:
  ------------------
  |  Branch (530:13): [True: 6.85k, False: 96.5k]
  ------------------
  531|  6.85k|                handler.on_second();
  532|  6.85k|                break;
  533|       |            // Subsecond
  534|      0|            case CharT{'.'}: {
  ------------------
  |  Branch (534:13): [True: 0, False: 103k]
  ------------------
  535|       |                // p already increased before the switch
  536|      0|                if (p == end) {
  ------------------
  |  Branch (536:21): [True: 0, False: 0]
  ------------------
  537|      0|                    handler.on_error("Unexpected end of chrono format string");
  538|      0|                    return p;
  539|      0|                }
  540|      0|                bool use_alternate = false;
  541|      0|                if (*p == CharT{'E'} || *p == CharT{'O'}) {
  ------------------
  |  Branch (541:21): [True: 0, False: 0]
  |  Branch (541:41): [True: 0, False: 0]
  ------------------
  542|      0|                    ++p;
  543|      0|                    if (p == end) {
  ------------------
  |  Branch (543:25): [True: 0, False: 0]
  ------------------
  544|      0|                        handler.on_error(
  545|      0|                            "Unexpected end of chrono format string");
  546|      0|                        return p;
  547|      0|                    }
  548|      0|                    use_alternate = true;
  549|      0|                }
  550|      0|                if (*p != CharT{'S'}) {
  ------------------
  |  Branch (550:21): [True: 0, False: 0]
  ------------------
  551|      0|                    handler.on_error(
  552|      0|                        "Expected `S` after `%.` in format string");
  553|      0|                    return p;
  554|      0|                }
  555|      0|                ++p;
  556|      0|                handler.on_subsecond(use_alternate
  ------------------
  |  Branch (556:38): [True: 0, False: 0]
  ------------------
  557|      0|                                         ? numeric_system::alternative_e
  558|      0|                                         : numeric_system::standard);
  559|      0|                break;
  560|      0|            }
  561|       |            // Timezones
  562|  6.85k|            case CharT{'z'}:
  ------------------
  |  Branch (562:13): [True: 6.85k, False: 96.5k]
  ------------------
  563|  6.85k|                handler.on_tz_offset();
  564|  6.85k|                break;
  565|      0|            case CharT{'Z'}:
  ------------------
  |  Branch (565:13): [True: 0, False: 103k]
  ------------------
  566|      0|                handler.on_tz_name();
  567|      0|                break;
  568|       |            // Other
  569|      0|            case CharT{'c'}:
  ------------------
  |  Branch (569:13): [True: 0, False: 103k]
  ------------------
  570|      0|                handler.on_loc_datetime();
  571|      0|                break;
  572|      0|            case CharT{'x'}:
  ------------------
  |  Branch (572:13): [True: 0, False: 103k]
  ------------------
  573|      0|                handler.on_loc_date();
  574|      0|                break;
  575|      0|            case CharT{'X'}:
  ------------------
  |  Branch (575:13): [True: 0, False: 103k]
  ------------------
  576|      0|                handler.on_loc_time();
  577|      0|                break;
  578|  6.87k|            case CharT{'D'}:
  ------------------
  |  Branch (578:13): [True: 6.87k, False: 96.5k]
  ------------------
  579|  6.87k|                handler.on_us_date();
  580|  6.87k|                break;
  581|  6.88k|            case CharT{'F'}:
  ------------------
  |  Branch (581:13): [True: 6.88k, False: 96.5k]
  ------------------
  582|  6.88k|                handler.on_iso_date();
  583|  6.88k|                break;
  584|      0|            case CharT{'r'}:
  ------------------
  |  Branch (584:13): [True: 0, False: 103k]
  ------------------
  585|      0|                handler.on_loc_12_hour_time();
  586|      0|                break;
  587|  19.3k|            case CharT{'R'}:
  ------------------
  |  Branch (587:13): [True: 19.3k, False: 84.0k]
  ------------------
  588|  19.3k|                handler.on_24_hour_time();
  589|  19.3k|                break;
  590|  7.25k|            case CharT{'T'}:
  ------------------
  |  Branch (590:13): [True: 7.25k, False: 96.1k]
  ------------------
  591|  7.25k|                handler.on_iso_time();
  592|  7.25k|                break;
  593|      0|            case CharT{'p'}:
  ------------------
  |  Branch (593:13): [True: 0, False: 103k]
  ------------------
  594|      0|            case CharT{'P'}:
  ------------------
  |  Branch (594:13): [True: 0, False: 103k]
  ------------------
  595|      0|                handler.on_am_pm();
  596|      0|                break;
  597|      0|            case CharT{'s'}:
  ------------------
  |  Branch (597:13): [True: 0, False: 103k]
  ------------------
  598|      0|                handler.on_epoch_offset();
  599|      0|                break;
  600|      0|            case CharT{'Q'}:
  ------------------
  |  Branch (600:13): [True: 0, False: 103k]
  ------------------
  601|      0|                handler.on_duration_tick_count();
  602|      0|                break;
  603|      0|            case CharT{'q'}:
  ------------------
  |  Branch (603:13): [True: 0, False: 103k]
  ------------------
  604|      0|                handler.on_duration_suffix();
  605|      0|                break;
  606|       |            // 'E'
  607|      0|            case CharT{'E'}: {
  ------------------
  |  Branch (607:13): [True: 0, False: 103k]
  ------------------
  608|      0|                if (p == end) {
  ------------------
  |  Branch (608:21): [True: 0, False: 0]
  ------------------
  609|      0|                    handler.on_error("Unexpected end of chrono format string");
  610|      0|                    return p;
  611|      0|                }
  612|      0|                ch = *p;
  613|      0|                ++p;
  614|       |
  615|      0|                switch (ch) {
  616|      0|                    case CharT{'c'}:
  ------------------
  |  Branch (616:21): [True: 0, False: 0]
  ------------------
  617|      0|                        handler.on_loc_datetime(numeric_system::alternative_e);
  618|      0|                        break;
  619|      0|                    case CharT{'C'}:
  ------------------
  |  Branch (619:21): [True: 0, False: 0]
  ------------------
  620|      0|                        handler.on_century(numeric_system::alternative_e);
  621|      0|                        break;
  622|      0|                    case CharT{'x'}:
  ------------------
  |  Branch (622:21): [True: 0, False: 0]
  ------------------
  623|      0|                        handler.on_loc_date(numeric_system::alternative_e);
  624|      0|                        break;
  625|      0|                    case CharT{'X'}:
  ------------------
  |  Branch (625:21): [True: 0, False: 0]
  ------------------
  626|      0|                        handler.on_loc_time(numeric_system::alternative_e);
  627|      0|                        break;
  628|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (628:21): [True: 0, False: 0]
  ------------------
  629|      0|                        handler.on_loc_offset_year();
  630|      0|                        break;
  631|      0|                    case CharT{'Y'}:
  ------------------
  |  Branch (631:21): [True: 0, False: 0]
  ------------------
  632|      0|                        handler.on_full_year(numeric_system::alternative_e);
  633|      0|                        break;
  634|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (634:21): [True: 0, False: 0]
  ------------------
  635|      0|                        handler.on_tz_offset(numeric_system::alternative_e);
  636|      0|                        break;
  637|      0|                    default:
  ------------------
  |  Branch (637:21): [True: 0, False: 0]
  ------------------
  638|      0|                        handler.on_error(
  639|      0|                            "Invalid character following 'E' in chrono format "
  640|      0|                            "string");
  641|      0|                        return p;
  642|      0|                }
  643|      0|                break;
  644|      0|            }
  645|       |            // 'O'
  646|      0|            case CharT{'O'}: {
  ------------------
  |  Branch (646:13): [True: 0, False: 103k]
  ------------------
  647|      0|                if (p == end) {
  ------------------
  |  Branch (647:21): [True: 0, False: 0]
  ------------------
  648|      0|                    handler.on_error("Unexpected end of chrono format string");
  649|      0|                    return p;
  650|      0|                }
  651|      0|                ch = *p;
  652|      0|                ++p;
  653|       |
  654|      0|                switch (ch) {
  655|      0|                    case CharT{'d'}:
  ------------------
  |  Branch (655:21): [True: 0, False: 0]
  ------------------
  656|      0|                    case CharT{'e'}:
  ------------------
  |  Branch (656:21): [True: 0, False: 0]
  ------------------
  657|      0|                        handler.on_day_of_month(numeric_system::alternative_o);
  658|      0|                        break;
  659|      0|                    case CharT{'H'}:
  ------------------
  |  Branch (659:21): [True: 0, False: 0]
  ------------------
  660|      0|                    case CharT{'k'}:
  ------------------
  |  Branch (660:21): [True: 0, False: 0]
  ------------------
  661|      0|                        handler.on_24_hour(numeric_system::alternative_o);
  662|      0|                        break;
  663|      0|                    case CharT{'I'}:
  ------------------
  |  Branch (663:21): [True: 0, False: 0]
  ------------------
  664|      0|                    case CharT{'l'}:
  ------------------
  |  Branch (664:21): [True: 0, False: 0]
  ------------------
  665|      0|                        handler.on_12_hour(numeric_system::alternative_o);
  666|      0|                        break;
  667|      0|                    case CharT{'m'}:
  ------------------
  |  Branch (667:21): [True: 0, False: 0]
  ------------------
  668|      0|                        handler.on_dec_month(numeric_system::alternative_o);
  669|      0|                        break;
  670|      0|                    case CharT{'M'}:
  ------------------
  |  Branch (670:21): [True: 0, False: 0]
  ------------------
  671|      0|                        handler.on_minute(numeric_system::alternative_o);
  672|      0|                        break;
  673|      0|                    case CharT{'S'}:
  ------------------
  |  Branch (673:21): [True: 0, False: 0]
  ------------------
  674|      0|                        handler.on_second(numeric_system::alternative_o);
  675|      0|                        break;
  676|      0|                    case CharT{'U'}:
  ------------------
  |  Branch (676:21): [True: 0, False: 0]
  ------------------
  677|      0|                        handler.on_dec0_week_of_year(
  678|      0|                            numeric_system::alternative_o);
  679|      0|                        break;
  680|      0|                    case CharT{'w'}:
  ------------------
  |  Branch (680:21): [True: 0, False: 0]
  ------------------
  681|      0|                        handler.on_dec0_weekday(numeric_system::alternative_o);
  682|      0|                        break;
  683|      0|                    case CharT{'W'}:
  ------------------
  |  Branch (683:21): [True: 0, False: 0]
  ------------------
  684|      0|                        handler.on_dec1_weekday(numeric_system::alternative_o);
  685|      0|                        break;
  686|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (686:21): [True: 0, False: 0]
  ------------------
  687|      0|                        handler.on_short_year(numeric_system::alternative_o);
  688|      0|                        break;
  689|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (689:21): [True: 0, False: 0]
  ------------------
  690|      0|                        handler.on_tz_offset(numeric_system::alternative_o);
  691|      0|                        break;
  692|      0|                    default:
  ------------------
  |  Branch (692:21): [True: 0, False: 0]
  ------------------
  693|      0|                        handler.on_error(
  694|      0|                            "Invalid character following 'O' in chrono format "
  695|      0|                            "string");
  696|      0|                        return p;
  697|      0|                }
  698|      0|                break;
  699|      0|            }
  700|      0|            default:
  ------------------
  |  Branch (700:13): [True: 0, False: 103k]
  ------------------
  701|      0|                handler.on_error("Invalid character in chrono format string");
  702|      0|                return p;
  703|   103k|        }
  704|   103k|        begin = p;
  705|       |
  706|   103k|        if (!handler.get_error()) {
  ------------------
  |  Branch (706:13): [True: 0, False: 103k]
  ------------------
  707|      0|            return p;
  708|      0|        }
  709|   103k|    }
  710|  62.2k|    if (begin != p) {
  ------------------
  |  Branch (710:9): [True: 0, False: 62.2k]
  ------------------
  711|      0|        handler.on_text(begin, p);
  712|      0|    }
  713|  62.2k|    handler.verify();
  714|  62.2k|    return p;
  715|  62.2k|}
_ZN3scn2v46detail17tm_format_checkerI2tmE7on_textIwEEvPKT_S8_:
 1176|  34.2k|    {
 1177|  34.2k|    }
_ZNK3scn2v46detail23chrono_datetime_scannerIw2tmE4scanINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEENS0_13scan_expectedINT_8iteratorEEERS3_RSA_:
 1529|  62.2k|    {
 1530|  62.2k|        return detail::chrono_scan_impl(m_fmt_str, t, ctx);
 1531|  62.2k|    }
_ZN3scn2v46detail23chrono_datetime_scannerIwNS0_10tm_with_tzEE5parseINS0_24basic_scan_parse_contextIwEEEENT_8iteratorERS8_:
 1522|  65.6k|    {
 1523|  65.6k|        return detail::chrono_parse_impl<T, CharT>(pctx, m_fmt_str);
 1524|  65.6k|    }
_ZN3scn2v46detail17chrono_parse_implINS0_10tm_with_tzEwNS0_24basic_scan_parse_contextIwEEEENT1_8iteratorERS6_RNSt3__117basic_string_viewIT0_NS9_11char_traitsISB_EEEE:
 1493|  65.6k|{
 1494|  65.6k|    auto it = pctx.begin();
 1495|  65.6k|    auto end = pctx.end();
 1496|  65.6k|    if (it == end || *it == CharT{'}'}) {
  ------------------
  |  Branch (1496:9): [True: 3.42k, False: 62.2k]
  |  Branch (1496:22): [True: 0, False: 62.2k]
  ------------------
 1497|  3.42k|        pctx.on_error(
 1498|  3.42k|            "Format string without specifiers is not valid for this type");
 1499|  3.42k|        return it;
 1500|  3.42k|    }
 1501|       |
 1502|  62.2k|    auto checker = detail::tm_format_checker<T>{};
 1503|  62.2k|    end = detail::parse_chrono_format_specs(it, end, checker);
 1504|  62.2k|    if (end != it) {
  ------------------
  |  Branch (1504:9): [True: 62.2k, False: 0]
  ------------------
 1505|  62.2k|        fmt_str = detail::make_string_view_from_pointers(it, end);
 1506|  62.2k|    }
 1507|  62.2k|    if (auto e = checker.get_error(); SCN_UNLIKELY(!e)) {
  ------------------
  |  | 1039|  62.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 62.2k]
  |  |  ------------------
  ------------------
 1508|      0|        assert(e.error().code() == scan_error::invalid_format_string);
 1509|      0|        pctx.on_error(e.error().msg());
 1510|      0|    }
 1511|  62.2k|    return end;
 1512|  62.2k|}
_ZN3scn2v46detail25parse_chrono_format_specsIwRNS1_17tm_format_checkerINS0_10tm_with_tzEEEEEPKT_S9_S9_OT0_:
  376|  62.2k|{
  377|  62.2k|    if (begin == end || *begin == CharT{'}'}) {
  ------------------
  |  Branch (377:9): [True: 0, False: 62.2k]
  |  Branch (377:25): [True: 0, False: 62.2k]
  ------------------
  378|      0|        handler.on_error("chrono format specs can't be empty");
  379|      0|        return begin;
  380|      0|    }
  381|       |
  382|  62.2k|    auto p = begin;
  383|  62.2k|    if (*p == CharT{'L'}) {
  ------------------
  |  Branch (383:9): [True: 0, False: 62.2k]
  ------------------
  384|      0|        handler.on_localized();
  385|      0|        begin = ++p;
  386|      0|        if (p == end) {
  ------------------
  |  Branch (386:13): [True: 0, False: 0]
  ------------------
  387|      0|            handler.on_error("chrono format specs can't be empty");
  388|      0|            return p;
  389|      0|        }
  390|      0|    }
  391|       |
  392|  62.2k|    if (p == end || *p != CharT{'%'}) {
  ------------------
  |  Branch (392:9): [True: 0, False: 62.2k]
  |  Branch (392:21): [True: 0, False: 62.2k]
  ------------------
  393|      0|        handler.on_error(
  394|      0|            "chrono format spec must start with a conversion specifier (%...)");
  395|      0|        return p;
  396|      0|    }
  397|       |
  398|   199k|    while (p != end) {
  ------------------
  |  Branch (398:12): [True: 199k, False: 0]
  ------------------
  399|   199k|        auto ch = *p;
  400|   199k|        if (ch == CharT{'}'}) {
  ------------------
  |  Branch (400:13): [True: 62.2k, False: 137k]
  ------------------
  401|  62.2k|            break;
  402|  62.2k|        }
  403|   137k|        if (ch != CharT{'%'}) {
  ------------------
  |  Branch (403:13): [True: 34.2k, False: 103k]
  ------------------
  404|  34.2k|            if (ch == 0x20 || (ch >= 0x09 && ch <= 0x0d)) {
  ------------------
  |  Branch (404:17): [True: 0, False: 34.2k]
  |  Branch (404:32): [True: 34.2k, False: 0]
  |  Branch (404:46): [True: 0, False: 34.2k]
  ------------------
  405|       |                // Simple ASCII space
  406|      0|                handler.on_text(begin, p);
  407|      0|                handler.on_whitespace();
  408|      0|                begin = p += 1;
  409|      0|                continue;
  410|      0|            }
  411|  34.2k|            const auto cp_len =
  412|  34.2k|                detail::code_point_length_by_starting_code_unit(ch);
  413|  34.2k|            if (cp_len == 0) {
  ------------------
  |  Branch (413:17): [True: 0, False: 34.2k]
  ------------------
  414|      0|                handler.on_error("Invalid literal character");
  415|      0|                return p;
  416|      0|            }
  417|  34.2k|            if (cp_len > 1) {
  ------------------
  |  Branch (417:17): [True: 0, False: 34.2k]
  ------------------
  418|       |                // Multi code unit code point,
  419|       |                // possible space
  420|      0|                auto cp_start_p = p;
  421|      0|                CharT buffer[4] = {};
  422|      0|                for (std::size_t i = 0; i < cp_len; ++i) {
  ------------------
  |  Branch (422:41): [True: 0, False: 0]
  ------------------
  423|      0|                    if (p == end) {
  ------------------
  |  Branch (423:25): [True: 0, False: 0]
  ------------------
  424|      0|                        handler.on_error("Invalid literal character");
  425|      0|                        return p;
  426|      0|                    }
  427|      0|                    buffer[i] = *p;
  428|      0|                    ++p;
  429|      0|                }
  430|      0|                if (is_cp_space(decode_code_point_exhaustive(
  ------------------
  |  Branch (430:21): [True: 0, False: 0]
  ------------------
  431|      0|                        std::basic_string_view<CharT>{buffer, cp_len}))) {
  432|      0|                    handler.on_text(begin, cp_start_p);
  433|      0|                    handler.on_whitespace();
  434|      0|                    begin = p;
  435|      0|                    continue;
  436|      0|                }
  437|      0|            }
  438|  34.2k|            ++p;
  439|  34.2k|            continue;
  440|  34.2k|        }
  441|   103k|        if (begin != p) {
  ------------------
  |  Branch (441:13): [True: 34.2k, False: 69.1k]
  ------------------
  442|  34.2k|            handler.on_text(begin, p);
  443|  34.2k|        }
  444|   103k|        ++p;  // Consume '%'
  445|   103k|        if (p == end) {
  ------------------
  |  Branch (445:13): [True: 0, False: 103k]
  ------------------
  446|      0|            handler.on_error("Unexpected end of chrono format string");
  447|      0|            return p;
  448|      0|        }
  449|       |
  450|   103k|        ch = *p;
  451|   103k|        ++p;
  452|       |
  453|   103k|        switch (ch) {
  454|      0|            case CharT{'%'}:
  ------------------
  |  Branch (454:13): [True: 0, False: 103k]
  ------------------
  455|      0|                handler.on_text(&ch, &ch + 1);
  456|      0|                break;
  457|      0|            case CharT{'n'}:
  ------------------
  |  Branch (457:13): [True: 0, False: 103k]
  ------------------
  458|      0|            case CharT{'t'}:
  ------------------
  |  Branch (458:13): [True: 0, False: 103k]
  ------------------
  459|      0|                handler.on_whitespace();
  460|      0|                break;
  461|       |            // Year
  462|  6.85k|            case CharT{'Y'}:
  ------------------
  |  Branch (462:13): [True: 6.85k, False: 96.5k]
  ------------------
  463|  6.85k|                handler.on_full_year();
  464|  6.85k|                break;
  465|      0|            case CharT{'y'}:
  ------------------
  |  Branch (465:13): [True: 0, False: 103k]
  ------------------
  466|      0|                handler.on_short_year();
  467|      0|                break;
  468|      0|            case CharT{'C'}:
  ------------------
  |  Branch (468:13): [True: 0, False: 103k]
  ------------------
  469|      0|                handler.on_century();
  470|      0|                break;
  471|      0|            case CharT{'G'}:
  ------------------
  |  Branch (471:13): [True: 0, False: 103k]
  ------------------
  472|      0|                handler.on_iso_week_based_year();
  473|      0|                break;
  474|      0|            case CharT{'g'}:
  ------------------
  |  Branch (474:13): [True: 0, False: 103k]
  ------------------
  475|      0|                handler.on_iso_week_based_short_year();
  476|      0|                break;
  477|       |            // Month
  478|  8.19k|            case CharT{'b'}:
  ------------------
  |  Branch (478:13): [True: 8.19k, False: 95.1k]
  ------------------
  479|  8.19k|            case CharT{'B'}:
  ------------------
  |  Branch (479:13): [True: 0, False: 103k]
  ------------------
  480|  8.19k|            case CharT{'h'}:
  ------------------
  |  Branch (480:13): [True: 0, False: 103k]
  ------------------
  481|  8.19k|                handler.on_month_name();
  482|  8.19k|                break;
  483|  6.85k|            case CharT{'m'}:
  ------------------
  |  Branch (483:13): [True: 6.85k, False: 96.5k]
  ------------------
  484|  6.85k|                handler.on_dec_month();
  485|  6.85k|                break;
  486|       |            // Week
  487|      0|            case CharT{'U'}:
  ------------------
  |  Branch (487:13): [True: 0, False: 103k]
  ------------------
  488|      0|                handler.on_dec0_week_of_year();
  489|      0|                break;
  490|      0|            case CharT{'W'}:
  ------------------
  |  Branch (490:13): [True: 0, False: 103k]
  ------------------
  491|      0|                handler.on_dec1_week_of_year();
  492|      0|                break;
  493|      0|            case CharT{'V'}:
  ------------------
  |  Branch (493:13): [True: 0, False: 103k]
  ------------------
  494|      0|                handler.on_iso_week_of_year();
  495|      0|                break;
  496|       |            // Day of year
  497|      0|            case CharT{'j'}:
  ------------------
  |  Branch (497:13): [True: 0, False: 103k]
  ------------------
  498|      0|                handler.on_day_of_year();
  499|      0|                break;
  500|       |            // Day of month
  501|  6.85k|            case CharT{'d'}:
  ------------------
  |  Branch (501:13): [True: 6.85k, False: 96.5k]
  ------------------
  502|  6.85k|            case CharT{'e'}:
  ------------------
  |  Branch (502:13): [True: 0, False: 103k]
  ------------------
  503|  6.85k|                handler.on_day_of_month();
  504|  6.85k|                break;
  505|       |            // Day of week
  506|  6.85k|            case CharT{'a'}:
  ------------------
  |  Branch (506:13): [True: 6.85k, False: 96.5k]
  ------------------
  507|  6.85k|            case CharT{'A'}:
  ------------------
  |  Branch (507:13): [True: 0, False: 103k]
  ------------------
  508|  6.85k|                handler.on_weekday_name();
  509|  6.85k|                break;
  510|      0|            case CharT{'w'}:
  ------------------
  |  Branch (510:13): [True: 0, False: 103k]
  ------------------
  511|      0|                handler.on_dec0_weekday();
  512|      0|                break;
  513|      0|            case CharT{'u'}:
  ------------------
  |  Branch (513:13): [True: 0, False: 103k]
  ------------------
  514|      0|                handler.on_dec1_weekday();
  515|      0|                break;
  516|       |            // Hour
  517|  6.85k|            case CharT{'H'}:
  ------------------
  |  Branch (517:13): [True: 6.85k, False: 96.5k]
  ------------------
  518|  6.85k|            case CharT{'k'}:
  ------------------
  |  Branch (518:13): [True: 0, False: 103k]
  ------------------
  519|  6.85k|                handler.on_24_hour();
  520|  6.85k|                break;
  521|      0|            case CharT{'I'}:
  ------------------
  |  Branch (521:13): [True: 0, False: 103k]
  ------------------
  522|      0|            case CharT{'l'}:
  ------------------
  |  Branch (522:13): [True: 0, False: 103k]
  ------------------
  523|      0|                handler.on_12_hour();
  524|      0|                break;
  525|       |            // Minute
  526|  6.85k|            case CharT{'M'}:
  ------------------
  |  Branch (526:13): [True: 6.85k, False: 96.5k]
  ------------------
  527|  6.85k|                handler.on_minute();
  528|  6.85k|                break;
  529|       |            // Second
  530|  6.85k|            case CharT{'S'}:
  ------------------
  |  Branch (530:13): [True: 6.85k, False: 96.5k]
  ------------------
  531|  6.85k|                handler.on_second();
  532|  6.85k|                break;
  533|       |            // Subsecond
  534|      0|            case CharT{'.'}: {
  ------------------
  |  Branch (534:13): [True: 0, False: 103k]
  ------------------
  535|       |                // p already increased before the switch
  536|      0|                if (p == end) {
  ------------------
  |  Branch (536:21): [True: 0, False: 0]
  ------------------
  537|      0|                    handler.on_error("Unexpected end of chrono format string");
  538|      0|                    return p;
  539|      0|                }
  540|      0|                bool use_alternate = false;
  541|      0|                if (*p == CharT{'E'} || *p == CharT{'O'}) {
  ------------------
  |  Branch (541:21): [True: 0, False: 0]
  |  Branch (541:41): [True: 0, False: 0]
  ------------------
  542|      0|                    ++p;
  543|      0|                    if (p == end) {
  ------------------
  |  Branch (543:25): [True: 0, False: 0]
  ------------------
  544|      0|                        handler.on_error(
  545|      0|                            "Unexpected end of chrono format string");
  546|      0|                        return p;
  547|      0|                    }
  548|      0|                    use_alternate = true;
  549|      0|                }
  550|      0|                if (*p != CharT{'S'}) {
  ------------------
  |  Branch (550:21): [True: 0, False: 0]
  ------------------
  551|      0|                    handler.on_error(
  552|      0|                        "Expected `S` after `%.` in format string");
  553|      0|                    return p;
  554|      0|                }
  555|      0|                ++p;
  556|      0|                handler.on_subsecond(use_alternate
  ------------------
  |  Branch (556:38): [True: 0, False: 0]
  ------------------
  557|      0|                                         ? numeric_system::alternative_e
  558|      0|                                         : numeric_system::standard);
  559|      0|                break;
  560|      0|            }
  561|       |            // Timezones
  562|  6.85k|            case CharT{'z'}:
  ------------------
  |  Branch (562:13): [True: 6.85k, False: 96.5k]
  ------------------
  563|  6.85k|                handler.on_tz_offset();
  564|  6.85k|                break;
  565|      0|            case CharT{'Z'}:
  ------------------
  |  Branch (565:13): [True: 0, False: 103k]
  ------------------
  566|      0|                handler.on_tz_name();
  567|      0|                break;
  568|       |            // Other
  569|      0|            case CharT{'c'}:
  ------------------
  |  Branch (569:13): [True: 0, False: 103k]
  ------------------
  570|      0|                handler.on_loc_datetime();
  571|      0|                break;
  572|      0|            case CharT{'x'}:
  ------------------
  |  Branch (572:13): [True: 0, False: 103k]
  ------------------
  573|      0|                handler.on_loc_date();
  574|      0|                break;
  575|      0|            case CharT{'X'}:
  ------------------
  |  Branch (575:13): [True: 0, False: 103k]
  ------------------
  576|      0|                handler.on_loc_time();
  577|      0|                break;
  578|  6.87k|            case CharT{'D'}:
  ------------------
  |  Branch (578:13): [True: 6.87k, False: 96.5k]
  ------------------
  579|  6.87k|                handler.on_us_date();
  580|  6.87k|                break;
  581|  6.88k|            case CharT{'F'}:
  ------------------
  |  Branch (581:13): [True: 6.88k, False: 96.5k]
  ------------------
  582|  6.88k|                handler.on_iso_date();
  583|  6.88k|                break;
  584|      0|            case CharT{'r'}:
  ------------------
  |  Branch (584:13): [True: 0, False: 103k]
  ------------------
  585|      0|                handler.on_loc_12_hour_time();
  586|      0|                break;
  587|  19.3k|            case CharT{'R'}:
  ------------------
  |  Branch (587:13): [True: 19.3k, False: 84.0k]
  ------------------
  588|  19.3k|                handler.on_24_hour_time();
  589|  19.3k|                break;
  590|  7.25k|            case CharT{'T'}:
  ------------------
  |  Branch (590:13): [True: 7.25k, False: 96.1k]
  ------------------
  591|  7.25k|                handler.on_iso_time();
  592|  7.25k|                break;
  593|      0|            case CharT{'p'}:
  ------------------
  |  Branch (593:13): [True: 0, False: 103k]
  ------------------
  594|      0|            case CharT{'P'}:
  ------------------
  |  Branch (594:13): [True: 0, False: 103k]
  ------------------
  595|      0|                handler.on_am_pm();
  596|      0|                break;
  597|      0|            case CharT{'s'}:
  ------------------
  |  Branch (597:13): [True: 0, False: 103k]
  ------------------
  598|      0|                handler.on_epoch_offset();
  599|      0|                break;
  600|      0|            case CharT{'Q'}:
  ------------------
  |  Branch (600:13): [True: 0, False: 103k]
  ------------------
  601|      0|                handler.on_duration_tick_count();
  602|      0|                break;
  603|      0|            case CharT{'q'}:
  ------------------
  |  Branch (603:13): [True: 0, False: 103k]
  ------------------
  604|      0|                handler.on_duration_suffix();
  605|      0|                break;
  606|       |            // 'E'
  607|      0|            case CharT{'E'}: {
  ------------------
  |  Branch (607:13): [True: 0, False: 103k]
  ------------------
  608|      0|                if (p == end) {
  ------------------
  |  Branch (608:21): [True: 0, False: 0]
  ------------------
  609|      0|                    handler.on_error("Unexpected end of chrono format string");
  610|      0|                    return p;
  611|      0|                }
  612|      0|                ch = *p;
  613|      0|                ++p;
  614|       |
  615|      0|                switch (ch) {
  616|      0|                    case CharT{'c'}:
  ------------------
  |  Branch (616:21): [True: 0, False: 0]
  ------------------
  617|      0|                        handler.on_loc_datetime(numeric_system::alternative_e);
  618|      0|                        break;
  619|      0|                    case CharT{'C'}:
  ------------------
  |  Branch (619:21): [True: 0, False: 0]
  ------------------
  620|      0|                        handler.on_century(numeric_system::alternative_e);
  621|      0|                        break;
  622|      0|                    case CharT{'x'}:
  ------------------
  |  Branch (622:21): [True: 0, False: 0]
  ------------------
  623|      0|                        handler.on_loc_date(numeric_system::alternative_e);
  624|      0|                        break;
  625|      0|                    case CharT{'X'}:
  ------------------
  |  Branch (625:21): [True: 0, False: 0]
  ------------------
  626|      0|                        handler.on_loc_time(numeric_system::alternative_e);
  627|      0|                        break;
  628|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (628:21): [True: 0, False: 0]
  ------------------
  629|      0|                        handler.on_loc_offset_year();
  630|      0|                        break;
  631|      0|                    case CharT{'Y'}:
  ------------------
  |  Branch (631:21): [True: 0, False: 0]
  ------------------
  632|      0|                        handler.on_full_year(numeric_system::alternative_e);
  633|      0|                        break;
  634|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (634:21): [True: 0, False: 0]
  ------------------
  635|      0|                        handler.on_tz_offset(numeric_system::alternative_e);
  636|      0|                        break;
  637|      0|                    default:
  ------------------
  |  Branch (637:21): [True: 0, False: 0]
  ------------------
  638|      0|                        handler.on_error(
  639|      0|                            "Invalid character following 'E' in chrono format "
  640|      0|                            "string");
  641|      0|                        return p;
  642|      0|                }
  643|      0|                break;
  644|      0|            }
  645|       |            // 'O'
  646|      0|            case CharT{'O'}: {
  ------------------
  |  Branch (646:13): [True: 0, False: 103k]
  ------------------
  647|      0|                if (p == end) {
  ------------------
  |  Branch (647:21): [True: 0, False: 0]
  ------------------
  648|      0|                    handler.on_error("Unexpected end of chrono format string");
  649|      0|                    return p;
  650|      0|                }
  651|      0|                ch = *p;
  652|      0|                ++p;
  653|       |
  654|      0|                switch (ch) {
  655|      0|                    case CharT{'d'}:
  ------------------
  |  Branch (655:21): [True: 0, False: 0]
  ------------------
  656|      0|                    case CharT{'e'}:
  ------------------
  |  Branch (656:21): [True: 0, False: 0]
  ------------------
  657|      0|                        handler.on_day_of_month(numeric_system::alternative_o);
  658|      0|                        break;
  659|      0|                    case CharT{'H'}:
  ------------------
  |  Branch (659:21): [True: 0, False: 0]
  ------------------
  660|      0|                    case CharT{'k'}:
  ------------------
  |  Branch (660:21): [True: 0, False: 0]
  ------------------
  661|      0|                        handler.on_24_hour(numeric_system::alternative_o);
  662|      0|                        break;
  663|      0|                    case CharT{'I'}:
  ------------------
  |  Branch (663:21): [True: 0, False: 0]
  ------------------
  664|      0|                    case CharT{'l'}:
  ------------------
  |  Branch (664:21): [True: 0, False: 0]
  ------------------
  665|      0|                        handler.on_12_hour(numeric_system::alternative_o);
  666|      0|                        break;
  667|      0|                    case CharT{'m'}:
  ------------------
  |  Branch (667:21): [True: 0, False: 0]
  ------------------
  668|      0|                        handler.on_dec_month(numeric_system::alternative_o);
  669|      0|                        break;
  670|      0|                    case CharT{'M'}:
  ------------------
  |  Branch (670:21): [True: 0, False: 0]
  ------------------
  671|      0|                        handler.on_minute(numeric_system::alternative_o);
  672|      0|                        break;
  673|      0|                    case CharT{'S'}:
  ------------------
  |  Branch (673:21): [True: 0, False: 0]
  ------------------
  674|      0|                        handler.on_second(numeric_system::alternative_o);
  675|      0|                        break;
  676|      0|                    case CharT{'U'}:
  ------------------
  |  Branch (676:21): [True: 0, False: 0]
  ------------------
  677|      0|                        handler.on_dec0_week_of_year(
  678|      0|                            numeric_system::alternative_o);
  679|      0|                        break;
  680|      0|                    case CharT{'w'}:
  ------------------
  |  Branch (680:21): [True: 0, False: 0]
  ------------------
  681|      0|                        handler.on_dec0_weekday(numeric_system::alternative_o);
  682|      0|                        break;
  683|      0|                    case CharT{'W'}:
  ------------------
  |  Branch (683:21): [True: 0, False: 0]
  ------------------
  684|      0|                        handler.on_dec1_weekday(numeric_system::alternative_o);
  685|      0|                        break;
  686|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (686:21): [True: 0, False: 0]
  ------------------
  687|      0|                        handler.on_short_year(numeric_system::alternative_o);
  688|      0|                        break;
  689|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (689:21): [True: 0, False: 0]
  ------------------
  690|      0|                        handler.on_tz_offset(numeric_system::alternative_o);
  691|      0|                        break;
  692|      0|                    default:
  ------------------
  |  Branch (692:21): [True: 0, False: 0]
  ------------------
  693|      0|                        handler.on_error(
  694|      0|                            "Invalid character following 'O' in chrono format "
  695|      0|                            "string");
  696|      0|                        return p;
  697|      0|                }
  698|      0|                break;
  699|      0|            }
  700|      0|            default:
  ------------------
  |  Branch (700:13): [True: 0, False: 103k]
  ------------------
  701|      0|                handler.on_error("Invalid character in chrono format string");
  702|      0|                return p;
  703|   103k|        }
  704|   103k|        begin = p;
  705|       |
  706|   103k|        if (!handler.get_error()) {
  ------------------
  |  Branch (706:13): [True: 0, False: 103k]
  ------------------
  707|      0|            return p;
  708|      0|        }
  709|   103k|    }
  710|  62.2k|    if (begin != p) {
  ------------------
  |  Branch (710:9): [True: 0, False: 62.2k]
  ------------------
  711|      0|        handler.on_text(begin, p);
  712|      0|    }
  713|  62.2k|    handler.verify();
  714|  62.2k|    return p;
  715|  62.2k|}
_ZN3scn2v46detail17tm_format_checkerINS0_10tm_with_tzEE7on_textIwEEvPKT_S8_:
 1176|  34.2k|    {
 1177|  34.2k|    }
_ZNK3scn2v46detail23chrono_datetime_scannerIwNS0_10tm_with_tzEE4scanINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEENS0_13scan_expectedINT_8iteratorEEERS3_RSA_:
 1529|  62.2k|    {
 1530|  62.2k|        return detail::chrono_scan_impl(m_fmt_str, t, ctx);
 1531|  62.2k|    }
_ZN3scn2v46detail23chrono_datetime_scannerIwNS0_19datetime_componentsEE5parseINS0_24basic_scan_parse_contextIwEEEENT_8iteratorERS8_:
 1522|  65.6k|    {
 1523|  65.6k|        return detail::chrono_parse_impl<T, CharT>(pctx, m_fmt_str);
 1524|  65.6k|    }
_ZN3scn2v46detail17chrono_parse_implINS0_19datetime_componentsEwNS0_24basic_scan_parse_contextIwEEEENT1_8iteratorERS6_RNSt3__117basic_string_viewIT0_NS9_11char_traitsISB_EEEE:
 1493|  65.6k|{
 1494|  65.6k|    auto it = pctx.begin();
 1495|  65.6k|    auto end = pctx.end();
 1496|  65.6k|    if (it == end || *it == CharT{'}'}) {
  ------------------
  |  Branch (1496:9): [True: 3.42k, False: 62.2k]
  |  Branch (1496:22): [True: 0, False: 62.2k]
  ------------------
 1497|  3.42k|        pctx.on_error(
 1498|  3.42k|            "Format string without specifiers is not valid for this type");
 1499|  3.42k|        return it;
 1500|  3.42k|    }
 1501|       |
 1502|  62.2k|    auto checker = detail::tm_format_checker<T>{};
 1503|  62.2k|    end = detail::parse_chrono_format_specs(it, end, checker);
 1504|  62.2k|    if (end != it) {
  ------------------
  |  Branch (1504:9): [True: 62.2k, False: 0]
  ------------------
 1505|  62.2k|        fmt_str = detail::make_string_view_from_pointers(it, end);
 1506|  62.2k|    }
 1507|  62.2k|    if (auto e = checker.get_error(); SCN_UNLIKELY(!e)) {
  ------------------
  |  | 1039|  62.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 62.2k]
  |  |  ------------------
  ------------------
 1508|      0|        assert(e.error().code() == scan_error::invalid_format_string);
 1509|      0|        pctx.on_error(e.error().msg());
 1510|      0|    }
 1511|  62.2k|    return end;
 1512|  62.2k|}
_ZN3scn2v46detail25parse_chrono_format_specsIwRNS1_17tm_format_checkerINS0_19datetime_componentsEEEEEPKT_S9_S9_OT0_:
  376|  62.2k|{
  377|  62.2k|    if (begin == end || *begin == CharT{'}'}) {
  ------------------
  |  Branch (377:9): [True: 0, False: 62.2k]
  |  Branch (377:25): [True: 0, False: 62.2k]
  ------------------
  378|      0|        handler.on_error("chrono format specs can't be empty");
  379|      0|        return begin;
  380|      0|    }
  381|       |
  382|  62.2k|    auto p = begin;
  383|  62.2k|    if (*p == CharT{'L'}) {
  ------------------
  |  Branch (383:9): [True: 0, False: 62.2k]
  ------------------
  384|      0|        handler.on_localized();
  385|      0|        begin = ++p;
  386|      0|        if (p == end) {
  ------------------
  |  Branch (386:13): [True: 0, False: 0]
  ------------------
  387|      0|            handler.on_error("chrono format specs can't be empty");
  388|      0|            return p;
  389|      0|        }
  390|      0|    }
  391|       |
  392|  62.2k|    if (p == end || *p != CharT{'%'}) {
  ------------------
  |  Branch (392:9): [True: 0, False: 62.2k]
  |  Branch (392:21): [True: 0, False: 62.2k]
  ------------------
  393|      0|        handler.on_error(
  394|      0|            "chrono format spec must start with a conversion specifier (%...)");
  395|      0|        return p;
  396|      0|    }
  397|       |
  398|   199k|    while (p != end) {
  ------------------
  |  Branch (398:12): [True: 199k, False: 0]
  ------------------
  399|   199k|        auto ch = *p;
  400|   199k|        if (ch == CharT{'}'}) {
  ------------------
  |  Branch (400:13): [True: 62.2k, False: 137k]
  ------------------
  401|  62.2k|            break;
  402|  62.2k|        }
  403|   137k|        if (ch != CharT{'%'}) {
  ------------------
  |  Branch (403:13): [True: 34.2k, False: 103k]
  ------------------
  404|  34.2k|            if (ch == 0x20 || (ch >= 0x09 && ch <= 0x0d)) {
  ------------------
  |  Branch (404:17): [True: 0, False: 34.2k]
  |  Branch (404:32): [True: 34.2k, False: 0]
  |  Branch (404:46): [True: 0, False: 34.2k]
  ------------------
  405|       |                // Simple ASCII space
  406|      0|                handler.on_text(begin, p);
  407|      0|                handler.on_whitespace();
  408|      0|                begin = p += 1;
  409|      0|                continue;
  410|      0|            }
  411|  34.2k|            const auto cp_len =
  412|  34.2k|                detail::code_point_length_by_starting_code_unit(ch);
  413|  34.2k|            if (cp_len == 0) {
  ------------------
  |  Branch (413:17): [True: 0, False: 34.2k]
  ------------------
  414|      0|                handler.on_error("Invalid literal character");
  415|      0|                return p;
  416|      0|            }
  417|  34.2k|            if (cp_len > 1) {
  ------------------
  |  Branch (417:17): [True: 0, False: 34.2k]
  ------------------
  418|       |                // Multi code unit code point,
  419|       |                // possible space
  420|      0|                auto cp_start_p = p;
  421|      0|                CharT buffer[4] = {};
  422|      0|                for (std::size_t i = 0; i < cp_len; ++i) {
  ------------------
  |  Branch (422:41): [True: 0, False: 0]
  ------------------
  423|      0|                    if (p == end) {
  ------------------
  |  Branch (423:25): [True: 0, False: 0]
  ------------------
  424|      0|                        handler.on_error("Invalid literal character");
  425|      0|                        return p;
  426|      0|                    }
  427|      0|                    buffer[i] = *p;
  428|      0|                    ++p;
  429|      0|                }
  430|      0|                if (is_cp_space(decode_code_point_exhaustive(
  ------------------
  |  Branch (430:21): [True: 0, False: 0]
  ------------------
  431|      0|                        std::basic_string_view<CharT>{buffer, cp_len}))) {
  432|      0|                    handler.on_text(begin, cp_start_p);
  433|      0|                    handler.on_whitespace();
  434|      0|                    begin = p;
  435|      0|                    continue;
  436|      0|                }
  437|      0|            }
  438|  34.2k|            ++p;
  439|  34.2k|            continue;
  440|  34.2k|        }
  441|   103k|        if (begin != p) {
  ------------------
  |  Branch (441:13): [True: 34.2k, False: 69.1k]
  ------------------
  442|  34.2k|            handler.on_text(begin, p);
  443|  34.2k|        }
  444|   103k|        ++p;  // Consume '%'
  445|   103k|        if (p == end) {
  ------------------
  |  Branch (445:13): [True: 0, False: 103k]
  ------------------
  446|      0|            handler.on_error("Unexpected end of chrono format string");
  447|      0|            return p;
  448|      0|        }
  449|       |
  450|   103k|        ch = *p;
  451|   103k|        ++p;
  452|       |
  453|   103k|        switch (ch) {
  454|      0|            case CharT{'%'}:
  ------------------
  |  Branch (454:13): [True: 0, False: 103k]
  ------------------
  455|      0|                handler.on_text(&ch, &ch + 1);
  456|      0|                break;
  457|      0|            case CharT{'n'}:
  ------------------
  |  Branch (457:13): [True: 0, False: 103k]
  ------------------
  458|      0|            case CharT{'t'}:
  ------------------
  |  Branch (458:13): [True: 0, False: 103k]
  ------------------
  459|      0|                handler.on_whitespace();
  460|      0|                break;
  461|       |            // Year
  462|  6.85k|            case CharT{'Y'}:
  ------------------
  |  Branch (462:13): [True: 6.85k, False: 96.5k]
  ------------------
  463|  6.85k|                handler.on_full_year();
  464|  6.85k|                break;
  465|      0|            case CharT{'y'}:
  ------------------
  |  Branch (465:13): [True: 0, False: 103k]
  ------------------
  466|      0|                handler.on_short_year();
  467|      0|                break;
  468|      0|            case CharT{'C'}:
  ------------------
  |  Branch (468:13): [True: 0, False: 103k]
  ------------------
  469|      0|                handler.on_century();
  470|      0|                break;
  471|      0|            case CharT{'G'}:
  ------------------
  |  Branch (471:13): [True: 0, False: 103k]
  ------------------
  472|      0|                handler.on_iso_week_based_year();
  473|      0|                break;
  474|      0|            case CharT{'g'}:
  ------------------
  |  Branch (474:13): [True: 0, False: 103k]
  ------------------
  475|      0|                handler.on_iso_week_based_short_year();
  476|      0|                break;
  477|       |            // Month
  478|  8.19k|            case CharT{'b'}:
  ------------------
  |  Branch (478:13): [True: 8.19k, False: 95.1k]
  ------------------
  479|  8.19k|            case CharT{'B'}:
  ------------------
  |  Branch (479:13): [True: 0, False: 103k]
  ------------------
  480|  8.19k|            case CharT{'h'}:
  ------------------
  |  Branch (480:13): [True: 0, False: 103k]
  ------------------
  481|  8.19k|                handler.on_month_name();
  482|  8.19k|                break;
  483|  6.85k|            case CharT{'m'}:
  ------------------
  |  Branch (483:13): [True: 6.85k, False: 96.5k]
  ------------------
  484|  6.85k|                handler.on_dec_month();
  485|  6.85k|                break;
  486|       |            // Week
  487|      0|            case CharT{'U'}:
  ------------------
  |  Branch (487:13): [True: 0, False: 103k]
  ------------------
  488|      0|                handler.on_dec0_week_of_year();
  489|      0|                break;
  490|      0|            case CharT{'W'}:
  ------------------
  |  Branch (490:13): [True: 0, False: 103k]
  ------------------
  491|      0|                handler.on_dec1_week_of_year();
  492|      0|                break;
  493|      0|            case CharT{'V'}:
  ------------------
  |  Branch (493:13): [True: 0, False: 103k]
  ------------------
  494|      0|                handler.on_iso_week_of_year();
  495|      0|                break;
  496|       |            // Day of year
  497|      0|            case CharT{'j'}:
  ------------------
  |  Branch (497:13): [True: 0, False: 103k]
  ------------------
  498|      0|                handler.on_day_of_year();
  499|      0|                break;
  500|       |            // Day of month
  501|  6.85k|            case CharT{'d'}:
  ------------------
  |  Branch (501:13): [True: 6.85k, False: 96.5k]
  ------------------
  502|  6.85k|            case CharT{'e'}:
  ------------------
  |  Branch (502:13): [True: 0, False: 103k]
  ------------------
  503|  6.85k|                handler.on_day_of_month();
  504|  6.85k|                break;
  505|       |            // Day of week
  506|  6.85k|            case CharT{'a'}:
  ------------------
  |  Branch (506:13): [True: 6.85k, False: 96.5k]
  ------------------
  507|  6.85k|            case CharT{'A'}:
  ------------------
  |  Branch (507:13): [True: 0, False: 103k]
  ------------------
  508|  6.85k|                handler.on_weekday_name();
  509|  6.85k|                break;
  510|      0|            case CharT{'w'}:
  ------------------
  |  Branch (510:13): [True: 0, False: 103k]
  ------------------
  511|      0|                handler.on_dec0_weekday();
  512|      0|                break;
  513|      0|            case CharT{'u'}:
  ------------------
  |  Branch (513:13): [True: 0, False: 103k]
  ------------------
  514|      0|                handler.on_dec1_weekday();
  515|      0|                break;
  516|       |            // Hour
  517|  6.85k|            case CharT{'H'}:
  ------------------
  |  Branch (517:13): [True: 6.85k, False: 96.5k]
  ------------------
  518|  6.85k|            case CharT{'k'}:
  ------------------
  |  Branch (518:13): [True: 0, False: 103k]
  ------------------
  519|  6.85k|                handler.on_24_hour();
  520|  6.85k|                break;
  521|      0|            case CharT{'I'}:
  ------------------
  |  Branch (521:13): [True: 0, False: 103k]
  ------------------
  522|      0|            case CharT{'l'}:
  ------------------
  |  Branch (522:13): [True: 0, False: 103k]
  ------------------
  523|      0|                handler.on_12_hour();
  524|      0|                break;
  525|       |            // Minute
  526|  6.85k|            case CharT{'M'}:
  ------------------
  |  Branch (526:13): [True: 6.85k, False: 96.5k]
  ------------------
  527|  6.85k|                handler.on_minute();
  528|  6.85k|                break;
  529|       |            // Second
  530|  6.85k|            case CharT{'S'}:
  ------------------
  |  Branch (530:13): [True: 6.85k, False: 96.5k]
  ------------------
  531|  6.85k|                handler.on_second();
  532|  6.85k|                break;
  533|       |            // Subsecond
  534|      0|            case CharT{'.'}: {
  ------------------
  |  Branch (534:13): [True: 0, False: 103k]
  ------------------
  535|       |                // p already increased before the switch
  536|      0|                if (p == end) {
  ------------------
  |  Branch (536:21): [True: 0, False: 0]
  ------------------
  537|      0|                    handler.on_error("Unexpected end of chrono format string");
  538|      0|                    return p;
  539|      0|                }
  540|      0|                bool use_alternate = false;
  541|      0|                if (*p == CharT{'E'} || *p == CharT{'O'}) {
  ------------------
  |  Branch (541:21): [True: 0, False: 0]
  |  Branch (541:41): [True: 0, False: 0]
  ------------------
  542|      0|                    ++p;
  543|      0|                    if (p == end) {
  ------------------
  |  Branch (543:25): [True: 0, False: 0]
  ------------------
  544|      0|                        handler.on_error(
  545|      0|                            "Unexpected end of chrono format string");
  546|      0|                        return p;
  547|      0|                    }
  548|      0|                    use_alternate = true;
  549|      0|                }
  550|      0|                if (*p != CharT{'S'}) {
  ------------------
  |  Branch (550:21): [True: 0, False: 0]
  ------------------
  551|      0|                    handler.on_error(
  552|      0|                        "Expected `S` after `%.` in format string");
  553|      0|                    return p;
  554|      0|                }
  555|      0|                ++p;
  556|      0|                handler.on_subsecond(use_alternate
  ------------------
  |  Branch (556:38): [True: 0, False: 0]
  ------------------
  557|      0|                                         ? numeric_system::alternative_e
  558|      0|                                         : numeric_system::standard);
  559|      0|                break;
  560|      0|            }
  561|       |            // Timezones
  562|  6.85k|            case CharT{'z'}:
  ------------------
  |  Branch (562:13): [True: 6.85k, False: 96.5k]
  ------------------
  563|  6.85k|                handler.on_tz_offset();
  564|  6.85k|                break;
  565|      0|            case CharT{'Z'}:
  ------------------
  |  Branch (565:13): [True: 0, False: 103k]
  ------------------
  566|      0|                handler.on_tz_name();
  567|      0|                break;
  568|       |            // Other
  569|      0|            case CharT{'c'}:
  ------------------
  |  Branch (569:13): [True: 0, False: 103k]
  ------------------
  570|      0|                handler.on_loc_datetime();
  571|      0|                break;
  572|      0|            case CharT{'x'}:
  ------------------
  |  Branch (572:13): [True: 0, False: 103k]
  ------------------
  573|      0|                handler.on_loc_date();
  574|      0|                break;
  575|      0|            case CharT{'X'}:
  ------------------
  |  Branch (575:13): [True: 0, False: 103k]
  ------------------
  576|      0|                handler.on_loc_time();
  577|      0|                break;
  578|  6.87k|            case CharT{'D'}:
  ------------------
  |  Branch (578:13): [True: 6.87k, False: 96.5k]
  ------------------
  579|  6.87k|                handler.on_us_date();
  580|  6.87k|                break;
  581|  6.88k|            case CharT{'F'}:
  ------------------
  |  Branch (581:13): [True: 6.88k, False: 96.5k]
  ------------------
  582|  6.88k|                handler.on_iso_date();
  583|  6.88k|                break;
  584|      0|            case CharT{'r'}:
  ------------------
  |  Branch (584:13): [True: 0, False: 103k]
  ------------------
  585|      0|                handler.on_loc_12_hour_time();
  586|      0|                break;
  587|  19.3k|            case CharT{'R'}:
  ------------------
  |  Branch (587:13): [True: 19.3k, False: 84.0k]
  ------------------
  588|  19.3k|                handler.on_24_hour_time();
  589|  19.3k|                break;
  590|  7.25k|            case CharT{'T'}:
  ------------------
  |  Branch (590:13): [True: 7.25k, False: 96.1k]
  ------------------
  591|  7.25k|                handler.on_iso_time();
  592|  7.25k|                break;
  593|      0|            case CharT{'p'}:
  ------------------
  |  Branch (593:13): [True: 0, False: 103k]
  ------------------
  594|      0|            case CharT{'P'}:
  ------------------
  |  Branch (594:13): [True: 0, False: 103k]
  ------------------
  595|      0|                handler.on_am_pm();
  596|      0|                break;
  597|      0|            case CharT{'s'}:
  ------------------
  |  Branch (597:13): [True: 0, False: 103k]
  ------------------
  598|      0|                handler.on_epoch_offset();
  599|      0|                break;
  600|      0|            case CharT{'Q'}:
  ------------------
  |  Branch (600:13): [True: 0, False: 103k]
  ------------------
  601|      0|                handler.on_duration_tick_count();
  602|      0|                break;
  603|      0|            case CharT{'q'}:
  ------------------
  |  Branch (603:13): [True: 0, False: 103k]
  ------------------
  604|      0|                handler.on_duration_suffix();
  605|      0|                break;
  606|       |            // 'E'
  607|      0|            case CharT{'E'}: {
  ------------------
  |  Branch (607:13): [True: 0, False: 103k]
  ------------------
  608|      0|                if (p == end) {
  ------------------
  |  Branch (608:21): [True: 0, False: 0]
  ------------------
  609|      0|                    handler.on_error("Unexpected end of chrono format string");
  610|      0|                    return p;
  611|      0|                }
  612|      0|                ch = *p;
  613|      0|                ++p;
  614|       |
  615|      0|                switch (ch) {
  616|      0|                    case CharT{'c'}:
  ------------------
  |  Branch (616:21): [True: 0, False: 0]
  ------------------
  617|      0|                        handler.on_loc_datetime(numeric_system::alternative_e);
  618|      0|                        break;
  619|      0|                    case CharT{'C'}:
  ------------------
  |  Branch (619:21): [True: 0, False: 0]
  ------------------
  620|      0|                        handler.on_century(numeric_system::alternative_e);
  621|      0|                        break;
  622|      0|                    case CharT{'x'}:
  ------------------
  |  Branch (622:21): [True: 0, False: 0]
  ------------------
  623|      0|                        handler.on_loc_date(numeric_system::alternative_e);
  624|      0|                        break;
  625|      0|                    case CharT{'X'}:
  ------------------
  |  Branch (625:21): [True: 0, False: 0]
  ------------------
  626|      0|                        handler.on_loc_time(numeric_system::alternative_e);
  627|      0|                        break;
  628|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (628:21): [True: 0, False: 0]
  ------------------
  629|      0|                        handler.on_loc_offset_year();
  630|      0|                        break;
  631|      0|                    case CharT{'Y'}:
  ------------------
  |  Branch (631:21): [True: 0, False: 0]
  ------------------
  632|      0|                        handler.on_full_year(numeric_system::alternative_e);
  633|      0|                        break;
  634|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (634:21): [True: 0, False: 0]
  ------------------
  635|      0|                        handler.on_tz_offset(numeric_system::alternative_e);
  636|      0|                        break;
  637|      0|                    default:
  ------------------
  |  Branch (637:21): [True: 0, False: 0]
  ------------------
  638|      0|                        handler.on_error(
  639|      0|                            "Invalid character following 'E' in chrono format "
  640|      0|                            "string");
  641|      0|                        return p;
  642|      0|                }
  643|      0|                break;
  644|      0|            }
  645|       |            // 'O'
  646|      0|            case CharT{'O'}: {
  ------------------
  |  Branch (646:13): [True: 0, False: 103k]
  ------------------
  647|      0|                if (p == end) {
  ------------------
  |  Branch (647:21): [True: 0, False: 0]
  ------------------
  648|      0|                    handler.on_error("Unexpected end of chrono format string");
  649|      0|                    return p;
  650|      0|                }
  651|      0|                ch = *p;
  652|      0|                ++p;
  653|       |
  654|      0|                switch (ch) {
  655|      0|                    case CharT{'d'}:
  ------------------
  |  Branch (655:21): [True: 0, False: 0]
  ------------------
  656|      0|                    case CharT{'e'}:
  ------------------
  |  Branch (656:21): [True: 0, False: 0]
  ------------------
  657|      0|                        handler.on_day_of_month(numeric_system::alternative_o);
  658|      0|                        break;
  659|      0|                    case CharT{'H'}:
  ------------------
  |  Branch (659:21): [True: 0, False: 0]
  ------------------
  660|      0|                    case CharT{'k'}:
  ------------------
  |  Branch (660:21): [True: 0, False: 0]
  ------------------
  661|      0|                        handler.on_24_hour(numeric_system::alternative_o);
  662|      0|                        break;
  663|      0|                    case CharT{'I'}:
  ------------------
  |  Branch (663:21): [True: 0, False: 0]
  ------------------
  664|      0|                    case CharT{'l'}:
  ------------------
  |  Branch (664:21): [True: 0, False: 0]
  ------------------
  665|      0|                        handler.on_12_hour(numeric_system::alternative_o);
  666|      0|                        break;
  667|      0|                    case CharT{'m'}:
  ------------------
  |  Branch (667:21): [True: 0, False: 0]
  ------------------
  668|      0|                        handler.on_dec_month(numeric_system::alternative_o);
  669|      0|                        break;
  670|      0|                    case CharT{'M'}:
  ------------------
  |  Branch (670:21): [True: 0, False: 0]
  ------------------
  671|      0|                        handler.on_minute(numeric_system::alternative_o);
  672|      0|                        break;
  673|      0|                    case CharT{'S'}:
  ------------------
  |  Branch (673:21): [True: 0, False: 0]
  ------------------
  674|      0|                        handler.on_second(numeric_system::alternative_o);
  675|      0|                        break;
  676|      0|                    case CharT{'U'}:
  ------------------
  |  Branch (676:21): [True: 0, False: 0]
  ------------------
  677|      0|                        handler.on_dec0_week_of_year(
  678|      0|                            numeric_system::alternative_o);
  679|      0|                        break;
  680|      0|                    case CharT{'w'}:
  ------------------
  |  Branch (680:21): [True: 0, False: 0]
  ------------------
  681|      0|                        handler.on_dec0_weekday(numeric_system::alternative_o);
  682|      0|                        break;
  683|      0|                    case CharT{'W'}:
  ------------------
  |  Branch (683:21): [True: 0, False: 0]
  ------------------
  684|      0|                        handler.on_dec1_weekday(numeric_system::alternative_o);
  685|      0|                        break;
  686|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (686:21): [True: 0, False: 0]
  ------------------
  687|      0|                        handler.on_short_year(numeric_system::alternative_o);
  688|      0|                        break;
  689|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (689:21): [True: 0, False: 0]
  ------------------
  690|      0|                        handler.on_tz_offset(numeric_system::alternative_o);
  691|      0|                        break;
  692|      0|                    default:
  ------------------
  |  Branch (692:21): [True: 0, False: 0]
  ------------------
  693|      0|                        handler.on_error(
  694|      0|                            "Invalid character following 'O' in chrono format "
  695|      0|                            "string");
  696|      0|                        return p;
  697|      0|                }
  698|      0|                break;
  699|      0|            }
  700|      0|            default:
  ------------------
  |  Branch (700:13): [True: 0, False: 103k]
  ------------------
  701|      0|                handler.on_error("Invalid character in chrono format string");
  702|      0|                return p;
  703|   103k|        }
  704|   103k|        begin = p;
  705|       |
  706|   103k|        if (!handler.get_error()) {
  ------------------
  |  Branch (706:13): [True: 0, False: 103k]
  ------------------
  707|      0|            return p;
  708|      0|        }
  709|   103k|    }
  710|  62.2k|    if (begin != p) {
  ------------------
  |  Branch (710:9): [True: 0, False: 62.2k]
  ------------------
  711|      0|        handler.on_text(begin, p);
  712|      0|    }
  713|  62.2k|    handler.verify();
  714|  62.2k|    return p;
  715|  62.2k|}
_ZN3scn2v46detail17tm_format_checkerINS0_19datetime_componentsEE7on_textIwEEvPKT_S8_:
 1176|  34.2k|    {
 1177|  34.2k|    }
_ZNK3scn2v46detail23chrono_datetime_scannerIwNS0_19datetime_componentsEE4scanINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEENS0_13scan_expectedINT_8iteratorEEERS3_RSA_:
 1529|  62.2k|    {
 1530|  62.2k|        return detail::chrono_scan_impl(m_fmt_str, t, ctx);
 1531|  62.2k|    }
_ZN3scn2v47weekdayC2Ej:
   71|  3.46k|        : m_value(static_cast<unsigned char>(wd != 7 ? wd : 0))
  ------------------
  |  Branch (71:46): [True: 3.46k, False: 0]
  ------------------
   72|  3.46k|    {
   73|  3.46k|    }
_ZN3scn2v45monthC2Ej:
  119|  13.7k|        : m_value(static_cast<unsigned char>(d))
  120|  13.7k|    {
  121|  13.7k|    }
_ZN3scn2v46detail25parse_chrono_format_specsIcRNS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEcEEEEPKT_SI_SI_OT0_:
  376|  30.7k|{
  377|  30.7k|    if (begin == end || *begin == CharT{'}'}) {
  ------------------
  |  Branch (377:9): [True: 0, False: 30.7k]
  |  Branch (377:25): [True: 0, False: 30.7k]
  ------------------
  378|      0|        handler.on_error("chrono format specs can't be empty");
  379|      0|        return begin;
  380|      0|    }
  381|       |
  382|  30.7k|    auto p = begin;
  383|  30.7k|    if (*p == CharT{'L'}) {
  ------------------
  |  Branch (383:9): [True: 0, False: 30.7k]
  ------------------
  384|      0|        handler.on_localized();
  385|      0|        begin = ++p;
  386|      0|        if (p == end) {
  ------------------
  |  Branch (386:13): [True: 0, False: 0]
  ------------------
  387|      0|            handler.on_error("chrono format specs can't be empty");
  388|      0|            return p;
  389|      0|        }
  390|      0|    }
  391|       |
  392|  30.7k|    if (p == end || *p != CharT{'%'}) {
  ------------------
  |  Branch (392:9): [True: 0, False: 30.7k]
  |  Branch (392:21): [True: 0, False: 30.7k]
  ------------------
  393|      0|        handler.on_error(
  394|      0|            "chrono format spec must start with a conversion specifier (%...)");
  395|      0|        return p;
  396|      0|    }
  397|       |
  398|  50.2k|    while (p != end) {
  ------------------
  |  Branch (398:12): [True: 31.0k, False: 19.1k]
  ------------------
  399|  31.0k|        auto ch = *p;
  400|  31.0k|        if (ch == CharT{'}'}) {
  ------------------
  |  Branch (400:13): [True: 0, False: 31.0k]
  ------------------
  401|      0|            break;
  402|      0|        }
  403|  31.0k|        if (ch != CharT{'%'}) {
  ------------------
  |  Branch (403:13): [True: 192, False: 30.9k]
  ------------------
  404|    192|            if (ch == 0x20 || (ch >= 0x09 && ch <= 0x0d)) {
  ------------------
  |  Branch (404:17): [True: 0, False: 192]
  |  Branch (404:32): [True: 192, False: 0]
  |  Branch (404:46): [True: 0, False: 192]
  ------------------
  405|       |                // Simple ASCII space
  406|      0|                handler.on_text(begin, p);
  407|      0|                handler.on_whitespace();
  408|      0|                begin = p += 1;
  409|      0|                continue;
  410|      0|            }
  411|    192|            const auto cp_len =
  412|    192|                detail::code_point_length_by_starting_code_unit(ch);
  413|    192|            if (cp_len == 0) {
  ------------------
  |  Branch (413:17): [True: 0, False: 192]
  ------------------
  414|      0|                handler.on_error("Invalid literal character");
  415|      0|                return p;
  416|      0|            }
  417|    192|            if (cp_len > 1) {
  ------------------
  |  Branch (417:17): [True: 0, False: 192]
  ------------------
  418|       |                // Multi code unit code point,
  419|       |                // possible space
  420|      0|                auto cp_start_p = p;
  421|      0|                CharT buffer[4] = {};
  422|      0|                for (std::size_t i = 0; i < cp_len; ++i) {
  ------------------
  |  Branch (422:41): [True: 0, False: 0]
  ------------------
  423|      0|                    if (p == end) {
  ------------------
  |  Branch (423:25): [True: 0, False: 0]
  ------------------
  424|      0|                        handler.on_error("Invalid literal character");
  425|      0|                        return p;
  426|      0|                    }
  427|      0|                    buffer[i] = *p;
  428|      0|                    ++p;
  429|      0|                }
  430|      0|                if (is_cp_space(decode_code_point_exhaustive(
  ------------------
  |  Branch (430:21): [True: 0, False: 0]
  ------------------
  431|      0|                        std::basic_string_view<CharT>{buffer, cp_len}))) {
  432|      0|                    handler.on_text(begin, cp_start_p);
  433|      0|                    handler.on_whitespace();
  434|      0|                    begin = p;
  435|      0|                    continue;
  436|      0|                }
  437|      0|            }
  438|    192|            ++p;
  439|    192|            continue;
  440|    192|        }
  441|  30.9k|        if (begin != p) {
  ------------------
  |  Branch (441:13): [True: 192, False: 30.7k]
  ------------------
  442|    192|            handler.on_text(begin, p);
  443|    192|        }
  444|  30.9k|        ++p;  // Consume '%'
  445|  30.9k|        if (p == end) {
  ------------------
  |  Branch (445:13): [True: 0, False: 30.9k]
  ------------------
  446|      0|            handler.on_error("Unexpected end of chrono format string");
  447|      0|            return p;
  448|      0|        }
  449|       |
  450|  30.9k|        ch = *p;
  451|  30.9k|        ++p;
  452|       |
  453|  30.9k|        switch (ch) {
  454|      0|            case CharT{'%'}:
  ------------------
  |  Branch (454:13): [True: 0, False: 30.9k]
  ------------------
  455|      0|                handler.on_text(&ch, &ch + 1);
  456|      0|                break;
  457|      0|            case CharT{'n'}:
  ------------------
  |  Branch (457:13): [True: 0, False: 30.9k]
  ------------------
  458|      0|            case CharT{'t'}:
  ------------------
  |  Branch (458:13): [True: 0, False: 30.9k]
  ------------------
  459|      0|                handler.on_whitespace();
  460|      0|                break;
  461|       |            // Year
  462|  1.66k|            case CharT{'Y'}:
  ------------------
  |  Branch (462:13): [True: 1.66k, False: 29.2k]
  ------------------
  463|  1.66k|                handler.on_full_year();
  464|  1.66k|                break;
  465|      0|            case CharT{'y'}:
  ------------------
  |  Branch (465:13): [True: 0, False: 30.9k]
  ------------------
  466|      0|                handler.on_short_year();
  467|      0|                break;
  468|      0|            case CharT{'C'}:
  ------------------
  |  Branch (468:13): [True: 0, False: 30.9k]
  ------------------
  469|      0|                handler.on_century();
  470|      0|                break;
  471|      0|            case CharT{'G'}:
  ------------------
  |  Branch (471:13): [True: 0, False: 30.9k]
  ------------------
  472|      0|                handler.on_iso_week_based_year();
  473|      0|                break;
  474|      0|            case CharT{'g'}:
  ------------------
  |  Branch (474:13): [True: 0, False: 30.9k]
  ------------------
  475|      0|                handler.on_iso_week_based_short_year();
  476|      0|                break;
  477|       |            // Month
  478|  4.46k|            case CharT{'b'}:
  ------------------
  |  Branch (478:13): [True: 4.46k, False: 26.4k]
  ------------------
  479|  4.46k|            case CharT{'B'}:
  ------------------
  |  Branch (479:13): [True: 0, False: 30.9k]
  ------------------
  480|  4.46k|            case CharT{'h'}:
  ------------------
  |  Branch (480:13): [True: 0, False: 30.9k]
  ------------------
  481|  4.46k|                handler.on_month_name();
  482|  4.46k|                break;
  483|     82|            case CharT{'m'}:
  ------------------
  |  Branch (483:13): [True: 82, False: 30.8k]
  ------------------
  484|     82|                handler.on_dec_month();
  485|     82|                break;
  486|       |            // Week
  487|      0|            case CharT{'U'}:
  ------------------
  |  Branch (487:13): [True: 0, False: 30.9k]
  ------------------
  488|      0|                handler.on_dec0_week_of_year();
  489|      0|                break;
  490|      0|            case CharT{'W'}:
  ------------------
  |  Branch (490:13): [True: 0, False: 30.9k]
  ------------------
  491|      0|                handler.on_dec1_week_of_year();
  492|      0|                break;
  493|      0|            case CharT{'V'}:
  ------------------
  |  Branch (493:13): [True: 0, False: 30.9k]
  ------------------
  494|      0|                handler.on_iso_week_of_year();
  495|      0|                break;
  496|       |            // Day of year
  497|      0|            case CharT{'j'}:
  ------------------
  |  Branch (497:13): [True: 0, False: 30.9k]
  ------------------
  498|      0|                handler.on_day_of_year();
  499|      0|                break;
  500|       |            // Day of month
  501|     60|            case CharT{'d'}:
  ------------------
  |  Branch (501:13): [True: 60, False: 30.8k]
  ------------------
  502|     60|            case CharT{'e'}:
  ------------------
  |  Branch (502:13): [True: 0, False: 30.9k]
  ------------------
  503|     60|                handler.on_day_of_month();
  504|     60|                break;
  505|       |            // Day of week
  506|  3.42k|            case CharT{'a'}:
  ------------------
  |  Branch (506:13): [True: 3.42k, False: 27.4k]
  ------------------
  507|  3.42k|            case CharT{'A'}:
  ------------------
  |  Branch (507:13): [True: 0, False: 30.9k]
  ------------------
  508|  3.42k|                handler.on_weekday_name();
  509|  3.42k|                break;
  510|      0|            case CharT{'w'}:
  ------------------
  |  Branch (510:13): [True: 0, False: 30.9k]
  ------------------
  511|      0|                handler.on_dec0_weekday();
  512|      0|                break;
  513|      0|            case CharT{'u'}:
  ------------------
  |  Branch (513:13): [True: 0, False: 30.9k]
  ------------------
  514|      0|                handler.on_dec1_weekday();
  515|      0|                break;
  516|       |            // Hour
  517|     50|            case CharT{'H'}:
  ------------------
  |  Branch (517:13): [True: 50, False: 30.8k]
  ------------------
  518|     50|            case CharT{'k'}:
  ------------------
  |  Branch (518:13): [True: 0, False: 30.9k]
  ------------------
  519|     50|                handler.on_24_hour();
  520|     50|                break;
  521|      0|            case CharT{'I'}:
  ------------------
  |  Branch (521:13): [True: 0, False: 30.9k]
  ------------------
  522|      0|            case CharT{'l'}:
  ------------------
  |  Branch (522:13): [True: 0, False: 30.9k]
  ------------------
  523|      0|                handler.on_12_hour();
  524|      0|                break;
  525|       |            // Minute
  526|      0|            case CharT{'M'}:
  ------------------
  |  Branch (526:13): [True: 0, False: 30.9k]
  ------------------
  527|      0|                handler.on_minute();
  528|      0|                break;
  529|       |            // Second
  530|      0|            case CharT{'S'}:
  ------------------
  |  Branch (530:13): [True: 0, False: 30.9k]
  ------------------
  531|      0|                handler.on_second();
  532|      0|                break;
  533|       |            // Subsecond
  534|      0|            case CharT{'.'}: {
  ------------------
  |  Branch (534:13): [True: 0, False: 30.9k]
  ------------------
  535|       |                // p already increased before the switch
  536|      0|                if (p == end) {
  ------------------
  |  Branch (536:21): [True: 0, False: 0]
  ------------------
  537|      0|                    handler.on_error("Unexpected end of chrono format string");
  538|      0|                    return p;
  539|      0|                }
  540|      0|                bool use_alternate = false;
  541|      0|                if (*p == CharT{'E'} || *p == CharT{'O'}) {
  ------------------
  |  Branch (541:21): [True: 0, False: 0]
  |  Branch (541:41): [True: 0, False: 0]
  ------------------
  542|      0|                    ++p;
  543|      0|                    if (p == end) {
  ------------------
  |  Branch (543:25): [True: 0, False: 0]
  ------------------
  544|      0|                        handler.on_error(
  545|      0|                            "Unexpected end of chrono format string");
  546|      0|                        return p;
  547|      0|                    }
  548|      0|                    use_alternate = true;
  549|      0|                }
  550|      0|                if (*p != CharT{'S'}) {
  ------------------
  |  Branch (550:21): [True: 0, False: 0]
  ------------------
  551|      0|                    handler.on_error(
  552|      0|                        "Expected `S` after `%.` in format string");
  553|      0|                    return p;
  554|      0|                }
  555|      0|                ++p;
  556|      0|                handler.on_subsecond(use_alternate
  ------------------
  |  Branch (556:38): [True: 0, False: 0]
  ------------------
  557|      0|                                         ? numeric_system::alternative_e
  558|      0|                                         : numeric_system::standard);
  559|      0|                break;
  560|      0|            }
  561|       |            // Timezones
  562|      0|            case CharT{'z'}:
  ------------------
  |  Branch (562:13): [True: 0, False: 30.9k]
  ------------------
  563|      0|                handler.on_tz_offset();
  564|      0|                break;
  565|      0|            case CharT{'Z'}:
  ------------------
  |  Branch (565:13): [True: 0, False: 30.9k]
  ------------------
  566|      0|                handler.on_tz_name();
  567|      0|                break;
  568|       |            // Other
  569|      0|            case CharT{'c'}:
  ------------------
  |  Branch (569:13): [True: 0, False: 30.9k]
  ------------------
  570|      0|                handler.on_loc_datetime();
  571|      0|                break;
  572|      0|            case CharT{'x'}:
  ------------------
  |  Branch (572:13): [True: 0, False: 30.9k]
  ------------------
  573|      0|                handler.on_loc_date();
  574|      0|                break;
  575|      0|            case CharT{'X'}:
  ------------------
  |  Branch (575:13): [True: 0, False: 30.9k]
  ------------------
  576|      0|                handler.on_loc_time();
  577|      0|                break;
  578|  5.75k|            case CharT{'D'}:
  ------------------
  |  Branch (578:13): [True: 5.75k, False: 25.1k]
  ------------------
  579|  5.75k|                handler.on_us_date();
  580|  5.75k|                break;
  581|  1.99k|            case CharT{'F'}:
  ------------------
  |  Branch (581:13): [True: 1.99k, False: 28.9k]
  ------------------
  582|  1.99k|                handler.on_iso_date();
  583|  1.99k|                break;
  584|      0|            case CharT{'r'}:
  ------------------
  |  Branch (584:13): [True: 0, False: 30.9k]
  ------------------
  585|      0|                handler.on_loc_12_hour_time();
  586|      0|                break;
  587|  10.5k|            case CharT{'R'}:
  ------------------
  |  Branch (587:13): [True: 10.5k, False: 20.3k]
  ------------------
  588|  10.5k|                handler.on_24_hour_time();
  589|  10.5k|                break;
  590|  2.84k|            case CharT{'T'}:
  ------------------
  |  Branch (590:13): [True: 2.84k, False: 28.0k]
  ------------------
  591|  2.84k|                handler.on_iso_time();
  592|  2.84k|                break;
  593|      0|            case CharT{'p'}:
  ------------------
  |  Branch (593:13): [True: 0, False: 30.9k]
  ------------------
  594|      0|            case CharT{'P'}:
  ------------------
  |  Branch (594:13): [True: 0, False: 30.9k]
  ------------------
  595|      0|                handler.on_am_pm();
  596|      0|                break;
  597|      0|            case CharT{'s'}:
  ------------------
  |  Branch (597:13): [True: 0, False: 30.9k]
  ------------------
  598|      0|                handler.on_epoch_offset();
  599|      0|                break;
  600|      0|            case CharT{'Q'}:
  ------------------
  |  Branch (600:13): [True: 0, False: 30.9k]
  ------------------
  601|      0|                handler.on_duration_tick_count();
  602|      0|                break;
  603|      0|            case CharT{'q'}:
  ------------------
  |  Branch (603:13): [True: 0, False: 30.9k]
  ------------------
  604|      0|                handler.on_duration_suffix();
  605|      0|                break;
  606|       |            // 'E'
  607|      0|            case CharT{'E'}: {
  ------------------
  |  Branch (607:13): [True: 0, False: 30.9k]
  ------------------
  608|      0|                if (p == end) {
  ------------------
  |  Branch (608:21): [True: 0, False: 0]
  ------------------
  609|      0|                    handler.on_error("Unexpected end of chrono format string");
  610|      0|                    return p;
  611|      0|                }
  612|      0|                ch = *p;
  613|      0|                ++p;
  614|       |
  615|      0|                switch (ch) {
  616|      0|                    case CharT{'c'}:
  ------------------
  |  Branch (616:21): [True: 0, False: 0]
  ------------------
  617|      0|                        handler.on_loc_datetime(numeric_system::alternative_e);
  618|      0|                        break;
  619|      0|                    case CharT{'C'}:
  ------------------
  |  Branch (619:21): [True: 0, False: 0]
  ------------------
  620|      0|                        handler.on_century(numeric_system::alternative_e);
  621|      0|                        break;
  622|      0|                    case CharT{'x'}:
  ------------------
  |  Branch (622:21): [True: 0, False: 0]
  ------------------
  623|      0|                        handler.on_loc_date(numeric_system::alternative_e);
  624|      0|                        break;
  625|      0|                    case CharT{'X'}:
  ------------------
  |  Branch (625:21): [True: 0, False: 0]
  ------------------
  626|      0|                        handler.on_loc_time(numeric_system::alternative_e);
  627|      0|                        break;
  628|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (628:21): [True: 0, False: 0]
  ------------------
  629|      0|                        handler.on_loc_offset_year();
  630|      0|                        break;
  631|      0|                    case CharT{'Y'}:
  ------------------
  |  Branch (631:21): [True: 0, False: 0]
  ------------------
  632|      0|                        handler.on_full_year(numeric_system::alternative_e);
  633|      0|                        break;
  634|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (634:21): [True: 0, False: 0]
  ------------------
  635|      0|                        handler.on_tz_offset(numeric_system::alternative_e);
  636|      0|                        break;
  637|      0|                    default:
  ------------------
  |  Branch (637:21): [True: 0, False: 0]
  ------------------
  638|      0|                        handler.on_error(
  639|      0|                            "Invalid character following 'E' in chrono format "
  640|      0|                            "string");
  641|      0|                        return p;
  642|      0|                }
  643|      0|                break;
  644|      0|            }
  645|       |            // 'O'
  646|      0|            case CharT{'O'}: {
  ------------------
  |  Branch (646:13): [True: 0, False: 30.9k]
  ------------------
  647|      0|                if (p == end) {
  ------------------
  |  Branch (647:21): [True: 0, False: 0]
  ------------------
  648|      0|                    handler.on_error("Unexpected end of chrono format string");
  649|      0|                    return p;
  650|      0|                }
  651|      0|                ch = *p;
  652|      0|                ++p;
  653|       |
  654|      0|                switch (ch) {
  655|      0|                    case CharT{'d'}:
  ------------------
  |  Branch (655:21): [True: 0, False: 0]
  ------------------
  656|      0|                    case CharT{'e'}:
  ------------------
  |  Branch (656:21): [True: 0, False: 0]
  ------------------
  657|      0|                        handler.on_day_of_month(numeric_system::alternative_o);
  658|      0|                        break;
  659|      0|                    case CharT{'H'}:
  ------------------
  |  Branch (659:21): [True: 0, False: 0]
  ------------------
  660|      0|                    case CharT{'k'}:
  ------------------
  |  Branch (660:21): [True: 0, False: 0]
  ------------------
  661|      0|                        handler.on_24_hour(numeric_system::alternative_o);
  662|      0|                        break;
  663|      0|                    case CharT{'I'}:
  ------------------
  |  Branch (663:21): [True: 0, False: 0]
  ------------------
  664|      0|                    case CharT{'l'}:
  ------------------
  |  Branch (664:21): [True: 0, False: 0]
  ------------------
  665|      0|                        handler.on_12_hour(numeric_system::alternative_o);
  666|      0|                        break;
  667|      0|                    case CharT{'m'}:
  ------------------
  |  Branch (667:21): [True: 0, False: 0]
  ------------------
  668|      0|                        handler.on_dec_month(numeric_system::alternative_o);
  669|      0|                        break;
  670|      0|                    case CharT{'M'}:
  ------------------
  |  Branch (670:21): [True: 0, False: 0]
  ------------------
  671|      0|                        handler.on_minute(numeric_system::alternative_o);
  672|      0|                        break;
  673|      0|                    case CharT{'S'}:
  ------------------
  |  Branch (673:21): [True: 0, False: 0]
  ------------------
  674|      0|                        handler.on_second(numeric_system::alternative_o);
  675|      0|                        break;
  676|      0|                    case CharT{'U'}:
  ------------------
  |  Branch (676:21): [True: 0, False: 0]
  ------------------
  677|      0|                        handler.on_dec0_week_of_year(
  678|      0|                            numeric_system::alternative_o);
  679|      0|                        break;
  680|      0|                    case CharT{'w'}:
  ------------------
  |  Branch (680:21): [True: 0, False: 0]
  ------------------
  681|      0|                        handler.on_dec0_weekday(numeric_system::alternative_o);
  682|      0|                        break;
  683|      0|                    case CharT{'W'}:
  ------------------
  |  Branch (683:21): [True: 0, False: 0]
  ------------------
  684|      0|                        handler.on_dec1_weekday(numeric_system::alternative_o);
  685|      0|                        break;
  686|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (686:21): [True: 0, False: 0]
  ------------------
  687|      0|                        handler.on_short_year(numeric_system::alternative_o);
  688|      0|                        break;
  689|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (689:21): [True: 0, False: 0]
  ------------------
  690|      0|                        handler.on_tz_offset(numeric_system::alternative_o);
  691|      0|                        break;
  692|      0|                    default:
  ------------------
  |  Branch (692:21): [True: 0, False: 0]
  ------------------
  693|      0|                        handler.on_error(
  694|      0|                            "Invalid character following 'O' in chrono format "
  695|      0|                            "string");
  696|      0|                        return p;
  697|      0|                }
  698|      0|                break;
  699|      0|            }
  700|      0|            default:
  ------------------
  |  Branch (700:13): [True: 0, False: 30.9k]
  ------------------
  701|      0|                handler.on_error("Invalid character in chrono format string");
  702|      0|                return p;
  703|  30.9k|        }
  704|  30.9k|        begin = p;
  705|       |
  706|  30.9k|        if (!handler.get_error()) {
  ------------------
  |  Branch (706:13): [True: 11.5k, False: 19.3k]
  ------------------
  707|  11.5k|            return p;
  708|  11.5k|        }
  709|  30.9k|    }
  710|  19.1k|    if (begin != p) {
  ------------------
  |  Branch (710:9): [True: 0, False: 19.1k]
  ------------------
  711|      0|        handler.on_text(begin, p);
  712|      0|    }
  713|  19.1k|    handler.verify();
  714|  19.1k|    return p;
  715|  30.7k|}
_ZN3scn2v46detail12setter_state13set_full_yearINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  768|  3.66k|    {                                                                \
  769|  3.66k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  3.66k|        field##_set = 1;                                             \
  774|  3.66k|    }
_ZN3scn2v46detail12setter_state14set_short_yearINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  768|  4.13k|    {                                                                \
  769|  4.13k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  4.13k|        field##_set = 1;                                             \
  774|  4.13k|    }
_ZN3scn2v46detail12setter_state7set_monINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  768|  7.87k|    {                                                                \
  769|  7.87k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  7.87k|        field##_set = 1;                                             \
  774|  7.87k|    }
_ZN3scn2v46detail12setter_state8set_mdayINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  768|  4.55k|    {                                                                \
  769|  4.55k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  4.55k|        field##_set = 1;                                             \
  774|  4.55k|    }
_ZN3scn2v46detail12setter_state8set_wdayINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  768|  1.76k|    {                                                                \
  769|  1.76k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  1.76k|        field##_set = 1;                                             \
  774|  1.76k|    }
_ZN3scn2v46detail12setter_state10set_hour24INS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  768|  11.0k|    {                                                                \
  769|  11.0k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  11.0k|        field##_set = 1;                                             \
  774|  11.0k|    }
_ZN3scn2v46detail12setter_state7set_minINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  768|  10.6k|    {                                                                \
  769|  10.6k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  10.6k|        field##_set = 1;                                             \
  774|  10.6k|    }
_ZN3scn2v46detail12setter_state7set_secINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  768|  1.22k|    {                                                                \
  769|  1.22k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  1.22k|        field##_set = 1;                                             \
  774|  1.22k|    }
_ZNK3scn2v46detail12setter_state6verifyINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  799|  19.1k|    {
  800|  19.1k|        if (hour24_set && hour12_set) {
  ------------------
  |  Branch (800:13): [True: 10.1k, False: 9.05k]
  |  Branch (800:27): [True: 0, False: 10.1k]
  ------------------
  801|      0|            return handler.set_error(
  802|      0|                {scan_error::invalid_format_string,
  803|      0|                 "24-hour and 12-hour clocks can't both be in use "
  804|      0|                 "simultaneously"});
  805|      0|        }
  806|  19.1k|        if (am_pm_set) {
  ------------------
  |  Branch (806:13): [True: 0, False: 19.1k]
  ------------------
  807|      0|            if (!hour12_set) {
  ------------------
  |  Branch (807:17): [True: 0, False: 0]
  ------------------
  808|      0|                return handler.set_error(
  809|      0|                    {scan_error::invalid_format_string,
  810|      0|                     "AM/PM specifier can't be set without an hour set"});
  811|      0|            }
  812|      0|            if (hour24_set) {
  ------------------
  |  Branch (812:17): [True: 0, False: 0]
  ------------------
  813|      0|                return handler.set_error(
  814|      0|                    {scan_error::invalid_format_string,
  815|      0|                     "Can't use AM/PM with a 24-hour clock"});
  816|      0|            }
  817|      0|        }
  818|  19.1k|        if (full_year_set && (century_set || short_year_set)) {
  ------------------
  |  Branch (818:13): [True: 340, False: 18.8k]
  |  Branch (818:31): [True: 0, False: 340]
  |  Branch (818:46): [True: 0, False: 340]
  ------------------
  819|      0|            return handler.set_error(
  820|      0|                {scan_error::invalid_format_string,
  821|      0|                 "full-year (%Y) can't be used together with "
  822|      0|                 "century (%C) and short-year (%y)"});
  823|      0|        }
  824|  19.1k|        if (tzoff_set && tzname_set) {
  ------------------
  |  Branch (824:13): [True: 0, False: 19.1k]
  |  Branch (824:26): [True: 0, False: 0]
  ------------------
  825|      0|            return handler.set_error(
  826|      0|                {scan_error::invalid_format_string,
  827|      0|                 "tzoff (%z) can't be used together with tzname (%Z)"});
  828|      0|        }
  829|  19.1k|        if ((wday_set || mday_set || yday_set) &&
  ------------------
  |  Branch (829:14): [True: 1.76k, False: 17.4k]
  |  Branch (829:26): [True: 4.45k, False: 12.9k]
  |  Branch (829:38): [True: 0, False: 12.9k]
  ------------------
  830|  19.1k|            !(wday_set ^ mday_set ^ yday_set)) {
  ------------------
  |  Branch (830:13): [True: 0, False: 6.22k]
  ------------------
  831|      0|            return handler.set_error(
  832|      0|                {scan_error::invalid_format_string,
  833|      0|                 "Only up to one of wday (%a/%u/%w), mday "
  834|      0|                 "(%d/%e), and yday (%j) can be set at once"});
  835|      0|        }
  836|  19.1k|    }
_ZN3scn2v46detail12setter_state29handle_short_year_and_centuryIiEEvRT_S4_:
  866|  12.8k|    {
  867|  12.8k|        assert(!full_year_set);
  868|  12.8k|        if (short_year_set && century_set) {
  ------------------
  |  Branch (868:13): [True: 12.8k, False: 0]
  |  Branch (868:31): [True: 0, False: 12.8k]
  ------------------
  869|      0|            year = century_value * 100 + short_year_value - offset;
  870|      0|        }
  871|  12.8k|        else if (short_year_set) {
  ------------------
  |  Branch (871:18): [True: 12.8k, False: 0]
  ------------------
  872|  12.8k|            if (short_year_value >= 69) {
  ------------------
  |  Branch (872:17): [True: 204, False: 12.6k]
  ------------------
  873|    204|                year = 1900 + short_year_value - offset;
  874|    204|            }
  875|  12.6k|            else {
  876|  12.6k|                year = 2000 + short_year_value - offset;
  877|  12.6k|            }
  878|  12.8k|        }
  879|      0|        else if (century_set) {
  ------------------
  |  Branch (879:18): [True: 0, False: 0]
  ------------------
  880|      0|            year = 100 * century_value - offset;
  881|      0|        }
  882|  12.8k|    }
_ZN3scn2v46detail25parse_chrono_format_specsIcRNS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEEEEPKT_SG_SG_OT0_:
  376|  26.1k|{
  377|  26.1k|    if (begin == end || *begin == CharT{'}'}) {
  ------------------
  |  Branch (377:9): [True: 0, False: 26.1k]
  |  Branch (377:25): [True: 0, False: 26.1k]
  ------------------
  378|      0|        handler.on_error("chrono format specs can't be empty");
  379|      0|        return begin;
  380|      0|    }
  381|       |
  382|  26.1k|    auto p = begin;
  383|  26.1k|    if (*p == CharT{'L'}) {
  ------------------
  |  Branch (383:9): [True: 0, False: 26.1k]
  ------------------
  384|      0|        handler.on_localized();
  385|      0|        begin = ++p;
  386|      0|        if (p == end) {
  ------------------
  |  Branch (386:13): [True: 0, False: 0]
  ------------------
  387|      0|            handler.on_error("chrono format specs can't be empty");
  388|      0|            return p;
  389|      0|        }
  390|      0|    }
  391|       |
  392|  26.1k|    if (p == end || *p != CharT{'%'}) {
  ------------------
  |  Branch (392:9): [True: 0, False: 26.1k]
  |  Branch (392:21): [True: 0, False: 26.1k]
  ------------------
  393|      0|        handler.on_error(
  394|      0|            "chrono format spec must start with a conversion specifier (%...)");
  395|      0|        return p;
  396|      0|    }
  397|       |
  398|  40.8k|    while (p != end) {
  ------------------
  |  Branch (398:12): [True: 26.4k, False: 14.3k]
  ------------------
  399|  26.4k|        auto ch = *p;
  400|  26.4k|        if (ch == CharT{'}'}) {
  ------------------
  |  Branch (400:13): [True: 0, False: 26.4k]
  ------------------
  401|      0|            break;
  402|      0|        }
  403|  26.4k|        if (ch != CharT{'%'}) {
  ------------------
  |  Branch (403:13): [True: 186, False: 26.3k]
  ------------------
  404|    186|            if (ch == 0x20 || (ch >= 0x09 && ch <= 0x0d)) {
  ------------------
  |  Branch (404:17): [True: 0, False: 186]
  |  Branch (404:32): [True: 186, False: 0]
  |  Branch (404:46): [True: 0, False: 186]
  ------------------
  405|       |                // Simple ASCII space
  406|      0|                handler.on_text(begin, p);
  407|      0|                handler.on_whitespace();
  408|      0|                begin = p += 1;
  409|      0|                continue;
  410|      0|            }
  411|    186|            const auto cp_len =
  412|    186|                detail::code_point_length_by_starting_code_unit(ch);
  413|    186|            if (cp_len == 0) {
  ------------------
  |  Branch (413:17): [True: 0, False: 186]
  ------------------
  414|      0|                handler.on_error("Invalid literal character");
  415|      0|                return p;
  416|      0|            }
  417|    186|            if (cp_len > 1) {
  ------------------
  |  Branch (417:17): [True: 0, False: 186]
  ------------------
  418|       |                // Multi code unit code point,
  419|       |                // possible space
  420|      0|                auto cp_start_p = p;
  421|      0|                CharT buffer[4] = {};
  422|      0|                for (std::size_t i = 0; i < cp_len; ++i) {
  ------------------
  |  Branch (422:41): [True: 0, False: 0]
  ------------------
  423|      0|                    if (p == end) {
  ------------------
  |  Branch (423:25): [True: 0, False: 0]
  ------------------
  424|      0|                        handler.on_error("Invalid literal character");
  425|      0|                        return p;
  426|      0|                    }
  427|      0|                    buffer[i] = *p;
  428|      0|                    ++p;
  429|      0|                }
  430|      0|                if (is_cp_space(decode_code_point_exhaustive(
  ------------------
  |  Branch (430:21): [True: 0, False: 0]
  ------------------
  431|      0|                        std::basic_string_view<CharT>{buffer, cp_len}))) {
  432|      0|                    handler.on_text(begin, cp_start_p);
  433|      0|                    handler.on_whitespace();
  434|      0|                    begin = p;
  435|      0|                    continue;
  436|      0|                }
  437|      0|            }
  438|    186|            ++p;
  439|    186|            continue;
  440|    186|        }
  441|  26.3k|        if (begin != p) {
  ------------------
  |  Branch (441:13): [True: 186, False: 26.1k]
  ------------------
  442|    186|            handler.on_text(begin, p);
  443|    186|        }
  444|  26.3k|        ++p;  // Consume '%'
  445|  26.3k|        if (p == end) {
  ------------------
  |  Branch (445:13): [True: 0, False: 26.3k]
  ------------------
  446|      0|            handler.on_error("Unexpected end of chrono format string");
  447|      0|            return p;
  448|      0|        }
  449|       |
  450|  26.3k|        ch = *p;
  451|  26.3k|        ++p;
  452|       |
  453|  26.3k|        switch (ch) {
  454|      0|            case CharT{'%'}:
  ------------------
  |  Branch (454:13): [True: 0, False: 26.3k]
  ------------------
  455|      0|                handler.on_text(&ch, &ch + 1);
  456|      0|                break;
  457|      0|            case CharT{'n'}:
  ------------------
  |  Branch (457:13): [True: 0, False: 26.3k]
  ------------------
  458|      0|            case CharT{'t'}:
  ------------------
  |  Branch (458:13): [True: 0, False: 26.3k]
  ------------------
  459|      0|                handler.on_whitespace();
  460|      0|                break;
  461|       |            // Year
  462|  1.69k|            case CharT{'Y'}:
  ------------------
  |  Branch (462:13): [True: 1.69k, False: 24.6k]
  ------------------
  463|  1.69k|                handler.on_full_year();
  464|  1.69k|                break;
  465|      0|            case CharT{'y'}:
  ------------------
  |  Branch (465:13): [True: 0, False: 26.3k]
  ------------------
  466|      0|                handler.on_short_year();
  467|      0|                break;
  468|      0|            case CharT{'C'}:
  ------------------
  |  Branch (468:13): [True: 0, False: 26.3k]
  ------------------
  469|      0|                handler.on_century();
  470|      0|                break;
  471|      0|            case CharT{'G'}:
  ------------------
  |  Branch (471:13): [True: 0, False: 26.3k]
  ------------------
  472|      0|                handler.on_iso_week_based_year();
  473|      0|                break;
  474|      0|            case CharT{'g'}:
  ------------------
  |  Branch (474:13): [True: 0, False: 26.3k]
  ------------------
  475|      0|                handler.on_iso_week_based_short_year();
  476|      0|                break;
  477|       |            // Month
  478|  4.49k|            case CharT{'b'}:
  ------------------
  |  Branch (478:13): [True: 4.49k, False: 21.8k]
  ------------------
  479|  4.49k|            case CharT{'B'}:
  ------------------
  |  Branch (479:13): [True: 0, False: 26.3k]
  ------------------
  480|  4.49k|            case CharT{'h'}:
  ------------------
  |  Branch (480:13): [True: 0, False: 26.3k]
  ------------------
  481|  4.49k|                handler.on_month_name();
  482|  4.49k|                break;
  483|     76|            case CharT{'m'}:
  ------------------
  |  Branch (483:13): [True: 76, False: 26.2k]
  ------------------
  484|     76|                handler.on_dec_month();
  485|     76|                break;
  486|       |            // Week
  487|      0|            case CharT{'U'}:
  ------------------
  |  Branch (487:13): [True: 0, False: 26.3k]
  ------------------
  488|      0|                handler.on_dec0_week_of_year();
  489|      0|                break;
  490|      0|            case CharT{'W'}:
  ------------------
  |  Branch (490:13): [True: 0, False: 26.3k]
  ------------------
  491|      0|                handler.on_dec1_week_of_year();
  492|      0|                break;
  493|      0|            case CharT{'V'}:
  ------------------
  |  Branch (493:13): [True: 0, False: 26.3k]
  ------------------
  494|      0|                handler.on_iso_week_of_year();
  495|      0|                break;
  496|       |            // Day of year
  497|      0|            case CharT{'j'}:
  ------------------
  |  Branch (497:13): [True: 0, False: 26.3k]
  ------------------
  498|      0|                handler.on_day_of_year();
  499|      0|                break;
  500|       |            // Day of month
  501|     60|            case CharT{'d'}:
  ------------------
  |  Branch (501:13): [True: 60, False: 26.2k]
  ------------------
  502|     60|            case CharT{'e'}:
  ------------------
  |  Branch (502:13): [True: 0, False: 26.3k]
  ------------------
  503|     60|                handler.on_day_of_month();
  504|     60|                break;
  505|       |            // Day of week
  506|  3.38k|            case CharT{'a'}:
  ------------------
  |  Branch (506:13): [True: 3.38k, False: 22.9k]
  ------------------
  507|  3.38k|            case CharT{'A'}:
  ------------------
  |  Branch (507:13): [True: 0, False: 26.3k]
  ------------------
  508|  3.38k|                handler.on_weekday_name();
  509|  3.38k|                break;
  510|      0|            case CharT{'w'}:
  ------------------
  |  Branch (510:13): [True: 0, False: 26.3k]
  ------------------
  511|      0|                handler.on_dec0_weekday();
  512|      0|                break;
  513|      0|            case CharT{'u'}:
  ------------------
  |  Branch (513:13): [True: 0, False: 26.3k]
  ------------------
  514|      0|                handler.on_dec1_weekday();
  515|      0|                break;
  516|       |            // Hour
  517|     50|            case CharT{'H'}:
  ------------------
  |  Branch (517:13): [True: 50, False: 26.2k]
  ------------------
  518|     50|            case CharT{'k'}:
  ------------------
  |  Branch (518:13): [True: 0, False: 26.3k]
  ------------------
  519|     50|                handler.on_24_hour();
  520|     50|                break;
  521|      0|            case CharT{'I'}:
  ------------------
  |  Branch (521:13): [True: 0, False: 26.3k]
  ------------------
  522|      0|            case CharT{'l'}:
  ------------------
  |  Branch (522:13): [True: 0, False: 26.3k]
  ------------------
  523|      0|                handler.on_12_hour();
  524|      0|                break;
  525|       |            // Minute
  526|      0|            case CharT{'M'}:
  ------------------
  |  Branch (526:13): [True: 0, False: 26.3k]
  ------------------
  527|      0|                handler.on_minute();
  528|      0|                break;
  529|       |            // Second
  530|      0|            case CharT{'S'}:
  ------------------
  |  Branch (530:13): [True: 0, False: 26.3k]
  ------------------
  531|      0|                handler.on_second();
  532|      0|                break;
  533|       |            // Subsecond
  534|      0|            case CharT{'.'}: {
  ------------------
  |  Branch (534:13): [True: 0, False: 26.3k]
  ------------------
  535|       |                // p already increased before the switch
  536|      0|                if (p == end) {
  ------------------
  |  Branch (536:21): [True: 0, False: 0]
  ------------------
  537|      0|                    handler.on_error("Unexpected end of chrono format string");
  538|      0|                    return p;
  539|      0|                }
  540|      0|                bool use_alternate = false;
  541|      0|                if (*p == CharT{'E'} || *p == CharT{'O'}) {
  ------------------
  |  Branch (541:21): [True: 0, False: 0]
  |  Branch (541:41): [True: 0, False: 0]
  ------------------
  542|      0|                    ++p;
  543|      0|                    if (p == end) {
  ------------------
  |  Branch (543:25): [True: 0, False: 0]
  ------------------
  544|      0|                        handler.on_error(
  545|      0|                            "Unexpected end of chrono format string");
  546|      0|                        return p;
  547|      0|                    }
  548|      0|                    use_alternate = true;
  549|      0|                }
  550|      0|                if (*p != CharT{'S'}) {
  ------------------
  |  Branch (550:21): [True: 0, False: 0]
  ------------------
  551|      0|                    handler.on_error(
  552|      0|                        "Expected `S` after `%.` in format string");
  553|      0|                    return p;
  554|      0|                }
  555|      0|                ++p;
  556|      0|                handler.on_subsecond(use_alternate
  ------------------
  |  Branch (556:38): [True: 0, False: 0]
  ------------------
  557|      0|                                         ? numeric_system::alternative_e
  558|      0|                                         : numeric_system::standard);
  559|      0|                break;
  560|      0|            }
  561|       |            // Timezones
  562|      0|            case CharT{'z'}:
  ------------------
  |  Branch (562:13): [True: 0, False: 26.3k]
  ------------------
  563|      0|                handler.on_tz_offset();
  564|      0|                break;
  565|      0|            case CharT{'Z'}:
  ------------------
  |  Branch (565:13): [True: 0, False: 26.3k]
  ------------------
  566|      0|                handler.on_tz_name();
  567|      0|                break;
  568|       |            // Other
  569|      0|            case CharT{'c'}:
  ------------------
  |  Branch (569:13): [True: 0, False: 26.3k]
  ------------------
  570|      0|                handler.on_loc_datetime();
  571|      0|                break;
  572|      0|            case CharT{'x'}:
  ------------------
  |  Branch (572:13): [True: 0, False: 26.3k]
  ------------------
  573|      0|                handler.on_loc_date();
  574|      0|                break;
  575|      0|            case CharT{'X'}:
  ------------------
  |  Branch (575:13): [True: 0, False: 26.3k]
  ------------------
  576|      0|                handler.on_loc_time();
  577|      0|                break;
  578|  1.83k|            case CharT{'D'}:
  ------------------
  |  Branch (578:13): [True: 1.83k, False: 24.4k]
  ------------------
  579|  1.83k|                handler.on_us_date();
  580|  1.83k|                break;
  581|  2.02k|            case CharT{'F'}:
  ------------------
  |  Branch (581:13): [True: 2.02k, False: 24.2k]
  ------------------
  582|  2.02k|                handler.on_iso_date();
  583|  2.02k|                break;
  584|      0|            case CharT{'r'}:
  ------------------
  |  Branch (584:13): [True: 0, False: 26.3k]
  ------------------
  585|      0|                handler.on_loc_12_hour_time();
  586|      0|                break;
  587|  9.83k|            case CharT{'R'}:
  ------------------
  |  Branch (587:13): [True: 9.83k, False: 16.4k]
  ------------------
  588|  9.83k|                handler.on_24_hour_time();
  589|  9.83k|                break;
  590|  2.86k|            case CharT{'T'}:
  ------------------
  |  Branch (590:13): [True: 2.86k, False: 23.4k]
  ------------------
  591|  2.86k|                handler.on_iso_time();
  592|  2.86k|                break;
  593|      0|            case CharT{'p'}:
  ------------------
  |  Branch (593:13): [True: 0, False: 26.3k]
  ------------------
  594|      0|            case CharT{'P'}:
  ------------------
  |  Branch (594:13): [True: 0, False: 26.3k]
  ------------------
  595|      0|                handler.on_am_pm();
  596|      0|                break;
  597|      0|            case CharT{'s'}:
  ------------------
  |  Branch (597:13): [True: 0, False: 26.3k]
  ------------------
  598|      0|                handler.on_epoch_offset();
  599|      0|                break;
  600|      0|            case CharT{'Q'}:
  ------------------
  |  Branch (600:13): [True: 0, False: 26.3k]
  ------------------
  601|      0|                handler.on_duration_tick_count();
  602|      0|                break;
  603|      0|            case CharT{'q'}:
  ------------------
  |  Branch (603:13): [True: 0, False: 26.3k]
  ------------------
  604|      0|                handler.on_duration_suffix();
  605|      0|                break;
  606|       |            // 'E'
  607|      0|            case CharT{'E'}: {
  ------------------
  |  Branch (607:13): [True: 0, False: 26.3k]
  ------------------
  608|      0|                if (p == end) {
  ------------------
  |  Branch (608:21): [True: 0, False: 0]
  ------------------
  609|      0|                    handler.on_error("Unexpected end of chrono format string");
  610|      0|                    return p;
  611|      0|                }
  612|      0|                ch = *p;
  613|      0|                ++p;
  614|       |
  615|      0|                switch (ch) {
  616|      0|                    case CharT{'c'}:
  ------------------
  |  Branch (616:21): [True: 0, False: 0]
  ------------------
  617|      0|                        handler.on_loc_datetime(numeric_system::alternative_e);
  618|      0|                        break;
  619|      0|                    case CharT{'C'}:
  ------------------
  |  Branch (619:21): [True: 0, False: 0]
  ------------------
  620|      0|                        handler.on_century(numeric_system::alternative_e);
  621|      0|                        break;
  622|      0|                    case CharT{'x'}:
  ------------------
  |  Branch (622:21): [True: 0, False: 0]
  ------------------
  623|      0|                        handler.on_loc_date(numeric_system::alternative_e);
  624|      0|                        break;
  625|      0|                    case CharT{'X'}:
  ------------------
  |  Branch (625:21): [True: 0, False: 0]
  ------------------
  626|      0|                        handler.on_loc_time(numeric_system::alternative_e);
  627|      0|                        break;
  628|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (628:21): [True: 0, False: 0]
  ------------------
  629|      0|                        handler.on_loc_offset_year();
  630|      0|                        break;
  631|      0|                    case CharT{'Y'}:
  ------------------
  |  Branch (631:21): [True: 0, False: 0]
  ------------------
  632|      0|                        handler.on_full_year(numeric_system::alternative_e);
  633|      0|                        break;
  634|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (634:21): [True: 0, False: 0]
  ------------------
  635|      0|                        handler.on_tz_offset(numeric_system::alternative_e);
  636|      0|                        break;
  637|      0|                    default:
  ------------------
  |  Branch (637:21): [True: 0, False: 0]
  ------------------
  638|      0|                        handler.on_error(
  639|      0|                            "Invalid character following 'E' in chrono format "
  640|      0|                            "string");
  641|      0|                        return p;
  642|      0|                }
  643|      0|                break;
  644|      0|            }
  645|       |            // 'O'
  646|      0|            case CharT{'O'}: {
  ------------------
  |  Branch (646:13): [True: 0, False: 26.3k]
  ------------------
  647|      0|                if (p == end) {
  ------------------
  |  Branch (647:21): [True: 0, False: 0]
  ------------------
  648|      0|                    handler.on_error("Unexpected end of chrono format string");
  649|      0|                    return p;
  650|      0|                }
  651|      0|                ch = *p;
  652|      0|                ++p;
  653|       |
  654|      0|                switch (ch) {
  655|      0|                    case CharT{'d'}:
  ------------------
  |  Branch (655:21): [True: 0, False: 0]
  ------------------
  656|      0|                    case CharT{'e'}:
  ------------------
  |  Branch (656:21): [True: 0, False: 0]
  ------------------
  657|      0|                        handler.on_day_of_month(numeric_system::alternative_o);
  658|      0|                        break;
  659|      0|                    case CharT{'H'}:
  ------------------
  |  Branch (659:21): [True: 0, False: 0]
  ------------------
  660|      0|                    case CharT{'k'}:
  ------------------
  |  Branch (660:21): [True: 0, False: 0]
  ------------------
  661|      0|                        handler.on_24_hour(numeric_system::alternative_o);
  662|      0|                        break;
  663|      0|                    case CharT{'I'}:
  ------------------
  |  Branch (663:21): [True: 0, False: 0]
  ------------------
  664|      0|                    case CharT{'l'}:
  ------------------
  |  Branch (664:21): [True: 0, False: 0]
  ------------------
  665|      0|                        handler.on_12_hour(numeric_system::alternative_o);
  666|      0|                        break;
  667|      0|                    case CharT{'m'}:
  ------------------
  |  Branch (667:21): [True: 0, False: 0]
  ------------------
  668|      0|                        handler.on_dec_month(numeric_system::alternative_o);
  669|      0|                        break;
  670|      0|                    case CharT{'M'}:
  ------------------
  |  Branch (670:21): [True: 0, False: 0]
  ------------------
  671|      0|                        handler.on_minute(numeric_system::alternative_o);
  672|      0|                        break;
  673|      0|                    case CharT{'S'}:
  ------------------
  |  Branch (673:21): [True: 0, False: 0]
  ------------------
  674|      0|                        handler.on_second(numeric_system::alternative_o);
  675|      0|                        break;
  676|      0|                    case CharT{'U'}:
  ------------------
  |  Branch (676:21): [True: 0, False: 0]
  ------------------
  677|      0|                        handler.on_dec0_week_of_year(
  678|      0|                            numeric_system::alternative_o);
  679|      0|                        break;
  680|      0|                    case CharT{'w'}:
  ------------------
  |  Branch (680:21): [True: 0, False: 0]
  ------------------
  681|      0|                        handler.on_dec0_weekday(numeric_system::alternative_o);
  682|      0|                        break;
  683|      0|                    case CharT{'W'}:
  ------------------
  |  Branch (683:21): [True: 0, False: 0]
  ------------------
  684|      0|                        handler.on_dec1_weekday(numeric_system::alternative_o);
  685|      0|                        break;
  686|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (686:21): [True: 0, False: 0]
  ------------------
  687|      0|                        handler.on_short_year(numeric_system::alternative_o);
  688|      0|                        break;
  689|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (689:21): [True: 0, False: 0]
  ------------------
  690|      0|                        handler.on_tz_offset(numeric_system::alternative_o);
  691|      0|                        break;
  692|      0|                    default:
  ------------------
  |  Branch (692:21): [True: 0, False: 0]
  ------------------
  693|      0|                        handler.on_error(
  694|      0|                            "Invalid character following 'O' in chrono format "
  695|      0|                            "string");
  696|      0|                        return p;
  697|      0|                }
  698|      0|                break;
  699|      0|            }
  700|      0|            default:
  ------------------
  |  Branch (700:13): [True: 0, False: 26.3k]
  ------------------
  701|      0|                handler.on_error("Invalid character in chrono format string");
  702|      0|                return p;
  703|  26.3k|        }
  704|  26.3k|        begin = p;
  705|       |
  706|  26.3k|        if (!handler.get_error()) {
  ------------------
  |  Branch (706:13): [True: 11.7k, False: 14.5k]
  ------------------
  707|  11.7k|            return p;
  708|  11.7k|        }
  709|  26.3k|    }
  710|  14.3k|    if (begin != p) {
  ------------------
  |  Branch (710:9): [True: 0, False: 14.3k]
  ------------------
  711|      0|        handler.on_text(begin, p);
  712|      0|    }
  713|  14.3k|    handler.verify();
  714|  14.3k|    return p;
  715|  26.1k|}
_ZN3scn2v46detail12setter_state13set_full_yearINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  768|  3.71k|    {                                                                \
  769|  3.71k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  3.71k|        field##_set = 1;                                             \
  774|  3.71k|    }
_ZN3scn2v46detail12setter_state14set_short_yearINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  768|    162|    {                                                                \
  769|    162|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|    162|        field##_set = 1;                                             \
  774|    162|    }
_ZN3scn2v46detail12setter_state7set_monINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  768|  3.85k|    {                                                                \
  769|  3.85k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  3.85k|        field##_set = 1;                                             \
  774|  3.85k|    }
_ZN3scn2v46detail12setter_state8set_mdayINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  768|    578|    {                                                                \
  769|    578|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|    578|        field##_set = 1;                                             \
  774|    578|    }
_ZN3scn2v46detail12setter_state8set_wdayINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  768|  1.69k|    {                                                                \
  769|  1.69k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  1.69k|        field##_set = 1;                                             \
  774|  1.69k|    }
_ZN3scn2v46detail12setter_state10set_hour24INS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  768|  10.0k|    {                                                                \
  769|  10.0k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  10.0k|        field##_set = 1;                                             \
  774|  10.0k|    }
_ZN3scn2v46detail12setter_state7set_minINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  768|  9.87k|    {                                                                \
  769|  9.87k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  9.87k|        field##_set = 1;                                             \
  774|  9.87k|    }
_ZN3scn2v46detail12setter_state7set_secINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  768|  1.20k|    {                                                                \
  769|  1.20k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  1.20k|        field##_set = 1;                                             \
  774|  1.20k|    }
_ZNK3scn2v46detail12setter_state6verifyINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  799|  14.3k|    {
  800|  14.3k|        if (hour24_set && hour12_set) {
  ------------------
  |  Branch (800:13): [True: 9.36k, False: 5.00k]
  |  Branch (800:27): [True: 0, False: 9.36k]
  ------------------
  801|      0|            return handler.set_error(
  802|      0|                {scan_error::invalid_format_string,
  803|      0|                 "24-hour and 12-hour clocks can't both be in use "
  804|      0|                 "simultaneously"});
  805|      0|        }
  806|  14.3k|        if (am_pm_set) {
  ------------------
  |  Branch (806:13): [True: 0, False: 14.3k]
  ------------------
  807|      0|            if (!hour12_set) {
  ------------------
  |  Branch (807:17): [True: 0, False: 0]
  ------------------
  808|      0|                return handler.set_error(
  809|      0|                    {scan_error::invalid_format_string,
  810|      0|                     "AM/PM specifier can't be set without an hour set"});
  811|      0|            }
  812|      0|            if (hour24_set) {
  ------------------
  |  Branch (812:17): [True: 0, False: 0]
  ------------------
  813|      0|                return handler.set_error(
  814|      0|                    {scan_error::invalid_format_string,
  815|      0|                     "Can't use AM/PM with a 24-hour clock"});
  816|      0|            }
  817|      0|        }
  818|  14.3k|        if (full_year_set && (century_set || short_year_set)) {
  ------------------
  |  Branch (818:13): [True: 340, False: 14.0k]
  |  Branch (818:31): [True: 0, False: 340]
  |  Branch (818:46): [True: 0, False: 340]
  ------------------
  819|      0|            return handler.set_error(
  820|      0|                {scan_error::invalid_format_string,
  821|      0|                 "full-year (%Y) can't be used together with "
  822|      0|                 "century (%C) and short-year (%y)"});
  823|      0|        }
  824|  14.3k|        if (tzoff_set && tzname_set) {
  ------------------
  |  Branch (824:13): [True: 0, False: 14.3k]
  |  Branch (824:26): [True: 0, False: 0]
  ------------------
  825|      0|            return handler.set_error(
  826|      0|                {scan_error::invalid_format_string,
  827|      0|                 "tzoff (%z) can't be used together with tzname (%Z)"});
  828|      0|        }
  829|  14.3k|        if ((wday_set || mday_set || yday_set) &&
  ------------------
  |  Branch (829:14): [True: 1.69k, False: 12.6k]
  |  Branch (829:26): [True: 492, False: 12.1k]
  |  Branch (829:38): [True: 0, False: 12.1k]
  ------------------
  830|  14.3k|            !(wday_set ^ mday_set ^ yday_set)) {
  ------------------
  |  Branch (830:13): [True: 0, False: 2.19k]
  ------------------
  831|      0|            return handler.set_error(
  832|      0|                {scan_error::invalid_format_string,
  833|      0|                 "Only up to one of wday (%a/%u/%w), mday "
  834|      0|                 "(%d/%e), and yday (%j) can be set at once"});
  835|      0|        }
  836|  14.3k|    }
_ZN3scn2v46detail25parse_chrono_format_specsIcRNS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEcEEEEPKT_SI_SI_OT0_:
  376|  30.7k|{
  377|  30.7k|    if (begin == end || *begin == CharT{'}'}) {
  ------------------
  |  Branch (377:9): [True: 0, False: 30.7k]
  |  Branch (377:25): [True: 0, False: 30.7k]
  ------------------
  378|      0|        handler.on_error("chrono format specs can't be empty");
  379|      0|        return begin;
  380|      0|    }
  381|       |
  382|  30.7k|    auto p = begin;
  383|  30.7k|    if (*p == CharT{'L'}) {
  ------------------
  |  Branch (383:9): [True: 0, False: 30.7k]
  ------------------
  384|      0|        handler.on_localized();
  385|      0|        begin = ++p;
  386|      0|        if (p == end) {
  ------------------
  |  Branch (386:13): [True: 0, False: 0]
  ------------------
  387|      0|            handler.on_error("chrono format specs can't be empty");
  388|      0|            return p;
  389|      0|        }
  390|      0|    }
  391|       |
  392|  30.7k|    if (p == end || *p != CharT{'%'}) {
  ------------------
  |  Branch (392:9): [True: 0, False: 30.7k]
  |  Branch (392:21): [True: 0, False: 30.7k]
  ------------------
  393|      0|        handler.on_error(
  394|      0|            "chrono format spec must start with a conversion specifier (%...)");
  395|      0|        return p;
  396|      0|    }
  397|       |
  398|  50.2k|    while (p != end) {
  ------------------
  |  Branch (398:12): [True: 31.0k, False: 19.1k]
  ------------------
  399|  31.0k|        auto ch = *p;
  400|  31.0k|        if (ch == CharT{'}'}) {
  ------------------
  |  Branch (400:13): [True: 0, False: 31.0k]
  ------------------
  401|      0|            break;
  402|      0|        }
  403|  31.0k|        if (ch != CharT{'%'}) {
  ------------------
  |  Branch (403:13): [True: 192, False: 30.9k]
  ------------------
  404|    192|            if (ch == 0x20 || (ch >= 0x09 && ch <= 0x0d)) {
  ------------------
  |  Branch (404:17): [True: 0, False: 192]
  |  Branch (404:32): [True: 192, False: 0]
  |  Branch (404:46): [True: 0, False: 192]
  ------------------
  405|       |                // Simple ASCII space
  406|      0|                handler.on_text(begin, p);
  407|      0|                handler.on_whitespace();
  408|      0|                begin = p += 1;
  409|      0|                continue;
  410|      0|            }
  411|    192|            const auto cp_len =
  412|    192|                detail::code_point_length_by_starting_code_unit(ch);
  413|    192|            if (cp_len == 0) {
  ------------------
  |  Branch (413:17): [True: 0, False: 192]
  ------------------
  414|      0|                handler.on_error("Invalid literal character");
  415|      0|                return p;
  416|      0|            }
  417|    192|            if (cp_len > 1) {
  ------------------
  |  Branch (417:17): [True: 0, False: 192]
  ------------------
  418|       |                // Multi code unit code point,
  419|       |                // possible space
  420|      0|                auto cp_start_p = p;
  421|      0|                CharT buffer[4] = {};
  422|      0|                for (std::size_t i = 0; i < cp_len; ++i) {
  ------------------
  |  Branch (422:41): [True: 0, False: 0]
  ------------------
  423|      0|                    if (p == end) {
  ------------------
  |  Branch (423:25): [True: 0, False: 0]
  ------------------
  424|      0|                        handler.on_error("Invalid literal character");
  425|      0|                        return p;
  426|      0|                    }
  427|      0|                    buffer[i] = *p;
  428|      0|                    ++p;
  429|      0|                }
  430|      0|                if (is_cp_space(decode_code_point_exhaustive(
  ------------------
  |  Branch (430:21): [True: 0, False: 0]
  ------------------
  431|      0|                        std::basic_string_view<CharT>{buffer, cp_len}))) {
  432|      0|                    handler.on_text(begin, cp_start_p);
  433|      0|                    handler.on_whitespace();
  434|      0|                    begin = p;
  435|      0|                    continue;
  436|      0|                }
  437|      0|            }
  438|    192|            ++p;
  439|    192|            continue;
  440|    192|        }
  441|  30.9k|        if (begin != p) {
  ------------------
  |  Branch (441:13): [True: 192, False: 30.7k]
  ------------------
  442|    192|            handler.on_text(begin, p);
  443|    192|        }
  444|  30.9k|        ++p;  // Consume '%'
  445|  30.9k|        if (p == end) {
  ------------------
  |  Branch (445:13): [True: 0, False: 30.9k]
  ------------------
  446|      0|            handler.on_error("Unexpected end of chrono format string");
  447|      0|            return p;
  448|      0|        }
  449|       |
  450|  30.9k|        ch = *p;
  451|  30.9k|        ++p;
  452|       |
  453|  30.9k|        switch (ch) {
  454|      0|            case CharT{'%'}:
  ------------------
  |  Branch (454:13): [True: 0, False: 30.9k]
  ------------------
  455|      0|                handler.on_text(&ch, &ch + 1);
  456|      0|                break;
  457|      0|            case CharT{'n'}:
  ------------------
  |  Branch (457:13): [True: 0, False: 30.9k]
  ------------------
  458|      0|            case CharT{'t'}:
  ------------------
  |  Branch (458:13): [True: 0, False: 30.9k]
  ------------------
  459|      0|                handler.on_whitespace();
  460|      0|                break;
  461|       |            // Year
  462|  1.66k|            case CharT{'Y'}:
  ------------------
  |  Branch (462:13): [True: 1.66k, False: 29.2k]
  ------------------
  463|  1.66k|                handler.on_full_year();
  464|  1.66k|                break;
  465|      0|            case CharT{'y'}:
  ------------------
  |  Branch (465:13): [True: 0, False: 30.9k]
  ------------------
  466|      0|                handler.on_short_year();
  467|      0|                break;
  468|      0|            case CharT{'C'}:
  ------------------
  |  Branch (468:13): [True: 0, False: 30.9k]
  ------------------
  469|      0|                handler.on_century();
  470|      0|                break;
  471|      0|            case CharT{'G'}:
  ------------------
  |  Branch (471:13): [True: 0, False: 30.9k]
  ------------------
  472|      0|                handler.on_iso_week_based_year();
  473|      0|                break;
  474|      0|            case CharT{'g'}:
  ------------------
  |  Branch (474:13): [True: 0, False: 30.9k]
  ------------------
  475|      0|                handler.on_iso_week_based_short_year();
  476|      0|                break;
  477|       |            // Month
  478|  4.46k|            case CharT{'b'}:
  ------------------
  |  Branch (478:13): [True: 4.46k, False: 26.4k]
  ------------------
  479|  4.46k|            case CharT{'B'}:
  ------------------
  |  Branch (479:13): [True: 0, False: 30.9k]
  ------------------
  480|  4.46k|            case CharT{'h'}:
  ------------------
  |  Branch (480:13): [True: 0, False: 30.9k]
  ------------------
  481|  4.46k|                handler.on_month_name();
  482|  4.46k|                break;
  483|     82|            case CharT{'m'}:
  ------------------
  |  Branch (483:13): [True: 82, False: 30.8k]
  ------------------
  484|     82|                handler.on_dec_month();
  485|     82|                break;
  486|       |            // Week
  487|      0|            case CharT{'U'}:
  ------------------
  |  Branch (487:13): [True: 0, False: 30.9k]
  ------------------
  488|      0|                handler.on_dec0_week_of_year();
  489|      0|                break;
  490|      0|            case CharT{'W'}:
  ------------------
  |  Branch (490:13): [True: 0, False: 30.9k]
  ------------------
  491|      0|                handler.on_dec1_week_of_year();
  492|      0|                break;
  493|      0|            case CharT{'V'}:
  ------------------
  |  Branch (493:13): [True: 0, False: 30.9k]
  ------------------
  494|      0|                handler.on_iso_week_of_year();
  495|      0|                break;
  496|       |            // Day of year
  497|      0|            case CharT{'j'}:
  ------------------
  |  Branch (497:13): [True: 0, False: 30.9k]
  ------------------
  498|      0|                handler.on_day_of_year();
  499|      0|                break;
  500|       |            // Day of month
  501|     60|            case CharT{'d'}:
  ------------------
  |  Branch (501:13): [True: 60, False: 30.8k]
  ------------------
  502|     60|            case CharT{'e'}:
  ------------------
  |  Branch (502:13): [True: 0, False: 30.9k]
  ------------------
  503|     60|                handler.on_day_of_month();
  504|     60|                break;
  505|       |            // Day of week
  506|  3.42k|            case CharT{'a'}:
  ------------------
  |  Branch (506:13): [True: 3.42k, False: 27.4k]
  ------------------
  507|  3.42k|            case CharT{'A'}:
  ------------------
  |  Branch (507:13): [True: 0, False: 30.9k]
  ------------------
  508|  3.42k|                handler.on_weekday_name();
  509|  3.42k|                break;
  510|      0|            case CharT{'w'}:
  ------------------
  |  Branch (510:13): [True: 0, False: 30.9k]
  ------------------
  511|      0|                handler.on_dec0_weekday();
  512|      0|                break;
  513|      0|            case CharT{'u'}:
  ------------------
  |  Branch (513:13): [True: 0, False: 30.9k]
  ------------------
  514|      0|                handler.on_dec1_weekday();
  515|      0|                break;
  516|       |            // Hour
  517|     50|            case CharT{'H'}:
  ------------------
  |  Branch (517:13): [True: 50, False: 30.8k]
  ------------------
  518|     50|            case CharT{'k'}:
  ------------------
  |  Branch (518:13): [True: 0, False: 30.9k]
  ------------------
  519|     50|                handler.on_24_hour();
  520|     50|                break;
  521|      0|            case CharT{'I'}:
  ------------------
  |  Branch (521:13): [True: 0, False: 30.9k]
  ------------------
  522|      0|            case CharT{'l'}:
  ------------------
  |  Branch (522:13): [True: 0, False: 30.9k]
  ------------------
  523|      0|                handler.on_12_hour();
  524|      0|                break;
  525|       |            // Minute
  526|      0|            case CharT{'M'}:
  ------------------
  |  Branch (526:13): [True: 0, False: 30.9k]
  ------------------
  527|      0|                handler.on_minute();
  528|      0|                break;
  529|       |            // Second
  530|      0|            case CharT{'S'}:
  ------------------
  |  Branch (530:13): [True: 0, False: 30.9k]
  ------------------
  531|      0|                handler.on_second();
  532|      0|                break;
  533|       |            // Subsecond
  534|      0|            case CharT{'.'}: {
  ------------------
  |  Branch (534:13): [True: 0, False: 30.9k]
  ------------------
  535|       |                // p already increased before the switch
  536|      0|                if (p == end) {
  ------------------
  |  Branch (536:21): [True: 0, False: 0]
  ------------------
  537|      0|                    handler.on_error("Unexpected end of chrono format string");
  538|      0|                    return p;
  539|      0|                }
  540|      0|                bool use_alternate = false;
  541|      0|                if (*p == CharT{'E'} || *p == CharT{'O'}) {
  ------------------
  |  Branch (541:21): [True: 0, False: 0]
  |  Branch (541:41): [True: 0, False: 0]
  ------------------
  542|      0|                    ++p;
  543|      0|                    if (p == end) {
  ------------------
  |  Branch (543:25): [True: 0, False: 0]
  ------------------
  544|      0|                        handler.on_error(
  545|      0|                            "Unexpected end of chrono format string");
  546|      0|                        return p;
  547|      0|                    }
  548|      0|                    use_alternate = true;
  549|      0|                }
  550|      0|                if (*p != CharT{'S'}) {
  ------------------
  |  Branch (550:21): [True: 0, False: 0]
  ------------------
  551|      0|                    handler.on_error(
  552|      0|                        "Expected `S` after `%.` in format string");
  553|      0|                    return p;
  554|      0|                }
  555|      0|                ++p;
  556|      0|                handler.on_subsecond(use_alternate
  ------------------
  |  Branch (556:38): [True: 0, False: 0]
  ------------------
  557|      0|                                         ? numeric_system::alternative_e
  558|      0|                                         : numeric_system::standard);
  559|      0|                break;
  560|      0|            }
  561|       |            // Timezones
  562|      0|            case CharT{'z'}:
  ------------------
  |  Branch (562:13): [True: 0, False: 30.9k]
  ------------------
  563|      0|                handler.on_tz_offset();
  564|      0|                break;
  565|      0|            case CharT{'Z'}:
  ------------------
  |  Branch (565:13): [True: 0, False: 30.9k]
  ------------------
  566|      0|                handler.on_tz_name();
  567|      0|                break;
  568|       |            // Other
  569|      0|            case CharT{'c'}:
  ------------------
  |  Branch (569:13): [True: 0, False: 30.9k]
  ------------------
  570|      0|                handler.on_loc_datetime();
  571|      0|                break;
  572|      0|            case CharT{'x'}:
  ------------------
  |  Branch (572:13): [True: 0, False: 30.9k]
  ------------------
  573|      0|                handler.on_loc_date();
  574|      0|                break;
  575|      0|            case CharT{'X'}:
  ------------------
  |  Branch (575:13): [True: 0, False: 30.9k]
  ------------------
  576|      0|                handler.on_loc_time();
  577|      0|                break;
  578|  5.75k|            case CharT{'D'}:
  ------------------
  |  Branch (578:13): [True: 5.75k, False: 25.1k]
  ------------------
  579|  5.75k|                handler.on_us_date();
  580|  5.75k|                break;
  581|  1.99k|            case CharT{'F'}:
  ------------------
  |  Branch (581:13): [True: 1.99k, False: 28.9k]
  ------------------
  582|  1.99k|                handler.on_iso_date();
  583|  1.99k|                break;
  584|      0|            case CharT{'r'}:
  ------------------
  |  Branch (584:13): [True: 0, False: 30.9k]
  ------------------
  585|      0|                handler.on_loc_12_hour_time();
  586|      0|                break;
  587|  10.5k|            case CharT{'R'}:
  ------------------
  |  Branch (587:13): [True: 10.5k, False: 20.3k]
  ------------------
  588|  10.5k|                handler.on_24_hour_time();
  589|  10.5k|                break;
  590|  2.84k|            case CharT{'T'}:
  ------------------
  |  Branch (590:13): [True: 2.84k, False: 28.0k]
  ------------------
  591|  2.84k|                handler.on_iso_time();
  592|  2.84k|                break;
  593|      0|            case CharT{'p'}:
  ------------------
  |  Branch (593:13): [True: 0, False: 30.9k]
  ------------------
  594|      0|            case CharT{'P'}:
  ------------------
  |  Branch (594:13): [True: 0, False: 30.9k]
  ------------------
  595|      0|                handler.on_am_pm();
  596|      0|                break;
  597|      0|            case CharT{'s'}:
  ------------------
  |  Branch (597:13): [True: 0, False: 30.9k]
  ------------------
  598|      0|                handler.on_epoch_offset();
  599|      0|                break;
  600|      0|            case CharT{'Q'}:
  ------------------
  |  Branch (600:13): [True: 0, False: 30.9k]
  ------------------
  601|      0|                handler.on_duration_tick_count();
  602|      0|                break;
  603|      0|            case CharT{'q'}:
  ------------------
  |  Branch (603:13): [True: 0, False: 30.9k]
  ------------------
  604|      0|                handler.on_duration_suffix();
  605|      0|                break;
  606|       |            // 'E'
  607|      0|            case CharT{'E'}: {
  ------------------
  |  Branch (607:13): [True: 0, False: 30.9k]
  ------------------
  608|      0|                if (p == end) {
  ------------------
  |  Branch (608:21): [True: 0, False: 0]
  ------------------
  609|      0|                    handler.on_error("Unexpected end of chrono format string");
  610|      0|                    return p;
  611|      0|                }
  612|      0|                ch = *p;
  613|      0|                ++p;
  614|       |
  615|      0|                switch (ch) {
  616|      0|                    case CharT{'c'}:
  ------------------
  |  Branch (616:21): [True: 0, False: 0]
  ------------------
  617|      0|                        handler.on_loc_datetime(numeric_system::alternative_e);
  618|      0|                        break;
  619|      0|                    case CharT{'C'}:
  ------------------
  |  Branch (619:21): [True: 0, False: 0]
  ------------------
  620|      0|                        handler.on_century(numeric_system::alternative_e);
  621|      0|                        break;
  622|      0|                    case CharT{'x'}:
  ------------------
  |  Branch (622:21): [True: 0, False: 0]
  ------------------
  623|      0|                        handler.on_loc_date(numeric_system::alternative_e);
  624|      0|                        break;
  625|      0|                    case CharT{'X'}:
  ------------------
  |  Branch (625:21): [True: 0, False: 0]
  ------------------
  626|      0|                        handler.on_loc_time(numeric_system::alternative_e);
  627|      0|                        break;
  628|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (628:21): [True: 0, False: 0]
  ------------------
  629|      0|                        handler.on_loc_offset_year();
  630|      0|                        break;
  631|      0|                    case CharT{'Y'}:
  ------------------
  |  Branch (631:21): [True: 0, False: 0]
  ------------------
  632|      0|                        handler.on_full_year(numeric_system::alternative_e);
  633|      0|                        break;
  634|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (634:21): [True: 0, False: 0]
  ------------------
  635|      0|                        handler.on_tz_offset(numeric_system::alternative_e);
  636|      0|                        break;
  637|      0|                    default:
  ------------------
  |  Branch (637:21): [True: 0, False: 0]
  ------------------
  638|      0|                        handler.on_error(
  639|      0|                            "Invalid character following 'E' in chrono format "
  640|      0|                            "string");
  641|      0|                        return p;
  642|      0|                }
  643|      0|                break;
  644|      0|            }
  645|       |            // 'O'
  646|      0|            case CharT{'O'}: {
  ------------------
  |  Branch (646:13): [True: 0, False: 30.9k]
  ------------------
  647|      0|                if (p == end) {
  ------------------
  |  Branch (647:21): [True: 0, False: 0]
  ------------------
  648|      0|                    handler.on_error("Unexpected end of chrono format string");
  649|      0|                    return p;
  650|      0|                }
  651|      0|                ch = *p;
  652|      0|                ++p;
  653|       |
  654|      0|                switch (ch) {
  655|      0|                    case CharT{'d'}:
  ------------------
  |  Branch (655:21): [True: 0, False: 0]
  ------------------
  656|      0|                    case CharT{'e'}:
  ------------------
  |  Branch (656:21): [True: 0, False: 0]
  ------------------
  657|      0|                        handler.on_day_of_month(numeric_system::alternative_o);
  658|      0|                        break;
  659|      0|                    case CharT{'H'}:
  ------------------
  |  Branch (659:21): [True: 0, False: 0]
  ------------------
  660|      0|                    case CharT{'k'}:
  ------------------
  |  Branch (660:21): [True: 0, False: 0]
  ------------------
  661|      0|                        handler.on_24_hour(numeric_system::alternative_o);
  662|      0|                        break;
  663|      0|                    case CharT{'I'}:
  ------------------
  |  Branch (663:21): [True: 0, False: 0]
  ------------------
  664|      0|                    case CharT{'l'}:
  ------------------
  |  Branch (664:21): [True: 0, False: 0]
  ------------------
  665|      0|                        handler.on_12_hour(numeric_system::alternative_o);
  666|      0|                        break;
  667|      0|                    case CharT{'m'}:
  ------------------
  |  Branch (667:21): [True: 0, False: 0]
  ------------------
  668|      0|                        handler.on_dec_month(numeric_system::alternative_o);
  669|      0|                        break;
  670|      0|                    case CharT{'M'}:
  ------------------
  |  Branch (670:21): [True: 0, False: 0]
  ------------------
  671|      0|                        handler.on_minute(numeric_system::alternative_o);
  672|      0|                        break;
  673|      0|                    case CharT{'S'}:
  ------------------
  |  Branch (673:21): [True: 0, False: 0]
  ------------------
  674|      0|                        handler.on_second(numeric_system::alternative_o);
  675|      0|                        break;
  676|      0|                    case CharT{'U'}:
  ------------------
  |  Branch (676:21): [True: 0, False: 0]
  ------------------
  677|      0|                        handler.on_dec0_week_of_year(
  678|      0|                            numeric_system::alternative_o);
  679|      0|                        break;
  680|      0|                    case CharT{'w'}:
  ------------------
  |  Branch (680:21): [True: 0, False: 0]
  ------------------
  681|      0|                        handler.on_dec0_weekday(numeric_system::alternative_o);
  682|      0|                        break;
  683|      0|                    case CharT{'W'}:
  ------------------
  |  Branch (683:21): [True: 0, False: 0]
  ------------------
  684|      0|                        handler.on_dec1_weekday(numeric_system::alternative_o);
  685|      0|                        break;
  686|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (686:21): [True: 0, False: 0]
  ------------------
  687|      0|                        handler.on_short_year(numeric_system::alternative_o);
  688|      0|                        break;
  689|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (689:21): [True: 0, False: 0]
  ------------------
  690|      0|                        handler.on_tz_offset(numeric_system::alternative_o);
  691|      0|                        break;
  692|      0|                    default:
  ------------------
  |  Branch (692:21): [True: 0, False: 0]
  ------------------
  693|      0|                        handler.on_error(
  694|      0|                            "Invalid character following 'O' in chrono format "
  695|      0|                            "string");
  696|      0|                        return p;
  697|      0|                }
  698|      0|                break;
  699|      0|            }
  700|      0|            default:
  ------------------
  |  Branch (700:13): [True: 0, False: 30.9k]
  ------------------
  701|      0|                handler.on_error("Invalid character in chrono format string");
  702|      0|                return p;
  703|  30.9k|        }
  704|  30.9k|        begin = p;
  705|       |
  706|  30.9k|        if (!handler.get_error()) {
  ------------------
  |  Branch (706:13): [True: 11.5k, False: 19.3k]
  ------------------
  707|  11.5k|            return p;
  708|  11.5k|        }
  709|  30.9k|    }
  710|  19.1k|    if (begin != p) {
  ------------------
  |  Branch (710:9): [True: 0, False: 19.1k]
  ------------------
  711|      0|        handler.on_text(begin, p);
  712|      0|    }
  713|  19.1k|    handler.verify();
  714|  19.1k|    return p;
  715|  30.7k|}
_ZN3scn2v46detail12setter_state13set_full_yearINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  768|  3.66k|    {                                                                \
  769|  3.66k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  3.66k|        field##_set = 1;                                             \
  774|  3.66k|    }
_ZN3scn2v46detail12setter_state14set_short_yearINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  768|  4.13k|    {                                                                \
  769|  4.13k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  4.13k|        field##_set = 1;                                             \
  774|  4.13k|    }
_ZN3scn2v46detail12setter_state7set_monINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  768|  7.87k|    {                                                                \
  769|  7.87k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  7.87k|        field##_set = 1;                                             \
  774|  7.87k|    }
_ZN3scn2v46detail12setter_state8set_mdayINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  768|  4.55k|    {                                                                \
  769|  4.55k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  4.55k|        field##_set = 1;                                             \
  774|  4.55k|    }
_ZN3scn2v46detail12setter_state8set_wdayINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  768|  1.76k|    {                                                                \
  769|  1.76k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  1.76k|        field##_set = 1;                                             \
  774|  1.76k|    }
_ZN3scn2v46detail12setter_state10set_hour24INS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  768|  11.0k|    {                                                                \
  769|  11.0k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  11.0k|        field##_set = 1;                                             \
  774|  11.0k|    }
_ZN3scn2v46detail12setter_state7set_minINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  768|  10.6k|    {                                                                \
  769|  10.6k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  10.6k|        field##_set = 1;                                             \
  774|  10.6k|    }
_ZN3scn2v46detail12setter_state7set_secINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  768|  1.22k|    {                                                                \
  769|  1.22k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  1.22k|        field##_set = 1;                                             \
  774|  1.22k|    }
_ZNK3scn2v46detail12setter_state6verifyINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  799|  19.1k|    {
  800|  19.1k|        if (hour24_set && hour12_set) {
  ------------------
  |  Branch (800:13): [True: 10.1k, False: 9.05k]
  |  Branch (800:27): [True: 0, False: 10.1k]
  ------------------
  801|      0|            return handler.set_error(
  802|      0|                {scan_error::invalid_format_string,
  803|      0|                 "24-hour and 12-hour clocks can't both be in use "
  804|      0|                 "simultaneously"});
  805|      0|        }
  806|  19.1k|        if (am_pm_set) {
  ------------------
  |  Branch (806:13): [True: 0, False: 19.1k]
  ------------------
  807|      0|            if (!hour12_set) {
  ------------------
  |  Branch (807:17): [True: 0, False: 0]
  ------------------
  808|      0|                return handler.set_error(
  809|      0|                    {scan_error::invalid_format_string,
  810|      0|                     "AM/PM specifier can't be set without an hour set"});
  811|      0|            }
  812|      0|            if (hour24_set) {
  ------------------
  |  Branch (812:17): [True: 0, False: 0]
  ------------------
  813|      0|                return handler.set_error(
  814|      0|                    {scan_error::invalid_format_string,
  815|      0|                     "Can't use AM/PM with a 24-hour clock"});
  816|      0|            }
  817|      0|        }
  818|  19.1k|        if (full_year_set && (century_set || short_year_set)) {
  ------------------
  |  Branch (818:13): [True: 340, False: 18.8k]
  |  Branch (818:31): [True: 0, False: 340]
  |  Branch (818:46): [True: 0, False: 340]
  ------------------
  819|      0|            return handler.set_error(
  820|      0|                {scan_error::invalid_format_string,
  821|      0|                 "full-year (%Y) can't be used together with "
  822|      0|                 "century (%C) and short-year (%y)"});
  823|      0|        }
  824|  19.1k|        if (tzoff_set && tzname_set) {
  ------------------
  |  Branch (824:13): [True: 0, False: 19.1k]
  |  Branch (824:26): [True: 0, False: 0]
  ------------------
  825|      0|            return handler.set_error(
  826|      0|                {scan_error::invalid_format_string,
  827|      0|                 "tzoff (%z) can't be used together with tzname (%Z)"});
  828|      0|        }
  829|  19.1k|        if ((wday_set || mday_set || yday_set) &&
  ------------------
  |  Branch (829:14): [True: 1.76k, False: 17.4k]
  |  Branch (829:26): [True: 4.45k, False: 12.9k]
  |  Branch (829:38): [True: 0, False: 12.9k]
  ------------------
  830|  19.1k|            !(wday_set ^ mday_set ^ yday_set)) {
  ------------------
  |  Branch (830:13): [True: 0, False: 6.22k]
  ------------------
  831|      0|            return handler.set_error(
  832|      0|                {scan_error::invalid_format_string,
  833|      0|                 "Only up to one of wday (%a/%u/%w), mday "
  834|      0|                 "(%d/%e), and yday (%j) can be set at once"});
  835|      0|        }
  836|  19.1k|    }
_ZN3scn2v46detail25parse_chrono_format_specsIcRNS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEEEEPKT_SG_SG_OT0_:
  376|  26.1k|{
  377|  26.1k|    if (begin == end || *begin == CharT{'}'}) {
  ------------------
  |  Branch (377:9): [True: 0, False: 26.1k]
  |  Branch (377:25): [True: 0, False: 26.1k]
  ------------------
  378|      0|        handler.on_error("chrono format specs can't be empty");
  379|      0|        return begin;
  380|      0|    }
  381|       |
  382|  26.1k|    auto p = begin;
  383|  26.1k|    if (*p == CharT{'L'}) {
  ------------------
  |  Branch (383:9): [True: 0, False: 26.1k]
  ------------------
  384|      0|        handler.on_localized();
  385|      0|        begin = ++p;
  386|      0|        if (p == end) {
  ------------------
  |  Branch (386:13): [True: 0, False: 0]
  ------------------
  387|      0|            handler.on_error("chrono format specs can't be empty");
  388|      0|            return p;
  389|      0|        }
  390|      0|    }
  391|       |
  392|  26.1k|    if (p == end || *p != CharT{'%'}) {
  ------------------
  |  Branch (392:9): [True: 0, False: 26.1k]
  |  Branch (392:21): [True: 0, False: 26.1k]
  ------------------
  393|      0|        handler.on_error(
  394|      0|            "chrono format spec must start with a conversion specifier (%...)");
  395|      0|        return p;
  396|      0|    }
  397|       |
  398|  40.8k|    while (p != end) {
  ------------------
  |  Branch (398:12): [True: 26.4k, False: 14.3k]
  ------------------
  399|  26.4k|        auto ch = *p;
  400|  26.4k|        if (ch == CharT{'}'}) {
  ------------------
  |  Branch (400:13): [True: 0, False: 26.4k]
  ------------------
  401|      0|            break;
  402|      0|        }
  403|  26.4k|        if (ch != CharT{'%'}) {
  ------------------
  |  Branch (403:13): [True: 186, False: 26.3k]
  ------------------
  404|    186|            if (ch == 0x20 || (ch >= 0x09 && ch <= 0x0d)) {
  ------------------
  |  Branch (404:17): [True: 0, False: 186]
  |  Branch (404:32): [True: 186, False: 0]
  |  Branch (404:46): [True: 0, False: 186]
  ------------------
  405|       |                // Simple ASCII space
  406|      0|                handler.on_text(begin, p);
  407|      0|                handler.on_whitespace();
  408|      0|                begin = p += 1;
  409|      0|                continue;
  410|      0|            }
  411|    186|            const auto cp_len =
  412|    186|                detail::code_point_length_by_starting_code_unit(ch);
  413|    186|            if (cp_len == 0) {
  ------------------
  |  Branch (413:17): [True: 0, False: 186]
  ------------------
  414|      0|                handler.on_error("Invalid literal character");
  415|      0|                return p;
  416|      0|            }
  417|    186|            if (cp_len > 1) {
  ------------------
  |  Branch (417:17): [True: 0, False: 186]
  ------------------
  418|       |                // Multi code unit code point,
  419|       |                // possible space
  420|      0|                auto cp_start_p = p;
  421|      0|                CharT buffer[4] = {};
  422|      0|                for (std::size_t i = 0; i < cp_len; ++i) {
  ------------------
  |  Branch (422:41): [True: 0, False: 0]
  ------------------
  423|      0|                    if (p == end) {
  ------------------
  |  Branch (423:25): [True: 0, False: 0]
  ------------------
  424|      0|                        handler.on_error("Invalid literal character");
  425|      0|                        return p;
  426|      0|                    }
  427|      0|                    buffer[i] = *p;
  428|      0|                    ++p;
  429|      0|                }
  430|      0|                if (is_cp_space(decode_code_point_exhaustive(
  ------------------
  |  Branch (430:21): [True: 0, False: 0]
  ------------------
  431|      0|                        std::basic_string_view<CharT>{buffer, cp_len}))) {
  432|      0|                    handler.on_text(begin, cp_start_p);
  433|      0|                    handler.on_whitespace();
  434|      0|                    begin = p;
  435|      0|                    continue;
  436|      0|                }
  437|      0|            }
  438|    186|            ++p;
  439|    186|            continue;
  440|    186|        }
  441|  26.3k|        if (begin != p) {
  ------------------
  |  Branch (441:13): [True: 186, False: 26.1k]
  ------------------
  442|    186|            handler.on_text(begin, p);
  443|    186|        }
  444|  26.3k|        ++p;  // Consume '%'
  445|  26.3k|        if (p == end) {
  ------------------
  |  Branch (445:13): [True: 0, False: 26.3k]
  ------------------
  446|      0|            handler.on_error("Unexpected end of chrono format string");
  447|      0|            return p;
  448|      0|        }
  449|       |
  450|  26.3k|        ch = *p;
  451|  26.3k|        ++p;
  452|       |
  453|  26.3k|        switch (ch) {
  454|      0|            case CharT{'%'}:
  ------------------
  |  Branch (454:13): [True: 0, False: 26.3k]
  ------------------
  455|      0|                handler.on_text(&ch, &ch + 1);
  456|      0|                break;
  457|      0|            case CharT{'n'}:
  ------------------
  |  Branch (457:13): [True: 0, False: 26.3k]
  ------------------
  458|      0|            case CharT{'t'}:
  ------------------
  |  Branch (458:13): [True: 0, False: 26.3k]
  ------------------
  459|      0|                handler.on_whitespace();
  460|      0|                break;
  461|       |            // Year
  462|  1.69k|            case CharT{'Y'}:
  ------------------
  |  Branch (462:13): [True: 1.69k, False: 24.6k]
  ------------------
  463|  1.69k|                handler.on_full_year();
  464|  1.69k|                break;
  465|      0|            case CharT{'y'}:
  ------------------
  |  Branch (465:13): [True: 0, False: 26.3k]
  ------------------
  466|      0|                handler.on_short_year();
  467|      0|                break;
  468|      0|            case CharT{'C'}:
  ------------------
  |  Branch (468:13): [True: 0, False: 26.3k]
  ------------------
  469|      0|                handler.on_century();
  470|      0|                break;
  471|      0|            case CharT{'G'}:
  ------------------
  |  Branch (471:13): [True: 0, False: 26.3k]
  ------------------
  472|      0|                handler.on_iso_week_based_year();
  473|      0|                break;
  474|      0|            case CharT{'g'}:
  ------------------
  |  Branch (474:13): [True: 0, False: 26.3k]
  ------------------
  475|      0|                handler.on_iso_week_based_short_year();
  476|      0|                break;
  477|       |            // Month
  478|  4.49k|            case CharT{'b'}:
  ------------------
  |  Branch (478:13): [True: 4.49k, False: 21.8k]
  ------------------
  479|  4.49k|            case CharT{'B'}:
  ------------------
  |  Branch (479:13): [True: 0, False: 26.3k]
  ------------------
  480|  4.49k|            case CharT{'h'}:
  ------------------
  |  Branch (480:13): [True: 0, False: 26.3k]
  ------------------
  481|  4.49k|                handler.on_month_name();
  482|  4.49k|                break;
  483|     76|            case CharT{'m'}:
  ------------------
  |  Branch (483:13): [True: 76, False: 26.2k]
  ------------------
  484|     76|                handler.on_dec_month();
  485|     76|                break;
  486|       |            // Week
  487|      0|            case CharT{'U'}:
  ------------------
  |  Branch (487:13): [True: 0, False: 26.3k]
  ------------------
  488|      0|                handler.on_dec0_week_of_year();
  489|      0|                break;
  490|      0|            case CharT{'W'}:
  ------------------
  |  Branch (490:13): [True: 0, False: 26.3k]
  ------------------
  491|      0|                handler.on_dec1_week_of_year();
  492|      0|                break;
  493|      0|            case CharT{'V'}:
  ------------------
  |  Branch (493:13): [True: 0, False: 26.3k]
  ------------------
  494|      0|                handler.on_iso_week_of_year();
  495|      0|                break;
  496|       |            // Day of year
  497|      0|            case CharT{'j'}:
  ------------------
  |  Branch (497:13): [True: 0, False: 26.3k]
  ------------------
  498|      0|                handler.on_day_of_year();
  499|      0|                break;
  500|       |            // Day of month
  501|     60|            case CharT{'d'}:
  ------------------
  |  Branch (501:13): [True: 60, False: 26.2k]
  ------------------
  502|     60|            case CharT{'e'}:
  ------------------
  |  Branch (502:13): [True: 0, False: 26.3k]
  ------------------
  503|     60|                handler.on_day_of_month();
  504|     60|                break;
  505|       |            // Day of week
  506|  3.38k|            case CharT{'a'}:
  ------------------
  |  Branch (506:13): [True: 3.38k, False: 22.9k]
  ------------------
  507|  3.38k|            case CharT{'A'}:
  ------------------
  |  Branch (507:13): [True: 0, False: 26.3k]
  ------------------
  508|  3.38k|                handler.on_weekday_name();
  509|  3.38k|                break;
  510|      0|            case CharT{'w'}:
  ------------------
  |  Branch (510:13): [True: 0, False: 26.3k]
  ------------------
  511|      0|                handler.on_dec0_weekday();
  512|      0|                break;
  513|      0|            case CharT{'u'}:
  ------------------
  |  Branch (513:13): [True: 0, False: 26.3k]
  ------------------
  514|      0|                handler.on_dec1_weekday();
  515|      0|                break;
  516|       |            // Hour
  517|     50|            case CharT{'H'}:
  ------------------
  |  Branch (517:13): [True: 50, False: 26.2k]
  ------------------
  518|     50|            case CharT{'k'}:
  ------------------
  |  Branch (518:13): [True: 0, False: 26.3k]
  ------------------
  519|     50|                handler.on_24_hour();
  520|     50|                break;
  521|      0|            case CharT{'I'}:
  ------------------
  |  Branch (521:13): [True: 0, False: 26.3k]
  ------------------
  522|      0|            case CharT{'l'}:
  ------------------
  |  Branch (522:13): [True: 0, False: 26.3k]
  ------------------
  523|      0|                handler.on_12_hour();
  524|      0|                break;
  525|       |            // Minute
  526|      0|            case CharT{'M'}:
  ------------------
  |  Branch (526:13): [True: 0, False: 26.3k]
  ------------------
  527|      0|                handler.on_minute();
  528|      0|                break;
  529|       |            // Second
  530|      0|            case CharT{'S'}:
  ------------------
  |  Branch (530:13): [True: 0, False: 26.3k]
  ------------------
  531|      0|                handler.on_second();
  532|      0|                break;
  533|       |            // Subsecond
  534|      0|            case CharT{'.'}: {
  ------------------
  |  Branch (534:13): [True: 0, False: 26.3k]
  ------------------
  535|       |                // p already increased before the switch
  536|      0|                if (p == end) {
  ------------------
  |  Branch (536:21): [True: 0, False: 0]
  ------------------
  537|      0|                    handler.on_error("Unexpected end of chrono format string");
  538|      0|                    return p;
  539|      0|                }
  540|      0|                bool use_alternate = false;
  541|      0|                if (*p == CharT{'E'} || *p == CharT{'O'}) {
  ------------------
  |  Branch (541:21): [True: 0, False: 0]
  |  Branch (541:41): [True: 0, False: 0]
  ------------------
  542|      0|                    ++p;
  543|      0|                    if (p == end) {
  ------------------
  |  Branch (543:25): [True: 0, False: 0]
  ------------------
  544|      0|                        handler.on_error(
  545|      0|                            "Unexpected end of chrono format string");
  546|      0|                        return p;
  547|      0|                    }
  548|      0|                    use_alternate = true;
  549|      0|                }
  550|      0|                if (*p != CharT{'S'}) {
  ------------------
  |  Branch (550:21): [True: 0, False: 0]
  ------------------
  551|      0|                    handler.on_error(
  552|      0|                        "Expected `S` after `%.` in format string");
  553|      0|                    return p;
  554|      0|                }
  555|      0|                ++p;
  556|      0|                handler.on_subsecond(use_alternate
  ------------------
  |  Branch (556:38): [True: 0, False: 0]
  ------------------
  557|      0|                                         ? numeric_system::alternative_e
  558|      0|                                         : numeric_system::standard);
  559|      0|                break;
  560|      0|            }
  561|       |            // Timezones
  562|      0|            case CharT{'z'}:
  ------------------
  |  Branch (562:13): [True: 0, False: 26.3k]
  ------------------
  563|      0|                handler.on_tz_offset();
  564|      0|                break;
  565|      0|            case CharT{'Z'}:
  ------------------
  |  Branch (565:13): [True: 0, False: 26.3k]
  ------------------
  566|      0|                handler.on_tz_name();
  567|      0|                break;
  568|       |            // Other
  569|      0|            case CharT{'c'}:
  ------------------
  |  Branch (569:13): [True: 0, False: 26.3k]
  ------------------
  570|      0|                handler.on_loc_datetime();
  571|      0|                break;
  572|      0|            case CharT{'x'}:
  ------------------
  |  Branch (572:13): [True: 0, False: 26.3k]
  ------------------
  573|      0|                handler.on_loc_date();
  574|      0|                break;
  575|      0|            case CharT{'X'}:
  ------------------
  |  Branch (575:13): [True: 0, False: 26.3k]
  ------------------
  576|      0|                handler.on_loc_time();
  577|      0|                break;
  578|  1.83k|            case CharT{'D'}:
  ------------------
  |  Branch (578:13): [True: 1.83k, False: 24.4k]
  ------------------
  579|  1.83k|                handler.on_us_date();
  580|  1.83k|                break;
  581|  2.02k|            case CharT{'F'}:
  ------------------
  |  Branch (581:13): [True: 2.02k, False: 24.2k]
  ------------------
  582|  2.02k|                handler.on_iso_date();
  583|  2.02k|                break;
  584|      0|            case CharT{'r'}:
  ------------------
  |  Branch (584:13): [True: 0, False: 26.3k]
  ------------------
  585|      0|                handler.on_loc_12_hour_time();
  586|      0|                break;
  587|  9.83k|            case CharT{'R'}:
  ------------------
  |  Branch (587:13): [True: 9.83k, False: 16.4k]
  ------------------
  588|  9.83k|                handler.on_24_hour_time();
  589|  9.83k|                break;
  590|  2.86k|            case CharT{'T'}:
  ------------------
  |  Branch (590:13): [True: 2.86k, False: 23.4k]
  ------------------
  591|  2.86k|                handler.on_iso_time();
  592|  2.86k|                break;
  593|      0|            case CharT{'p'}:
  ------------------
  |  Branch (593:13): [True: 0, False: 26.3k]
  ------------------
  594|      0|            case CharT{'P'}:
  ------------------
  |  Branch (594:13): [True: 0, False: 26.3k]
  ------------------
  595|      0|                handler.on_am_pm();
  596|      0|                break;
  597|      0|            case CharT{'s'}:
  ------------------
  |  Branch (597:13): [True: 0, False: 26.3k]
  ------------------
  598|      0|                handler.on_epoch_offset();
  599|      0|                break;
  600|      0|            case CharT{'Q'}:
  ------------------
  |  Branch (600:13): [True: 0, False: 26.3k]
  ------------------
  601|      0|                handler.on_duration_tick_count();
  602|      0|                break;
  603|      0|            case CharT{'q'}:
  ------------------
  |  Branch (603:13): [True: 0, False: 26.3k]
  ------------------
  604|      0|                handler.on_duration_suffix();
  605|      0|                break;
  606|       |            // 'E'
  607|      0|            case CharT{'E'}: {
  ------------------
  |  Branch (607:13): [True: 0, False: 26.3k]
  ------------------
  608|      0|                if (p == end) {
  ------------------
  |  Branch (608:21): [True: 0, False: 0]
  ------------------
  609|      0|                    handler.on_error("Unexpected end of chrono format string");
  610|      0|                    return p;
  611|      0|                }
  612|      0|                ch = *p;
  613|      0|                ++p;
  614|       |
  615|      0|                switch (ch) {
  616|      0|                    case CharT{'c'}:
  ------------------
  |  Branch (616:21): [True: 0, False: 0]
  ------------------
  617|      0|                        handler.on_loc_datetime(numeric_system::alternative_e);
  618|      0|                        break;
  619|      0|                    case CharT{'C'}:
  ------------------
  |  Branch (619:21): [True: 0, False: 0]
  ------------------
  620|      0|                        handler.on_century(numeric_system::alternative_e);
  621|      0|                        break;
  622|      0|                    case CharT{'x'}:
  ------------------
  |  Branch (622:21): [True: 0, False: 0]
  ------------------
  623|      0|                        handler.on_loc_date(numeric_system::alternative_e);
  624|      0|                        break;
  625|      0|                    case CharT{'X'}:
  ------------------
  |  Branch (625:21): [True: 0, False: 0]
  ------------------
  626|      0|                        handler.on_loc_time(numeric_system::alternative_e);
  627|      0|                        break;
  628|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (628:21): [True: 0, False: 0]
  ------------------
  629|      0|                        handler.on_loc_offset_year();
  630|      0|                        break;
  631|      0|                    case CharT{'Y'}:
  ------------------
  |  Branch (631:21): [True: 0, False: 0]
  ------------------
  632|      0|                        handler.on_full_year(numeric_system::alternative_e);
  633|      0|                        break;
  634|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (634:21): [True: 0, False: 0]
  ------------------
  635|      0|                        handler.on_tz_offset(numeric_system::alternative_e);
  636|      0|                        break;
  637|      0|                    default:
  ------------------
  |  Branch (637:21): [True: 0, False: 0]
  ------------------
  638|      0|                        handler.on_error(
  639|      0|                            "Invalid character following 'E' in chrono format "
  640|      0|                            "string");
  641|      0|                        return p;
  642|      0|                }
  643|      0|                break;
  644|      0|            }
  645|       |            // 'O'
  646|      0|            case CharT{'O'}: {
  ------------------
  |  Branch (646:13): [True: 0, False: 26.3k]
  ------------------
  647|      0|                if (p == end) {
  ------------------
  |  Branch (647:21): [True: 0, False: 0]
  ------------------
  648|      0|                    handler.on_error("Unexpected end of chrono format string");
  649|      0|                    return p;
  650|      0|                }
  651|      0|                ch = *p;
  652|      0|                ++p;
  653|       |
  654|      0|                switch (ch) {
  655|      0|                    case CharT{'d'}:
  ------------------
  |  Branch (655:21): [True: 0, False: 0]
  ------------------
  656|      0|                    case CharT{'e'}:
  ------------------
  |  Branch (656:21): [True: 0, False: 0]
  ------------------
  657|      0|                        handler.on_day_of_month(numeric_system::alternative_o);
  658|      0|                        break;
  659|      0|                    case CharT{'H'}:
  ------------------
  |  Branch (659:21): [True: 0, False: 0]
  ------------------
  660|      0|                    case CharT{'k'}:
  ------------------
  |  Branch (660:21): [True: 0, False: 0]
  ------------------
  661|      0|                        handler.on_24_hour(numeric_system::alternative_o);
  662|      0|                        break;
  663|      0|                    case CharT{'I'}:
  ------------------
  |  Branch (663:21): [True: 0, False: 0]
  ------------------
  664|      0|                    case CharT{'l'}:
  ------------------
  |  Branch (664:21): [True: 0, False: 0]
  ------------------
  665|      0|                        handler.on_12_hour(numeric_system::alternative_o);
  666|      0|                        break;
  667|      0|                    case CharT{'m'}:
  ------------------
  |  Branch (667:21): [True: 0, False: 0]
  ------------------
  668|      0|                        handler.on_dec_month(numeric_system::alternative_o);
  669|      0|                        break;
  670|      0|                    case CharT{'M'}:
  ------------------
  |  Branch (670:21): [True: 0, False: 0]
  ------------------
  671|      0|                        handler.on_minute(numeric_system::alternative_o);
  672|      0|                        break;
  673|      0|                    case CharT{'S'}:
  ------------------
  |  Branch (673:21): [True: 0, False: 0]
  ------------------
  674|      0|                        handler.on_second(numeric_system::alternative_o);
  675|      0|                        break;
  676|      0|                    case CharT{'U'}:
  ------------------
  |  Branch (676:21): [True: 0, False: 0]
  ------------------
  677|      0|                        handler.on_dec0_week_of_year(
  678|      0|                            numeric_system::alternative_o);
  679|      0|                        break;
  680|      0|                    case CharT{'w'}:
  ------------------
  |  Branch (680:21): [True: 0, False: 0]
  ------------------
  681|      0|                        handler.on_dec0_weekday(numeric_system::alternative_o);
  682|      0|                        break;
  683|      0|                    case CharT{'W'}:
  ------------------
  |  Branch (683:21): [True: 0, False: 0]
  ------------------
  684|      0|                        handler.on_dec1_weekday(numeric_system::alternative_o);
  685|      0|                        break;
  686|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (686:21): [True: 0, False: 0]
  ------------------
  687|      0|                        handler.on_short_year(numeric_system::alternative_o);
  688|      0|                        break;
  689|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (689:21): [True: 0, False: 0]
  ------------------
  690|      0|                        handler.on_tz_offset(numeric_system::alternative_o);
  691|      0|                        break;
  692|      0|                    default:
  ------------------
  |  Branch (692:21): [True: 0, False: 0]
  ------------------
  693|      0|                        handler.on_error(
  694|      0|                            "Invalid character following 'O' in chrono format "
  695|      0|                            "string");
  696|      0|                        return p;
  697|      0|                }
  698|      0|                break;
  699|      0|            }
  700|      0|            default:
  ------------------
  |  Branch (700:13): [True: 0, False: 26.3k]
  ------------------
  701|      0|                handler.on_error("Invalid character in chrono format string");
  702|      0|                return p;
  703|  26.3k|        }
  704|  26.3k|        begin = p;
  705|       |
  706|  26.3k|        if (!handler.get_error()) {
  ------------------
  |  Branch (706:13): [True: 11.7k, False: 14.5k]
  ------------------
  707|  11.7k|            return p;
  708|  11.7k|        }
  709|  26.3k|    }
  710|  14.3k|    if (begin != p) {
  ------------------
  |  Branch (710:9): [True: 0, False: 14.3k]
  ------------------
  711|      0|        handler.on_text(begin, p);
  712|      0|    }
  713|  14.3k|    handler.verify();
  714|  14.3k|    return p;
  715|  26.1k|}
_ZN3scn2v46detail12setter_state13set_full_yearINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  768|  3.71k|    {                                                                \
  769|  3.71k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  3.71k|        field##_set = 1;                                             \
  774|  3.71k|    }
_ZN3scn2v46detail12setter_state14set_short_yearINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  768|    162|    {                                                                \
  769|    162|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|    162|        field##_set = 1;                                             \
  774|    162|    }
_ZN3scn2v46detail12setter_state7set_monINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  768|  3.85k|    {                                                                \
  769|  3.85k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  3.85k|        field##_set = 1;                                             \
  774|  3.85k|    }
_ZN3scn2v46detail12setter_state8set_mdayINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  768|    578|    {                                                                \
  769|    578|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|    578|        field##_set = 1;                                             \
  774|    578|    }
_ZN3scn2v46detail12setter_state8set_wdayINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  768|  1.69k|    {                                                                \
  769|  1.69k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  1.69k|        field##_set = 1;                                             \
  774|  1.69k|    }
_ZN3scn2v46detail12setter_state10set_hour24INS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  768|  10.0k|    {                                                                \
  769|  10.0k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  10.0k|        field##_set = 1;                                             \
  774|  10.0k|    }
_ZN3scn2v46detail12setter_state7set_minINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  768|  9.87k|    {                                                                \
  769|  9.87k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  9.87k|        field##_set = 1;                                             \
  774|  9.87k|    }
_ZN3scn2v46detail12setter_state7set_secINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  768|  1.20k|    {                                                                \
  769|  1.20k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  1.20k|        field##_set = 1;                                             \
  774|  1.20k|    }
_ZNK3scn2v46detail12setter_state6verifyINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  799|  14.3k|    {
  800|  14.3k|        if (hour24_set && hour12_set) {
  ------------------
  |  Branch (800:13): [True: 9.36k, False: 5.00k]
  |  Branch (800:27): [True: 0, False: 9.36k]
  ------------------
  801|      0|            return handler.set_error(
  802|      0|                {scan_error::invalid_format_string,
  803|      0|                 "24-hour and 12-hour clocks can't both be in use "
  804|      0|                 "simultaneously"});
  805|      0|        }
  806|  14.3k|        if (am_pm_set) {
  ------------------
  |  Branch (806:13): [True: 0, False: 14.3k]
  ------------------
  807|      0|            if (!hour12_set) {
  ------------------
  |  Branch (807:17): [True: 0, False: 0]
  ------------------
  808|      0|                return handler.set_error(
  809|      0|                    {scan_error::invalid_format_string,
  810|      0|                     "AM/PM specifier can't be set without an hour set"});
  811|      0|            }
  812|      0|            if (hour24_set) {
  ------------------
  |  Branch (812:17): [True: 0, False: 0]
  ------------------
  813|      0|                return handler.set_error(
  814|      0|                    {scan_error::invalid_format_string,
  815|      0|                     "Can't use AM/PM with a 24-hour clock"});
  816|      0|            }
  817|      0|        }
  818|  14.3k|        if (full_year_set && (century_set || short_year_set)) {
  ------------------
  |  Branch (818:13): [True: 340, False: 14.0k]
  |  Branch (818:31): [True: 0, False: 340]
  |  Branch (818:46): [True: 0, False: 340]
  ------------------
  819|      0|            return handler.set_error(
  820|      0|                {scan_error::invalid_format_string,
  821|      0|                 "full-year (%Y) can't be used together with "
  822|      0|                 "century (%C) and short-year (%y)"});
  823|      0|        }
  824|  14.3k|        if (tzoff_set && tzname_set) {
  ------------------
  |  Branch (824:13): [True: 0, False: 14.3k]
  |  Branch (824:26): [True: 0, False: 0]
  ------------------
  825|      0|            return handler.set_error(
  826|      0|                {scan_error::invalid_format_string,
  827|      0|                 "tzoff (%z) can't be used together with tzname (%Z)"});
  828|      0|        }
  829|  14.3k|        if ((wday_set || mday_set || yday_set) &&
  ------------------
  |  Branch (829:14): [True: 1.69k, False: 12.6k]
  |  Branch (829:26): [True: 492, False: 12.1k]
  |  Branch (829:38): [True: 0, False: 12.1k]
  ------------------
  830|  14.3k|            !(wday_set ^ mday_set ^ yday_set)) {
  ------------------
  |  Branch (830:13): [True: 0, False: 2.19k]
  ------------------
  831|      0|            return handler.set_error(
  832|      0|                {scan_error::invalid_format_string,
  833|      0|                 "Only up to one of wday (%a/%u/%w), mday "
  834|      0|                 "(%d/%e), and yday (%j) can be set at once"});
  835|      0|        }
  836|  14.3k|    }
_ZN3scn2v46detail25parse_chrono_format_specsIcRNS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEcEEEEPKT_SI_SI_OT0_:
  376|  30.7k|{
  377|  30.7k|    if (begin == end || *begin == CharT{'}'}) {
  ------------------
  |  Branch (377:9): [True: 0, False: 30.7k]
  |  Branch (377:25): [True: 0, False: 30.7k]
  ------------------
  378|      0|        handler.on_error("chrono format specs can't be empty");
  379|      0|        return begin;
  380|      0|    }
  381|       |
  382|  30.7k|    auto p = begin;
  383|  30.7k|    if (*p == CharT{'L'}) {
  ------------------
  |  Branch (383:9): [True: 0, False: 30.7k]
  ------------------
  384|      0|        handler.on_localized();
  385|      0|        begin = ++p;
  386|      0|        if (p == end) {
  ------------------
  |  Branch (386:13): [True: 0, False: 0]
  ------------------
  387|      0|            handler.on_error("chrono format specs can't be empty");
  388|      0|            return p;
  389|      0|        }
  390|      0|    }
  391|       |
  392|  30.7k|    if (p == end || *p != CharT{'%'}) {
  ------------------
  |  Branch (392:9): [True: 0, False: 30.7k]
  |  Branch (392:21): [True: 0, False: 30.7k]
  ------------------
  393|      0|        handler.on_error(
  394|      0|            "chrono format spec must start with a conversion specifier (%...)");
  395|      0|        return p;
  396|      0|    }
  397|       |
  398|  50.2k|    while (p != end) {
  ------------------
  |  Branch (398:12): [True: 31.0k, False: 19.1k]
  ------------------
  399|  31.0k|        auto ch = *p;
  400|  31.0k|        if (ch == CharT{'}'}) {
  ------------------
  |  Branch (400:13): [True: 0, False: 31.0k]
  ------------------
  401|      0|            break;
  402|      0|        }
  403|  31.0k|        if (ch != CharT{'%'}) {
  ------------------
  |  Branch (403:13): [True: 192, False: 30.9k]
  ------------------
  404|    192|            if (ch == 0x20 || (ch >= 0x09 && ch <= 0x0d)) {
  ------------------
  |  Branch (404:17): [True: 0, False: 192]
  |  Branch (404:32): [True: 192, False: 0]
  |  Branch (404:46): [True: 0, False: 192]
  ------------------
  405|       |                // Simple ASCII space
  406|      0|                handler.on_text(begin, p);
  407|      0|                handler.on_whitespace();
  408|      0|                begin = p += 1;
  409|      0|                continue;
  410|      0|            }
  411|    192|            const auto cp_len =
  412|    192|                detail::code_point_length_by_starting_code_unit(ch);
  413|    192|            if (cp_len == 0) {
  ------------------
  |  Branch (413:17): [True: 0, False: 192]
  ------------------
  414|      0|                handler.on_error("Invalid literal character");
  415|      0|                return p;
  416|      0|            }
  417|    192|            if (cp_len > 1) {
  ------------------
  |  Branch (417:17): [True: 0, False: 192]
  ------------------
  418|       |                // Multi code unit code point,
  419|       |                // possible space
  420|      0|                auto cp_start_p = p;
  421|      0|                CharT buffer[4] = {};
  422|      0|                for (std::size_t i = 0; i < cp_len; ++i) {
  ------------------
  |  Branch (422:41): [True: 0, False: 0]
  ------------------
  423|      0|                    if (p == end) {
  ------------------
  |  Branch (423:25): [True: 0, False: 0]
  ------------------
  424|      0|                        handler.on_error("Invalid literal character");
  425|      0|                        return p;
  426|      0|                    }
  427|      0|                    buffer[i] = *p;
  428|      0|                    ++p;
  429|      0|                }
  430|      0|                if (is_cp_space(decode_code_point_exhaustive(
  ------------------
  |  Branch (430:21): [True: 0, False: 0]
  ------------------
  431|      0|                        std::basic_string_view<CharT>{buffer, cp_len}))) {
  432|      0|                    handler.on_text(begin, cp_start_p);
  433|      0|                    handler.on_whitespace();
  434|      0|                    begin = p;
  435|      0|                    continue;
  436|      0|                }
  437|      0|            }
  438|    192|            ++p;
  439|    192|            continue;
  440|    192|        }
  441|  30.9k|        if (begin != p) {
  ------------------
  |  Branch (441:13): [True: 192, False: 30.7k]
  ------------------
  442|    192|            handler.on_text(begin, p);
  443|    192|        }
  444|  30.9k|        ++p;  // Consume '%'
  445|  30.9k|        if (p == end) {
  ------------------
  |  Branch (445:13): [True: 0, False: 30.9k]
  ------------------
  446|      0|            handler.on_error("Unexpected end of chrono format string");
  447|      0|            return p;
  448|      0|        }
  449|       |
  450|  30.9k|        ch = *p;
  451|  30.9k|        ++p;
  452|       |
  453|  30.9k|        switch (ch) {
  454|      0|            case CharT{'%'}:
  ------------------
  |  Branch (454:13): [True: 0, False: 30.9k]
  ------------------
  455|      0|                handler.on_text(&ch, &ch + 1);
  456|      0|                break;
  457|      0|            case CharT{'n'}:
  ------------------
  |  Branch (457:13): [True: 0, False: 30.9k]
  ------------------
  458|      0|            case CharT{'t'}:
  ------------------
  |  Branch (458:13): [True: 0, False: 30.9k]
  ------------------
  459|      0|                handler.on_whitespace();
  460|      0|                break;
  461|       |            // Year
  462|  1.66k|            case CharT{'Y'}:
  ------------------
  |  Branch (462:13): [True: 1.66k, False: 29.2k]
  ------------------
  463|  1.66k|                handler.on_full_year();
  464|  1.66k|                break;
  465|      0|            case CharT{'y'}:
  ------------------
  |  Branch (465:13): [True: 0, False: 30.9k]
  ------------------
  466|      0|                handler.on_short_year();
  467|      0|                break;
  468|      0|            case CharT{'C'}:
  ------------------
  |  Branch (468:13): [True: 0, False: 30.9k]
  ------------------
  469|      0|                handler.on_century();
  470|      0|                break;
  471|      0|            case CharT{'G'}:
  ------------------
  |  Branch (471:13): [True: 0, False: 30.9k]
  ------------------
  472|      0|                handler.on_iso_week_based_year();
  473|      0|                break;
  474|      0|            case CharT{'g'}:
  ------------------
  |  Branch (474:13): [True: 0, False: 30.9k]
  ------------------
  475|      0|                handler.on_iso_week_based_short_year();
  476|      0|                break;
  477|       |            // Month
  478|  4.46k|            case CharT{'b'}:
  ------------------
  |  Branch (478:13): [True: 4.46k, False: 26.4k]
  ------------------
  479|  4.46k|            case CharT{'B'}:
  ------------------
  |  Branch (479:13): [True: 0, False: 30.9k]
  ------------------
  480|  4.46k|            case CharT{'h'}:
  ------------------
  |  Branch (480:13): [True: 0, False: 30.9k]
  ------------------
  481|  4.46k|                handler.on_month_name();
  482|  4.46k|                break;
  483|     82|            case CharT{'m'}:
  ------------------
  |  Branch (483:13): [True: 82, False: 30.8k]
  ------------------
  484|     82|                handler.on_dec_month();
  485|     82|                break;
  486|       |            // Week
  487|      0|            case CharT{'U'}:
  ------------------
  |  Branch (487:13): [True: 0, False: 30.9k]
  ------------------
  488|      0|                handler.on_dec0_week_of_year();
  489|      0|                break;
  490|      0|            case CharT{'W'}:
  ------------------
  |  Branch (490:13): [True: 0, False: 30.9k]
  ------------------
  491|      0|                handler.on_dec1_week_of_year();
  492|      0|                break;
  493|      0|            case CharT{'V'}:
  ------------------
  |  Branch (493:13): [True: 0, False: 30.9k]
  ------------------
  494|      0|                handler.on_iso_week_of_year();
  495|      0|                break;
  496|       |            // Day of year
  497|      0|            case CharT{'j'}:
  ------------------
  |  Branch (497:13): [True: 0, False: 30.9k]
  ------------------
  498|      0|                handler.on_day_of_year();
  499|      0|                break;
  500|       |            // Day of month
  501|     60|            case CharT{'d'}:
  ------------------
  |  Branch (501:13): [True: 60, False: 30.8k]
  ------------------
  502|     60|            case CharT{'e'}:
  ------------------
  |  Branch (502:13): [True: 0, False: 30.9k]
  ------------------
  503|     60|                handler.on_day_of_month();
  504|     60|                break;
  505|       |            // Day of week
  506|  3.42k|            case CharT{'a'}:
  ------------------
  |  Branch (506:13): [True: 3.42k, False: 27.4k]
  ------------------
  507|  3.42k|            case CharT{'A'}:
  ------------------
  |  Branch (507:13): [True: 0, False: 30.9k]
  ------------------
  508|  3.42k|                handler.on_weekday_name();
  509|  3.42k|                break;
  510|      0|            case CharT{'w'}:
  ------------------
  |  Branch (510:13): [True: 0, False: 30.9k]
  ------------------
  511|      0|                handler.on_dec0_weekday();
  512|      0|                break;
  513|      0|            case CharT{'u'}:
  ------------------
  |  Branch (513:13): [True: 0, False: 30.9k]
  ------------------
  514|      0|                handler.on_dec1_weekday();
  515|      0|                break;
  516|       |            // Hour
  517|     50|            case CharT{'H'}:
  ------------------
  |  Branch (517:13): [True: 50, False: 30.8k]
  ------------------
  518|     50|            case CharT{'k'}:
  ------------------
  |  Branch (518:13): [True: 0, False: 30.9k]
  ------------------
  519|     50|                handler.on_24_hour();
  520|     50|                break;
  521|      0|            case CharT{'I'}:
  ------------------
  |  Branch (521:13): [True: 0, False: 30.9k]
  ------------------
  522|      0|            case CharT{'l'}:
  ------------------
  |  Branch (522:13): [True: 0, False: 30.9k]
  ------------------
  523|      0|                handler.on_12_hour();
  524|      0|                break;
  525|       |            // Minute
  526|      0|            case CharT{'M'}:
  ------------------
  |  Branch (526:13): [True: 0, False: 30.9k]
  ------------------
  527|      0|                handler.on_minute();
  528|      0|                break;
  529|       |            // Second
  530|      0|            case CharT{'S'}:
  ------------------
  |  Branch (530:13): [True: 0, False: 30.9k]
  ------------------
  531|      0|                handler.on_second();
  532|      0|                break;
  533|       |            // Subsecond
  534|      0|            case CharT{'.'}: {
  ------------------
  |  Branch (534:13): [True: 0, False: 30.9k]
  ------------------
  535|       |                // p already increased before the switch
  536|      0|                if (p == end) {
  ------------------
  |  Branch (536:21): [True: 0, False: 0]
  ------------------
  537|      0|                    handler.on_error("Unexpected end of chrono format string");
  538|      0|                    return p;
  539|      0|                }
  540|      0|                bool use_alternate = false;
  541|      0|                if (*p == CharT{'E'} || *p == CharT{'O'}) {
  ------------------
  |  Branch (541:21): [True: 0, False: 0]
  |  Branch (541:41): [True: 0, False: 0]
  ------------------
  542|      0|                    ++p;
  543|      0|                    if (p == end) {
  ------------------
  |  Branch (543:25): [True: 0, False: 0]
  ------------------
  544|      0|                        handler.on_error(
  545|      0|                            "Unexpected end of chrono format string");
  546|      0|                        return p;
  547|      0|                    }
  548|      0|                    use_alternate = true;
  549|      0|                }
  550|      0|                if (*p != CharT{'S'}) {
  ------------------
  |  Branch (550:21): [True: 0, False: 0]
  ------------------
  551|      0|                    handler.on_error(
  552|      0|                        "Expected `S` after `%.` in format string");
  553|      0|                    return p;
  554|      0|                }
  555|      0|                ++p;
  556|      0|                handler.on_subsecond(use_alternate
  ------------------
  |  Branch (556:38): [True: 0, False: 0]
  ------------------
  557|      0|                                         ? numeric_system::alternative_e
  558|      0|                                         : numeric_system::standard);
  559|      0|                break;
  560|      0|            }
  561|       |            // Timezones
  562|      0|            case CharT{'z'}:
  ------------------
  |  Branch (562:13): [True: 0, False: 30.9k]
  ------------------
  563|      0|                handler.on_tz_offset();
  564|      0|                break;
  565|      0|            case CharT{'Z'}:
  ------------------
  |  Branch (565:13): [True: 0, False: 30.9k]
  ------------------
  566|      0|                handler.on_tz_name();
  567|      0|                break;
  568|       |            // Other
  569|      0|            case CharT{'c'}:
  ------------------
  |  Branch (569:13): [True: 0, False: 30.9k]
  ------------------
  570|      0|                handler.on_loc_datetime();
  571|      0|                break;
  572|      0|            case CharT{'x'}:
  ------------------
  |  Branch (572:13): [True: 0, False: 30.9k]
  ------------------
  573|      0|                handler.on_loc_date();
  574|      0|                break;
  575|      0|            case CharT{'X'}:
  ------------------
  |  Branch (575:13): [True: 0, False: 30.9k]
  ------------------
  576|      0|                handler.on_loc_time();
  577|      0|                break;
  578|  5.75k|            case CharT{'D'}:
  ------------------
  |  Branch (578:13): [True: 5.75k, False: 25.1k]
  ------------------
  579|  5.75k|                handler.on_us_date();
  580|  5.75k|                break;
  581|  1.99k|            case CharT{'F'}:
  ------------------
  |  Branch (581:13): [True: 1.99k, False: 28.9k]
  ------------------
  582|  1.99k|                handler.on_iso_date();
  583|  1.99k|                break;
  584|      0|            case CharT{'r'}:
  ------------------
  |  Branch (584:13): [True: 0, False: 30.9k]
  ------------------
  585|      0|                handler.on_loc_12_hour_time();
  586|      0|                break;
  587|  10.5k|            case CharT{'R'}:
  ------------------
  |  Branch (587:13): [True: 10.5k, False: 20.3k]
  ------------------
  588|  10.5k|                handler.on_24_hour_time();
  589|  10.5k|                break;
  590|  2.84k|            case CharT{'T'}:
  ------------------
  |  Branch (590:13): [True: 2.84k, False: 28.0k]
  ------------------
  591|  2.84k|                handler.on_iso_time();
  592|  2.84k|                break;
  593|      0|            case CharT{'p'}:
  ------------------
  |  Branch (593:13): [True: 0, False: 30.9k]
  ------------------
  594|      0|            case CharT{'P'}:
  ------------------
  |  Branch (594:13): [True: 0, False: 30.9k]
  ------------------
  595|      0|                handler.on_am_pm();
  596|      0|                break;
  597|      0|            case CharT{'s'}:
  ------------------
  |  Branch (597:13): [True: 0, False: 30.9k]
  ------------------
  598|      0|                handler.on_epoch_offset();
  599|      0|                break;
  600|      0|            case CharT{'Q'}:
  ------------------
  |  Branch (600:13): [True: 0, False: 30.9k]
  ------------------
  601|      0|                handler.on_duration_tick_count();
  602|      0|                break;
  603|      0|            case CharT{'q'}:
  ------------------
  |  Branch (603:13): [True: 0, False: 30.9k]
  ------------------
  604|      0|                handler.on_duration_suffix();
  605|      0|                break;
  606|       |            // 'E'
  607|      0|            case CharT{'E'}: {
  ------------------
  |  Branch (607:13): [True: 0, False: 30.9k]
  ------------------
  608|      0|                if (p == end) {
  ------------------
  |  Branch (608:21): [True: 0, False: 0]
  ------------------
  609|      0|                    handler.on_error("Unexpected end of chrono format string");
  610|      0|                    return p;
  611|      0|                }
  612|      0|                ch = *p;
  613|      0|                ++p;
  614|       |
  615|      0|                switch (ch) {
  616|      0|                    case CharT{'c'}:
  ------------------
  |  Branch (616:21): [True: 0, False: 0]
  ------------------
  617|      0|                        handler.on_loc_datetime(numeric_system::alternative_e);
  618|      0|                        break;
  619|      0|                    case CharT{'C'}:
  ------------------
  |  Branch (619:21): [True: 0, False: 0]
  ------------------
  620|      0|                        handler.on_century(numeric_system::alternative_e);
  621|      0|                        break;
  622|      0|                    case CharT{'x'}:
  ------------------
  |  Branch (622:21): [True: 0, False: 0]
  ------------------
  623|      0|                        handler.on_loc_date(numeric_system::alternative_e);
  624|      0|                        break;
  625|      0|                    case CharT{'X'}:
  ------------------
  |  Branch (625:21): [True: 0, False: 0]
  ------------------
  626|      0|                        handler.on_loc_time(numeric_system::alternative_e);
  627|      0|                        break;
  628|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (628:21): [True: 0, False: 0]
  ------------------
  629|      0|                        handler.on_loc_offset_year();
  630|      0|                        break;
  631|      0|                    case CharT{'Y'}:
  ------------------
  |  Branch (631:21): [True: 0, False: 0]
  ------------------
  632|      0|                        handler.on_full_year(numeric_system::alternative_e);
  633|      0|                        break;
  634|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (634:21): [True: 0, False: 0]
  ------------------
  635|      0|                        handler.on_tz_offset(numeric_system::alternative_e);
  636|      0|                        break;
  637|      0|                    default:
  ------------------
  |  Branch (637:21): [True: 0, False: 0]
  ------------------
  638|      0|                        handler.on_error(
  639|      0|                            "Invalid character following 'E' in chrono format "
  640|      0|                            "string");
  641|      0|                        return p;
  642|      0|                }
  643|      0|                break;
  644|      0|            }
  645|       |            // 'O'
  646|      0|            case CharT{'O'}: {
  ------------------
  |  Branch (646:13): [True: 0, False: 30.9k]
  ------------------
  647|      0|                if (p == end) {
  ------------------
  |  Branch (647:21): [True: 0, False: 0]
  ------------------
  648|      0|                    handler.on_error("Unexpected end of chrono format string");
  649|      0|                    return p;
  650|      0|                }
  651|      0|                ch = *p;
  652|      0|                ++p;
  653|       |
  654|      0|                switch (ch) {
  655|      0|                    case CharT{'d'}:
  ------------------
  |  Branch (655:21): [True: 0, False: 0]
  ------------------
  656|      0|                    case CharT{'e'}:
  ------------------
  |  Branch (656:21): [True: 0, False: 0]
  ------------------
  657|      0|                        handler.on_day_of_month(numeric_system::alternative_o);
  658|      0|                        break;
  659|      0|                    case CharT{'H'}:
  ------------------
  |  Branch (659:21): [True: 0, False: 0]
  ------------------
  660|      0|                    case CharT{'k'}:
  ------------------
  |  Branch (660:21): [True: 0, False: 0]
  ------------------
  661|      0|                        handler.on_24_hour(numeric_system::alternative_o);
  662|      0|                        break;
  663|      0|                    case CharT{'I'}:
  ------------------
  |  Branch (663:21): [True: 0, False: 0]
  ------------------
  664|      0|                    case CharT{'l'}:
  ------------------
  |  Branch (664:21): [True: 0, False: 0]
  ------------------
  665|      0|                        handler.on_12_hour(numeric_system::alternative_o);
  666|      0|                        break;
  667|      0|                    case CharT{'m'}:
  ------------------
  |  Branch (667:21): [True: 0, False: 0]
  ------------------
  668|      0|                        handler.on_dec_month(numeric_system::alternative_o);
  669|      0|                        break;
  670|      0|                    case CharT{'M'}:
  ------------------
  |  Branch (670:21): [True: 0, False: 0]
  ------------------
  671|      0|                        handler.on_minute(numeric_system::alternative_o);
  672|      0|                        break;
  673|      0|                    case CharT{'S'}:
  ------------------
  |  Branch (673:21): [True: 0, False: 0]
  ------------------
  674|      0|                        handler.on_second(numeric_system::alternative_o);
  675|      0|                        break;
  676|      0|                    case CharT{'U'}:
  ------------------
  |  Branch (676:21): [True: 0, False: 0]
  ------------------
  677|      0|                        handler.on_dec0_week_of_year(
  678|      0|                            numeric_system::alternative_o);
  679|      0|                        break;
  680|      0|                    case CharT{'w'}:
  ------------------
  |  Branch (680:21): [True: 0, False: 0]
  ------------------
  681|      0|                        handler.on_dec0_weekday(numeric_system::alternative_o);
  682|      0|                        break;
  683|      0|                    case CharT{'W'}:
  ------------------
  |  Branch (683:21): [True: 0, False: 0]
  ------------------
  684|      0|                        handler.on_dec1_weekday(numeric_system::alternative_o);
  685|      0|                        break;
  686|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (686:21): [True: 0, False: 0]
  ------------------
  687|      0|                        handler.on_short_year(numeric_system::alternative_o);
  688|      0|                        break;
  689|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (689:21): [True: 0, False: 0]
  ------------------
  690|      0|                        handler.on_tz_offset(numeric_system::alternative_o);
  691|      0|                        break;
  692|      0|                    default:
  ------------------
  |  Branch (692:21): [True: 0, False: 0]
  ------------------
  693|      0|                        handler.on_error(
  694|      0|                            "Invalid character following 'O' in chrono format "
  695|      0|                            "string");
  696|      0|                        return p;
  697|      0|                }
  698|      0|                break;
  699|      0|            }
  700|      0|            default:
  ------------------
  |  Branch (700:13): [True: 0, False: 30.9k]
  ------------------
  701|      0|                handler.on_error("Invalid character in chrono format string");
  702|      0|                return p;
  703|  30.9k|        }
  704|  30.9k|        begin = p;
  705|       |
  706|  30.9k|        if (!handler.get_error()) {
  ------------------
  |  Branch (706:13): [True: 11.5k, False: 19.3k]
  ------------------
  707|  11.5k|            return p;
  708|  11.5k|        }
  709|  30.9k|    }
  710|  19.1k|    if (begin != p) {
  ------------------
  |  Branch (710:9): [True: 0, False: 19.1k]
  ------------------
  711|      0|        handler.on_text(begin, p);
  712|      0|    }
  713|  19.1k|    handler.verify();
  714|  19.1k|    return p;
  715|  30.7k|}
_ZN3scn2v46detail12setter_state13set_full_yearINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  768|  3.66k|    {                                                                \
  769|  3.66k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  3.66k|        field##_set = 1;                                             \
  774|  3.66k|    }
_ZN3scn2v46detail12setter_state14set_short_yearINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  768|  5.75k|    {                                                                \
  769|  5.75k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  5.75k|        field##_set = 1;                                             \
  774|  5.75k|    }
_ZN3scn2v46detail12setter_state7set_monINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  768|  7.87k|    {                                                                \
  769|  7.87k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  7.87k|        field##_set = 1;                                             \
  774|  7.87k|    }
_ZN3scn2v46detail12setter_state8set_mdayINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  768|  4.55k|    {                                                                \
  769|  4.55k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  4.55k|        field##_set = 1;                                             \
  774|  4.55k|    }
_ZN3scn2v46detail12setter_state8set_wdayINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  768|  1.76k|    {                                                                \
  769|  1.76k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  1.76k|        field##_set = 1;                                             \
  774|  1.76k|    }
_ZN3scn2v46detail12setter_state10set_hour24INS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  768|  11.0k|    {                                                                \
  769|  11.0k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  11.0k|        field##_set = 1;                                             \
  774|  11.0k|    }
_ZN3scn2v46detail12setter_state7set_minINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  768|  10.6k|    {                                                                \
  769|  10.6k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  10.6k|        field##_set = 1;                                             \
  774|  10.6k|    }
_ZN3scn2v46detail12setter_state7set_secINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  768|  1.22k|    {                                                                \
  769|  1.22k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  1.22k|        field##_set = 1;                                             \
  774|  1.22k|    }
_ZNK3scn2v46detail12setter_state6verifyINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEcEEEEvRT_:
  799|  19.1k|    {
  800|  19.1k|        if (hour24_set && hour12_set) {
  ------------------
  |  Branch (800:13): [True: 10.1k, False: 9.05k]
  |  Branch (800:27): [True: 0, False: 10.1k]
  ------------------
  801|      0|            return handler.set_error(
  802|      0|                {scan_error::invalid_format_string,
  803|      0|                 "24-hour and 12-hour clocks can't both be in use "
  804|      0|                 "simultaneously"});
  805|      0|        }
  806|  19.1k|        if (am_pm_set) {
  ------------------
  |  Branch (806:13): [True: 0, False: 19.1k]
  ------------------
  807|      0|            if (!hour12_set) {
  ------------------
  |  Branch (807:17): [True: 0, False: 0]
  ------------------
  808|      0|                return handler.set_error(
  809|      0|                    {scan_error::invalid_format_string,
  810|      0|                     "AM/PM specifier can't be set without an hour set"});
  811|      0|            }
  812|      0|            if (hour24_set) {
  ------------------
  |  Branch (812:17): [True: 0, False: 0]
  ------------------
  813|      0|                return handler.set_error(
  814|      0|                    {scan_error::invalid_format_string,
  815|      0|                     "Can't use AM/PM with a 24-hour clock"});
  816|      0|            }
  817|      0|        }
  818|  19.1k|        if (full_year_set && (century_set || short_year_set)) {
  ------------------
  |  Branch (818:13): [True: 340, False: 18.8k]
  |  Branch (818:31): [True: 0, False: 340]
  |  Branch (818:46): [True: 0, False: 340]
  ------------------
  819|      0|            return handler.set_error(
  820|      0|                {scan_error::invalid_format_string,
  821|      0|                 "full-year (%Y) can't be used together with "
  822|      0|                 "century (%C) and short-year (%y)"});
  823|      0|        }
  824|  19.1k|        if (tzoff_set && tzname_set) {
  ------------------
  |  Branch (824:13): [True: 0, False: 19.1k]
  |  Branch (824:26): [True: 0, False: 0]
  ------------------
  825|      0|            return handler.set_error(
  826|      0|                {scan_error::invalid_format_string,
  827|      0|                 "tzoff (%z) can't be used together with tzname (%Z)"});
  828|      0|        }
  829|  19.1k|        if ((wday_set || mday_set || yday_set) &&
  ------------------
  |  Branch (829:14): [True: 1.76k, False: 17.4k]
  |  Branch (829:26): [True: 4.45k, False: 12.9k]
  |  Branch (829:38): [True: 0, False: 12.9k]
  ------------------
  830|  19.1k|            !(wday_set ^ mday_set ^ yday_set)) {
  ------------------
  |  Branch (830:13): [True: 0, False: 6.22k]
  ------------------
  831|      0|            return handler.set_error(
  832|      0|                {scan_error::invalid_format_string,
  833|      0|                 "Only up to one of wday (%a/%u/%w), mday "
  834|      0|                 "(%d/%e), and yday (%j) can be set at once"});
  835|      0|        }
  836|  19.1k|    }
_ZN3scn2v46detail25parse_chrono_format_specsIcRNS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEEEEPKT_SG_SG_OT0_:
  376|  26.1k|{
  377|  26.1k|    if (begin == end || *begin == CharT{'}'}) {
  ------------------
  |  Branch (377:9): [True: 0, False: 26.1k]
  |  Branch (377:25): [True: 0, False: 26.1k]
  ------------------
  378|      0|        handler.on_error("chrono format specs can't be empty");
  379|      0|        return begin;
  380|      0|    }
  381|       |
  382|  26.1k|    auto p = begin;
  383|  26.1k|    if (*p == CharT{'L'}) {
  ------------------
  |  Branch (383:9): [True: 0, False: 26.1k]
  ------------------
  384|      0|        handler.on_localized();
  385|      0|        begin = ++p;
  386|      0|        if (p == end) {
  ------------------
  |  Branch (386:13): [True: 0, False: 0]
  ------------------
  387|      0|            handler.on_error("chrono format specs can't be empty");
  388|      0|            return p;
  389|      0|        }
  390|      0|    }
  391|       |
  392|  26.1k|    if (p == end || *p != CharT{'%'}) {
  ------------------
  |  Branch (392:9): [True: 0, False: 26.1k]
  |  Branch (392:21): [True: 0, False: 26.1k]
  ------------------
  393|      0|        handler.on_error(
  394|      0|            "chrono format spec must start with a conversion specifier (%...)");
  395|      0|        return p;
  396|      0|    }
  397|       |
  398|  40.8k|    while (p != end) {
  ------------------
  |  Branch (398:12): [True: 26.4k, False: 14.3k]
  ------------------
  399|  26.4k|        auto ch = *p;
  400|  26.4k|        if (ch == CharT{'}'}) {
  ------------------
  |  Branch (400:13): [True: 0, False: 26.4k]
  ------------------
  401|      0|            break;
  402|      0|        }
  403|  26.4k|        if (ch != CharT{'%'}) {
  ------------------
  |  Branch (403:13): [True: 186, False: 26.3k]
  ------------------
  404|    186|            if (ch == 0x20 || (ch >= 0x09 && ch <= 0x0d)) {
  ------------------
  |  Branch (404:17): [True: 0, False: 186]
  |  Branch (404:32): [True: 186, False: 0]
  |  Branch (404:46): [True: 0, False: 186]
  ------------------
  405|       |                // Simple ASCII space
  406|      0|                handler.on_text(begin, p);
  407|      0|                handler.on_whitespace();
  408|      0|                begin = p += 1;
  409|      0|                continue;
  410|      0|            }
  411|    186|            const auto cp_len =
  412|    186|                detail::code_point_length_by_starting_code_unit(ch);
  413|    186|            if (cp_len == 0) {
  ------------------
  |  Branch (413:17): [True: 0, False: 186]
  ------------------
  414|      0|                handler.on_error("Invalid literal character");
  415|      0|                return p;
  416|      0|            }
  417|    186|            if (cp_len > 1) {
  ------------------
  |  Branch (417:17): [True: 0, False: 186]
  ------------------
  418|       |                // Multi code unit code point,
  419|       |                // possible space
  420|      0|                auto cp_start_p = p;
  421|      0|                CharT buffer[4] = {};
  422|      0|                for (std::size_t i = 0; i < cp_len; ++i) {
  ------------------
  |  Branch (422:41): [True: 0, False: 0]
  ------------------
  423|      0|                    if (p == end) {
  ------------------
  |  Branch (423:25): [True: 0, False: 0]
  ------------------
  424|      0|                        handler.on_error("Invalid literal character");
  425|      0|                        return p;
  426|      0|                    }
  427|      0|                    buffer[i] = *p;
  428|      0|                    ++p;
  429|      0|                }
  430|      0|                if (is_cp_space(decode_code_point_exhaustive(
  ------------------
  |  Branch (430:21): [True: 0, False: 0]
  ------------------
  431|      0|                        std::basic_string_view<CharT>{buffer, cp_len}))) {
  432|      0|                    handler.on_text(begin, cp_start_p);
  433|      0|                    handler.on_whitespace();
  434|      0|                    begin = p;
  435|      0|                    continue;
  436|      0|                }
  437|      0|            }
  438|    186|            ++p;
  439|    186|            continue;
  440|    186|        }
  441|  26.3k|        if (begin != p) {
  ------------------
  |  Branch (441:13): [True: 186, False: 26.1k]
  ------------------
  442|    186|            handler.on_text(begin, p);
  443|    186|        }
  444|  26.3k|        ++p;  // Consume '%'
  445|  26.3k|        if (p == end) {
  ------------------
  |  Branch (445:13): [True: 0, False: 26.3k]
  ------------------
  446|      0|            handler.on_error("Unexpected end of chrono format string");
  447|      0|            return p;
  448|      0|        }
  449|       |
  450|  26.3k|        ch = *p;
  451|  26.3k|        ++p;
  452|       |
  453|  26.3k|        switch (ch) {
  454|      0|            case CharT{'%'}:
  ------------------
  |  Branch (454:13): [True: 0, False: 26.3k]
  ------------------
  455|      0|                handler.on_text(&ch, &ch + 1);
  456|      0|                break;
  457|      0|            case CharT{'n'}:
  ------------------
  |  Branch (457:13): [True: 0, False: 26.3k]
  ------------------
  458|      0|            case CharT{'t'}:
  ------------------
  |  Branch (458:13): [True: 0, False: 26.3k]
  ------------------
  459|      0|                handler.on_whitespace();
  460|      0|                break;
  461|       |            // Year
  462|  1.69k|            case CharT{'Y'}:
  ------------------
  |  Branch (462:13): [True: 1.69k, False: 24.6k]
  ------------------
  463|  1.69k|                handler.on_full_year();
  464|  1.69k|                break;
  465|      0|            case CharT{'y'}:
  ------------------
  |  Branch (465:13): [True: 0, False: 26.3k]
  ------------------
  466|      0|                handler.on_short_year();
  467|      0|                break;
  468|      0|            case CharT{'C'}:
  ------------------
  |  Branch (468:13): [True: 0, False: 26.3k]
  ------------------
  469|      0|                handler.on_century();
  470|      0|                break;
  471|      0|            case CharT{'G'}:
  ------------------
  |  Branch (471:13): [True: 0, False: 26.3k]
  ------------------
  472|      0|                handler.on_iso_week_based_year();
  473|      0|                break;
  474|      0|            case CharT{'g'}:
  ------------------
  |  Branch (474:13): [True: 0, False: 26.3k]
  ------------------
  475|      0|                handler.on_iso_week_based_short_year();
  476|      0|                break;
  477|       |            // Month
  478|  4.49k|            case CharT{'b'}:
  ------------------
  |  Branch (478:13): [True: 4.49k, False: 21.8k]
  ------------------
  479|  4.49k|            case CharT{'B'}:
  ------------------
  |  Branch (479:13): [True: 0, False: 26.3k]
  ------------------
  480|  4.49k|            case CharT{'h'}:
  ------------------
  |  Branch (480:13): [True: 0, False: 26.3k]
  ------------------
  481|  4.49k|                handler.on_month_name();
  482|  4.49k|                break;
  483|     76|            case CharT{'m'}:
  ------------------
  |  Branch (483:13): [True: 76, False: 26.2k]
  ------------------
  484|     76|                handler.on_dec_month();
  485|     76|                break;
  486|       |            // Week
  487|      0|            case CharT{'U'}:
  ------------------
  |  Branch (487:13): [True: 0, False: 26.3k]
  ------------------
  488|      0|                handler.on_dec0_week_of_year();
  489|      0|                break;
  490|      0|            case CharT{'W'}:
  ------------------
  |  Branch (490:13): [True: 0, False: 26.3k]
  ------------------
  491|      0|                handler.on_dec1_week_of_year();
  492|      0|                break;
  493|      0|            case CharT{'V'}:
  ------------------
  |  Branch (493:13): [True: 0, False: 26.3k]
  ------------------
  494|      0|                handler.on_iso_week_of_year();
  495|      0|                break;
  496|       |            // Day of year
  497|      0|            case CharT{'j'}:
  ------------------
  |  Branch (497:13): [True: 0, False: 26.3k]
  ------------------
  498|      0|                handler.on_day_of_year();
  499|      0|                break;
  500|       |            // Day of month
  501|     60|            case CharT{'d'}:
  ------------------
  |  Branch (501:13): [True: 60, False: 26.2k]
  ------------------
  502|     60|            case CharT{'e'}:
  ------------------
  |  Branch (502:13): [True: 0, False: 26.3k]
  ------------------
  503|     60|                handler.on_day_of_month();
  504|     60|                break;
  505|       |            // Day of week
  506|  3.38k|            case CharT{'a'}:
  ------------------
  |  Branch (506:13): [True: 3.38k, False: 22.9k]
  ------------------
  507|  3.38k|            case CharT{'A'}:
  ------------------
  |  Branch (507:13): [True: 0, False: 26.3k]
  ------------------
  508|  3.38k|                handler.on_weekday_name();
  509|  3.38k|                break;
  510|      0|            case CharT{'w'}:
  ------------------
  |  Branch (510:13): [True: 0, False: 26.3k]
  ------------------
  511|      0|                handler.on_dec0_weekday();
  512|      0|                break;
  513|      0|            case CharT{'u'}:
  ------------------
  |  Branch (513:13): [True: 0, False: 26.3k]
  ------------------
  514|      0|                handler.on_dec1_weekday();
  515|      0|                break;
  516|       |            // Hour
  517|     50|            case CharT{'H'}:
  ------------------
  |  Branch (517:13): [True: 50, False: 26.2k]
  ------------------
  518|     50|            case CharT{'k'}:
  ------------------
  |  Branch (518:13): [True: 0, False: 26.3k]
  ------------------
  519|     50|                handler.on_24_hour();
  520|     50|                break;
  521|      0|            case CharT{'I'}:
  ------------------
  |  Branch (521:13): [True: 0, False: 26.3k]
  ------------------
  522|      0|            case CharT{'l'}:
  ------------------
  |  Branch (522:13): [True: 0, False: 26.3k]
  ------------------
  523|      0|                handler.on_12_hour();
  524|      0|                break;
  525|       |            // Minute
  526|      0|            case CharT{'M'}:
  ------------------
  |  Branch (526:13): [True: 0, False: 26.3k]
  ------------------
  527|      0|                handler.on_minute();
  528|      0|                break;
  529|       |            // Second
  530|      0|            case CharT{'S'}:
  ------------------
  |  Branch (530:13): [True: 0, False: 26.3k]
  ------------------
  531|      0|                handler.on_second();
  532|      0|                break;
  533|       |            // Subsecond
  534|      0|            case CharT{'.'}: {
  ------------------
  |  Branch (534:13): [True: 0, False: 26.3k]
  ------------------
  535|       |                // p already increased before the switch
  536|      0|                if (p == end) {
  ------------------
  |  Branch (536:21): [True: 0, False: 0]
  ------------------
  537|      0|                    handler.on_error("Unexpected end of chrono format string");
  538|      0|                    return p;
  539|      0|                }
  540|      0|                bool use_alternate = false;
  541|      0|                if (*p == CharT{'E'} || *p == CharT{'O'}) {
  ------------------
  |  Branch (541:21): [True: 0, False: 0]
  |  Branch (541:41): [True: 0, False: 0]
  ------------------
  542|      0|                    ++p;
  543|      0|                    if (p == end) {
  ------------------
  |  Branch (543:25): [True: 0, False: 0]
  ------------------
  544|      0|                        handler.on_error(
  545|      0|                            "Unexpected end of chrono format string");
  546|      0|                        return p;
  547|      0|                    }
  548|      0|                    use_alternate = true;
  549|      0|                }
  550|      0|                if (*p != CharT{'S'}) {
  ------------------
  |  Branch (550:21): [True: 0, False: 0]
  ------------------
  551|      0|                    handler.on_error(
  552|      0|                        "Expected `S` after `%.` in format string");
  553|      0|                    return p;
  554|      0|                }
  555|      0|                ++p;
  556|      0|                handler.on_subsecond(use_alternate
  ------------------
  |  Branch (556:38): [True: 0, False: 0]
  ------------------
  557|      0|                                         ? numeric_system::alternative_e
  558|      0|                                         : numeric_system::standard);
  559|      0|                break;
  560|      0|            }
  561|       |            // Timezones
  562|      0|            case CharT{'z'}:
  ------------------
  |  Branch (562:13): [True: 0, False: 26.3k]
  ------------------
  563|      0|                handler.on_tz_offset();
  564|      0|                break;
  565|      0|            case CharT{'Z'}:
  ------------------
  |  Branch (565:13): [True: 0, False: 26.3k]
  ------------------
  566|      0|                handler.on_tz_name();
  567|      0|                break;
  568|       |            // Other
  569|      0|            case CharT{'c'}:
  ------------------
  |  Branch (569:13): [True: 0, False: 26.3k]
  ------------------
  570|      0|                handler.on_loc_datetime();
  571|      0|                break;
  572|      0|            case CharT{'x'}:
  ------------------
  |  Branch (572:13): [True: 0, False: 26.3k]
  ------------------
  573|      0|                handler.on_loc_date();
  574|      0|                break;
  575|      0|            case CharT{'X'}:
  ------------------
  |  Branch (575:13): [True: 0, False: 26.3k]
  ------------------
  576|      0|                handler.on_loc_time();
  577|      0|                break;
  578|  1.83k|            case CharT{'D'}:
  ------------------
  |  Branch (578:13): [True: 1.83k, False: 24.4k]
  ------------------
  579|  1.83k|                handler.on_us_date();
  580|  1.83k|                break;
  581|  2.02k|            case CharT{'F'}:
  ------------------
  |  Branch (581:13): [True: 2.02k, False: 24.2k]
  ------------------
  582|  2.02k|                handler.on_iso_date();
  583|  2.02k|                break;
  584|      0|            case CharT{'r'}:
  ------------------
  |  Branch (584:13): [True: 0, False: 26.3k]
  ------------------
  585|      0|                handler.on_loc_12_hour_time();
  586|      0|                break;
  587|  9.83k|            case CharT{'R'}:
  ------------------
  |  Branch (587:13): [True: 9.83k, False: 16.4k]
  ------------------
  588|  9.83k|                handler.on_24_hour_time();
  589|  9.83k|                break;
  590|  2.86k|            case CharT{'T'}:
  ------------------
  |  Branch (590:13): [True: 2.86k, False: 23.4k]
  ------------------
  591|  2.86k|                handler.on_iso_time();
  592|  2.86k|                break;
  593|      0|            case CharT{'p'}:
  ------------------
  |  Branch (593:13): [True: 0, False: 26.3k]
  ------------------
  594|      0|            case CharT{'P'}:
  ------------------
  |  Branch (594:13): [True: 0, False: 26.3k]
  ------------------
  595|      0|                handler.on_am_pm();
  596|      0|                break;
  597|      0|            case CharT{'s'}:
  ------------------
  |  Branch (597:13): [True: 0, False: 26.3k]
  ------------------
  598|      0|                handler.on_epoch_offset();
  599|      0|                break;
  600|      0|            case CharT{'Q'}:
  ------------------
  |  Branch (600:13): [True: 0, False: 26.3k]
  ------------------
  601|      0|                handler.on_duration_tick_count();
  602|      0|                break;
  603|      0|            case CharT{'q'}:
  ------------------
  |  Branch (603:13): [True: 0, False: 26.3k]
  ------------------
  604|      0|                handler.on_duration_suffix();
  605|      0|                break;
  606|       |            // 'E'
  607|      0|            case CharT{'E'}: {
  ------------------
  |  Branch (607:13): [True: 0, False: 26.3k]
  ------------------
  608|      0|                if (p == end) {
  ------------------
  |  Branch (608:21): [True: 0, False: 0]
  ------------------
  609|      0|                    handler.on_error("Unexpected end of chrono format string");
  610|      0|                    return p;
  611|      0|                }
  612|      0|                ch = *p;
  613|      0|                ++p;
  614|       |
  615|      0|                switch (ch) {
  616|      0|                    case CharT{'c'}:
  ------------------
  |  Branch (616:21): [True: 0, False: 0]
  ------------------
  617|      0|                        handler.on_loc_datetime(numeric_system::alternative_e);
  618|      0|                        break;
  619|      0|                    case CharT{'C'}:
  ------------------
  |  Branch (619:21): [True: 0, False: 0]
  ------------------
  620|      0|                        handler.on_century(numeric_system::alternative_e);
  621|      0|                        break;
  622|      0|                    case CharT{'x'}:
  ------------------
  |  Branch (622:21): [True: 0, False: 0]
  ------------------
  623|      0|                        handler.on_loc_date(numeric_system::alternative_e);
  624|      0|                        break;
  625|      0|                    case CharT{'X'}:
  ------------------
  |  Branch (625:21): [True: 0, False: 0]
  ------------------
  626|      0|                        handler.on_loc_time(numeric_system::alternative_e);
  627|      0|                        break;
  628|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (628:21): [True: 0, False: 0]
  ------------------
  629|      0|                        handler.on_loc_offset_year();
  630|      0|                        break;
  631|      0|                    case CharT{'Y'}:
  ------------------
  |  Branch (631:21): [True: 0, False: 0]
  ------------------
  632|      0|                        handler.on_full_year(numeric_system::alternative_e);
  633|      0|                        break;
  634|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (634:21): [True: 0, False: 0]
  ------------------
  635|      0|                        handler.on_tz_offset(numeric_system::alternative_e);
  636|      0|                        break;
  637|      0|                    default:
  ------------------
  |  Branch (637:21): [True: 0, False: 0]
  ------------------
  638|      0|                        handler.on_error(
  639|      0|                            "Invalid character following 'E' in chrono format "
  640|      0|                            "string");
  641|      0|                        return p;
  642|      0|                }
  643|      0|                break;
  644|      0|            }
  645|       |            // 'O'
  646|      0|            case CharT{'O'}: {
  ------------------
  |  Branch (646:13): [True: 0, False: 26.3k]
  ------------------
  647|      0|                if (p == end) {
  ------------------
  |  Branch (647:21): [True: 0, False: 0]
  ------------------
  648|      0|                    handler.on_error("Unexpected end of chrono format string");
  649|      0|                    return p;
  650|      0|                }
  651|      0|                ch = *p;
  652|      0|                ++p;
  653|       |
  654|      0|                switch (ch) {
  655|      0|                    case CharT{'d'}:
  ------------------
  |  Branch (655:21): [True: 0, False: 0]
  ------------------
  656|      0|                    case CharT{'e'}:
  ------------------
  |  Branch (656:21): [True: 0, False: 0]
  ------------------
  657|      0|                        handler.on_day_of_month(numeric_system::alternative_o);
  658|      0|                        break;
  659|      0|                    case CharT{'H'}:
  ------------------
  |  Branch (659:21): [True: 0, False: 0]
  ------------------
  660|      0|                    case CharT{'k'}:
  ------------------
  |  Branch (660:21): [True: 0, False: 0]
  ------------------
  661|      0|                        handler.on_24_hour(numeric_system::alternative_o);
  662|      0|                        break;
  663|      0|                    case CharT{'I'}:
  ------------------
  |  Branch (663:21): [True: 0, False: 0]
  ------------------
  664|      0|                    case CharT{'l'}:
  ------------------
  |  Branch (664:21): [True: 0, False: 0]
  ------------------
  665|      0|                        handler.on_12_hour(numeric_system::alternative_o);
  666|      0|                        break;
  667|      0|                    case CharT{'m'}:
  ------------------
  |  Branch (667:21): [True: 0, False: 0]
  ------------------
  668|      0|                        handler.on_dec_month(numeric_system::alternative_o);
  669|      0|                        break;
  670|      0|                    case CharT{'M'}:
  ------------------
  |  Branch (670:21): [True: 0, False: 0]
  ------------------
  671|      0|                        handler.on_minute(numeric_system::alternative_o);
  672|      0|                        break;
  673|      0|                    case CharT{'S'}:
  ------------------
  |  Branch (673:21): [True: 0, False: 0]
  ------------------
  674|      0|                        handler.on_second(numeric_system::alternative_o);
  675|      0|                        break;
  676|      0|                    case CharT{'U'}:
  ------------------
  |  Branch (676:21): [True: 0, False: 0]
  ------------------
  677|      0|                        handler.on_dec0_week_of_year(
  678|      0|                            numeric_system::alternative_o);
  679|      0|                        break;
  680|      0|                    case CharT{'w'}:
  ------------------
  |  Branch (680:21): [True: 0, False: 0]
  ------------------
  681|      0|                        handler.on_dec0_weekday(numeric_system::alternative_o);
  682|      0|                        break;
  683|      0|                    case CharT{'W'}:
  ------------------
  |  Branch (683:21): [True: 0, False: 0]
  ------------------
  684|      0|                        handler.on_dec1_weekday(numeric_system::alternative_o);
  685|      0|                        break;
  686|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (686:21): [True: 0, False: 0]
  ------------------
  687|      0|                        handler.on_short_year(numeric_system::alternative_o);
  688|      0|                        break;
  689|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (689:21): [True: 0, False: 0]
  ------------------
  690|      0|                        handler.on_tz_offset(numeric_system::alternative_o);
  691|      0|                        break;
  692|      0|                    default:
  ------------------
  |  Branch (692:21): [True: 0, False: 0]
  ------------------
  693|      0|                        handler.on_error(
  694|      0|                            "Invalid character following 'O' in chrono format "
  695|      0|                            "string");
  696|      0|                        return p;
  697|      0|                }
  698|      0|                break;
  699|      0|            }
  700|      0|            default:
  ------------------
  |  Branch (700:13): [True: 0, False: 26.3k]
  ------------------
  701|      0|                handler.on_error("Invalid character in chrono format string");
  702|      0|                return p;
  703|  26.3k|        }
  704|  26.3k|        begin = p;
  705|       |
  706|  26.3k|        if (!handler.get_error()) {
  ------------------
  |  Branch (706:13): [True: 11.7k, False: 14.5k]
  ------------------
  707|  11.7k|            return p;
  708|  11.7k|        }
  709|  26.3k|    }
  710|  14.3k|    if (begin != p) {
  ------------------
  |  Branch (710:9): [True: 0, False: 14.3k]
  ------------------
  711|      0|        handler.on_text(begin, p);
  712|      0|    }
  713|  14.3k|    handler.verify();
  714|  14.3k|    return p;
  715|  26.1k|}
_ZN3scn2v46detail12setter_state13set_full_yearINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  768|  3.71k|    {                                                                \
  769|  3.71k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  3.71k|        field##_set = 1;                                             \
  774|  3.71k|    }
_ZN3scn2v46detail12setter_state14set_short_yearINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  768|  1.83k|    {                                                                \
  769|  1.83k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  1.83k|        field##_set = 1;                                             \
  774|  1.83k|    }
_ZN3scn2v46detail12setter_state7set_monINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  768|  3.85k|    {                                                                \
  769|  3.85k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  3.85k|        field##_set = 1;                                             \
  774|  3.85k|    }
_ZN3scn2v46detail12setter_state8set_mdayINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  768|    578|    {                                                                \
  769|    578|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|    578|        field##_set = 1;                                             \
  774|    578|    }
_ZN3scn2v46detail12setter_state8set_wdayINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  768|  1.69k|    {                                                                \
  769|  1.69k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  1.69k|        field##_set = 1;                                             \
  774|  1.69k|    }
_ZN3scn2v46detail12setter_state10set_hour24INS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  768|  10.0k|    {                                                                \
  769|  10.0k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  10.0k|        field##_set = 1;                                             \
  774|  10.0k|    }
_ZN3scn2v46detail12setter_state7set_minINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  768|  9.87k|    {                                                                \
  769|  9.87k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  9.87k|        field##_set = 1;                                             \
  774|  9.87k|    }
_ZN3scn2v46detail12setter_state7set_secINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  768|  1.20k|    {                                                                \
  769|  1.20k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  1.20k|        field##_set = 1;                                             \
  774|  1.20k|    }
_ZNK3scn2v46detail12setter_state6verifyINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEvRT_:
  799|  14.3k|    {
  800|  14.3k|        if (hour24_set && hour12_set) {
  ------------------
  |  Branch (800:13): [True: 9.36k, False: 5.00k]
  |  Branch (800:27): [True: 0, False: 9.36k]
  ------------------
  801|      0|            return handler.set_error(
  802|      0|                {scan_error::invalid_format_string,
  803|      0|                 "24-hour and 12-hour clocks can't both be in use "
  804|      0|                 "simultaneously"});
  805|      0|        }
  806|  14.3k|        if (am_pm_set) {
  ------------------
  |  Branch (806:13): [True: 0, False: 14.3k]
  ------------------
  807|      0|            if (!hour12_set) {
  ------------------
  |  Branch (807:17): [True: 0, False: 0]
  ------------------
  808|      0|                return handler.set_error(
  809|      0|                    {scan_error::invalid_format_string,
  810|      0|                     "AM/PM specifier can't be set without an hour set"});
  811|      0|            }
  812|      0|            if (hour24_set) {
  ------------------
  |  Branch (812:17): [True: 0, False: 0]
  ------------------
  813|      0|                return handler.set_error(
  814|      0|                    {scan_error::invalid_format_string,
  815|      0|                     "Can't use AM/PM with a 24-hour clock"});
  816|      0|            }
  817|      0|        }
  818|  14.3k|        if (full_year_set && (century_set || short_year_set)) {
  ------------------
  |  Branch (818:13): [True: 340, False: 14.0k]
  |  Branch (818:31): [True: 0, False: 340]
  |  Branch (818:46): [True: 0, False: 340]
  ------------------
  819|      0|            return handler.set_error(
  820|      0|                {scan_error::invalid_format_string,
  821|      0|                 "full-year (%Y) can't be used together with "
  822|      0|                 "century (%C) and short-year (%y)"});
  823|      0|        }
  824|  14.3k|        if (tzoff_set && tzname_set) {
  ------------------
  |  Branch (824:13): [True: 0, False: 14.3k]
  |  Branch (824:26): [True: 0, False: 0]
  ------------------
  825|      0|            return handler.set_error(
  826|      0|                {scan_error::invalid_format_string,
  827|      0|                 "tzoff (%z) can't be used together with tzname (%Z)"});
  828|      0|        }
  829|  14.3k|        if ((wday_set || mday_set || yday_set) &&
  ------------------
  |  Branch (829:14): [True: 1.69k, False: 12.6k]
  |  Branch (829:26): [True: 492, False: 12.1k]
  |  Branch (829:38): [True: 0, False: 12.1k]
  ------------------
  830|  14.3k|            !(wday_set ^ mday_set ^ yday_set)) {
  ------------------
  |  Branch (830:13): [True: 0, False: 2.19k]
  ------------------
  831|      0|            return handler.set_error(
  832|      0|                {scan_error::invalid_format_string,
  833|      0|                 "Only up to one of wday (%a/%u/%w), mday "
  834|      0|                 "(%d/%e), and yday (%j) can be set at once"});
  835|      0|        }
  836|  14.3k|    }
_ZN3scn2v46detail25parse_chrono_format_specsIwRNS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEwEEEEPKT_SI_SI_OT0_:
  376|  30.7k|{
  377|  30.7k|    if (begin == end || *begin == CharT{'}'}) {
  ------------------
  |  Branch (377:9): [True: 0, False: 30.7k]
  |  Branch (377:25): [True: 0, False: 30.7k]
  ------------------
  378|      0|        handler.on_error("chrono format specs can't be empty");
  379|      0|        return begin;
  380|      0|    }
  381|       |
  382|  30.7k|    auto p = begin;
  383|  30.7k|    if (*p == CharT{'L'}) {
  ------------------
  |  Branch (383:9): [True: 0, False: 30.7k]
  ------------------
  384|      0|        handler.on_localized();
  385|      0|        begin = ++p;
  386|      0|        if (p == end) {
  ------------------
  |  Branch (386:13): [True: 0, False: 0]
  ------------------
  387|      0|            handler.on_error("chrono format specs can't be empty");
  388|      0|            return p;
  389|      0|        }
  390|      0|    }
  391|       |
  392|  30.7k|    if (p == end || *p != CharT{'%'}) {
  ------------------
  |  Branch (392:9): [True: 0, False: 30.7k]
  |  Branch (392:21): [True: 0, False: 30.7k]
  ------------------
  393|      0|        handler.on_error(
  394|      0|            "chrono format spec must start with a conversion specifier (%...)");
  395|      0|        return p;
  396|      0|    }
  397|       |
  398|  38.0k|    while (p != end) {
  ------------------
  |  Branch (398:12): [True: 30.9k, False: 7.13k]
  ------------------
  399|  30.9k|        auto ch = *p;
  400|  30.9k|        if (ch == CharT{'}'}) {
  ------------------
  |  Branch (400:13): [True: 0, False: 30.9k]
  ------------------
  401|      0|            break;
  402|      0|        }
  403|  30.9k|        if (ch != CharT{'%'}) {
  ------------------
  |  Branch (403:13): [True: 70, False: 30.8k]
  ------------------
  404|     70|            if (ch == 0x20 || (ch >= 0x09 && ch <= 0x0d)) {
  ------------------
  |  Branch (404:17): [True: 0, False: 70]
  |  Branch (404:32): [True: 70, False: 0]
  |  Branch (404:46): [True: 0, False: 70]
  ------------------
  405|       |                // Simple ASCII space
  406|      0|                handler.on_text(begin, p);
  407|      0|                handler.on_whitespace();
  408|      0|                begin = p += 1;
  409|      0|                continue;
  410|      0|            }
  411|     70|            const auto cp_len =
  412|     70|                detail::code_point_length_by_starting_code_unit(ch);
  413|     70|            if (cp_len == 0) {
  ------------------
  |  Branch (413:17): [True: 0, False: 70]
  ------------------
  414|      0|                handler.on_error("Invalid literal character");
  415|      0|                return p;
  416|      0|            }
  417|     70|            if (cp_len > 1) {
  ------------------
  |  Branch (417:17): [True: 0, False: 70]
  ------------------
  418|       |                // Multi code unit code point,
  419|       |                // possible space
  420|      0|                auto cp_start_p = p;
  421|      0|                CharT buffer[4] = {};
  422|      0|                for (std::size_t i = 0; i < cp_len; ++i) {
  ------------------
  |  Branch (422:41): [True: 0, False: 0]
  ------------------
  423|      0|                    if (p == end) {
  ------------------
  |  Branch (423:25): [True: 0, False: 0]
  ------------------
  424|      0|                        handler.on_error("Invalid literal character");
  425|      0|                        return p;
  426|      0|                    }
  427|      0|                    buffer[i] = *p;
  428|      0|                    ++p;
  429|      0|                }
  430|      0|                if (is_cp_space(decode_code_point_exhaustive(
  ------------------
  |  Branch (430:21): [True: 0, False: 0]
  ------------------
  431|      0|                        std::basic_string_view<CharT>{buffer, cp_len}))) {
  432|      0|                    handler.on_text(begin, cp_start_p);
  433|      0|                    handler.on_whitespace();
  434|      0|                    begin = p;
  435|      0|                    continue;
  436|      0|                }
  437|      0|            }
  438|     70|            ++p;
  439|     70|            continue;
  440|     70|        }
  441|  30.8k|        if (begin != p) {
  ------------------
  |  Branch (441:13): [True: 70, False: 30.7k]
  ------------------
  442|     70|            handler.on_text(begin, p);
  443|     70|        }
  444|  30.8k|        ++p;  // Consume '%'
  445|  30.8k|        if (p == end) {
  ------------------
  |  Branch (445:13): [True: 0, False: 30.8k]
  ------------------
  446|      0|            handler.on_error("Unexpected end of chrono format string");
  447|      0|            return p;
  448|      0|        }
  449|       |
  450|  30.8k|        ch = *p;
  451|  30.8k|        ++p;
  452|       |
  453|  30.8k|        switch (ch) {
  454|      0|            case CharT{'%'}:
  ------------------
  |  Branch (454:13): [True: 0, False: 30.8k]
  ------------------
  455|      0|                handler.on_text(&ch, &ch + 1);
  456|      0|                break;
  457|      0|            case CharT{'n'}:
  ------------------
  |  Branch (457:13): [True: 0, False: 30.8k]
  ------------------
  458|      0|            case CharT{'t'}:
  ------------------
  |  Branch (458:13): [True: 0, False: 30.8k]
  ------------------
  459|      0|                handler.on_whitespace();
  460|      0|                break;
  461|       |            // Year
  462|  3.38k|            case CharT{'Y'}:
  ------------------
  |  Branch (462:13): [True: 3.38k, False: 27.4k]
  ------------------
  463|  3.38k|                handler.on_full_year();
  464|  3.38k|                break;
  465|      0|            case CharT{'y'}:
  ------------------
  |  Branch (465:13): [True: 0, False: 30.8k]
  ------------------
  466|      0|                handler.on_short_year();
  467|      0|                break;
  468|      0|            case CharT{'C'}:
  ------------------
  |  Branch (468:13): [True: 0, False: 30.8k]
  ------------------
  469|      0|                handler.on_century();
  470|      0|                break;
  471|      0|            case CharT{'G'}:
  ------------------
  |  Branch (471:13): [True: 0, False: 30.8k]
  ------------------
  472|      0|                handler.on_iso_week_based_year();
  473|      0|                break;
  474|      0|            case CharT{'g'}:
  ------------------
  |  Branch (474:13): [True: 0, False: 30.8k]
  ------------------
  475|      0|                handler.on_iso_week_based_short_year();
  476|      0|                break;
  477|       |            // Month
  478|  4.03k|            case CharT{'b'}:
  ------------------
  |  Branch (478:13): [True: 4.03k, False: 26.7k]
  ------------------
  479|  4.03k|            case CharT{'B'}:
  ------------------
  |  Branch (479:13): [True: 0, False: 30.8k]
  ------------------
  480|  4.03k|            case CharT{'h'}:
  ------------------
  |  Branch (480:13): [True: 0, False: 30.8k]
  ------------------
  481|  4.03k|                handler.on_month_name();
  482|  4.03k|                break;
  483|     38|            case CharT{'m'}:
  ------------------
  |  Branch (483:13): [True: 38, False: 30.7k]
  ------------------
  484|     38|                handler.on_dec_month();
  485|     38|                break;
  486|       |            // Week
  487|      0|            case CharT{'U'}:
  ------------------
  |  Branch (487:13): [True: 0, False: 30.8k]
  ------------------
  488|      0|                handler.on_dec0_week_of_year();
  489|      0|                break;
  490|      0|            case CharT{'W'}:
  ------------------
  |  Branch (490:13): [True: 0, False: 30.8k]
  ------------------
  491|      0|                handler.on_dec1_week_of_year();
  492|      0|                break;
  493|      0|            case CharT{'V'}:
  ------------------
  |  Branch (493:13): [True: 0, False: 30.8k]
  ------------------
  494|      0|                handler.on_iso_week_of_year();
  495|      0|                break;
  496|       |            // Day of year
  497|      0|            case CharT{'j'}:
  ------------------
  |  Branch (497:13): [True: 0, False: 30.8k]
  ------------------
  498|      0|                handler.on_day_of_year();
  499|      0|                break;
  500|       |            // Day of month
  501|     20|            case CharT{'d'}:
  ------------------
  |  Branch (501:13): [True: 20, False: 30.8k]
  ------------------
  502|     20|            case CharT{'e'}:
  ------------------
  |  Branch (502:13): [True: 0, False: 30.8k]
  ------------------
  503|     20|                handler.on_day_of_month();
  504|     20|                break;
  505|       |            // Day of week
  506|  3.38k|            case CharT{'a'}:
  ------------------
  |  Branch (506:13): [True: 3.38k, False: 27.4k]
  ------------------
  507|  3.38k|            case CharT{'A'}:
  ------------------
  |  Branch (507:13): [True: 0, False: 30.8k]
  ------------------
  508|  3.38k|                handler.on_weekday_name();
  509|  3.38k|                break;
  510|      0|            case CharT{'w'}:
  ------------------
  |  Branch (510:13): [True: 0, False: 30.8k]
  ------------------
  511|      0|                handler.on_dec0_weekday();
  512|      0|                break;
  513|      0|            case CharT{'u'}:
  ------------------
  |  Branch (513:13): [True: 0, False: 30.8k]
  ------------------
  514|      0|                handler.on_dec1_weekday();
  515|      0|                break;
  516|       |            // Hour
  517|     12|            case CharT{'H'}:
  ------------------
  |  Branch (517:13): [True: 12, False: 30.8k]
  ------------------
  518|     12|            case CharT{'k'}:
  ------------------
  |  Branch (518:13): [True: 0, False: 30.8k]
  ------------------
  519|     12|                handler.on_24_hour();
  520|     12|                break;
  521|      0|            case CharT{'I'}:
  ------------------
  |  Branch (521:13): [True: 0, False: 30.8k]
  ------------------
  522|      0|            case CharT{'l'}:
  ------------------
  |  Branch (522:13): [True: 0, False: 30.8k]
  ------------------
  523|      0|                handler.on_12_hour();
  524|      0|                break;
  525|       |            // Minute
  526|      0|            case CharT{'M'}:
  ------------------
  |  Branch (526:13): [True: 0, False: 30.8k]
  ------------------
  527|      0|                handler.on_minute();
  528|      0|                break;
  529|       |            // Second
  530|      0|            case CharT{'S'}:
  ------------------
  |  Branch (530:13): [True: 0, False: 30.8k]
  ------------------
  531|      0|                handler.on_second();
  532|      0|                break;
  533|       |            // Subsecond
  534|      0|            case CharT{'.'}: {
  ------------------
  |  Branch (534:13): [True: 0, False: 30.8k]
  ------------------
  535|       |                // p already increased before the switch
  536|      0|                if (p == end) {
  ------------------
  |  Branch (536:21): [True: 0, False: 0]
  ------------------
  537|      0|                    handler.on_error("Unexpected end of chrono format string");
  538|      0|                    return p;
  539|      0|                }
  540|      0|                bool use_alternate = false;
  541|      0|                if (*p == CharT{'E'} || *p == CharT{'O'}) {
  ------------------
  |  Branch (541:21): [True: 0, False: 0]
  |  Branch (541:41): [True: 0, False: 0]
  ------------------
  542|      0|                    ++p;
  543|      0|                    if (p == end) {
  ------------------
  |  Branch (543:25): [True: 0, False: 0]
  ------------------
  544|      0|                        handler.on_error(
  545|      0|                            "Unexpected end of chrono format string");
  546|      0|                        return p;
  547|      0|                    }
  548|      0|                    use_alternate = true;
  549|      0|                }
  550|      0|                if (*p != CharT{'S'}) {
  ------------------
  |  Branch (550:21): [True: 0, False: 0]
  ------------------
  551|      0|                    handler.on_error(
  552|      0|                        "Expected `S` after `%.` in format string");
  553|      0|                    return p;
  554|      0|                }
  555|      0|                ++p;
  556|      0|                handler.on_subsecond(use_alternate
  ------------------
  |  Branch (556:38): [True: 0, False: 0]
  ------------------
  557|      0|                                         ? numeric_system::alternative_e
  558|      0|                                         : numeric_system::standard);
  559|      0|                break;
  560|      0|            }
  561|       |            // Timezones
  562|      0|            case CharT{'z'}:
  ------------------
  |  Branch (562:13): [True: 0, False: 30.8k]
  ------------------
  563|      0|                handler.on_tz_offset();
  564|      0|                break;
  565|      0|            case CharT{'Z'}:
  ------------------
  |  Branch (565:13): [True: 0, False: 30.8k]
  ------------------
  566|      0|                handler.on_tz_name();
  567|      0|                break;
  568|       |            // Other
  569|      0|            case CharT{'c'}:
  ------------------
  |  Branch (569:13): [True: 0, False: 30.8k]
  ------------------
  570|      0|                handler.on_loc_datetime();
  571|      0|                break;
  572|      0|            case CharT{'x'}:
  ------------------
  |  Branch (572:13): [True: 0, False: 30.8k]
  ------------------
  573|      0|                handler.on_loc_date();
  574|      0|                break;
  575|      0|            case CharT{'X'}:
  ------------------
  |  Branch (575:13): [True: 0, False: 30.8k]
  ------------------
  576|      0|                handler.on_loc_time();
  577|      0|                break;
  578|  3.39k|            case CharT{'D'}:
  ------------------
  |  Branch (578:13): [True: 3.39k, False: 27.4k]
  ------------------
  579|  3.39k|                handler.on_us_date();
  580|  3.39k|                break;
  581|  3.39k|            case CharT{'F'}:
  ------------------
  |  Branch (581:13): [True: 3.39k, False: 27.4k]
  ------------------
  582|  3.39k|                handler.on_iso_date();
  583|  3.39k|                break;
  584|      0|            case CharT{'r'}:
  ------------------
  |  Branch (584:13): [True: 0, False: 30.8k]
  ------------------
  585|      0|                handler.on_loc_12_hour_time();
  586|      0|                break;
  587|  9.58k|            case CharT{'R'}:
  ------------------
  |  Branch (587:13): [True: 9.58k, False: 21.2k]
  ------------------
  588|  9.58k|                handler.on_24_hour_time();
  589|  9.58k|                break;
  590|  3.58k|            case CharT{'T'}:
  ------------------
  |  Branch (590:13): [True: 3.58k, False: 27.2k]
  ------------------
  591|  3.58k|                handler.on_iso_time();
  592|  3.58k|                break;
  593|      0|            case CharT{'p'}:
  ------------------
  |  Branch (593:13): [True: 0, False: 30.8k]
  ------------------
  594|      0|            case CharT{'P'}:
  ------------------
  |  Branch (594:13): [True: 0, False: 30.8k]
  ------------------
  595|      0|                handler.on_am_pm();
  596|      0|                break;
  597|      0|            case CharT{'s'}:
  ------------------
  |  Branch (597:13): [True: 0, False: 30.8k]
  ------------------
  598|      0|                handler.on_epoch_offset();
  599|      0|                break;
  600|      0|            case CharT{'Q'}:
  ------------------
  |  Branch (600:13): [True: 0, False: 30.8k]
  ------------------
  601|      0|                handler.on_duration_tick_count();
  602|      0|                break;
  603|      0|            case CharT{'q'}:
  ------------------
  |  Branch (603:13): [True: 0, False: 30.8k]
  ------------------
  604|      0|                handler.on_duration_suffix();
  605|      0|                break;
  606|       |            // 'E'
  607|      0|            case CharT{'E'}: {
  ------------------
  |  Branch (607:13): [True: 0, False: 30.8k]
  ------------------
  608|      0|                if (p == end) {
  ------------------
  |  Branch (608:21): [True: 0, False: 0]
  ------------------
  609|      0|                    handler.on_error("Unexpected end of chrono format string");
  610|      0|                    return p;
  611|      0|                }
  612|      0|                ch = *p;
  613|      0|                ++p;
  614|       |
  615|      0|                switch (ch) {
  616|      0|                    case CharT{'c'}:
  ------------------
  |  Branch (616:21): [True: 0, False: 0]
  ------------------
  617|      0|                        handler.on_loc_datetime(numeric_system::alternative_e);
  618|      0|                        break;
  619|      0|                    case CharT{'C'}:
  ------------------
  |  Branch (619:21): [True: 0, False: 0]
  ------------------
  620|      0|                        handler.on_century(numeric_system::alternative_e);
  621|      0|                        break;
  622|      0|                    case CharT{'x'}:
  ------------------
  |  Branch (622:21): [True: 0, False: 0]
  ------------------
  623|      0|                        handler.on_loc_date(numeric_system::alternative_e);
  624|      0|                        break;
  625|      0|                    case CharT{'X'}:
  ------------------
  |  Branch (625:21): [True: 0, False: 0]
  ------------------
  626|      0|                        handler.on_loc_time(numeric_system::alternative_e);
  627|      0|                        break;
  628|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (628:21): [True: 0, False: 0]
  ------------------
  629|      0|                        handler.on_loc_offset_year();
  630|      0|                        break;
  631|      0|                    case CharT{'Y'}:
  ------------------
  |  Branch (631:21): [True: 0, False: 0]
  ------------------
  632|      0|                        handler.on_full_year(numeric_system::alternative_e);
  633|      0|                        break;
  634|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (634:21): [True: 0, False: 0]
  ------------------
  635|      0|                        handler.on_tz_offset(numeric_system::alternative_e);
  636|      0|                        break;
  637|      0|                    default:
  ------------------
  |  Branch (637:21): [True: 0, False: 0]
  ------------------
  638|      0|                        handler.on_error(
  639|      0|                            "Invalid character following 'E' in chrono format "
  640|      0|                            "string");
  641|      0|                        return p;
  642|      0|                }
  643|      0|                break;
  644|      0|            }
  645|       |            // 'O'
  646|      0|            case CharT{'O'}: {
  ------------------
  |  Branch (646:13): [True: 0, False: 30.8k]
  ------------------
  647|      0|                if (p == end) {
  ------------------
  |  Branch (647:21): [True: 0, False: 0]
  ------------------
  648|      0|                    handler.on_error("Unexpected end of chrono format string");
  649|      0|                    return p;
  650|      0|                }
  651|      0|                ch = *p;
  652|      0|                ++p;
  653|       |
  654|      0|                switch (ch) {
  655|      0|                    case CharT{'d'}:
  ------------------
  |  Branch (655:21): [True: 0, False: 0]
  ------------------
  656|      0|                    case CharT{'e'}:
  ------------------
  |  Branch (656:21): [True: 0, False: 0]
  ------------------
  657|      0|                        handler.on_day_of_month(numeric_system::alternative_o);
  658|      0|                        break;
  659|      0|                    case CharT{'H'}:
  ------------------
  |  Branch (659:21): [True: 0, False: 0]
  ------------------
  660|      0|                    case CharT{'k'}:
  ------------------
  |  Branch (660:21): [True: 0, False: 0]
  ------------------
  661|      0|                        handler.on_24_hour(numeric_system::alternative_o);
  662|      0|                        break;
  663|      0|                    case CharT{'I'}:
  ------------------
  |  Branch (663:21): [True: 0, False: 0]
  ------------------
  664|      0|                    case CharT{'l'}:
  ------------------
  |  Branch (664:21): [True: 0, False: 0]
  ------------------
  665|      0|                        handler.on_12_hour(numeric_system::alternative_o);
  666|      0|                        break;
  667|      0|                    case CharT{'m'}:
  ------------------
  |  Branch (667:21): [True: 0, False: 0]
  ------------------
  668|      0|                        handler.on_dec_month(numeric_system::alternative_o);
  669|      0|                        break;
  670|      0|                    case CharT{'M'}:
  ------------------
  |  Branch (670:21): [True: 0, False: 0]
  ------------------
  671|      0|                        handler.on_minute(numeric_system::alternative_o);
  672|      0|                        break;
  673|      0|                    case CharT{'S'}:
  ------------------
  |  Branch (673:21): [True: 0, False: 0]
  ------------------
  674|      0|                        handler.on_second(numeric_system::alternative_o);
  675|      0|                        break;
  676|      0|                    case CharT{'U'}:
  ------------------
  |  Branch (676:21): [True: 0, False: 0]
  ------------------
  677|      0|                        handler.on_dec0_week_of_year(
  678|      0|                            numeric_system::alternative_o);
  679|      0|                        break;
  680|      0|                    case CharT{'w'}:
  ------------------
  |  Branch (680:21): [True: 0, False: 0]
  ------------------
  681|      0|                        handler.on_dec0_weekday(numeric_system::alternative_o);
  682|      0|                        break;
  683|      0|                    case CharT{'W'}:
  ------------------
  |  Branch (683:21): [True: 0, False: 0]
  ------------------
  684|      0|                        handler.on_dec1_weekday(numeric_system::alternative_o);
  685|      0|                        break;
  686|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (686:21): [True: 0, False: 0]
  ------------------
  687|      0|                        handler.on_short_year(numeric_system::alternative_o);
  688|      0|                        break;
  689|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (689:21): [True: 0, False: 0]
  ------------------
  690|      0|                        handler.on_tz_offset(numeric_system::alternative_o);
  691|      0|                        break;
  692|      0|                    default:
  ------------------
  |  Branch (692:21): [True: 0, False: 0]
  ------------------
  693|      0|                        handler.on_error(
  694|      0|                            "Invalid character following 'O' in chrono format "
  695|      0|                            "string");
  696|      0|                        return p;
  697|      0|                }
  698|      0|                break;
  699|      0|            }
  700|      0|            default:
  ------------------
  |  Branch (700:13): [True: 0, False: 30.8k]
  ------------------
  701|      0|                handler.on_error("Invalid character in chrono format string");
  702|      0|                return p;
  703|  30.8k|        }
  704|  30.8k|        begin = p;
  705|       |
  706|  30.8k|        if (!handler.get_error()) {
  ------------------
  |  Branch (706:13): [True: 23.6k, False: 7.20k]
  ------------------
  707|  23.6k|            return p;
  708|  23.6k|        }
  709|  30.8k|    }
  710|  7.13k|    if (begin != p) {
  ------------------
  |  Branch (710:9): [True: 0, False: 7.13k]
  ------------------
  711|      0|        handler.on_text(begin, p);
  712|      0|    }
  713|  7.13k|    handler.verify();
  714|  7.13k|    return p;
  715|  30.7k|}
_ZN3scn2v46detail12setter_state13set_full_yearINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEwEEEEvRT_:
  768|  6.78k|    {                                                                \
  769|  6.78k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  6.78k|        field##_set = 1;                                             \
  774|  6.78k|    }
_ZN3scn2v46detail12setter_state14set_short_yearINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEwEEEEvRT_:
  768|     18|    {                                                                \
  769|     18|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|     18|        field##_set = 1;                                             \
  774|     18|    }
_ZN3scn2v46detail12setter_state7set_monINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEwEEEEvRT_:
  768|  1.03k|    {                                                                \
  769|  1.03k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  1.03k|        field##_set = 1;                                             \
  774|  1.03k|    }
_ZN3scn2v46detail12setter_state8set_mdayINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEwEEEEvRT_:
  768|     80|    {                                                                \
  769|     80|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|     80|        field##_set = 1;                                             \
  774|     80|    }
_ZN3scn2v46detail12setter_state10set_hour24INS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEwEEEEvRT_:
  768|  6.83k|    {                                                                \
  769|  6.83k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  6.83k|        field##_set = 1;                                             \
  774|  6.83k|    }
_ZN3scn2v46detail12setter_state7set_minINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEwEEEEvRT_:
  768|  6.79k|    {                                                                \
  769|  6.79k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  6.79k|        field##_set = 1;                                             \
  774|  6.79k|    }
_ZN3scn2v46detail12setter_state7set_secINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEwEEEEvRT_:
  768|    226|    {                                                                \
  769|    226|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|    226|        field##_set = 1;                                             \
  774|    226|    }
_ZNK3scn2v46detail12setter_state6verifyINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEwEEEEvRT_:
  799|  7.13k|    {
  800|  7.13k|        if (hour24_set && hour12_set) {
  ------------------
  |  Branch (800:13): [True: 6.44k, False: 692]
  |  Branch (800:27): [True: 0, False: 6.44k]
  ------------------
  801|      0|            return handler.set_error(
  802|      0|                {scan_error::invalid_format_string,
  803|      0|                 "24-hour and 12-hour clocks can't both be in use "
  804|      0|                 "simultaneously"});
  805|      0|        }
  806|  7.13k|        if (am_pm_set) {
  ------------------
  |  Branch (806:13): [True: 0, False: 7.13k]
  ------------------
  807|      0|            if (!hour12_set) {
  ------------------
  |  Branch (807:17): [True: 0, False: 0]
  ------------------
  808|      0|                return handler.set_error(
  809|      0|                    {scan_error::invalid_format_string,
  810|      0|                     "AM/PM specifier can't be set without an hour set"});
  811|      0|            }
  812|      0|            if (hour24_set) {
  ------------------
  |  Branch (812:17): [True: 0, False: 0]
  ------------------
  813|      0|                return handler.set_error(
  814|      0|                    {scan_error::invalid_format_string,
  815|      0|                     "Can't use AM/PM with a 24-hour clock"});
  816|      0|            }
  817|      0|        }
  818|  7.13k|        if (full_year_set && (century_set || short_year_set)) {
  ------------------
  |  Branch (818:13): [True: 12, False: 7.12k]
  |  Branch (818:31): [True: 0, False: 12]
  |  Branch (818:46): [True: 0, False: 12]
  ------------------
  819|      0|            return handler.set_error(
  820|      0|                {scan_error::invalid_format_string,
  821|      0|                 "full-year (%Y) can't be used together with "
  822|      0|                 "century (%C) and short-year (%y)"});
  823|      0|        }
  824|  7.13k|        if (tzoff_set && tzname_set) {
  ------------------
  |  Branch (824:13): [True: 0, False: 7.13k]
  |  Branch (824:26): [True: 0, False: 0]
  ------------------
  825|      0|            return handler.set_error(
  826|      0|                {scan_error::invalid_format_string,
  827|      0|                 "tzoff (%z) can't be used together with tzname (%Z)"});
  828|      0|        }
  829|  7.13k|        if ((wday_set || mday_set || yday_set) &&
  ------------------
  |  Branch (829:14): [True: 0, False: 7.13k]
  |  Branch (829:26): [True: 22, False: 7.11k]
  |  Branch (829:38): [True: 0, False: 7.11k]
  ------------------
  830|  7.13k|            !(wday_set ^ mday_set ^ yday_set)) {
  ------------------
  |  Branch (830:13): [True: 0, False: 22]
  ------------------
  831|      0|            return handler.set_error(
  832|      0|                {scan_error::invalid_format_string,
  833|      0|                 "Only up to one of wday (%a/%u/%w), mday "
  834|      0|                 "(%d/%e), and yday (%j) can be set at once"});
  835|      0|        }
  836|  7.13k|    }
_ZN3scn2v46detail25parse_chrono_format_specsIwRNS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEEEEPKT_SG_SG_OT0_:
  376|  30.7k|{
  377|  30.7k|    if (begin == end || *begin == CharT{'}'}) {
  ------------------
  |  Branch (377:9): [True: 0, False: 30.7k]
  |  Branch (377:25): [True: 0, False: 30.7k]
  ------------------
  378|      0|        handler.on_error("chrono format specs can't be empty");
  379|      0|        return begin;
  380|      0|    }
  381|       |
  382|  30.7k|    auto p = begin;
  383|  30.7k|    if (*p == CharT{'L'}) {
  ------------------
  |  Branch (383:9): [True: 0, False: 30.7k]
  ------------------
  384|      0|        handler.on_localized();
  385|      0|        begin = ++p;
  386|      0|        if (p == end) {
  ------------------
  |  Branch (386:13): [True: 0, False: 0]
  ------------------
  387|      0|            handler.on_error("chrono format specs can't be empty");
  388|      0|            return p;
  389|      0|        }
  390|      0|    }
  391|       |
  392|  30.7k|    if (p == end || *p != CharT{'%'}) {
  ------------------
  |  Branch (392:9): [True: 0, False: 30.7k]
  |  Branch (392:21): [True: 0, False: 30.7k]
  ------------------
  393|      0|        handler.on_error(
  394|      0|            "chrono format spec must start with a conversion specifier (%...)");
  395|      0|        return p;
  396|      0|    }
  397|       |
  398|  38.0k|    while (p != end) {
  ------------------
  |  Branch (398:12): [True: 30.9k, False: 7.13k]
  ------------------
  399|  30.9k|        auto ch = *p;
  400|  30.9k|        if (ch == CharT{'}'}) {
  ------------------
  |  Branch (400:13): [True: 0, False: 30.9k]
  ------------------
  401|      0|            break;
  402|      0|        }
  403|  30.9k|        if (ch != CharT{'%'}) {
  ------------------
  |  Branch (403:13): [True: 70, False: 30.8k]
  ------------------
  404|     70|            if (ch == 0x20 || (ch >= 0x09 && ch <= 0x0d)) {
  ------------------
  |  Branch (404:17): [True: 0, False: 70]
  |  Branch (404:32): [True: 70, False: 0]
  |  Branch (404:46): [True: 0, False: 70]
  ------------------
  405|       |                // Simple ASCII space
  406|      0|                handler.on_text(begin, p);
  407|      0|                handler.on_whitespace();
  408|      0|                begin = p += 1;
  409|      0|                continue;
  410|      0|            }
  411|     70|            const auto cp_len =
  412|     70|                detail::code_point_length_by_starting_code_unit(ch);
  413|     70|            if (cp_len == 0) {
  ------------------
  |  Branch (413:17): [True: 0, False: 70]
  ------------------
  414|      0|                handler.on_error("Invalid literal character");
  415|      0|                return p;
  416|      0|            }
  417|     70|            if (cp_len > 1) {
  ------------------
  |  Branch (417:17): [True: 0, False: 70]
  ------------------
  418|       |                // Multi code unit code point,
  419|       |                // possible space
  420|      0|                auto cp_start_p = p;
  421|      0|                CharT buffer[4] = {};
  422|      0|                for (std::size_t i = 0; i < cp_len; ++i) {
  ------------------
  |  Branch (422:41): [True: 0, False: 0]
  ------------------
  423|      0|                    if (p == end) {
  ------------------
  |  Branch (423:25): [True: 0, False: 0]
  ------------------
  424|      0|                        handler.on_error("Invalid literal character");
  425|      0|                        return p;
  426|      0|                    }
  427|      0|                    buffer[i] = *p;
  428|      0|                    ++p;
  429|      0|                }
  430|      0|                if (is_cp_space(decode_code_point_exhaustive(
  ------------------
  |  Branch (430:21): [True: 0, False: 0]
  ------------------
  431|      0|                        std::basic_string_view<CharT>{buffer, cp_len}))) {
  432|      0|                    handler.on_text(begin, cp_start_p);
  433|      0|                    handler.on_whitespace();
  434|      0|                    begin = p;
  435|      0|                    continue;
  436|      0|                }
  437|      0|            }
  438|     70|            ++p;
  439|     70|            continue;
  440|     70|        }
  441|  30.8k|        if (begin != p) {
  ------------------
  |  Branch (441:13): [True: 70, False: 30.7k]
  ------------------
  442|     70|            handler.on_text(begin, p);
  443|     70|        }
  444|  30.8k|        ++p;  // Consume '%'
  445|  30.8k|        if (p == end) {
  ------------------
  |  Branch (445:13): [True: 0, False: 30.8k]
  ------------------
  446|      0|            handler.on_error("Unexpected end of chrono format string");
  447|      0|            return p;
  448|      0|        }
  449|       |
  450|  30.8k|        ch = *p;
  451|  30.8k|        ++p;
  452|       |
  453|  30.8k|        switch (ch) {
  454|      0|            case CharT{'%'}:
  ------------------
  |  Branch (454:13): [True: 0, False: 30.8k]
  ------------------
  455|      0|                handler.on_text(&ch, &ch + 1);
  456|      0|                break;
  457|      0|            case CharT{'n'}:
  ------------------
  |  Branch (457:13): [True: 0, False: 30.8k]
  ------------------
  458|      0|            case CharT{'t'}:
  ------------------
  |  Branch (458:13): [True: 0, False: 30.8k]
  ------------------
  459|      0|                handler.on_whitespace();
  460|      0|                break;
  461|       |            // Year
  462|  3.38k|            case CharT{'Y'}:
  ------------------
  |  Branch (462:13): [True: 3.38k, False: 27.4k]
  ------------------
  463|  3.38k|                handler.on_full_year();
  464|  3.38k|                break;
  465|      0|            case CharT{'y'}:
  ------------------
  |  Branch (465:13): [True: 0, False: 30.8k]
  ------------------
  466|      0|                handler.on_short_year();
  467|      0|                break;
  468|      0|            case CharT{'C'}:
  ------------------
  |  Branch (468:13): [True: 0, False: 30.8k]
  ------------------
  469|      0|                handler.on_century();
  470|      0|                break;
  471|      0|            case CharT{'G'}:
  ------------------
  |  Branch (471:13): [True: 0, False: 30.8k]
  ------------------
  472|      0|                handler.on_iso_week_based_year();
  473|      0|                break;
  474|      0|            case CharT{'g'}:
  ------------------
  |  Branch (474:13): [True: 0, False: 30.8k]
  ------------------
  475|      0|                handler.on_iso_week_based_short_year();
  476|      0|                break;
  477|       |            // Month
  478|  4.03k|            case CharT{'b'}:
  ------------------
  |  Branch (478:13): [True: 4.03k, False: 26.7k]
  ------------------
  479|  4.03k|            case CharT{'B'}:
  ------------------
  |  Branch (479:13): [True: 0, False: 30.8k]
  ------------------
  480|  4.03k|            case CharT{'h'}:
  ------------------
  |  Branch (480:13): [True: 0, False: 30.8k]
  ------------------
  481|  4.03k|                handler.on_month_name();
  482|  4.03k|                break;
  483|     38|            case CharT{'m'}:
  ------------------
  |  Branch (483:13): [True: 38, False: 30.7k]
  ------------------
  484|     38|                handler.on_dec_month();
  485|     38|                break;
  486|       |            // Week
  487|      0|            case CharT{'U'}:
  ------------------
  |  Branch (487:13): [True: 0, False: 30.8k]
  ------------------
  488|      0|                handler.on_dec0_week_of_year();
  489|      0|                break;
  490|      0|            case CharT{'W'}:
  ------------------
  |  Branch (490:13): [True: 0, False: 30.8k]
  ------------------
  491|      0|                handler.on_dec1_week_of_year();
  492|      0|                break;
  493|      0|            case CharT{'V'}:
  ------------------
  |  Branch (493:13): [True: 0, False: 30.8k]
  ------------------
  494|      0|                handler.on_iso_week_of_year();
  495|      0|                break;
  496|       |            // Day of year
  497|      0|            case CharT{'j'}:
  ------------------
  |  Branch (497:13): [True: 0, False: 30.8k]
  ------------------
  498|      0|                handler.on_day_of_year();
  499|      0|                break;
  500|       |            // Day of month
  501|     20|            case CharT{'d'}:
  ------------------
  |  Branch (501:13): [True: 20, False: 30.8k]
  ------------------
  502|     20|            case CharT{'e'}:
  ------------------
  |  Branch (502:13): [True: 0, False: 30.8k]
  ------------------
  503|     20|                handler.on_day_of_month();
  504|     20|                break;
  505|       |            // Day of week
  506|  3.38k|            case CharT{'a'}:
  ------------------
  |  Branch (506:13): [True: 3.38k, False: 27.4k]
  ------------------
  507|  3.38k|            case CharT{'A'}:
  ------------------
  |  Branch (507:13): [True: 0, False: 30.8k]
  ------------------
  508|  3.38k|                handler.on_weekday_name();
  509|  3.38k|                break;
  510|      0|            case CharT{'w'}:
  ------------------
  |  Branch (510:13): [True: 0, False: 30.8k]
  ------------------
  511|      0|                handler.on_dec0_weekday();
  512|      0|                break;
  513|      0|            case CharT{'u'}:
  ------------------
  |  Branch (513:13): [True: 0, False: 30.8k]
  ------------------
  514|      0|                handler.on_dec1_weekday();
  515|      0|                break;
  516|       |            // Hour
  517|     12|            case CharT{'H'}:
  ------------------
  |  Branch (517:13): [True: 12, False: 30.8k]
  ------------------
  518|     12|            case CharT{'k'}:
  ------------------
  |  Branch (518:13): [True: 0, False: 30.8k]
  ------------------
  519|     12|                handler.on_24_hour();
  520|     12|                break;
  521|      0|            case CharT{'I'}:
  ------------------
  |  Branch (521:13): [True: 0, False: 30.8k]
  ------------------
  522|      0|            case CharT{'l'}:
  ------------------
  |  Branch (522:13): [True: 0, False: 30.8k]
  ------------------
  523|      0|                handler.on_12_hour();
  524|      0|                break;
  525|       |            // Minute
  526|      0|            case CharT{'M'}:
  ------------------
  |  Branch (526:13): [True: 0, False: 30.8k]
  ------------------
  527|      0|                handler.on_minute();
  528|      0|                break;
  529|       |            // Second
  530|      0|            case CharT{'S'}:
  ------------------
  |  Branch (530:13): [True: 0, False: 30.8k]
  ------------------
  531|      0|                handler.on_second();
  532|      0|                break;
  533|       |            // Subsecond
  534|      0|            case CharT{'.'}: {
  ------------------
  |  Branch (534:13): [True: 0, False: 30.8k]
  ------------------
  535|       |                // p already increased before the switch
  536|      0|                if (p == end) {
  ------------------
  |  Branch (536:21): [True: 0, False: 0]
  ------------------
  537|      0|                    handler.on_error("Unexpected end of chrono format string");
  538|      0|                    return p;
  539|      0|                }
  540|      0|                bool use_alternate = false;
  541|      0|                if (*p == CharT{'E'} || *p == CharT{'O'}) {
  ------------------
  |  Branch (541:21): [True: 0, False: 0]
  |  Branch (541:41): [True: 0, False: 0]
  ------------------
  542|      0|                    ++p;
  543|      0|                    if (p == end) {
  ------------------
  |  Branch (543:25): [True: 0, False: 0]
  ------------------
  544|      0|                        handler.on_error(
  545|      0|                            "Unexpected end of chrono format string");
  546|      0|                        return p;
  547|      0|                    }
  548|      0|                    use_alternate = true;
  549|      0|                }
  550|      0|                if (*p != CharT{'S'}) {
  ------------------
  |  Branch (550:21): [True: 0, False: 0]
  ------------------
  551|      0|                    handler.on_error(
  552|      0|                        "Expected `S` after `%.` in format string");
  553|      0|                    return p;
  554|      0|                }
  555|      0|                ++p;
  556|      0|                handler.on_subsecond(use_alternate
  ------------------
  |  Branch (556:38): [True: 0, False: 0]
  ------------------
  557|      0|                                         ? numeric_system::alternative_e
  558|      0|                                         : numeric_system::standard);
  559|      0|                break;
  560|      0|            }
  561|       |            // Timezones
  562|      0|            case CharT{'z'}:
  ------------------
  |  Branch (562:13): [True: 0, False: 30.8k]
  ------------------
  563|      0|                handler.on_tz_offset();
  564|      0|                break;
  565|      0|            case CharT{'Z'}:
  ------------------
  |  Branch (565:13): [True: 0, False: 30.8k]
  ------------------
  566|      0|                handler.on_tz_name();
  567|      0|                break;
  568|       |            // Other
  569|      0|            case CharT{'c'}:
  ------------------
  |  Branch (569:13): [True: 0, False: 30.8k]
  ------------------
  570|      0|                handler.on_loc_datetime();
  571|      0|                break;
  572|      0|            case CharT{'x'}:
  ------------------
  |  Branch (572:13): [True: 0, False: 30.8k]
  ------------------
  573|      0|                handler.on_loc_date();
  574|      0|                break;
  575|      0|            case CharT{'X'}:
  ------------------
  |  Branch (575:13): [True: 0, False: 30.8k]
  ------------------
  576|      0|                handler.on_loc_time();
  577|      0|                break;
  578|  3.39k|            case CharT{'D'}:
  ------------------
  |  Branch (578:13): [True: 3.39k, False: 27.4k]
  ------------------
  579|  3.39k|                handler.on_us_date();
  580|  3.39k|                break;
  581|  3.39k|            case CharT{'F'}:
  ------------------
  |  Branch (581:13): [True: 3.39k, False: 27.4k]
  ------------------
  582|  3.39k|                handler.on_iso_date();
  583|  3.39k|                break;
  584|      0|            case CharT{'r'}:
  ------------------
  |  Branch (584:13): [True: 0, False: 30.8k]
  ------------------
  585|      0|                handler.on_loc_12_hour_time();
  586|      0|                break;
  587|  9.58k|            case CharT{'R'}:
  ------------------
  |  Branch (587:13): [True: 9.58k, False: 21.2k]
  ------------------
  588|  9.58k|                handler.on_24_hour_time();
  589|  9.58k|                break;
  590|  3.58k|            case CharT{'T'}:
  ------------------
  |  Branch (590:13): [True: 3.58k, False: 27.2k]
  ------------------
  591|  3.58k|                handler.on_iso_time();
  592|  3.58k|                break;
  593|      0|            case CharT{'p'}:
  ------------------
  |  Branch (593:13): [True: 0, False: 30.8k]
  ------------------
  594|      0|            case CharT{'P'}:
  ------------------
  |  Branch (594:13): [True: 0, False: 30.8k]
  ------------------
  595|      0|                handler.on_am_pm();
  596|      0|                break;
  597|      0|            case CharT{'s'}:
  ------------------
  |  Branch (597:13): [True: 0, False: 30.8k]
  ------------------
  598|      0|                handler.on_epoch_offset();
  599|      0|                break;
  600|      0|            case CharT{'Q'}:
  ------------------
  |  Branch (600:13): [True: 0, False: 30.8k]
  ------------------
  601|      0|                handler.on_duration_tick_count();
  602|      0|                break;
  603|      0|            case CharT{'q'}:
  ------------------
  |  Branch (603:13): [True: 0, False: 30.8k]
  ------------------
  604|      0|                handler.on_duration_suffix();
  605|      0|                break;
  606|       |            // 'E'
  607|      0|            case CharT{'E'}: {
  ------------------
  |  Branch (607:13): [True: 0, False: 30.8k]
  ------------------
  608|      0|                if (p == end) {
  ------------------
  |  Branch (608:21): [True: 0, False: 0]
  ------------------
  609|      0|                    handler.on_error("Unexpected end of chrono format string");
  610|      0|                    return p;
  611|      0|                }
  612|      0|                ch = *p;
  613|      0|                ++p;
  614|       |
  615|      0|                switch (ch) {
  616|      0|                    case CharT{'c'}:
  ------------------
  |  Branch (616:21): [True: 0, False: 0]
  ------------------
  617|      0|                        handler.on_loc_datetime(numeric_system::alternative_e);
  618|      0|                        break;
  619|      0|                    case CharT{'C'}:
  ------------------
  |  Branch (619:21): [True: 0, False: 0]
  ------------------
  620|      0|                        handler.on_century(numeric_system::alternative_e);
  621|      0|                        break;
  622|      0|                    case CharT{'x'}:
  ------------------
  |  Branch (622:21): [True: 0, False: 0]
  ------------------
  623|      0|                        handler.on_loc_date(numeric_system::alternative_e);
  624|      0|                        break;
  625|      0|                    case CharT{'X'}:
  ------------------
  |  Branch (625:21): [True: 0, False: 0]
  ------------------
  626|      0|                        handler.on_loc_time(numeric_system::alternative_e);
  627|      0|                        break;
  628|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (628:21): [True: 0, False: 0]
  ------------------
  629|      0|                        handler.on_loc_offset_year();
  630|      0|                        break;
  631|      0|                    case CharT{'Y'}:
  ------------------
  |  Branch (631:21): [True: 0, False: 0]
  ------------------
  632|      0|                        handler.on_full_year(numeric_system::alternative_e);
  633|      0|                        break;
  634|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (634:21): [True: 0, False: 0]
  ------------------
  635|      0|                        handler.on_tz_offset(numeric_system::alternative_e);
  636|      0|                        break;
  637|      0|                    default:
  ------------------
  |  Branch (637:21): [True: 0, False: 0]
  ------------------
  638|      0|                        handler.on_error(
  639|      0|                            "Invalid character following 'E' in chrono format "
  640|      0|                            "string");
  641|      0|                        return p;
  642|      0|                }
  643|      0|                break;
  644|      0|            }
  645|       |            // 'O'
  646|      0|            case CharT{'O'}: {
  ------------------
  |  Branch (646:13): [True: 0, False: 30.8k]
  ------------------
  647|      0|                if (p == end) {
  ------------------
  |  Branch (647:21): [True: 0, False: 0]
  ------------------
  648|      0|                    handler.on_error("Unexpected end of chrono format string");
  649|      0|                    return p;
  650|      0|                }
  651|      0|                ch = *p;
  652|      0|                ++p;
  653|       |
  654|      0|                switch (ch) {
  655|      0|                    case CharT{'d'}:
  ------------------
  |  Branch (655:21): [True: 0, False: 0]
  ------------------
  656|      0|                    case CharT{'e'}:
  ------------------
  |  Branch (656:21): [True: 0, False: 0]
  ------------------
  657|      0|                        handler.on_day_of_month(numeric_system::alternative_o);
  658|      0|                        break;
  659|      0|                    case CharT{'H'}:
  ------------------
  |  Branch (659:21): [True: 0, False: 0]
  ------------------
  660|      0|                    case CharT{'k'}:
  ------------------
  |  Branch (660:21): [True: 0, False: 0]
  ------------------
  661|      0|                        handler.on_24_hour(numeric_system::alternative_o);
  662|      0|                        break;
  663|      0|                    case CharT{'I'}:
  ------------------
  |  Branch (663:21): [True: 0, False: 0]
  ------------------
  664|      0|                    case CharT{'l'}:
  ------------------
  |  Branch (664:21): [True: 0, False: 0]
  ------------------
  665|      0|                        handler.on_12_hour(numeric_system::alternative_o);
  666|      0|                        break;
  667|      0|                    case CharT{'m'}:
  ------------------
  |  Branch (667:21): [True: 0, False: 0]
  ------------------
  668|      0|                        handler.on_dec_month(numeric_system::alternative_o);
  669|      0|                        break;
  670|      0|                    case CharT{'M'}:
  ------------------
  |  Branch (670:21): [True: 0, False: 0]
  ------------------
  671|      0|                        handler.on_minute(numeric_system::alternative_o);
  672|      0|                        break;
  673|      0|                    case CharT{'S'}:
  ------------------
  |  Branch (673:21): [True: 0, False: 0]
  ------------------
  674|      0|                        handler.on_second(numeric_system::alternative_o);
  675|      0|                        break;
  676|      0|                    case CharT{'U'}:
  ------------------
  |  Branch (676:21): [True: 0, False: 0]
  ------------------
  677|      0|                        handler.on_dec0_week_of_year(
  678|      0|                            numeric_system::alternative_o);
  679|      0|                        break;
  680|      0|                    case CharT{'w'}:
  ------------------
  |  Branch (680:21): [True: 0, False: 0]
  ------------------
  681|      0|                        handler.on_dec0_weekday(numeric_system::alternative_o);
  682|      0|                        break;
  683|      0|                    case CharT{'W'}:
  ------------------
  |  Branch (683:21): [True: 0, False: 0]
  ------------------
  684|      0|                        handler.on_dec1_weekday(numeric_system::alternative_o);
  685|      0|                        break;
  686|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (686:21): [True: 0, False: 0]
  ------------------
  687|      0|                        handler.on_short_year(numeric_system::alternative_o);
  688|      0|                        break;
  689|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (689:21): [True: 0, False: 0]
  ------------------
  690|      0|                        handler.on_tz_offset(numeric_system::alternative_o);
  691|      0|                        break;
  692|      0|                    default:
  ------------------
  |  Branch (692:21): [True: 0, False: 0]
  ------------------
  693|      0|                        handler.on_error(
  694|      0|                            "Invalid character following 'O' in chrono format "
  695|      0|                            "string");
  696|      0|                        return p;
  697|      0|                }
  698|      0|                break;
  699|      0|            }
  700|      0|            default:
  ------------------
  |  Branch (700:13): [True: 0, False: 30.8k]
  ------------------
  701|      0|                handler.on_error("Invalid character in chrono format string");
  702|      0|                return p;
  703|  30.8k|        }
  704|  30.8k|        begin = p;
  705|       |
  706|  30.8k|        if (!handler.get_error()) {
  ------------------
  |  Branch (706:13): [True: 23.6k, False: 7.20k]
  ------------------
  707|  23.6k|            return p;
  708|  23.6k|        }
  709|  30.8k|    }
  710|  7.13k|    if (begin != p) {
  ------------------
  |  Branch (710:9): [True: 0, False: 7.13k]
  ------------------
  711|      0|        handler.on_text(begin, p);
  712|      0|    }
  713|  7.13k|    handler.verify();
  714|  7.13k|    return p;
  715|  30.7k|}
_ZN3scn2v46detail12setter_state13set_full_yearINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEvRT_:
  768|  6.78k|    {                                                                \
  769|  6.78k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  6.78k|        field##_set = 1;                                             \
  774|  6.78k|    }
_ZN3scn2v46detail12setter_state14set_short_yearINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEvRT_:
  768|     18|    {                                                                \
  769|     18|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|     18|        field##_set = 1;                                             \
  774|     18|    }
_ZN3scn2v46detail12setter_state7set_monINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEvRT_:
  768|  1.03k|    {                                                                \
  769|  1.03k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  1.03k|        field##_set = 1;                                             \
  774|  1.03k|    }
_ZN3scn2v46detail12setter_state8set_mdayINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEvRT_:
  768|     80|    {                                                                \
  769|     80|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|     80|        field##_set = 1;                                             \
  774|     80|    }
_ZN3scn2v46detail12setter_state10set_hour24INS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEvRT_:
  768|  6.83k|    {                                                                \
  769|  6.83k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  6.83k|        field##_set = 1;                                             \
  774|  6.83k|    }
_ZN3scn2v46detail12setter_state7set_minINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEvRT_:
  768|  6.79k|    {                                                                \
  769|  6.79k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  6.79k|        field##_set = 1;                                             \
  774|  6.79k|    }
_ZN3scn2v46detail12setter_state7set_secINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEvRT_:
  768|    226|    {                                                                \
  769|    226|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|    226|        field##_set = 1;                                             \
  774|    226|    }
_ZNK3scn2v46detail12setter_state6verifyINS1_9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEvRT_:
  799|  7.13k|    {
  800|  7.13k|        if (hour24_set && hour12_set) {
  ------------------
  |  Branch (800:13): [True: 6.44k, False: 692]
  |  Branch (800:27): [True: 0, False: 6.44k]
  ------------------
  801|      0|            return handler.set_error(
  802|      0|                {scan_error::invalid_format_string,
  803|      0|                 "24-hour and 12-hour clocks can't both be in use "
  804|      0|                 "simultaneously"});
  805|      0|        }
  806|  7.13k|        if (am_pm_set) {
  ------------------
  |  Branch (806:13): [True: 0, False: 7.13k]
  ------------------
  807|      0|            if (!hour12_set) {
  ------------------
  |  Branch (807:17): [True: 0, False: 0]
  ------------------
  808|      0|                return handler.set_error(
  809|      0|                    {scan_error::invalid_format_string,
  810|      0|                     "AM/PM specifier can't be set without an hour set"});
  811|      0|            }
  812|      0|            if (hour24_set) {
  ------------------
  |  Branch (812:17): [True: 0, False: 0]
  ------------------
  813|      0|                return handler.set_error(
  814|      0|                    {scan_error::invalid_format_string,
  815|      0|                     "Can't use AM/PM with a 24-hour clock"});
  816|      0|            }
  817|      0|        }
  818|  7.13k|        if (full_year_set && (century_set || short_year_set)) {
  ------------------
  |  Branch (818:13): [True: 12, False: 7.12k]
  |  Branch (818:31): [True: 0, False: 12]
  |  Branch (818:46): [True: 0, False: 12]
  ------------------
  819|      0|            return handler.set_error(
  820|      0|                {scan_error::invalid_format_string,
  821|      0|                 "full-year (%Y) can't be used together with "
  822|      0|                 "century (%C) and short-year (%y)"});
  823|      0|        }
  824|  7.13k|        if (tzoff_set && tzname_set) {
  ------------------
  |  Branch (824:13): [True: 0, False: 7.13k]
  |  Branch (824:26): [True: 0, False: 0]
  ------------------
  825|      0|            return handler.set_error(
  826|      0|                {scan_error::invalid_format_string,
  827|      0|                 "tzoff (%z) can't be used together with tzname (%Z)"});
  828|      0|        }
  829|  7.13k|        if ((wday_set || mday_set || yday_set) &&
  ------------------
  |  Branch (829:14): [True: 0, False: 7.13k]
  |  Branch (829:26): [True: 22, False: 7.11k]
  |  Branch (829:38): [True: 0, False: 7.11k]
  ------------------
  830|  7.13k|            !(wday_set ^ mday_set ^ yday_set)) {
  ------------------
  |  Branch (830:13): [True: 0, False: 22]
  ------------------
  831|      0|            return handler.set_error(
  832|      0|                {scan_error::invalid_format_string,
  833|      0|                 "Only up to one of wday (%a/%u/%w), mday "
  834|      0|                 "(%d/%e), and yday (%j) can be set at once"});
  835|      0|        }
  836|  7.13k|    }
_ZN3scn2v46detail25parse_chrono_format_specsIwRNS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEwEEEEPKT_SI_SI_OT0_:
  376|  30.7k|{
  377|  30.7k|    if (begin == end || *begin == CharT{'}'}) {
  ------------------
  |  Branch (377:9): [True: 0, False: 30.7k]
  |  Branch (377:25): [True: 0, False: 30.7k]
  ------------------
  378|      0|        handler.on_error("chrono format specs can't be empty");
  379|      0|        return begin;
  380|      0|    }
  381|       |
  382|  30.7k|    auto p = begin;
  383|  30.7k|    if (*p == CharT{'L'}) {
  ------------------
  |  Branch (383:9): [True: 0, False: 30.7k]
  ------------------
  384|      0|        handler.on_localized();
  385|      0|        begin = ++p;
  386|      0|        if (p == end) {
  ------------------
  |  Branch (386:13): [True: 0, False: 0]
  ------------------
  387|      0|            handler.on_error("chrono format specs can't be empty");
  388|      0|            return p;
  389|      0|        }
  390|      0|    }
  391|       |
  392|  30.7k|    if (p == end || *p != CharT{'%'}) {
  ------------------
  |  Branch (392:9): [True: 0, False: 30.7k]
  |  Branch (392:21): [True: 0, False: 30.7k]
  ------------------
  393|      0|        handler.on_error(
  394|      0|            "chrono format spec must start with a conversion specifier (%...)");
  395|      0|        return p;
  396|      0|    }
  397|       |
  398|  38.0k|    while (p != end) {
  ------------------
  |  Branch (398:12): [True: 30.9k, False: 7.13k]
  ------------------
  399|  30.9k|        auto ch = *p;
  400|  30.9k|        if (ch == CharT{'}'}) {
  ------------------
  |  Branch (400:13): [True: 0, False: 30.9k]
  ------------------
  401|      0|            break;
  402|      0|        }
  403|  30.9k|        if (ch != CharT{'%'}) {
  ------------------
  |  Branch (403:13): [True: 70, False: 30.8k]
  ------------------
  404|     70|            if (ch == 0x20 || (ch >= 0x09 && ch <= 0x0d)) {
  ------------------
  |  Branch (404:17): [True: 0, False: 70]
  |  Branch (404:32): [True: 70, False: 0]
  |  Branch (404:46): [True: 0, False: 70]
  ------------------
  405|       |                // Simple ASCII space
  406|      0|                handler.on_text(begin, p);
  407|      0|                handler.on_whitespace();
  408|      0|                begin = p += 1;
  409|      0|                continue;
  410|      0|            }
  411|     70|            const auto cp_len =
  412|     70|                detail::code_point_length_by_starting_code_unit(ch);
  413|     70|            if (cp_len == 0) {
  ------------------
  |  Branch (413:17): [True: 0, False: 70]
  ------------------
  414|      0|                handler.on_error("Invalid literal character");
  415|      0|                return p;
  416|      0|            }
  417|     70|            if (cp_len > 1) {
  ------------------
  |  Branch (417:17): [True: 0, False: 70]
  ------------------
  418|       |                // Multi code unit code point,
  419|       |                // possible space
  420|      0|                auto cp_start_p = p;
  421|      0|                CharT buffer[4] = {};
  422|      0|                for (std::size_t i = 0; i < cp_len; ++i) {
  ------------------
  |  Branch (422:41): [True: 0, False: 0]
  ------------------
  423|      0|                    if (p == end) {
  ------------------
  |  Branch (423:25): [True: 0, False: 0]
  ------------------
  424|      0|                        handler.on_error("Invalid literal character");
  425|      0|                        return p;
  426|      0|                    }
  427|      0|                    buffer[i] = *p;
  428|      0|                    ++p;
  429|      0|                }
  430|      0|                if (is_cp_space(decode_code_point_exhaustive(
  ------------------
  |  Branch (430:21): [True: 0, False: 0]
  ------------------
  431|      0|                        std::basic_string_view<CharT>{buffer, cp_len}))) {
  432|      0|                    handler.on_text(begin, cp_start_p);
  433|      0|                    handler.on_whitespace();
  434|      0|                    begin = p;
  435|      0|                    continue;
  436|      0|                }
  437|      0|            }
  438|     70|            ++p;
  439|     70|            continue;
  440|     70|        }
  441|  30.8k|        if (begin != p) {
  ------------------
  |  Branch (441:13): [True: 70, False: 30.7k]
  ------------------
  442|     70|            handler.on_text(begin, p);
  443|     70|        }
  444|  30.8k|        ++p;  // Consume '%'
  445|  30.8k|        if (p == end) {
  ------------------
  |  Branch (445:13): [True: 0, False: 30.8k]
  ------------------
  446|      0|            handler.on_error("Unexpected end of chrono format string");
  447|      0|            return p;
  448|      0|        }
  449|       |
  450|  30.8k|        ch = *p;
  451|  30.8k|        ++p;
  452|       |
  453|  30.8k|        switch (ch) {
  454|      0|            case CharT{'%'}:
  ------------------
  |  Branch (454:13): [True: 0, False: 30.8k]
  ------------------
  455|      0|                handler.on_text(&ch, &ch + 1);
  456|      0|                break;
  457|      0|            case CharT{'n'}:
  ------------------
  |  Branch (457:13): [True: 0, False: 30.8k]
  ------------------
  458|      0|            case CharT{'t'}:
  ------------------
  |  Branch (458:13): [True: 0, False: 30.8k]
  ------------------
  459|      0|                handler.on_whitespace();
  460|      0|                break;
  461|       |            // Year
  462|  3.38k|            case CharT{'Y'}:
  ------------------
  |  Branch (462:13): [True: 3.38k, False: 27.4k]
  ------------------
  463|  3.38k|                handler.on_full_year();
  464|  3.38k|                break;
  465|      0|            case CharT{'y'}:
  ------------------
  |  Branch (465:13): [True: 0, False: 30.8k]
  ------------------
  466|      0|                handler.on_short_year();
  467|      0|                break;
  468|      0|            case CharT{'C'}:
  ------------------
  |  Branch (468:13): [True: 0, False: 30.8k]
  ------------------
  469|      0|                handler.on_century();
  470|      0|                break;
  471|      0|            case CharT{'G'}:
  ------------------
  |  Branch (471:13): [True: 0, False: 30.8k]
  ------------------
  472|      0|                handler.on_iso_week_based_year();
  473|      0|                break;
  474|      0|            case CharT{'g'}:
  ------------------
  |  Branch (474:13): [True: 0, False: 30.8k]
  ------------------
  475|      0|                handler.on_iso_week_based_short_year();
  476|      0|                break;
  477|       |            // Month
  478|  4.03k|            case CharT{'b'}:
  ------------------
  |  Branch (478:13): [True: 4.03k, False: 26.7k]
  ------------------
  479|  4.03k|            case CharT{'B'}:
  ------------------
  |  Branch (479:13): [True: 0, False: 30.8k]
  ------------------
  480|  4.03k|            case CharT{'h'}:
  ------------------
  |  Branch (480:13): [True: 0, False: 30.8k]
  ------------------
  481|  4.03k|                handler.on_month_name();
  482|  4.03k|                break;
  483|     38|            case CharT{'m'}:
  ------------------
  |  Branch (483:13): [True: 38, False: 30.7k]
  ------------------
  484|     38|                handler.on_dec_month();
  485|     38|                break;
  486|       |            // Week
  487|      0|            case CharT{'U'}:
  ------------------
  |  Branch (487:13): [True: 0, False: 30.8k]
  ------------------
  488|      0|                handler.on_dec0_week_of_year();
  489|      0|                break;
  490|      0|            case CharT{'W'}:
  ------------------
  |  Branch (490:13): [True: 0, False: 30.8k]
  ------------------
  491|      0|                handler.on_dec1_week_of_year();
  492|      0|                break;
  493|      0|            case CharT{'V'}:
  ------------------
  |  Branch (493:13): [True: 0, False: 30.8k]
  ------------------
  494|      0|                handler.on_iso_week_of_year();
  495|      0|                break;
  496|       |            // Day of year
  497|      0|            case CharT{'j'}:
  ------------------
  |  Branch (497:13): [True: 0, False: 30.8k]
  ------------------
  498|      0|                handler.on_day_of_year();
  499|      0|                break;
  500|       |            // Day of month
  501|     20|            case CharT{'d'}:
  ------------------
  |  Branch (501:13): [True: 20, False: 30.8k]
  ------------------
  502|     20|            case CharT{'e'}:
  ------------------
  |  Branch (502:13): [True: 0, False: 30.8k]
  ------------------
  503|     20|                handler.on_day_of_month();
  504|     20|                break;
  505|       |            // Day of week
  506|  3.38k|            case CharT{'a'}:
  ------------------
  |  Branch (506:13): [True: 3.38k, False: 27.4k]
  ------------------
  507|  3.38k|            case CharT{'A'}:
  ------------------
  |  Branch (507:13): [True: 0, False: 30.8k]
  ------------------
  508|  3.38k|                handler.on_weekday_name();
  509|  3.38k|                break;
  510|      0|            case CharT{'w'}:
  ------------------
  |  Branch (510:13): [True: 0, False: 30.8k]
  ------------------
  511|      0|                handler.on_dec0_weekday();
  512|      0|                break;
  513|      0|            case CharT{'u'}:
  ------------------
  |  Branch (513:13): [True: 0, False: 30.8k]
  ------------------
  514|      0|                handler.on_dec1_weekday();
  515|      0|                break;
  516|       |            // Hour
  517|     12|            case CharT{'H'}:
  ------------------
  |  Branch (517:13): [True: 12, False: 30.8k]
  ------------------
  518|     12|            case CharT{'k'}:
  ------------------
  |  Branch (518:13): [True: 0, False: 30.8k]
  ------------------
  519|     12|                handler.on_24_hour();
  520|     12|                break;
  521|      0|            case CharT{'I'}:
  ------------------
  |  Branch (521:13): [True: 0, False: 30.8k]
  ------------------
  522|      0|            case CharT{'l'}:
  ------------------
  |  Branch (522:13): [True: 0, False: 30.8k]
  ------------------
  523|      0|                handler.on_12_hour();
  524|      0|                break;
  525|       |            // Minute
  526|      0|            case CharT{'M'}:
  ------------------
  |  Branch (526:13): [True: 0, False: 30.8k]
  ------------------
  527|      0|                handler.on_minute();
  528|      0|                break;
  529|       |            // Second
  530|      0|            case CharT{'S'}:
  ------------------
  |  Branch (530:13): [True: 0, False: 30.8k]
  ------------------
  531|      0|                handler.on_second();
  532|      0|                break;
  533|       |            // Subsecond
  534|      0|            case CharT{'.'}: {
  ------------------
  |  Branch (534:13): [True: 0, False: 30.8k]
  ------------------
  535|       |                // p already increased before the switch
  536|      0|                if (p == end) {
  ------------------
  |  Branch (536:21): [True: 0, False: 0]
  ------------------
  537|      0|                    handler.on_error("Unexpected end of chrono format string");
  538|      0|                    return p;
  539|      0|                }
  540|      0|                bool use_alternate = false;
  541|      0|                if (*p == CharT{'E'} || *p == CharT{'O'}) {
  ------------------
  |  Branch (541:21): [True: 0, False: 0]
  |  Branch (541:41): [True: 0, False: 0]
  ------------------
  542|      0|                    ++p;
  543|      0|                    if (p == end) {
  ------------------
  |  Branch (543:25): [True: 0, False: 0]
  ------------------
  544|      0|                        handler.on_error(
  545|      0|                            "Unexpected end of chrono format string");
  546|      0|                        return p;
  547|      0|                    }
  548|      0|                    use_alternate = true;
  549|      0|                }
  550|      0|                if (*p != CharT{'S'}) {
  ------------------
  |  Branch (550:21): [True: 0, False: 0]
  ------------------
  551|      0|                    handler.on_error(
  552|      0|                        "Expected `S` after `%.` in format string");
  553|      0|                    return p;
  554|      0|                }
  555|      0|                ++p;
  556|      0|                handler.on_subsecond(use_alternate
  ------------------
  |  Branch (556:38): [True: 0, False: 0]
  ------------------
  557|      0|                                         ? numeric_system::alternative_e
  558|      0|                                         : numeric_system::standard);
  559|      0|                break;
  560|      0|            }
  561|       |            // Timezones
  562|      0|            case CharT{'z'}:
  ------------------
  |  Branch (562:13): [True: 0, False: 30.8k]
  ------------------
  563|      0|                handler.on_tz_offset();
  564|      0|                break;
  565|      0|            case CharT{'Z'}:
  ------------------
  |  Branch (565:13): [True: 0, False: 30.8k]
  ------------------
  566|      0|                handler.on_tz_name();
  567|      0|                break;
  568|       |            // Other
  569|      0|            case CharT{'c'}:
  ------------------
  |  Branch (569:13): [True: 0, False: 30.8k]
  ------------------
  570|      0|                handler.on_loc_datetime();
  571|      0|                break;
  572|      0|            case CharT{'x'}:
  ------------------
  |  Branch (572:13): [True: 0, False: 30.8k]
  ------------------
  573|      0|                handler.on_loc_date();
  574|      0|                break;
  575|      0|            case CharT{'X'}:
  ------------------
  |  Branch (575:13): [True: 0, False: 30.8k]
  ------------------
  576|      0|                handler.on_loc_time();
  577|      0|                break;
  578|  3.39k|            case CharT{'D'}:
  ------------------
  |  Branch (578:13): [True: 3.39k, False: 27.4k]
  ------------------
  579|  3.39k|                handler.on_us_date();
  580|  3.39k|                break;
  581|  3.39k|            case CharT{'F'}:
  ------------------
  |  Branch (581:13): [True: 3.39k, False: 27.4k]
  ------------------
  582|  3.39k|                handler.on_iso_date();
  583|  3.39k|                break;
  584|      0|            case CharT{'r'}:
  ------------------
  |  Branch (584:13): [True: 0, False: 30.8k]
  ------------------
  585|      0|                handler.on_loc_12_hour_time();
  586|      0|                break;
  587|  9.58k|            case CharT{'R'}:
  ------------------
  |  Branch (587:13): [True: 9.58k, False: 21.2k]
  ------------------
  588|  9.58k|                handler.on_24_hour_time();
  589|  9.58k|                break;
  590|  3.58k|            case CharT{'T'}:
  ------------------
  |  Branch (590:13): [True: 3.58k, False: 27.2k]
  ------------------
  591|  3.58k|                handler.on_iso_time();
  592|  3.58k|                break;
  593|      0|            case CharT{'p'}:
  ------------------
  |  Branch (593:13): [True: 0, False: 30.8k]
  ------------------
  594|      0|            case CharT{'P'}:
  ------------------
  |  Branch (594:13): [True: 0, False: 30.8k]
  ------------------
  595|      0|                handler.on_am_pm();
  596|      0|                break;
  597|      0|            case CharT{'s'}:
  ------------------
  |  Branch (597:13): [True: 0, False: 30.8k]
  ------------------
  598|      0|                handler.on_epoch_offset();
  599|      0|                break;
  600|      0|            case CharT{'Q'}:
  ------------------
  |  Branch (600:13): [True: 0, False: 30.8k]
  ------------------
  601|      0|                handler.on_duration_tick_count();
  602|      0|                break;
  603|      0|            case CharT{'q'}:
  ------------------
  |  Branch (603:13): [True: 0, False: 30.8k]
  ------------------
  604|      0|                handler.on_duration_suffix();
  605|      0|                break;
  606|       |            // 'E'
  607|      0|            case CharT{'E'}: {
  ------------------
  |  Branch (607:13): [True: 0, False: 30.8k]
  ------------------
  608|      0|                if (p == end) {
  ------------------
  |  Branch (608:21): [True: 0, False: 0]
  ------------------
  609|      0|                    handler.on_error("Unexpected end of chrono format string");
  610|      0|                    return p;
  611|      0|                }
  612|      0|                ch = *p;
  613|      0|                ++p;
  614|       |
  615|      0|                switch (ch) {
  616|      0|                    case CharT{'c'}:
  ------------------
  |  Branch (616:21): [True: 0, False: 0]
  ------------------
  617|      0|                        handler.on_loc_datetime(numeric_system::alternative_e);
  618|      0|                        break;
  619|      0|                    case CharT{'C'}:
  ------------------
  |  Branch (619:21): [True: 0, False: 0]
  ------------------
  620|      0|                        handler.on_century(numeric_system::alternative_e);
  621|      0|                        break;
  622|      0|                    case CharT{'x'}:
  ------------------
  |  Branch (622:21): [True: 0, False: 0]
  ------------------
  623|      0|                        handler.on_loc_date(numeric_system::alternative_e);
  624|      0|                        break;
  625|      0|                    case CharT{'X'}:
  ------------------
  |  Branch (625:21): [True: 0, False: 0]
  ------------------
  626|      0|                        handler.on_loc_time(numeric_system::alternative_e);
  627|      0|                        break;
  628|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (628:21): [True: 0, False: 0]
  ------------------
  629|      0|                        handler.on_loc_offset_year();
  630|      0|                        break;
  631|      0|                    case CharT{'Y'}:
  ------------------
  |  Branch (631:21): [True: 0, False: 0]
  ------------------
  632|      0|                        handler.on_full_year(numeric_system::alternative_e);
  633|      0|                        break;
  634|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (634:21): [True: 0, False: 0]
  ------------------
  635|      0|                        handler.on_tz_offset(numeric_system::alternative_e);
  636|      0|                        break;
  637|      0|                    default:
  ------------------
  |  Branch (637:21): [True: 0, False: 0]
  ------------------
  638|      0|                        handler.on_error(
  639|      0|                            "Invalid character following 'E' in chrono format "
  640|      0|                            "string");
  641|      0|                        return p;
  642|      0|                }
  643|      0|                break;
  644|      0|            }
  645|       |            // 'O'
  646|      0|            case CharT{'O'}: {
  ------------------
  |  Branch (646:13): [True: 0, False: 30.8k]
  ------------------
  647|      0|                if (p == end) {
  ------------------
  |  Branch (647:21): [True: 0, False: 0]
  ------------------
  648|      0|                    handler.on_error("Unexpected end of chrono format string");
  649|      0|                    return p;
  650|      0|                }
  651|      0|                ch = *p;
  652|      0|                ++p;
  653|       |
  654|      0|                switch (ch) {
  655|      0|                    case CharT{'d'}:
  ------------------
  |  Branch (655:21): [True: 0, False: 0]
  ------------------
  656|      0|                    case CharT{'e'}:
  ------------------
  |  Branch (656:21): [True: 0, False: 0]
  ------------------
  657|      0|                        handler.on_day_of_month(numeric_system::alternative_o);
  658|      0|                        break;
  659|      0|                    case CharT{'H'}:
  ------------------
  |  Branch (659:21): [True: 0, False: 0]
  ------------------
  660|      0|                    case CharT{'k'}:
  ------------------
  |  Branch (660:21): [True: 0, False: 0]
  ------------------
  661|      0|                        handler.on_24_hour(numeric_system::alternative_o);
  662|      0|                        break;
  663|      0|                    case CharT{'I'}:
  ------------------
  |  Branch (663:21): [True: 0, False: 0]
  ------------------
  664|      0|                    case CharT{'l'}:
  ------------------
  |  Branch (664:21): [True: 0, False: 0]
  ------------------
  665|      0|                        handler.on_12_hour(numeric_system::alternative_o);
  666|      0|                        break;
  667|      0|                    case CharT{'m'}:
  ------------------
  |  Branch (667:21): [True: 0, False: 0]
  ------------------
  668|      0|                        handler.on_dec_month(numeric_system::alternative_o);
  669|      0|                        break;
  670|      0|                    case CharT{'M'}:
  ------------------
  |  Branch (670:21): [True: 0, False: 0]
  ------------------
  671|      0|                        handler.on_minute(numeric_system::alternative_o);
  672|      0|                        break;
  673|      0|                    case CharT{'S'}:
  ------------------
  |  Branch (673:21): [True: 0, False: 0]
  ------------------
  674|      0|                        handler.on_second(numeric_system::alternative_o);
  675|      0|                        break;
  676|      0|                    case CharT{'U'}:
  ------------------
  |  Branch (676:21): [True: 0, False: 0]
  ------------------
  677|      0|                        handler.on_dec0_week_of_year(
  678|      0|                            numeric_system::alternative_o);
  679|      0|                        break;
  680|      0|                    case CharT{'w'}:
  ------------------
  |  Branch (680:21): [True: 0, False: 0]
  ------------------
  681|      0|                        handler.on_dec0_weekday(numeric_system::alternative_o);
  682|      0|                        break;
  683|      0|                    case CharT{'W'}:
  ------------------
  |  Branch (683:21): [True: 0, False: 0]
  ------------------
  684|      0|                        handler.on_dec1_weekday(numeric_system::alternative_o);
  685|      0|                        break;
  686|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (686:21): [True: 0, False: 0]
  ------------------
  687|      0|                        handler.on_short_year(numeric_system::alternative_o);
  688|      0|                        break;
  689|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (689:21): [True: 0, False: 0]
  ------------------
  690|      0|                        handler.on_tz_offset(numeric_system::alternative_o);
  691|      0|                        break;
  692|      0|                    default:
  ------------------
  |  Branch (692:21): [True: 0, False: 0]
  ------------------
  693|      0|                        handler.on_error(
  694|      0|                            "Invalid character following 'O' in chrono format "
  695|      0|                            "string");
  696|      0|                        return p;
  697|      0|                }
  698|      0|                break;
  699|      0|            }
  700|      0|            default:
  ------------------
  |  Branch (700:13): [True: 0, False: 30.8k]
  ------------------
  701|      0|                handler.on_error("Invalid character in chrono format string");
  702|      0|                return p;
  703|  30.8k|        }
  704|  30.8k|        begin = p;
  705|       |
  706|  30.8k|        if (!handler.get_error()) {
  ------------------
  |  Branch (706:13): [True: 23.6k, False: 7.20k]
  ------------------
  707|  23.6k|            return p;
  708|  23.6k|        }
  709|  30.8k|    }
  710|  7.13k|    if (begin != p) {
  ------------------
  |  Branch (710:9): [True: 0, False: 7.13k]
  ------------------
  711|      0|        handler.on_text(begin, p);
  712|      0|    }
  713|  7.13k|    handler.verify();
  714|  7.13k|    return p;
  715|  30.7k|}
_ZN3scn2v46detail12setter_state13set_full_yearINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEwEEEEvRT_:
  768|  6.78k|    {                                                                \
  769|  6.78k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  6.78k|        field##_set = 1;                                             \
  774|  6.78k|    }
_ZN3scn2v46detail12setter_state14set_short_yearINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEwEEEEvRT_:
  768|     18|    {                                                                \
  769|     18|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|     18|        field##_set = 1;                                             \
  774|     18|    }
_ZN3scn2v46detail12setter_state7set_monINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEwEEEEvRT_:
  768|  1.03k|    {                                                                \
  769|  1.03k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  1.03k|        field##_set = 1;                                             \
  774|  1.03k|    }
_ZN3scn2v46detail12setter_state8set_mdayINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEwEEEEvRT_:
  768|     80|    {                                                                \
  769|     80|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|     80|        field##_set = 1;                                             \
  774|     80|    }
_ZN3scn2v46detail12setter_state10set_hour24INS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEwEEEEvRT_:
  768|  6.83k|    {                                                                \
  769|  6.83k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  6.83k|        field##_set = 1;                                             \
  774|  6.83k|    }
_ZN3scn2v46detail12setter_state7set_minINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEwEEEEvRT_:
  768|  6.79k|    {                                                                \
  769|  6.79k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  6.79k|        field##_set = 1;                                             \
  774|  6.79k|    }
_ZN3scn2v46detail12setter_state7set_secINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEwEEEEvRT_:
  768|    226|    {                                                                \
  769|    226|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|    226|        field##_set = 1;                                             \
  774|    226|    }
_ZNK3scn2v46detail12setter_state6verifyINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEwEEEEvRT_:
  799|  7.13k|    {
  800|  7.13k|        if (hour24_set && hour12_set) {
  ------------------
  |  Branch (800:13): [True: 6.44k, False: 692]
  |  Branch (800:27): [True: 0, False: 6.44k]
  ------------------
  801|      0|            return handler.set_error(
  802|      0|                {scan_error::invalid_format_string,
  803|      0|                 "24-hour and 12-hour clocks can't both be in use "
  804|      0|                 "simultaneously"});
  805|      0|        }
  806|  7.13k|        if (am_pm_set) {
  ------------------
  |  Branch (806:13): [True: 0, False: 7.13k]
  ------------------
  807|      0|            if (!hour12_set) {
  ------------------
  |  Branch (807:17): [True: 0, False: 0]
  ------------------
  808|      0|                return handler.set_error(
  809|      0|                    {scan_error::invalid_format_string,
  810|      0|                     "AM/PM specifier can't be set without an hour set"});
  811|      0|            }
  812|      0|            if (hour24_set) {
  ------------------
  |  Branch (812:17): [True: 0, False: 0]
  ------------------
  813|      0|                return handler.set_error(
  814|      0|                    {scan_error::invalid_format_string,
  815|      0|                     "Can't use AM/PM with a 24-hour clock"});
  816|      0|            }
  817|      0|        }
  818|  7.13k|        if (full_year_set && (century_set || short_year_set)) {
  ------------------
  |  Branch (818:13): [True: 12, False: 7.12k]
  |  Branch (818:31): [True: 0, False: 12]
  |  Branch (818:46): [True: 0, False: 12]
  ------------------
  819|      0|            return handler.set_error(
  820|      0|                {scan_error::invalid_format_string,
  821|      0|                 "full-year (%Y) can't be used together with "
  822|      0|                 "century (%C) and short-year (%y)"});
  823|      0|        }
  824|  7.13k|        if (tzoff_set && tzname_set) {
  ------------------
  |  Branch (824:13): [True: 0, False: 7.13k]
  |  Branch (824:26): [True: 0, False: 0]
  ------------------
  825|      0|            return handler.set_error(
  826|      0|                {scan_error::invalid_format_string,
  827|      0|                 "tzoff (%z) can't be used together with tzname (%Z)"});
  828|      0|        }
  829|  7.13k|        if ((wday_set || mday_set || yday_set) &&
  ------------------
  |  Branch (829:14): [True: 0, False: 7.13k]
  |  Branch (829:26): [True: 22, False: 7.11k]
  |  Branch (829:38): [True: 0, False: 7.11k]
  ------------------
  830|  7.13k|            !(wday_set ^ mday_set ^ yday_set)) {
  ------------------
  |  Branch (830:13): [True: 0, False: 22]
  ------------------
  831|      0|            return handler.set_error(
  832|      0|                {scan_error::invalid_format_string,
  833|      0|                 "Only up to one of wday (%a/%u/%w), mday "
  834|      0|                 "(%d/%e), and yday (%j) can be set at once"});
  835|      0|        }
  836|  7.13k|    }
_ZN3scn2v46detail25parse_chrono_format_specsIwRNS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEEEEPKT_SG_SG_OT0_:
  376|  30.7k|{
  377|  30.7k|    if (begin == end || *begin == CharT{'}'}) {
  ------------------
  |  Branch (377:9): [True: 0, False: 30.7k]
  |  Branch (377:25): [True: 0, False: 30.7k]
  ------------------
  378|      0|        handler.on_error("chrono format specs can't be empty");
  379|      0|        return begin;
  380|      0|    }
  381|       |
  382|  30.7k|    auto p = begin;
  383|  30.7k|    if (*p == CharT{'L'}) {
  ------------------
  |  Branch (383:9): [True: 0, False: 30.7k]
  ------------------
  384|      0|        handler.on_localized();
  385|      0|        begin = ++p;
  386|      0|        if (p == end) {
  ------------------
  |  Branch (386:13): [True: 0, False: 0]
  ------------------
  387|      0|            handler.on_error("chrono format specs can't be empty");
  388|      0|            return p;
  389|      0|        }
  390|      0|    }
  391|       |
  392|  30.7k|    if (p == end || *p != CharT{'%'}) {
  ------------------
  |  Branch (392:9): [True: 0, False: 30.7k]
  |  Branch (392:21): [True: 0, False: 30.7k]
  ------------------
  393|      0|        handler.on_error(
  394|      0|            "chrono format spec must start with a conversion specifier (%...)");
  395|      0|        return p;
  396|      0|    }
  397|       |
  398|  38.0k|    while (p != end) {
  ------------------
  |  Branch (398:12): [True: 30.9k, False: 7.13k]
  ------------------
  399|  30.9k|        auto ch = *p;
  400|  30.9k|        if (ch == CharT{'}'}) {
  ------------------
  |  Branch (400:13): [True: 0, False: 30.9k]
  ------------------
  401|      0|            break;
  402|      0|        }
  403|  30.9k|        if (ch != CharT{'%'}) {
  ------------------
  |  Branch (403:13): [True: 70, False: 30.8k]
  ------------------
  404|     70|            if (ch == 0x20 || (ch >= 0x09 && ch <= 0x0d)) {
  ------------------
  |  Branch (404:17): [True: 0, False: 70]
  |  Branch (404:32): [True: 70, False: 0]
  |  Branch (404:46): [True: 0, False: 70]
  ------------------
  405|       |                // Simple ASCII space
  406|      0|                handler.on_text(begin, p);
  407|      0|                handler.on_whitespace();
  408|      0|                begin = p += 1;
  409|      0|                continue;
  410|      0|            }
  411|     70|            const auto cp_len =
  412|     70|                detail::code_point_length_by_starting_code_unit(ch);
  413|     70|            if (cp_len == 0) {
  ------------------
  |  Branch (413:17): [True: 0, False: 70]
  ------------------
  414|      0|                handler.on_error("Invalid literal character");
  415|      0|                return p;
  416|      0|            }
  417|     70|            if (cp_len > 1) {
  ------------------
  |  Branch (417:17): [True: 0, False: 70]
  ------------------
  418|       |                // Multi code unit code point,
  419|       |                // possible space
  420|      0|                auto cp_start_p = p;
  421|      0|                CharT buffer[4] = {};
  422|      0|                for (std::size_t i = 0; i < cp_len; ++i) {
  ------------------
  |  Branch (422:41): [True: 0, False: 0]
  ------------------
  423|      0|                    if (p == end) {
  ------------------
  |  Branch (423:25): [True: 0, False: 0]
  ------------------
  424|      0|                        handler.on_error("Invalid literal character");
  425|      0|                        return p;
  426|      0|                    }
  427|      0|                    buffer[i] = *p;
  428|      0|                    ++p;
  429|      0|                }
  430|      0|                if (is_cp_space(decode_code_point_exhaustive(
  ------------------
  |  Branch (430:21): [True: 0, False: 0]
  ------------------
  431|      0|                        std::basic_string_view<CharT>{buffer, cp_len}))) {
  432|      0|                    handler.on_text(begin, cp_start_p);
  433|      0|                    handler.on_whitespace();
  434|      0|                    begin = p;
  435|      0|                    continue;
  436|      0|                }
  437|      0|            }
  438|     70|            ++p;
  439|     70|            continue;
  440|     70|        }
  441|  30.8k|        if (begin != p) {
  ------------------
  |  Branch (441:13): [True: 70, False: 30.7k]
  ------------------
  442|     70|            handler.on_text(begin, p);
  443|     70|        }
  444|  30.8k|        ++p;  // Consume '%'
  445|  30.8k|        if (p == end) {
  ------------------
  |  Branch (445:13): [True: 0, False: 30.8k]
  ------------------
  446|      0|            handler.on_error("Unexpected end of chrono format string");
  447|      0|            return p;
  448|      0|        }
  449|       |
  450|  30.8k|        ch = *p;
  451|  30.8k|        ++p;
  452|       |
  453|  30.8k|        switch (ch) {
  454|      0|            case CharT{'%'}:
  ------------------
  |  Branch (454:13): [True: 0, False: 30.8k]
  ------------------
  455|      0|                handler.on_text(&ch, &ch + 1);
  456|      0|                break;
  457|      0|            case CharT{'n'}:
  ------------------
  |  Branch (457:13): [True: 0, False: 30.8k]
  ------------------
  458|      0|            case CharT{'t'}:
  ------------------
  |  Branch (458:13): [True: 0, False: 30.8k]
  ------------------
  459|      0|                handler.on_whitespace();
  460|      0|                break;
  461|       |            // Year
  462|  3.38k|            case CharT{'Y'}:
  ------------------
  |  Branch (462:13): [True: 3.38k, False: 27.4k]
  ------------------
  463|  3.38k|                handler.on_full_year();
  464|  3.38k|                break;
  465|      0|            case CharT{'y'}:
  ------------------
  |  Branch (465:13): [True: 0, False: 30.8k]
  ------------------
  466|      0|                handler.on_short_year();
  467|      0|                break;
  468|      0|            case CharT{'C'}:
  ------------------
  |  Branch (468:13): [True: 0, False: 30.8k]
  ------------------
  469|      0|                handler.on_century();
  470|      0|                break;
  471|      0|            case CharT{'G'}:
  ------------------
  |  Branch (471:13): [True: 0, False: 30.8k]
  ------------------
  472|      0|                handler.on_iso_week_based_year();
  473|      0|                break;
  474|      0|            case CharT{'g'}:
  ------------------
  |  Branch (474:13): [True: 0, False: 30.8k]
  ------------------
  475|      0|                handler.on_iso_week_based_short_year();
  476|      0|                break;
  477|       |            // Month
  478|  4.03k|            case CharT{'b'}:
  ------------------
  |  Branch (478:13): [True: 4.03k, False: 26.7k]
  ------------------
  479|  4.03k|            case CharT{'B'}:
  ------------------
  |  Branch (479:13): [True: 0, False: 30.8k]
  ------------------
  480|  4.03k|            case CharT{'h'}:
  ------------------
  |  Branch (480:13): [True: 0, False: 30.8k]
  ------------------
  481|  4.03k|                handler.on_month_name();
  482|  4.03k|                break;
  483|     38|            case CharT{'m'}:
  ------------------
  |  Branch (483:13): [True: 38, False: 30.7k]
  ------------------
  484|     38|                handler.on_dec_month();
  485|     38|                break;
  486|       |            // Week
  487|      0|            case CharT{'U'}:
  ------------------
  |  Branch (487:13): [True: 0, False: 30.8k]
  ------------------
  488|      0|                handler.on_dec0_week_of_year();
  489|      0|                break;
  490|      0|            case CharT{'W'}:
  ------------------
  |  Branch (490:13): [True: 0, False: 30.8k]
  ------------------
  491|      0|                handler.on_dec1_week_of_year();
  492|      0|                break;
  493|      0|            case CharT{'V'}:
  ------------------
  |  Branch (493:13): [True: 0, False: 30.8k]
  ------------------
  494|      0|                handler.on_iso_week_of_year();
  495|      0|                break;
  496|       |            // Day of year
  497|      0|            case CharT{'j'}:
  ------------------
  |  Branch (497:13): [True: 0, False: 30.8k]
  ------------------
  498|      0|                handler.on_day_of_year();
  499|      0|                break;
  500|       |            // Day of month
  501|     20|            case CharT{'d'}:
  ------------------
  |  Branch (501:13): [True: 20, False: 30.8k]
  ------------------
  502|     20|            case CharT{'e'}:
  ------------------
  |  Branch (502:13): [True: 0, False: 30.8k]
  ------------------
  503|     20|                handler.on_day_of_month();
  504|     20|                break;
  505|       |            // Day of week
  506|  3.38k|            case CharT{'a'}:
  ------------------
  |  Branch (506:13): [True: 3.38k, False: 27.4k]
  ------------------
  507|  3.38k|            case CharT{'A'}:
  ------------------
  |  Branch (507:13): [True: 0, False: 30.8k]
  ------------------
  508|  3.38k|                handler.on_weekday_name();
  509|  3.38k|                break;
  510|      0|            case CharT{'w'}:
  ------------------
  |  Branch (510:13): [True: 0, False: 30.8k]
  ------------------
  511|      0|                handler.on_dec0_weekday();
  512|      0|                break;
  513|      0|            case CharT{'u'}:
  ------------------
  |  Branch (513:13): [True: 0, False: 30.8k]
  ------------------
  514|      0|                handler.on_dec1_weekday();
  515|      0|                break;
  516|       |            // Hour
  517|     12|            case CharT{'H'}:
  ------------------
  |  Branch (517:13): [True: 12, False: 30.8k]
  ------------------
  518|     12|            case CharT{'k'}:
  ------------------
  |  Branch (518:13): [True: 0, False: 30.8k]
  ------------------
  519|     12|                handler.on_24_hour();
  520|     12|                break;
  521|      0|            case CharT{'I'}:
  ------------------
  |  Branch (521:13): [True: 0, False: 30.8k]
  ------------------
  522|      0|            case CharT{'l'}:
  ------------------
  |  Branch (522:13): [True: 0, False: 30.8k]
  ------------------
  523|      0|                handler.on_12_hour();
  524|      0|                break;
  525|       |            // Minute
  526|      0|            case CharT{'M'}:
  ------------------
  |  Branch (526:13): [True: 0, False: 30.8k]
  ------------------
  527|      0|                handler.on_minute();
  528|      0|                break;
  529|       |            // Second
  530|      0|            case CharT{'S'}:
  ------------------
  |  Branch (530:13): [True: 0, False: 30.8k]
  ------------------
  531|      0|                handler.on_second();
  532|      0|                break;
  533|       |            // Subsecond
  534|      0|            case CharT{'.'}: {
  ------------------
  |  Branch (534:13): [True: 0, False: 30.8k]
  ------------------
  535|       |                // p already increased before the switch
  536|      0|                if (p == end) {
  ------------------
  |  Branch (536:21): [True: 0, False: 0]
  ------------------
  537|      0|                    handler.on_error("Unexpected end of chrono format string");
  538|      0|                    return p;
  539|      0|                }
  540|      0|                bool use_alternate = false;
  541|      0|                if (*p == CharT{'E'} || *p == CharT{'O'}) {
  ------------------
  |  Branch (541:21): [True: 0, False: 0]
  |  Branch (541:41): [True: 0, False: 0]
  ------------------
  542|      0|                    ++p;
  543|      0|                    if (p == end) {
  ------------------
  |  Branch (543:25): [True: 0, False: 0]
  ------------------
  544|      0|                        handler.on_error(
  545|      0|                            "Unexpected end of chrono format string");
  546|      0|                        return p;
  547|      0|                    }
  548|      0|                    use_alternate = true;
  549|      0|                }
  550|      0|                if (*p != CharT{'S'}) {
  ------------------
  |  Branch (550:21): [True: 0, False: 0]
  ------------------
  551|      0|                    handler.on_error(
  552|      0|                        "Expected `S` after `%.` in format string");
  553|      0|                    return p;
  554|      0|                }
  555|      0|                ++p;
  556|      0|                handler.on_subsecond(use_alternate
  ------------------
  |  Branch (556:38): [True: 0, False: 0]
  ------------------
  557|      0|                                         ? numeric_system::alternative_e
  558|      0|                                         : numeric_system::standard);
  559|      0|                break;
  560|      0|            }
  561|       |            // Timezones
  562|      0|            case CharT{'z'}:
  ------------------
  |  Branch (562:13): [True: 0, False: 30.8k]
  ------------------
  563|      0|                handler.on_tz_offset();
  564|      0|                break;
  565|      0|            case CharT{'Z'}:
  ------------------
  |  Branch (565:13): [True: 0, False: 30.8k]
  ------------------
  566|      0|                handler.on_tz_name();
  567|      0|                break;
  568|       |            // Other
  569|      0|            case CharT{'c'}:
  ------------------
  |  Branch (569:13): [True: 0, False: 30.8k]
  ------------------
  570|      0|                handler.on_loc_datetime();
  571|      0|                break;
  572|      0|            case CharT{'x'}:
  ------------------
  |  Branch (572:13): [True: 0, False: 30.8k]
  ------------------
  573|      0|                handler.on_loc_date();
  574|      0|                break;
  575|      0|            case CharT{'X'}:
  ------------------
  |  Branch (575:13): [True: 0, False: 30.8k]
  ------------------
  576|      0|                handler.on_loc_time();
  577|      0|                break;
  578|  3.39k|            case CharT{'D'}:
  ------------------
  |  Branch (578:13): [True: 3.39k, False: 27.4k]
  ------------------
  579|  3.39k|                handler.on_us_date();
  580|  3.39k|                break;
  581|  3.39k|            case CharT{'F'}:
  ------------------
  |  Branch (581:13): [True: 3.39k, False: 27.4k]
  ------------------
  582|  3.39k|                handler.on_iso_date();
  583|  3.39k|                break;
  584|      0|            case CharT{'r'}:
  ------------------
  |  Branch (584:13): [True: 0, False: 30.8k]
  ------------------
  585|      0|                handler.on_loc_12_hour_time();
  586|      0|                break;
  587|  9.58k|            case CharT{'R'}:
  ------------------
  |  Branch (587:13): [True: 9.58k, False: 21.2k]
  ------------------
  588|  9.58k|                handler.on_24_hour_time();
  589|  9.58k|                break;
  590|  3.58k|            case CharT{'T'}:
  ------------------
  |  Branch (590:13): [True: 3.58k, False: 27.2k]
  ------------------
  591|  3.58k|                handler.on_iso_time();
  592|  3.58k|                break;
  593|      0|            case CharT{'p'}:
  ------------------
  |  Branch (593:13): [True: 0, False: 30.8k]
  ------------------
  594|      0|            case CharT{'P'}:
  ------------------
  |  Branch (594:13): [True: 0, False: 30.8k]
  ------------------
  595|      0|                handler.on_am_pm();
  596|      0|                break;
  597|      0|            case CharT{'s'}:
  ------------------
  |  Branch (597:13): [True: 0, False: 30.8k]
  ------------------
  598|      0|                handler.on_epoch_offset();
  599|      0|                break;
  600|      0|            case CharT{'Q'}:
  ------------------
  |  Branch (600:13): [True: 0, False: 30.8k]
  ------------------
  601|      0|                handler.on_duration_tick_count();
  602|      0|                break;
  603|      0|            case CharT{'q'}:
  ------------------
  |  Branch (603:13): [True: 0, False: 30.8k]
  ------------------
  604|      0|                handler.on_duration_suffix();
  605|      0|                break;
  606|       |            // 'E'
  607|      0|            case CharT{'E'}: {
  ------------------
  |  Branch (607:13): [True: 0, False: 30.8k]
  ------------------
  608|      0|                if (p == end) {
  ------------------
  |  Branch (608:21): [True: 0, False: 0]
  ------------------
  609|      0|                    handler.on_error("Unexpected end of chrono format string");
  610|      0|                    return p;
  611|      0|                }
  612|      0|                ch = *p;
  613|      0|                ++p;
  614|       |
  615|      0|                switch (ch) {
  616|      0|                    case CharT{'c'}:
  ------------------
  |  Branch (616:21): [True: 0, False: 0]
  ------------------
  617|      0|                        handler.on_loc_datetime(numeric_system::alternative_e);
  618|      0|                        break;
  619|      0|                    case CharT{'C'}:
  ------------------
  |  Branch (619:21): [True: 0, False: 0]
  ------------------
  620|      0|                        handler.on_century(numeric_system::alternative_e);
  621|      0|                        break;
  622|      0|                    case CharT{'x'}:
  ------------------
  |  Branch (622:21): [True: 0, False: 0]
  ------------------
  623|      0|                        handler.on_loc_date(numeric_system::alternative_e);
  624|      0|                        break;
  625|      0|                    case CharT{'X'}:
  ------------------
  |  Branch (625:21): [True: 0, False: 0]
  ------------------
  626|      0|                        handler.on_loc_time(numeric_system::alternative_e);
  627|      0|                        break;
  628|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (628:21): [True: 0, False: 0]
  ------------------
  629|      0|                        handler.on_loc_offset_year();
  630|      0|                        break;
  631|      0|                    case CharT{'Y'}:
  ------------------
  |  Branch (631:21): [True: 0, False: 0]
  ------------------
  632|      0|                        handler.on_full_year(numeric_system::alternative_e);
  633|      0|                        break;
  634|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (634:21): [True: 0, False: 0]
  ------------------
  635|      0|                        handler.on_tz_offset(numeric_system::alternative_e);
  636|      0|                        break;
  637|      0|                    default:
  ------------------
  |  Branch (637:21): [True: 0, False: 0]
  ------------------
  638|      0|                        handler.on_error(
  639|      0|                            "Invalid character following 'E' in chrono format "
  640|      0|                            "string");
  641|      0|                        return p;
  642|      0|                }
  643|      0|                break;
  644|      0|            }
  645|       |            // 'O'
  646|      0|            case CharT{'O'}: {
  ------------------
  |  Branch (646:13): [True: 0, False: 30.8k]
  ------------------
  647|      0|                if (p == end) {
  ------------------
  |  Branch (647:21): [True: 0, False: 0]
  ------------------
  648|      0|                    handler.on_error("Unexpected end of chrono format string");
  649|      0|                    return p;
  650|      0|                }
  651|      0|                ch = *p;
  652|      0|                ++p;
  653|       |
  654|      0|                switch (ch) {
  655|      0|                    case CharT{'d'}:
  ------------------
  |  Branch (655:21): [True: 0, False: 0]
  ------------------
  656|      0|                    case CharT{'e'}:
  ------------------
  |  Branch (656:21): [True: 0, False: 0]
  ------------------
  657|      0|                        handler.on_day_of_month(numeric_system::alternative_o);
  658|      0|                        break;
  659|      0|                    case CharT{'H'}:
  ------------------
  |  Branch (659:21): [True: 0, False: 0]
  ------------------
  660|      0|                    case CharT{'k'}:
  ------------------
  |  Branch (660:21): [True: 0, False: 0]
  ------------------
  661|      0|                        handler.on_24_hour(numeric_system::alternative_o);
  662|      0|                        break;
  663|      0|                    case CharT{'I'}:
  ------------------
  |  Branch (663:21): [True: 0, False: 0]
  ------------------
  664|      0|                    case CharT{'l'}:
  ------------------
  |  Branch (664:21): [True: 0, False: 0]
  ------------------
  665|      0|                        handler.on_12_hour(numeric_system::alternative_o);
  666|      0|                        break;
  667|      0|                    case CharT{'m'}:
  ------------------
  |  Branch (667:21): [True: 0, False: 0]
  ------------------
  668|      0|                        handler.on_dec_month(numeric_system::alternative_o);
  669|      0|                        break;
  670|      0|                    case CharT{'M'}:
  ------------------
  |  Branch (670:21): [True: 0, False: 0]
  ------------------
  671|      0|                        handler.on_minute(numeric_system::alternative_o);
  672|      0|                        break;
  673|      0|                    case CharT{'S'}:
  ------------------
  |  Branch (673:21): [True: 0, False: 0]
  ------------------
  674|      0|                        handler.on_second(numeric_system::alternative_o);
  675|      0|                        break;
  676|      0|                    case CharT{'U'}:
  ------------------
  |  Branch (676:21): [True: 0, False: 0]
  ------------------
  677|      0|                        handler.on_dec0_week_of_year(
  678|      0|                            numeric_system::alternative_o);
  679|      0|                        break;
  680|      0|                    case CharT{'w'}:
  ------------------
  |  Branch (680:21): [True: 0, False: 0]
  ------------------
  681|      0|                        handler.on_dec0_weekday(numeric_system::alternative_o);
  682|      0|                        break;
  683|      0|                    case CharT{'W'}:
  ------------------
  |  Branch (683:21): [True: 0, False: 0]
  ------------------
  684|      0|                        handler.on_dec1_weekday(numeric_system::alternative_o);
  685|      0|                        break;
  686|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (686:21): [True: 0, False: 0]
  ------------------
  687|      0|                        handler.on_short_year(numeric_system::alternative_o);
  688|      0|                        break;
  689|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (689:21): [True: 0, False: 0]
  ------------------
  690|      0|                        handler.on_tz_offset(numeric_system::alternative_o);
  691|      0|                        break;
  692|      0|                    default:
  ------------------
  |  Branch (692:21): [True: 0, False: 0]
  ------------------
  693|      0|                        handler.on_error(
  694|      0|                            "Invalid character following 'O' in chrono format "
  695|      0|                            "string");
  696|      0|                        return p;
  697|      0|                }
  698|      0|                break;
  699|      0|            }
  700|      0|            default:
  ------------------
  |  Branch (700:13): [True: 0, False: 30.8k]
  ------------------
  701|      0|                handler.on_error("Invalid character in chrono format string");
  702|      0|                return p;
  703|  30.8k|        }
  704|  30.8k|        begin = p;
  705|       |
  706|  30.8k|        if (!handler.get_error()) {
  ------------------
  |  Branch (706:13): [True: 23.6k, False: 7.20k]
  ------------------
  707|  23.6k|            return p;
  708|  23.6k|        }
  709|  30.8k|    }
  710|  7.13k|    if (begin != p) {
  ------------------
  |  Branch (710:9): [True: 0, False: 7.13k]
  ------------------
  711|      0|        handler.on_text(begin, p);
  712|      0|    }
  713|  7.13k|    handler.verify();
  714|  7.13k|    return p;
  715|  30.7k|}
_ZN3scn2v46detail12setter_state13set_full_yearINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEvRT_:
  768|  6.78k|    {                                                                \
  769|  6.78k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  6.78k|        field##_set = 1;                                             \
  774|  6.78k|    }
_ZN3scn2v46detail12setter_state14set_short_yearINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEvRT_:
  768|     18|    {                                                                \
  769|     18|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|     18|        field##_set = 1;                                             \
  774|     18|    }
_ZN3scn2v46detail12setter_state7set_monINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEvRT_:
  768|  1.03k|    {                                                                \
  769|  1.03k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  1.03k|        field##_set = 1;                                             \
  774|  1.03k|    }
_ZN3scn2v46detail12setter_state8set_mdayINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEvRT_:
  768|     80|    {                                                                \
  769|     80|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|     80|        field##_set = 1;                                             \
  774|     80|    }
_ZN3scn2v46detail12setter_state10set_hour24INS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEvRT_:
  768|  6.83k|    {                                                                \
  769|  6.83k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  6.83k|        field##_set = 1;                                             \
  774|  6.83k|    }
_ZN3scn2v46detail12setter_state7set_minINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEvRT_:
  768|  6.79k|    {                                                                \
  769|  6.79k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  6.79k|        field##_set = 1;                                             \
  774|  6.79k|    }
_ZN3scn2v46detail12setter_state7set_secINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEvRT_:
  768|    226|    {                                                                \
  769|    226|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|    226|        field##_set = 1;                                             \
  774|    226|    }
_ZNK3scn2v46detail12setter_state6verifyINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEvRT_:
  799|  7.13k|    {
  800|  7.13k|        if (hour24_set && hour12_set) {
  ------------------
  |  Branch (800:13): [True: 6.44k, False: 692]
  |  Branch (800:27): [True: 0, False: 6.44k]
  ------------------
  801|      0|            return handler.set_error(
  802|      0|                {scan_error::invalid_format_string,
  803|      0|                 "24-hour and 12-hour clocks can't both be in use "
  804|      0|                 "simultaneously"});
  805|      0|        }
  806|  7.13k|        if (am_pm_set) {
  ------------------
  |  Branch (806:13): [True: 0, False: 7.13k]
  ------------------
  807|      0|            if (!hour12_set) {
  ------------------
  |  Branch (807:17): [True: 0, False: 0]
  ------------------
  808|      0|                return handler.set_error(
  809|      0|                    {scan_error::invalid_format_string,
  810|      0|                     "AM/PM specifier can't be set without an hour set"});
  811|      0|            }
  812|      0|            if (hour24_set) {
  ------------------
  |  Branch (812:17): [True: 0, False: 0]
  ------------------
  813|      0|                return handler.set_error(
  814|      0|                    {scan_error::invalid_format_string,
  815|      0|                     "Can't use AM/PM with a 24-hour clock"});
  816|      0|            }
  817|      0|        }
  818|  7.13k|        if (full_year_set && (century_set || short_year_set)) {
  ------------------
  |  Branch (818:13): [True: 12, False: 7.12k]
  |  Branch (818:31): [True: 0, False: 12]
  |  Branch (818:46): [True: 0, False: 12]
  ------------------
  819|      0|            return handler.set_error(
  820|      0|                {scan_error::invalid_format_string,
  821|      0|                 "full-year (%Y) can't be used together with "
  822|      0|                 "century (%C) and short-year (%y)"});
  823|      0|        }
  824|  7.13k|        if (tzoff_set && tzname_set) {
  ------------------
  |  Branch (824:13): [True: 0, False: 7.13k]
  |  Branch (824:26): [True: 0, False: 0]
  ------------------
  825|      0|            return handler.set_error(
  826|      0|                {scan_error::invalid_format_string,
  827|      0|                 "tzoff (%z) can't be used together with tzname (%Z)"});
  828|      0|        }
  829|  7.13k|        if ((wday_set || mday_set || yday_set) &&
  ------------------
  |  Branch (829:14): [True: 0, False: 7.13k]
  |  Branch (829:26): [True: 22, False: 7.11k]
  |  Branch (829:38): [True: 0, False: 7.11k]
  ------------------
  830|  7.13k|            !(wday_set ^ mday_set ^ yday_set)) {
  ------------------
  |  Branch (830:13): [True: 0, False: 22]
  ------------------
  831|      0|            return handler.set_error(
  832|      0|                {scan_error::invalid_format_string,
  833|      0|                 "Only up to one of wday (%a/%u/%w), mday "
  834|      0|                 "(%d/%e), and yday (%j) can be set at once"});
  835|      0|        }
  836|  7.13k|    }
_ZN3scn2v46detail25parse_chrono_format_specsIwRNS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEwEEEEPKT_SI_SI_OT0_:
  376|  30.7k|{
  377|  30.7k|    if (begin == end || *begin == CharT{'}'}) {
  ------------------
  |  Branch (377:9): [True: 0, False: 30.7k]
  |  Branch (377:25): [True: 0, False: 30.7k]
  ------------------
  378|      0|        handler.on_error("chrono format specs can't be empty");
  379|      0|        return begin;
  380|      0|    }
  381|       |
  382|  30.7k|    auto p = begin;
  383|  30.7k|    if (*p == CharT{'L'}) {
  ------------------
  |  Branch (383:9): [True: 0, False: 30.7k]
  ------------------
  384|      0|        handler.on_localized();
  385|      0|        begin = ++p;
  386|      0|        if (p == end) {
  ------------------
  |  Branch (386:13): [True: 0, False: 0]
  ------------------
  387|      0|            handler.on_error("chrono format specs can't be empty");
  388|      0|            return p;
  389|      0|        }
  390|      0|    }
  391|       |
  392|  30.7k|    if (p == end || *p != CharT{'%'}) {
  ------------------
  |  Branch (392:9): [True: 0, False: 30.7k]
  |  Branch (392:21): [True: 0, False: 30.7k]
  ------------------
  393|      0|        handler.on_error(
  394|      0|            "chrono format spec must start with a conversion specifier (%...)");
  395|      0|        return p;
  396|      0|    }
  397|       |
  398|  38.0k|    while (p != end) {
  ------------------
  |  Branch (398:12): [True: 30.9k, False: 7.13k]
  ------------------
  399|  30.9k|        auto ch = *p;
  400|  30.9k|        if (ch == CharT{'}'}) {
  ------------------
  |  Branch (400:13): [True: 0, False: 30.9k]
  ------------------
  401|      0|            break;
  402|      0|        }
  403|  30.9k|        if (ch != CharT{'%'}) {
  ------------------
  |  Branch (403:13): [True: 70, False: 30.8k]
  ------------------
  404|     70|            if (ch == 0x20 || (ch >= 0x09 && ch <= 0x0d)) {
  ------------------
  |  Branch (404:17): [True: 0, False: 70]
  |  Branch (404:32): [True: 70, False: 0]
  |  Branch (404:46): [True: 0, False: 70]
  ------------------
  405|       |                // Simple ASCII space
  406|      0|                handler.on_text(begin, p);
  407|      0|                handler.on_whitespace();
  408|      0|                begin = p += 1;
  409|      0|                continue;
  410|      0|            }
  411|     70|            const auto cp_len =
  412|     70|                detail::code_point_length_by_starting_code_unit(ch);
  413|     70|            if (cp_len == 0) {
  ------------------
  |  Branch (413:17): [True: 0, False: 70]
  ------------------
  414|      0|                handler.on_error("Invalid literal character");
  415|      0|                return p;
  416|      0|            }
  417|     70|            if (cp_len > 1) {
  ------------------
  |  Branch (417:17): [True: 0, False: 70]
  ------------------
  418|       |                // Multi code unit code point,
  419|       |                // possible space
  420|      0|                auto cp_start_p = p;
  421|      0|                CharT buffer[4] = {};
  422|      0|                for (std::size_t i = 0; i < cp_len; ++i) {
  ------------------
  |  Branch (422:41): [True: 0, False: 0]
  ------------------
  423|      0|                    if (p == end) {
  ------------------
  |  Branch (423:25): [True: 0, False: 0]
  ------------------
  424|      0|                        handler.on_error("Invalid literal character");
  425|      0|                        return p;
  426|      0|                    }
  427|      0|                    buffer[i] = *p;
  428|      0|                    ++p;
  429|      0|                }
  430|      0|                if (is_cp_space(decode_code_point_exhaustive(
  ------------------
  |  Branch (430:21): [True: 0, False: 0]
  ------------------
  431|      0|                        std::basic_string_view<CharT>{buffer, cp_len}))) {
  432|      0|                    handler.on_text(begin, cp_start_p);
  433|      0|                    handler.on_whitespace();
  434|      0|                    begin = p;
  435|      0|                    continue;
  436|      0|                }
  437|      0|            }
  438|     70|            ++p;
  439|     70|            continue;
  440|     70|        }
  441|  30.8k|        if (begin != p) {
  ------------------
  |  Branch (441:13): [True: 70, False: 30.7k]
  ------------------
  442|     70|            handler.on_text(begin, p);
  443|     70|        }
  444|  30.8k|        ++p;  // Consume '%'
  445|  30.8k|        if (p == end) {
  ------------------
  |  Branch (445:13): [True: 0, False: 30.8k]
  ------------------
  446|      0|            handler.on_error("Unexpected end of chrono format string");
  447|      0|            return p;
  448|      0|        }
  449|       |
  450|  30.8k|        ch = *p;
  451|  30.8k|        ++p;
  452|       |
  453|  30.8k|        switch (ch) {
  454|      0|            case CharT{'%'}:
  ------------------
  |  Branch (454:13): [True: 0, False: 30.8k]
  ------------------
  455|      0|                handler.on_text(&ch, &ch + 1);
  456|      0|                break;
  457|      0|            case CharT{'n'}:
  ------------------
  |  Branch (457:13): [True: 0, False: 30.8k]
  ------------------
  458|      0|            case CharT{'t'}:
  ------------------
  |  Branch (458:13): [True: 0, False: 30.8k]
  ------------------
  459|      0|                handler.on_whitespace();
  460|      0|                break;
  461|       |            // Year
  462|  3.38k|            case CharT{'Y'}:
  ------------------
  |  Branch (462:13): [True: 3.38k, False: 27.4k]
  ------------------
  463|  3.38k|                handler.on_full_year();
  464|  3.38k|                break;
  465|      0|            case CharT{'y'}:
  ------------------
  |  Branch (465:13): [True: 0, False: 30.8k]
  ------------------
  466|      0|                handler.on_short_year();
  467|      0|                break;
  468|      0|            case CharT{'C'}:
  ------------------
  |  Branch (468:13): [True: 0, False: 30.8k]
  ------------------
  469|      0|                handler.on_century();
  470|      0|                break;
  471|      0|            case CharT{'G'}:
  ------------------
  |  Branch (471:13): [True: 0, False: 30.8k]
  ------------------
  472|      0|                handler.on_iso_week_based_year();
  473|      0|                break;
  474|      0|            case CharT{'g'}:
  ------------------
  |  Branch (474:13): [True: 0, False: 30.8k]
  ------------------
  475|      0|                handler.on_iso_week_based_short_year();
  476|      0|                break;
  477|       |            // Month
  478|  4.03k|            case CharT{'b'}:
  ------------------
  |  Branch (478:13): [True: 4.03k, False: 26.7k]
  ------------------
  479|  4.03k|            case CharT{'B'}:
  ------------------
  |  Branch (479:13): [True: 0, False: 30.8k]
  ------------------
  480|  4.03k|            case CharT{'h'}:
  ------------------
  |  Branch (480:13): [True: 0, False: 30.8k]
  ------------------
  481|  4.03k|                handler.on_month_name();
  482|  4.03k|                break;
  483|     38|            case CharT{'m'}:
  ------------------
  |  Branch (483:13): [True: 38, False: 30.7k]
  ------------------
  484|     38|                handler.on_dec_month();
  485|     38|                break;
  486|       |            // Week
  487|      0|            case CharT{'U'}:
  ------------------
  |  Branch (487:13): [True: 0, False: 30.8k]
  ------------------
  488|      0|                handler.on_dec0_week_of_year();
  489|      0|                break;
  490|      0|            case CharT{'W'}:
  ------------------
  |  Branch (490:13): [True: 0, False: 30.8k]
  ------------------
  491|      0|                handler.on_dec1_week_of_year();
  492|      0|                break;
  493|      0|            case CharT{'V'}:
  ------------------
  |  Branch (493:13): [True: 0, False: 30.8k]
  ------------------
  494|      0|                handler.on_iso_week_of_year();
  495|      0|                break;
  496|       |            // Day of year
  497|      0|            case CharT{'j'}:
  ------------------
  |  Branch (497:13): [True: 0, False: 30.8k]
  ------------------
  498|      0|                handler.on_day_of_year();
  499|      0|                break;
  500|       |            // Day of month
  501|     20|            case CharT{'d'}:
  ------------------
  |  Branch (501:13): [True: 20, False: 30.8k]
  ------------------
  502|     20|            case CharT{'e'}:
  ------------------
  |  Branch (502:13): [True: 0, False: 30.8k]
  ------------------
  503|     20|                handler.on_day_of_month();
  504|     20|                break;
  505|       |            // Day of week
  506|  3.38k|            case CharT{'a'}:
  ------------------
  |  Branch (506:13): [True: 3.38k, False: 27.4k]
  ------------------
  507|  3.38k|            case CharT{'A'}:
  ------------------
  |  Branch (507:13): [True: 0, False: 30.8k]
  ------------------
  508|  3.38k|                handler.on_weekday_name();
  509|  3.38k|                break;
  510|      0|            case CharT{'w'}:
  ------------------
  |  Branch (510:13): [True: 0, False: 30.8k]
  ------------------
  511|      0|                handler.on_dec0_weekday();
  512|      0|                break;
  513|      0|            case CharT{'u'}:
  ------------------
  |  Branch (513:13): [True: 0, False: 30.8k]
  ------------------
  514|      0|                handler.on_dec1_weekday();
  515|      0|                break;
  516|       |            // Hour
  517|     12|            case CharT{'H'}:
  ------------------
  |  Branch (517:13): [True: 12, False: 30.8k]
  ------------------
  518|     12|            case CharT{'k'}:
  ------------------
  |  Branch (518:13): [True: 0, False: 30.8k]
  ------------------
  519|     12|                handler.on_24_hour();
  520|     12|                break;
  521|      0|            case CharT{'I'}:
  ------------------
  |  Branch (521:13): [True: 0, False: 30.8k]
  ------------------
  522|      0|            case CharT{'l'}:
  ------------------
  |  Branch (522:13): [True: 0, False: 30.8k]
  ------------------
  523|      0|                handler.on_12_hour();
  524|      0|                break;
  525|       |            // Minute
  526|      0|            case CharT{'M'}:
  ------------------
  |  Branch (526:13): [True: 0, False: 30.8k]
  ------------------
  527|      0|                handler.on_minute();
  528|      0|                break;
  529|       |            // Second
  530|      0|            case CharT{'S'}:
  ------------------
  |  Branch (530:13): [True: 0, False: 30.8k]
  ------------------
  531|      0|                handler.on_second();
  532|      0|                break;
  533|       |            // Subsecond
  534|      0|            case CharT{'.'}: {
  ------------------
  |  Branch (534:13): [True: 0, False: 30.8k]
  ------------------
  535|       |                // p already increased before the switch
  536|      0|                if (p == end) {
  ------------------
  |  Branch (536:21): [True: 0, False: 0]
  ------------------
  537|      0|                    handler.on_error("Unexpected end of chrono format string");
  538|      0|                    return p;
  539|      0|                }
  540|      0|                bool use_alternate = false;
  541|      0|                if (*p == CharT{'E'} || *p == CharT{'O'}) {
  ------------------
  |  Branch (541:21): [True: 0, False: 0]
  |  Branch (541:41): [True: 0, False: 0]
  ------------------
  542|      0|                    ++p;
  543|      0|                    if (p == end) {
  ------------------
  |  Branch (543:25): [True: 0, False: 0]
  ------------------
  544|      0|                        handler.on_error(
  545|      0|                            "Unexpected end of chrono format string");
  546|      0|                        return p;
  547|      0|                    }
  548|      0|                    use_alternate = true;
  549|      0|                }
  550|      0|                if (*p != CharT{'S'}) {
  ------------------
  |  Branch (550:21): [True: 0, False: 0]
  ------------------
  551|      0|                    handler.on_error(
  552|      0|                        "Expected `S` after `%.` in format string");
  553|      0|                    return p;
  554|      0|                }
  555|      0|                ++p;
  556|      0|                handler.on_subsecond(use_alternate
  ------------------
  |  Branch (556:38): [True: 0, False: 0]
  ------------------
  557|      0|                                         ? numeric_system::alternative_e
  558|      0|                                         : numeric_system::standard);
  559|      0|                break;
  560|      0|            }
  561|       |            // Timezones
  562|      0|            case CharT{'z'}:
  ------------------
  |  Branch (562:13): [True: 0, False: 30.8k]
  ------------------
  563|      0|                handler.on_tz_offset();
  564|      0|                break;
  565|      0|            case CharT{'Z'}:
  ------------------
  |  Branch (565:13): [True: 0, False: 30.8k]
  ------------------
  566|      0|                handler.on_tz_name();
  567|      0|                break;
  568|       |            // Other
  569|      0|            case CharT{'c'}:
  ------------------
  |  Branch (569:13): [True: 0, False: 30.8k]
  ------------------
  570|      0|                handler.on_loc_datetime();
  571|      0|                break;
  572|      0|            case CharT{'x'}:
  ------------------
  |  Branch (572:13): [True: 0, False: 30.8k]
  ------------------
  573|      0|                handler.on_loc_date();
  574|      0|                break;
  575|      0|            case CharT{'X'}:
  ------------------
  |  Branch (575:13): [True: 0, False: 30.8k]
  ------------------
  576|      0|                handler.on_loc_time();
  577|      0|                break;
  578|  3.39k|            case CharT{'D'}:
  ------------------
  |  Branch (578:13): [True: 3.39k, False: 27.4k]
  ------------------
  579|  3.39k|                handler.on_us_date();
  580|  3.39k|                break;
  581|  3.39k|            case CharT{'F'}:
  ------------------
  |  Branch (581:13): [True: 3.39k, False: 27.4k]
  ------------------
  582|  3.39k|                handler.on_iso_date();
  583|  3.39k|                break;
  584|      0|            case CharT{'r'}:
  ------------------
  |  Branch (584:13): [True: 0, False: 30.8k]
  ------------------
  585|      0|                handler.on_loc_12_hour_time();
  586|      0|                break;
  587|  9.58k|            case CharT{'R'}:
  ------------------
  |  Branch (587:13): [True: 9.58k, False: 21.2k]
  ------------------
  588|  9.58k|                handler.on_24_hour_time();
  589|  9.58k|                break;
  590|  3.58k|            case CharT{'T'}:
  ------------------
  |  Branch (590:13): [True: 3.58k, False: 27.2k]
  ------------------
  591|  3.58k|                handler.on_iso_time();
  592|  3.58k|                break;
  593|      0|            case CharT{'p'}:
  ------------------
  |  Branch (593:13): [True: 0, False: 30.8k]
  ------------------
  594|      0|            case CharT{'P'}:
  ------------------
  |  Branch (594:13): [True: 0, False: 30.8k]
  ------------------
  595|      0|                handler.on_am_pm();
  596|      0|                break;
  597|      0|            case CharT{'s'}:
  ------------------
  |  Branch (597:13): [True: 0, False: 30.8k]
  ------------------
  598|      0|                handler.on_epoch_offset();
  599|      0|                break;
  600|      0|            case CharT{'Q'}:
  ------------------
  |  Branch (600:13): [True: 0, False: 30.8k]
  ------------------
  601|      0|                handler.on_duration_tick_count();
  602|      0|                break;
  603|      0|            case CharT{'q'}:
  ------------------
  |  Branch (603:13): [True: 0, False: 30.8k]
  ------------------
  604|      0|                handler.on_duration_suffix();
  605|      0|                break;
  606|       |            // 'E'
  607|      0|            case CharT{'E'}: {
  ------------------
  |  Branch (607:13): [True: 0, False: 30.8k]
  ------------------
  608|      0|                if (p == end) {
  ------------------
  |  Branch (608:21): [True: 0, False: 0]
  ------------------
  609|      0|                    handler.on_error("Unexpected end of chrono format string");
  610|      0|                    return p;
  611|      0|                }
  612|      0|                ch = *p;
  613|      0|                ++p;
  614|       |
  615|      0|                switch (ch) {
  616|      0|                    case CharT{'c'}:
  ------------------
  |  Branch (616:21): [True: 0, False: 0]
  ------------------
  617|      0|                        handler.on_loc_datetime(numeric_system::alternative_e);
  618|      0|                        break;
  619|      0|                    case CharT{'C'}:
  ------------------
  |  Branch (619:21): [True: 0, False: 0]
  ------------------
  620|      0|                        handler.on_century(numeric_system::alternative_e);
  621|      0|                        break;
  622|      0|                    case CharT{'x'}:
  ------------------
  |  Branch (622:21): [True: 0, False: 0]
  ------------------
  623|      0|                        handler.on_loc_date(numeric_system::alternative_e);
  624|      0|                        break;
  625|      0|                    case CharT{'X'}:
  ------------------
  |  Branch (625:21): [True: 0, False: 0]
  ------------------
  626|      0|                        handler.on_loc_time(numeric_system::alternative_e);
  627|      0|                        break;
  628|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (628:21): [True: 0, False: 0]
  ------------------
  629|      0|                        handler.on_loc_offset_year();
  630|      0|                        break;
  631|      0|                    case CharT{'Y'}:
  ------------------
  |  Branch (631:21): [True: 0, False: 0]
  ------------------
  632|      0|                        handler.on_full_year(numeric_system::alternative_e);
  633|      0|                        break;
  634|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (634:21): [True: 0, False: 0]
  ------------------
  635|      0|                        handler.on_tz_offset(numeric_system::alternative_e);
  636|      0|                        break;
  637|      0|                    default:
  ------------------
  |  Branch (637:21): [True: 0, False: 0]
  ------------------
  638|      0|                        handler.on_error(
  639|      0|                            "Invalid character following 'E' in chrono format "
  640|      0|                            "string");
  641|      0|                        return p;
  642|      0|                }
  643|      0|                break;
  644|      0|            }
  645|       |            // 'O'
  646|      0|            case CharT{'O'}: {
  ------------------
  |  Branch (646:13): [True: 0, False: 30.8k]
  ------------------
  647|      0|                if (p == end) {
  ------------------
  |  Branch (647:21): [True: 0, False: 0]
  ------------------
  648|      0|                    handler.on_error("Unexpected end of chrono format string");
  649|      0|                    return p;
  650|      0|                }
  651|      0|                ch = *p;
  652|      0|                ++p;
  653|       |
  654|      0|                switch (ch) {
  655|      0|                    case CharT{'d'}:
  ------------------
  |  Branch (655:21): [True: 0, False: 0]
  ------------------
  656|      0|                    case CharT{'e'}:
  ------------------
  |  Branch (656:21): [True: 0, False: 0]
  ------------------
  657|      0|                        handler.on_day_of_month(numeric_system::alternative_o);
  658|      0|                        break;
  659|      0|                    case CharT{'H'}:
  ------------------
  |  Branch (659:21): [True: 0, False: 0]
  ------------------
  660|      0|                    case CharT{'k'}:
  ------------------
  |  Branch (660:21): [True: 0, False: 0]
  ------------------
  661|      0|                        handler.on_24_hour(numeric_system::alternative_o);
  662|      0|                        break;
  663|      0|                    case CharT{'I'}:
  ------------------
  |  Branch (663:21): [True: 0, False: 0]
  ------------------
  664|      0|                    case CharT{'l'}:
  ------------------
  |  Branch (664:21): [True: 0, False: 0]
  ------------------
  665|      0|                        handler.on_12_hour(numeric_system::alternative_o);
  666|      0|                        break;
  667|      0|                    case CharT{'m'}:
  ------------------
  |  Branch (667:21): [True: 0, False: 0]
  ------------------
  668|      0|                        handler.on_dec_month(numeric_system::alternative_o);
  669|      0|                        break;
  670|      0|                    case CharT{'M'}:
  ------------------
  |  Branch (670:21): [True: 0, False: 0]
  ------------------
  671|      0|                        handler.on_minute(numeric_system::alternative_o);
  672|      0|                        break;
  673|      0|                    case CharT{'S'}:
  ------------------
  |  Branch (673:21): [True: 0, False: 0]
  ------------------
  674|      0|                        handler.on_second(numeric_system::alternative_o);
  675|      0|                        break;
  676|      0|                    case CharT{'U'}:
  ------------------
  |  Branch (676:21): [True: 0, False: 0]
  ------------------
  677|      0|                        handler.on_dec0_week_of_year(
  678|      0|                            numeric_system::alternative_o);
  679|      0|                        break;
  680|      0|                    case CharT{'w'}:
  ------------------
  |  Branch (680:21): [True: 0, False: 0]
  ------------------
  681|      0|                        handler.on_dec0_weekday(numeric_system::alternative_o);
  682|      0|                        break;
  683|      0|                    case CharT{'W'}:
  ------------------
  |  Branch (683:21): [True: 0, False: 0]
  ------------------
  684|      0|                        handler.on_dec1_weekday(numeric_system::alternative_o);
  685|      0|                        break;
  686|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (686:21): [True: 0, False: 0]
  ------------------
  687|      0|                        handler.on_short_year(numeric_system::alternative_o);
  688|      0|                        break;
  689|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (689:21): [True: 0, False: 0]
  ------------------
  690|      0|                        handler.on_tz_offset(numeric_system::alternative_o);
  691|      0|                        break;
  692|      0|                    default:
  ------------------
  |  Branch (692:21): [True: 0, False: 0]
  ------------------
  693|      0|                        handler.on_error(
  694|      0|                            "Invalid character following 'O' in chrono format "
  695|      0|                            "string");
  696|      0|                        return p;
  697|      0|                }
  698|      0|                break;
  699|      0|            }
  700|      0|            default:
  ------------------
  |  Branch (700:13): [True: 0, False: 30.8k]
  ------------------
  701|      0|                handler.on_error("Invalid character in chrono format string");
  702|      0|                return p;
  703|  30.8k|        }
  704|  30.8k|        begin = p;
  705|       |
  706|  30.8k|        if (!handler.get_error()) {
  ------------------
  |  Branch (706:13): [True: 23.6k, False: 7.20k]
  ------------------
  707|  23.6k|            return p;
  708|  23.6k|        }
  709|  30.8k|    }
  710|  7.13k|    if (begin != p) {
  ------------------
  |  Branch (710:9): [True: 0, False: 7.13k]
  ------------------
  711|      0|        handler.on_text(begin, p);
  712|      0|    }
  713|  7.13k|    handler.verify();
  714|  7.13k|    return p;
  715|  30.7k|}
_ZN3scn2v46detail12setter_state13set_full_yearINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEwEEEEvRT_:
  768|  6.78k|    {                                                                \
  769|  6.78k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  6.78k|        field##_set = 1;                                             \
  774|  6.78k|    }
_ZN3scn2v46detail12setter_state14set_short_yearINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEwEEEEvRT_:
  768|  3.39k|    {                                                                \
  769|  3.39k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  3.39k|        field##_set = 1;                                             \
  774|  3.39k|    }
_ZN3scn2v46detail12setter_state7set_monINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEwEEEEvRT_:
  768|  1.03k|    {                                                                \
  769|  1.03k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  1.03k|        field##_set = 1;                                             \
  774|  1.03k|    }
_ZN3scn2v46detail12setter_state8set_mdayINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEwEEEEvRT_:
  768|     80|    {                                                                \
  769|     80|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|     80|        field##_set = 1;                                             \
  774|     80|    }
_ZN3scn2v46detail12setter_state10set_hour24INS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEwEEEEvRT_:
  768|  6.83k|    {                                                                \
  769|  6.83k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  6.83k|        field##_set = 1;                                             \
  774|  6.83k|    }
_ZN3scn2v46detail12setter_state7set_minINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEwEEEEvRT_:
  768|  6.79k|    {                                                                \
  769|  6.79k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  6.79k|        field##_set = 1;                                             \
  774|  6.79k|    }
_ZN3scn2v46detail12setter_state7set_secINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEwEEEEvRT_:
  768|    226|    {                                                                \
  769|    226|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|    226|        field##_set = 1;                                             \
  774|    226|    }
_ZNK3scn2v46detail12setter_state6verifyINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEwEEEEvRT_:
  799|  7.13k|    {
  800|  7.13k|        if (hour24_set && hour12_set) {
  ------------------
  |  Branch (800:13): [True: 6.44k, False: 692]
  |  Branch (800:27): [True: 0, False: 6.44k]
  ------------------
  801|      0|            return handler.set_error(
  802|      0|                {scan_error::invalid_format_string,
  803|      0|                 "24-hour and 12-hour clocks can't both be in use "
  804|      0|                 "simultaneously"});
  805|      0|        }
  806|  7.13k|        if (am_pm_set) {
  ------------------
  |  Branch (806:13): [True: 0, False: 7.13k]
  ------------------
  807|      0|            if (!hour12_set) {
  ------------------
  |  Branch (807:17): [True: 0, False: 0]
  ------------------
  808|      0|                return handler.set_error(
  809|      0|                    {scan_error::invalid_format_string,
  810|      0|                     "AM/PM specifier can't be set without an hour set"});
  811|      0|            }
  812|      0|            if (hour24_set) {
  ------------------
  |  Branch (812:17): [True: 0, False: 0]
  ------------------
  813|      0|                return handler.set_error(
  814|      0|                    {scan_error::invalid_format_string,
  815|      0|                     "Can't use AM/PM with a 24-hour clock"});
  816|      0|            }
  817|      0|        }
  818|  7.13k|        if (full_year_set && (century_set || short_year_set)) {
  ------------------
  |  Branch (818:13): [True: 12, False: 7.12k]
  |  Branch (818:31): [True: 0, False: 12]
  |  Branch (818:46): [True: 0, False: 12]
  ------------------
  819|      0|            return handler.set_error(
  820|      0|                {scan_error::invalid_format_string,
  821|      0|                 "full-year (%Y) can't be used together with "
  822|      0|                 "century (%C) and short-year (%y)"});
  823|      0|        }
  824|  7.13k|        if (tzoff_set && tzname_set) {
  ------------------
  |  Branch (824:13): [True: 0, False: 7.13k]
  |  Branch (824:26): [True: 0, False: 0]
  ------------------
  825|      0|            return handler.set_error(
  826|      0|                {scan_error::invalid_format_string,
  827|      0|                 "tzoff (%z) can't be used together with tzname (%Z)"});
  828|      0|        }
  829|  7.13k|        if ((wday_set || mday_set || yday_set) &&
  ------------------
  |  Branch (829:14): [True: 0, False: 7.13k]
  |  Branch (829:26): [True: 22, False: 7.11k]
  |  Branch (829:38): [True: 0, False: 7.11k]
  ------------------
  830|  7.13k|            !(wday_set ^ mday_set ^ yday_set)) {
  ------------------
  |  Branch (830:13): [True: 0, False: 22]
  ------------------
  831|      0|            return handler.set_error(
  832|      0|                {scan_error::invalid_format_string,
  833|      0|                 "Only up to one of wday (%a/%u/%w), mday "
  834|      0|                 "(%d/%e), and yday (%j) can be set at once"});
  835|      0|        }
  836|  7.13k|    }
_ZN3scn2v46detail25parse_chrono_format_specsIwRNS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEEEEPKT_SG_SG_OT0_:
  376|  30.7k|{
  377|  30.7k|    if (begin == end || *begin == CharT{'}'}) {
  ------------------
  |  Branch (377:9): [True: 0, False: 30.7k]
  |  Branch (377:25): [True: 0, False: 30.7k]
  ------------------
  378|      0|        handler.on_error("chrono format specs can't be empty");
  379|      0|        return begin;
  380|      0|    }
  381|       |
  382|  30.7k|    auto p = begin;
  383|  30.7k|    if (*p == CharT{'L'}) {
  ------------------
  |  Branch (383:9): [True: 0, False: 30.7k]
  ------------------
  384|      0|        handler.on_localized();
  385|      0|        begin = ++p;
  386|      0|        if (p == end) {
  ------------------
  |  Branch (386:13): [True: 0, False: 0]
  ------------------
  387|      0|            handler.on_error("chrono format specs can't be empty");
  388|      0|            return p;
  389|      0|        }
  390|      0|    }
  391|       |
  392|  30.7k|    if (p == end || *p != CharT{'%'}) {
  ------------------
  |  Branch (392:9): [True: 0, False: 30.7k]
  |  Branch (392:21): [True: 0, False: 30.7k]
  ------------------
  393|      0|        handler.on_error(
  394|      0|            "chrono format spec must start with a conversion specifier (%...)");
  395|      0|        return p;
  396|      0|    }
  397|       |
  398|  38.0k|    while (p != end) {
  ------------------
  |  Branch (398:12): [True: 30.9k, False: 7.13k]
  ------------------
  399|  30.9k|        auto ch = *p;
  400|  30.9k|        if (ch == CharT{'}'}) {
  ------------------
  |  Branch (400:13): [True: 0, False: 30.9k]
  ------------------
  401|      0|            break;
  402|      0|        }
  403|  30.9k|        if (ch != CharT{'%'}) {
  ------------------
  |  Branch (403:13): [True: 70, False: 30.8k]
  ------------------
  404|     70|            if (ch == 0x20 || (ch >= 0x09 && ch <= 0x0d)) {
  ------------------
  |  Branch (404:17): [True: 0, False: 70]
  |  Branch (404:32): [True: 70, False: 0]
  |  Branch (404:46): [True: 0, False: 70]
  ------------------
  405|       |                // Simple ASCII space
  406|      0|                handler.on_text(begin, p);
  407|      0|                handler.on_whitespace();
  408|      0|                begin = p += 1;
  409|      0|                continue;
  410|      0|            }
  411|     70|            const auto cp_len =
  412|     70|                detail::code_point_length_by_starting_code_unit(ch);
  413|     70|            if (cp_len == 0) {
  ------------------
  |  Branch (413:17): [True: 0, False: 70]
  ------------------
  414|      0|                handler.on_error("Invalid literal character");
  415|      0|                return p;
  416|      0|            }
  417|     70|            if (cp_len > 1) {
  ------------------
  |  Branch (417:17): [True: 0, False: 70]
  ------------------
  418|       |                // Multi code unit code point,
  419|       |                // possible space
  420|      0|                auto cp_start_p = p;
  421|      0|                CharT buffer[4] = {};
  422|      0|                for (std::size_t i = 0; i < cp_len; ++i) {
  ------------------
  |  Branch (422:41): [True: 0, False: 0]
  ------------------
  423|      0|                    if (p == end) {
  ------------------
  |  Branch (423:25): [True: 0, False: 0]
  ------------------
  424|      0|                        handler.on_error("Invalid literal character");
  425|      0|                        return p;
  426|      0|                    }
  427|      0|                    buffer[i] = *p;
  428|      0|                    ++p;
  429|      0|                }
  430|      0|                if (is_cp_space(decode_code_point_exhaustive(
  ------------------
  |  Branch (430:21): [True: 0, False: 0]
  ------------------
  431|      0|                        std::basic_string_view<CharT>{buffer, cp_len}))) {
  432|      0|                    handler.on_text(begin, cp_start_p);
  433|      0|                    handler.on_whitespace();
  434|      0|                    begin = p;
  435|      0|                    continue;
  436|      0|                }
  437|      0|            }
  438|     70|            ++p;
  439|     70|            continue;
  440|     70|        }
  441|  30.8k|        if (begin != p) {
  ------------------
  |  Branch (441:13): [True: 70, False: 30.7k]
  ------------------
  442|     70|            handler.on_text(begin, p);
  443|     70|        }
  444|  30.8k|        ++p;  // Consume '%'
  445|  30.8k|        if (p == end) {
  ------------------
  |  Branch (445:13): [True: 0, False: 30.8k]
  ------------------
  446|      0|            handler.on_error("Unexpected end of chrono format string");
  447|      0|            return p;
  448|      0|        }
  449|       |
  450|  30.8k|        ch = *p;
  451|  30.8k|        ++p;
  452|       |
  453|  30.8k|        switch (ch) {
  454|      0|            case CharT{'%'}:
  ------------------
  |  Branch (454:13): [True: 0, False: 30.8k]
  ------------------
  455|      0|                handler.on_text(&ch, &ch + 1);
  456|      0|                break;
  457|      0|            case CharT{'n'}:
  ------------------
  |  Branch (457:13): [True: 0, False: 30.8k]
  ------------------
  458|      0|            case CharT{'t'}:
  ------------------
  |  Branch (458:13): [True: 0, False: 30.8k]
  ------------------
  459|      0|                handler.on_whitespace();
  460|      0|                break;
  461|       |            // Year
  462|  3.38k|            case CharT{'Y'}:
  ------------------
  |  Branch (462:13): [True: 3.38k, False: 27.4k]
  ------------------
  463|  3.38k|                handler.on_full_year();
  464|  3.38k|                break;
  465|      0|            case CharT{'y'}:
  ------------------
  |  Branch (465:13): [True: 0, False: 30.8k]
  ------------------
  466|      0|                handler.on_short_year();
  467|      0|                break;
  468|      0|            case CharT{'C'}:
  ------------------
  |  Branch (468:13): [True: 0, False: 30.8k]
  ------------------
  469|      0|                handler.on_century();
  470|      0|                break;
  471|      0|            case CharT{'G'}:
  ------------------
  |  Branch (471:13): [True: 0, False: 30.8k]
  ------------------
  472|      0|                handler.on_iso_week_based_year();
  473|      0|                break;
  474|      0|            case CharT{'g'}:
  ------------------
  |  Branch (474:13): [True: 0, False: 30.8k]
  ------------------
  475|      0|                handler.on_iso_week_based_short_year();
  476|      0|                break;
  477|       |            // Month
  478|  4.03k|            case CharT{'b'}:
  ------------------
  |  Branch (478:13): [True: 4.03k, False: 26.7k]
  ------------------
  479|  4.03k|            case CharT{'B'}:
  ------------------
  |  Branch (479:13): [True: 0, False: 30.8k]
  ------------------
  480|  4.03k|            case CharT{'h'}:
  ------------------
  |  Branch (480:13): [True: 0, False: 30.8k]
  ------------------
  481|  4.03k|                handler.on_month_name();
  482|  4.03k|                break;
  483|     38|            case CharT{'m'}:
  ------------------
  |  Branch (483:13): [True: 38, False: 30.7k]
  ------------------
  484|     38|                handler.on_dec_month();
  485|     38|                break;
  486|       |            // Week
  487|      0|            case CharT{'U'}:
  ------------------
  |  Branch (487:13): [True: 0, False: 30.8k]
  ------------------
  488|      0|                handler.on_dec0_week_of_year();
  489|      0|                break;
  490|      0|            case CharT{'W'}:
  ------------------
  |  Branch (490:13): [True: 0, False: 30.8k]
  ------------------
  491|      0|                handler.on_dec1_week_of_year();
  492|      0|                break;
  493|      0|            case CharT{'V'}:
  ------------------
  |  Branch (493:13): [True: 0, False: 30.8k]
  ------------------
  494|      0|                handler.on_iso_week_of_year();
  495|      0|                break;
  496|       |            // Day of year
  497|      0|            case CharT{'j'}:
  ------------------
  |  Branch (497:13): [True: 0, False: 30.8k]
  ------------------
  498|      0|                handler.on_day_of_year();
  499|      0|                break;
  500|       |            // Day of month
  501|     20|            case CharT{'d'}:
  ------------------
  |  Branch (501:13): [True: 20, False: 30.8k]
  ------------------
  502|     20|            case CharT{'e'}:
  ------------------
  |  Branch (502:13): [True: 0, False: 30.8k]
  ------------------
  503|     20|                handler.on_day_of_month();
  504|     20|                break;
  505|       |            // Day of week
  506|  3.38k|            case CharT{'a'}:
  ------------------
  |  Branch (506:13): [True: 3.38k, False: 27.4k]
  ------------------
  507|  3.38k|            case CharT{'A'}:
  ------------------
  |  Branch (507:13): [True: 0, False: 30.8k]
  ------------------
  508|  3.38k|                handler.on_weekday_name();
  509|  3.38k|                break;
  510|      0|            case CharT{'w'}:
  ------------------
  |  Branch (510:13): [True: 0, False: 30.8k]
  ------------------
  511|      0|                handler.on_dec0_weekday();
  512|      0|                break;
  513|      0|            case CharT{'u'}:
  ------------------
  |  Branch (513:13): [True: 0, False: 30.8k]
  ------------------
  514|      0|                handler.on_dec1_weekday();
  515|      0|                break;
  516|       |            // Hour
  517|     12|            case CharT{'H'}:
  ------------------
  |  Branch (517:13): [True: 12, False: 30.8k]
  ------------------
  518|     12|            case CharT{'k'}:
  ------------------
  |  Branch (518:13): [True: 0, False: 30.8k]
  ------------------
  519|     12|                handler.on_24_hour();
  520|     12|                break;
  521|      0|            case CharT{'I'}:
  ------------------
  |  Branch (521:13): [True: 0, False: 30.8k]
  ------------------
  522|      0|            case CharT{'l'}:
  ------------------
  |  Branch (522:13): [True: 0, False: 30.8k]
  ------------------
  523|      0|                handler.on_12_hour();
  524|      0|                break;
  525|       |            // Minute
  526|      0|            case CharT{'M'}:
  ------------------
  |  Branch (526:13): [True: 0, False: 30.8k]
  ------------------
  527|      0|                handler.on_minute();
  528|      0|                break;
  529|       |            // Second
  530|      0|            case CharT{'S'}:
  ------------------
  |  Branch (530:13): [True: 0, False: 30.8k]
  ------------------
  531|      0|                handler.on_second();
  532|      0|                break;
  533|       |            // Subsecond
  534|      0|            case CharT{'.'}: {
  ------------------
  |  Branch (534:13): [True: 0, False: 30.8k]
  ------------------
  535|       |                // p already increased before the switch
  536|      0|                if (p == end) {
  ------------------
  |  Branch (536:21): [True: 0, False: 0]
  ------------------
  537|      0|                    handler.on_error("Unexpected end of chrono format string");
  538|      0|                    return p;
  539|      0|                }
  540|      0|                bool use_alternate = false;
  541|      0|                if (*p == CharT{'E'} || *p == CharT{'O'}) {
  ------------------
  |  Branch (541:21): [True: 0, False: 0]
  |  Branch (541:41): [True: 0, False: 0]
  ------------------
  542|      0|                    ++p;
  543|      0|                    if (p == end) {
  ------------------
  |  Branch (543:25): [True: 0, False: 0]
  ------------------
  544|      0|                        handler.on_error(
  545|      0|                            "Unexpected end of chrono format string");
  546|      0|                        return p;
  547|      0|                    }
  548|      0|                    use_alternate = true;
  549|      0|                }
  550|      0|                if (*p != CharT{'S'}) {
  ------------------
  |  Branch (550:21): [True: 0, False: 0]
  ------------------
  551|      0|                    handler.on_error(
  552|      0|                        "Expected `S` after `%.` in format string");
  553|      0|                    return p;
  554|      0|                }
  555|      0|                ++p;
  556|      0|                handler.on_subsecond(use_alternate
  ------------------
  |  Branch (556:38): [True: 0, False: 0]
  ------------------
  557|      0|                                         ? numeric_system::alternative_e
  558|      0|                                         : numeric_system::standard);
  559|      0|                break;
  560|      0|            }
  561|       |            // Timezones
  562|      0|            case CharT{'z'}:
  ------------------
  |  Branch (562:13): [True: 0, False: 30.8k]
  ------------------
  563|      0|                handler.on_tz_offset();
  564|      0|                break;
  565|      0|            case CharT{'Z'}:
  ------------------
  |  Branch (565:13): [True: 0, False: 30.8k]
  ------------------
  566|      0|                handler.on_tz_name();
  567|      0|                break;
  568|       |            // Other
  569|      0|            case CharT{'c'}:
  ------------------
  |  Branch (569:13): [True: 0, False: 30.8k]
  ------------------
  570|      0|                handler.on_loc_datetime();
  571|      0|                break;
  572|      0|            case CharT{'x'}:
  ------------------
  |  Branch (572:13): [True: 0, False: 30.8k]
  ------------------
  573|      0|                handler.on_loc_date();
  574|      0|                break;
  575|      0|            case CharT{'X'}:
  ------------------
  |  Branch (575:13): [True: 0, False: 30.8k]
  ------------------
  576|      0|                handler.on_loc_time();
  577|      0|                break;
  578|  3.39k|            case CharT{'D'}:
  ------------------
  |  Branch (578:13): [True: 3.39k, False: 27.4k]
  ------------------
  579|  3.39k|                handler.on_us_date();
  580|  3.39k|                break;
  581|  3.39k|            case CharT{'F'}:
  ------------------
  |  Branch (581:13): [True: 3.39k, False: 27.4k]
  ------------------
  582|  3.39k|                handler.on_iso_date();
  583|  3.39k|                break;
  584|      0|            case CharT{'r'}:
  ------------------
  |  Branch (584:13): [True: 0, False: 30.8k]
  ------------------
  585|      0|                handler.on_loc_12_hour_time();
  586|      0|                break;
  587|  9.58k|            case CharT{'R'}:
  ------------------
  |  Branch (587:13): [True: 9.58k, False: 21.2k]
  ------------------
  588|  9.58k|                handler.on_24_hour_time();
  589|  9.58k|                break;
  590|  3.58k|            case CharT{'T'}:
  ------------------
  |  Branch (590:13): [True: 3.58k, False: 27.2k]
  ------------------
  591|  3.58k|                handler.on_iso_time();
  592|  3.58k|                break;
  593|      0|            case CharT{'p'}:
  ------------------
  |  Branch (593:13): [True: 0, False: 30.8k]
  ------------------
  594|      0|            case CharT{'P'}:
  ------------------
  |  Branch (594:13): [True: 0, False: 30.8k]
  ------------------
  595|      0|                handler.on_am_pm();
  596|      0|                break;
  597|      0|            case CharT{'s'}:
  ------------------
  |  Branch (597:13): [True: 0, False: 30.8k]
  ------------------
  598|      0|                handler.on_epoch_offset();
  599|      0|                break;
  600|      0|            case CharT{'Q'}:
  ------------------
  |  Branch (600:13): [True: 0, False: 30.8k]
  ------------------
  601|      0|                handler.on_duration_tick_count();
  602|      0|                break;
  603|      0|            case CharT{'q'}:
  ------------------
  |  Branch (603:13): [True: 0, False: 30.8k]
  ------------------
  604|      0|                handler.on_duration_suffix();
  605|      0|                break;
  606|       |            // 'E'
  607|      0|            case CharT{'E'}: {
  ------------------
  |  Branch (607:13): [True: 0, False: 30.8k]
  ------------------
  608|      0|                if (p == end) {
  ------------------
  |  Branch (608:21): [True: 0, False: 0]
  ------------------
  609|      0|                    handler.on_error("Unexpected end of chrono format string");
  610|      0|                    return p;
  611|      0|                }
  612|      0|                ch = *p;
  613|      0|                ++p;
  614|       |
  615|      0|                switch (ch) {
  616|      0|                    case CharT{'c'}:
  ------------------
  |  Branch (616:21): [True: 0, False: 0]
  ------------------
  617|      0|                        handler.on_loc_datetime(numeric_system::alternative_e);
  618|      0|                        break;
  619|      0|                    case CharT{'C'}:
  ------------------
  |  Branch (619:21): [True: 0, False: 0]
  ------------------
  620|      0|                        handler.on_century(numeric_system::alternative_e);
  621|      0|                        break;
  622|      0|                    case CharT{'x'}:
  ------------------
  |  Branch (622:21): [True: 0, False: 0]
  ------------------
  623|      0|                        handler.on_loc_date(numeric_system::alternative_e);
  624|      0|                        break;
  625|      0|                    case CharT{'X'}:
  ------------------
  |  Branch (625:21): [True: 0, False: 0]
  ------------------
  626|      0|                        handler.on_loc_time(numeric_system::alternative_e);
  627|      0|                        break;
  628|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (628:21): [True: 0, False: 0]
  ------------------
  629|      0|                        handler.on_loc_offset_year();
  630|      0|                        break;
  631|      0|                    case CharT{'Y'}:
  ------------------
  |  Branch (631:21): [True: 0, False: 0]
  ------------------
  632|      0|                        handler.on_full_year(numeric_system::alternative_e);
  633|      0|                        break;
  634|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (634:21): [True: 0, False: 0]
  ------------------
  635|      0|                        handler.on_tz_offset(numeric_system::alternative_e);
  636|      0|                        break;
  637|      0|                    default:
  ------------------
  |  Branch (637:21): [True: 0, False: 0]
  ------------------
  638|      0|                        handler.on_error(
  639|      0|                            "Invalid character following 'E' in chrono format "
  640|      0|                            "string");
  641|      0|                        return p;
  642|      0|                }
  643|      0|                break;
  644|      0|            }
  645|       |            // 'O'
  646|      0|            case CharT{'O'}: {
  ------------------
  |  Branch (646:13): [True: 0, False: 30.8k]
  ------------------
  647|      0|                if (p == end) {
  ------------------
  |  Branch (647:21): [True: 0, False: 0]
  ------------------
  648|      0|                    handler.on_error("Unexpected end of chrono format string");
  649|      0|                    return p;
  650|      0|                }
  651|      0|                ch = *p;
  652|      0|                ++p;
  653|       |
  654|      0|                switch (ch) {
  655|      0|                    case CharT{'d'}:
  ------------------
  |  Branch (655:21): [True: 0, False: 0]
  ------------------
  656|      0|                    case CharT{'e'}:
  ------------------
  |  Branch (656:21): [True: 0, False: 0]
  ------------------
  657|      0|                        handler.on_day_of_month(numeric_system::alternative_o);
  658|      0|                        break;
  659|      0|                    case CharT{'H'}:
  ------------------
  |  Branch (659:21): [True: 0, False: 0]
  ------------------
  660|      0|                    case CharT{'k'}:
  ------------------
  |  Branch (660:21): [True: 0, False: 0]
  ------------------
  661|      0|                        handler.on_24_hour(numeric_system::alternative_o);
  662|      0|                        break;
  663|      0|                    case CharT{'I'}:
  ------------------
  |  Branch (663:21): [True: 0, False: 0]
  ------------------
  664|      0|                    case CharT{'l'}:
  ------------------
  |  Branch (664:21): [True: 0, False: 0]
  ------------------
  665|      0|                        handler.on_12_hour(numeric_system::alternative_o);
  666|      0|                        break;
  667|      0|                    case CharT{'m'}:
  ------------------
  |  Branch (667:21): [True: 0, False: 0]
  ------------------
  668|      0|                        handler.on_dec_month(numeric_system::alternative_o);
  669|      0|                        break;
  670|      0|                    case CharT{'M'}:
  ------------------
  |  Branch (670:21): [True: 0, False: 0]
  ------------------
  671|      0|                        handler.on_minute(numeric_system::alternative_o);
  672|      0|                        break;
  673|      0|                    case CharT{'S'}:
  ------------------
  |  Branch (673:21): [True: 0, False: 0]
  ------------------
  674|      0|                        handler.on_second(numeric_system::alternative_o);
  675|      0|                        break;
  676|      0|                    case CharT{'U'}:
  ------------------
  |  Branch (676:21): [True: 0, False: 0]
  ------------------
  677|      0|                        handler.on_dec0_week_of_year(
  678|      0|                            numeric_system::alternative_o);
  679|      0|                        break;
  680|      0|                    case CharT{'w'}:
  ------------------
  |  Branch (680:21): [True: 0, False: 0]
  ------------------
  681|      0|                        handler.on_dec0_weekday(numeric_system::alternative_o);
  682|      0|                        break;
  683|      0|                    case CharT{'W'}:
  ------------------
  |  Branch (683:21): [True: 0, False: 0]
  ------------------
  684|      0|                        handler.on_dec1_weekday(numeric_system::alternative_o);
  685|      0|                        break;
  686|      0|                    case CharT{'y'}:
  ------------------
  |  Branch (686:21): [True: 0, False: 0]
  ------------------
  687|      0|                        handler.on_short_year(numeric_system::alternative_o);
  688|      0|                        break;
  689|      0|                    case CharT{'z'}:
  ------------------
  |  Branch (689:21): [True: 0, False: 0]
  ------------------
  690|      0|                        handler.on_tz_offset(numeric_system::alternative_o);
  691|      0|                        break;
  692|      0|                    default:
  ------------------
  |  Branch (692:21): [True: 0, False: 0]
  ------------------
  693|      0|                        handler.on_error(
  694|      0|                            "Invalid character following 'O' in chrono format "
  695|      0|                            "string");
  696|      0|                        return p;
  697|      0|                }
  698|      0|                break;
  699|      0|            }
  700|      0|            default:
  ------------------
  |  Branch (700:13): [True: 0, False: 30.8k]
  ------------------
  701|      0|                handler.on_error("Invalid character in chrono format string");
  702|      0|                return p;
  703|  30.8k|        }
  704|  30.8k|        begin = p;
  705|       |
  706|  30.8k|        if (!handler.get_error()) {
  ------------------
  |  Branch (706:13): [True: 23.6k, False: 7.20k]
  ------------------
  707|  23.6k|            return p;
  708|  23.6k|        }
  709|  30.8k|    }
  710|  7.13k|    if (begin != p) {
  ------------------
  |  Branch (710:9): [True: 0, False: 7.13k]
  ------------------
  711|      0|        handler.on_text(begin, p);
  712|      0|    }
  713|  7.13k|    handler.verify();
  714|  7.13k|    return p;
  715|  30.7k|}
_ZN3scn2v46detail12setter_state13set_full_yearINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEvRT_:
  768|  6.78k|    {                                                                \
  769|  6.78k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  6.78k|        field##_set = 1;                                             \
  774|  6.78k|    }
_ZN3scn2v46detail12setter_state14set_short_yearINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEvRT_:
  768|  3.39k|    {                                                                \
  769|  3.39k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  3.39k|        field##_set = 1;                                             \
  774|  3.39k|    }
_ZN3scn2v46detail12setter_state7set_monINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEvRT_:
  768|  1.03k|    {                                                                \
  769|  1.03k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  1.03k|        field##_set = 1;                                             \
  774|  1.03k|    }
_ZN3scn2v46detail12setter_state8set_mdayINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEvRT_:
  768|     80|    {                                                                \
  769|     80|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|     80|        field##_set = 1;                                             \
  774|     80|    }
_ZN3scn2v46detail12setter_state10set_hour24INS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEvRT_:
  768|  6.83k|    {                                                                \
  769|  6.83k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  6.83k|        field##_set = 1;                                             \
  774|  6.83k|    }
_ZN3scn2v46detail12setter_state7set_minINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEvRT_:
  768|  6.79k|    {                                                                \
  769|  6.79k|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|  6.79k|        field##_set = 1;                                             \
  774|  6.79k|    }
_ZN3scn2v46detail12setter_state7set_secINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEvRT_:
  768|    226|    {                                                                \
  769|    226|        if (field##_set) {                                           \
  770|      0|            handler.set_error({scan_error::invalid_format_string,    \
  771|      0|                               #field "-field set multiple times"}); \
  772|      0|        }                                                            \
  773|    226|        field##_set = 1;                                             \
  774|    226|    }
_ZNK3scn2v46detail12setter_state6verifyINS1_9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEvRT_:
  799|  7.13k|    {
  800|  7.13k|        if (hour24_set && hour12_set) {
  ------------------
  |  Branch (800:13): [True: 6.44k, False: 692]
  |  Branch (800:27): [True: 0, False: 6.44k]
  ------------------
  801|      0|            return handler.set_error(
  802|      0|                {scan_error::invalid_format_string,
  803|      0|                 "24-hour and 12-hour clocks can't both be in use "
  804|      0|                 "simultaneously"});
  805|      0|        }
  806|  7.13k|        if (am_pm_set) {
  ------------------
  |  Branch (806:13): [True: 0, False: 7.13k]
  ------------------
  807|      0|            if (!hour12_set) {
  ------------------
  |  Branch (807:17): [True: 0, False: 0]
  ------------------
  808|      0|                return handler.set_error(
  809|      0|                    {scan_error::invalid_format_string,
  810|      0|                     "AM/PM specifier can't be set without an hour set"});
  811|      0|            }
  812|      0|            if (hour24_set) {
  ------------------
  |  Branch (812:17): [True: 0, False: 0]
  ------------------
  813|      0|                return handler.set_error(
  814|      0|                    {scan_error::invalid_format_string,
  815|      0|                     "Can't use AM/PM with a 24-hour clock"});
  816|      0|            }
  817|      0|        }
  818|  7.13k|        if (full_year_set && (century_set || short_year_set)) {
  ------------------
  |  Branch (818:13): [True: 12, False: 7.12k]
  |  Branch (818:31): [True: 0, False: 12]
  |  Branch (818:46): [True: 0, False: 12]
  ------------------
  819|      0|            return handler.set_error(
  820|      0|                {scan_error::invalid_format_string,
  821|      0|                 "full-year (%Y) can't be used together with "
  822|      0|                 "century (%C) and short-year (%y)"});
  823|      0|        }
  824|  7.13k|        if (tzoff_set && tzname_set) {
  ------------------
  |  Branch (824:13): [True: 0, False: 7.13k]
  |  Branch (824:26): [True: 0, False: 0]
  ------------------
  825|      0|            return handler.set_error(
  826|      0|                {scan_error::invalid_format_string,
  827|      0|                 "tzoff (%z) can't be used together with tzname (%Z)"});
  828|      0|        }
  829|  7.13k|        if ((wday_set || mday_set || yday_set) &&
  ------------------
  |  Branch (829:14): [True: 0, False: 7.13k]
  |  Branch (829:26): [True: 22, False: 7.11k]
  |  Branch (829:38): [True: 0, False: 7.11k]
  ------------------
  830|  7.13k|            !(wday_set ^ mday_set ^ yday_set)) {
  ------------------
  |  Branch (830:13): [True: 0, False: 22]
  ------------------
  831|      0|            return handler.set_error(
  832|      0|                {scan_error::invalid_format_string,
  833|      0|                 "Only up to one of wday (%a/%u/%w), mday "
  834|      0|                 "(%d/%e), and yday (%j) can be set at once"});
  835|      0|        }
  836|  7.13k|    }

_ZN3scn2v46detail39code_point_length_by_starting_code_unitIcEEmT_:
 4085|   844k|{
 4086|   844k|    if constexpr (sizeof(U) == 1) {
 4087|   844k|        return utf8_code_point_length_by_starting_code_unit(ch);
 4088|       |    }
 4089|       |    else if constexpr (sizeof(U) == 2) {
 4090|       |        return utf16_code_point_length_by_starting_code_unit(ch);
 4091|       |    }
 4092|       |    else {
 4093|       |        // utf-32
 4094|       |        static_assert(sizeof(U) == 4);
 4095|       |        SCN_UNUSED(ch);
 4096|       |        return 1;
 4097|       |    }
 4098|   844k|}
_ZN3scn2v46detail44utf8_code_point_length_by_starting_code_unitIcEEmT_:
 4049|   844k|{
 4050|   844k|    static_assert(sizeof(U8) == 1);
 4051|       |
 4052|   844k|    SCN_GCC_COMPAT_PUSH
 4053|   844k|    SCN_GCC_COMPAT_IGNORE("-Wsign-conversion")
 4054|   844k|    constexpr char lengths[] =
 4055|   844k|        "\1\1\1\1\1\1\1\1"  // highest bit is 0 -> single-byte
 4056|   844k|        "\1\1\1\1\1\1\1\1"
 4057|   844k|        "\0\0\0\0\0\0\0\0"  // highest bits 10 -> error, non-initial
 4058|       |                            // byte
 4059|   844k|        "\2\2\2\2"          // highest bits 110 -> 2-byte cp
 4060|   844k|        "\3\3"              // highest bits 1110 -> 3-byte cp
 4061|   844k|        "\4";               // highest bits 11110 -> 4-byte cp
 4062|   844k|    return lengths[static_cast<unsigned char>(ch) >> 3];
 4063|   844k|    SCN_GCC_COMPAT_POP
 4064|   844k|}
_ZN3scn2v46detail28decode_code_point_exhaustiveIcEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 4291|   421k|{
 4292|   421k|    if constexpr (sizeof(CharT) == 1) {
 4293|   421k|        return decode_utf8_code_point_exhaustive(input);
 4294|       |    }
 4295|       |    else if constexpr (sizeof(CharT) == 2) {
 4296|       |        return decode_utf16_code_point_exhaustive(input);
 4297|       |    }
 4298|       |    else {
 4299|       |        SCN_EXPECT(input.size() == 1);
 4300|       |        auto cp = static_cast<char32_t>(input.front());
 4301|       |        if (SCN_UNLIKELY(cp >= invalid_code_point)) {
 4302|       |            return invalid_code_point;
 4303|       |        }
 4304|       |        return cp;
 4305|       |    }
 4306|   421k|}
_ZN3scn2v46detail33decode_utf8_code_point_exhaustiveENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
 4104|   421k|{
 4105|   421k|    SCN_EXPECT(!input.empty() && input.size() <= 4);
  ------------------
  |  | 1104|   421k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   421k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4106|       |
 4107|   421k|    const auto is_trailing_code_unit = [](char ch) {
 4108|   421k|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 4109|   421k|    };
 4110|       |
 4111|   421k|    if (input.size() == 1) {
  ------------------
  |  Branch (4111:9): [True: 411k, False: 9.64k]
  ------------------
 4112|   411k|        if (static_cast<unsigned char>(input[0]) >= 0x80) {
  ------------------
  |  Branch (4112:13): [True: 174, False: 411k]
  ------------------
 4113|    174|            SCN_UNLIKELY_ATTR
 4114|    174|            return invalid_code_point;
 4115|    174|        }
 4116|   411k|        return static_cast<char32_t>(input[0]);
 4117|   411k|    }
 4118|       |
 4119|  9.64k|    if (input.size() == 2) {
  ------------------
  |  Branch (4119:9): [True: 7.89k, False: 1.74k]
  ------------------
 4120|  7.89k|        if ((static_cast<unsigned char>(input[0]) & 0xe0) != 0xc0) {
  ------------------
  |  Branch (4120:13): [True: 60, False: 7.83k]
  ------------------
 4121|     60|            SCN_UNLIKELY_ATTR
 4122|     60|            return invalid_code_point;
 4123|     60|        }
 4124|  7.83k|        if (!is_trailing_code_unit(input[1])) {
  ------------------
  |  Branch (4124:13): [True: 1.80k, False: 6.03k]
  ------------------
 4125|  1.80k|            SCN_UNLIKELY_ATTR
 4126|  1.80k|            return invalid_code_point;
 4127|  1.80k|        }
 4128|       |
 4129|  6.03k|        char32_t cp{};
 4130|  6.03k|        cp |= (static_cast<char32_t>(input[0]) & 0x1f) << 6;
 4131|  6.03k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 0;
 4132|  6.03k|        return cp;
 4133|  7.83k|    }
 4134|       |
 4135|  1.74k|    if (input.size() == 3) {
  ------------------
  |  Branch (4135:9): [True: 672, False: 1.07k]
  ------------------
 4136|    672|        if ((static_cast<unsigned char>(input[0]) & 0xf0) != 0xe0) {
  ------------------
  |  Branch (4136:13): [True: 48, False: 624]
  ------------------
 4137|     48|            SCN_UNLIKELY_ATTR
 4138|     48|            return invalid_code_point;
 4139|     48|        }
 4140|    624|        if (!is_trailing_code_unit(input[1]) ||
  ------------------
  |  Branch (4140:13): [True: 363, False: 261]
  ------------------
 4141|    624|            !is_trailing_code_unit(input[2])) {
  ------------------
  |  Branch (4141:13): [True: 138, False: 123]
  ------------------
 4142|    501|            SCN_UNLIKELY_ATTR
 4143|    501|            return invalid_code_point;
 4144|    501|        }
 4145|       |
 4146|    123|        char32_t cp{};
 4147|    123|        cp |= (static_cast<char32_t>(input[0]) & 0x0f) << 12;
 4148|    123|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 6;
 4149|    123|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 0;
 4150|    123|        return cp;
 4151|    624|    }
 4152|       |
 4153|  1.07k|    if (input.size() == 4) {
  ------------------
  |  Branch (4153:9): [True: 1.07k, False: 0]
  ------------------
 4154|  1.07k|        if ((static_cast<unsigned char>(input[0]) & 0xf8) != 0xf0) {
  ------------------
  |  Branch (4154:13): [True: 0, False: 1.07k]
  ------------------
 4155|      0|            SCN_UNLIKELY_ATTR
 4156|      0|            return invalid_code_point;
 4157|      0|        }
 4158|  1.07k|        if (static_cast<unsigned char>(input[0]) > 0xf4) {
  ------------------
  |  Branch (4158:13): [True: 304, False: 771]
  ------------------
 4159|    304|            SCN_UNLIKELY_ATTR
 4160|    304|            return invalid_code_point;
 4161|    304|        }
 4162|    771|        if (!is_trailing_code_unit(input[1]) ||
  ------------------
  |  Branch (4162:13): [True: 296, False: 475]
  ------------------
 4163|    771|            !is_trailing_code_unit(input[2]) ||
  ------------------
  |  Branch (4163:13): [True: 128, False: 347]
  ------------------
 4164|    771|            !is_trailing_code_unit(input[3])) {
  ------------------
  |  Branch (4164:13): [True: 137, False: 210]
  ------------------
 4165|    561|            SCN_UNLIKELY_ATTR
 4166|    561|            return invalid_code_point;
 4167|    561|        }
 4168|       |
 4169|    210|        char32_t cp{};
 4170|    210|        cp |= (static_cast<char32_t>(input[0]) & 0x07) << 18;
 4171|    210|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 12;
 4172|    210|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 6;
 4173|    210|        cp |= (static_cast<char32_t>(input[3]) & 0x3f) << 0;
 4174|    210|        return cp;
 4175|    771|    }
 4176|       |
 4177|      0|#if !SCN_GCC || SCN_GCC >= SCN_COMPILER(8, 0, 0)
 4178|       |    // gcc 7 thinks we'll get here, even when we won't
 4179|      0|    SCN_EXPECT(false);
  ------------------
  |  | 1104|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4180|      0|#endif
 4181|      0|    SCN_UNREACHABLE;
  ------------------
  |  | 1067|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 4182|      0|}
_ZZN3scn2v46detail33decode_utf8_code_point_exhaustiveENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENKUlcE_clEc:
 4107|  10.3k|    const auto is_trailing_code_unit = [](char ch) {
 4108|  10.3k|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 4109|  10.3k|    };
_ZN3scn2v46detail31make_string_view_from_iteratorsIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS8_8iteratorES9_:
 3977|   319k|{
 3978|       |    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
 3979|       |                                          decltype(first), decltype(last)> &&
 3980|       |                  !SCN_MSVC_DEBUG_ITERATORS) {
 3981|       |        return {first, last};
 3982|       |    }
 3983|   319k|    else {
 3984|   319k|        return {to_address(first), static_cast<size_t>(std::distance(
 3985|   319k|                                       to_address(first), to_address(last)))};
 3986|   319k|    }
 3987|   319k|}
_ZN3scn2v46detail10to_addressIRPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  330|   965k|{
  331|   965k|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  | 1110|   965k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  332|   965k|}
_ZN3scn2v46detail15to_address_implIKcEEPT_S5_NS1_12priority_tagILm2EEE:
  308|  1.28M|{
  309|  1.28M|    return p;
  310|  1.28M|}
_ZN3scn2v46detail25make_string_view_iteratorIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEE8iteratorES8_S9_:
 4008|   458k|{
 4009|       |    if constexpr (std::is_constructible_v<
 4010|       |                      typename std::basic_string_view<CharT>::iterator,
 4011|       |                      decltype(it)> &&
 4012|   458k|                  !SCN_MSVC_DEBUG_ITERATORS) {
 4013|   458k|        SCN_UNUSED(sv);
  ------------------
  |  | 1089|   458k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4014|   458k|        return it;
 4015|       |    }
 4016|       |    else {
 4017|       |        return sv.begin() + std::distance(sv.data(), detail::to_address(it));
 4018|       |    }
 4019|   458k|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2882|  39.4k|    {
 2883|  39.4k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1110|  39.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2884|  39.4k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESE_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2863|  39.4k|    {
 2864|  39.4k|        return decay_copy(t.begin());
 2865|  39.4k|    }
_ZN3scn2v46ranges6detail10decay_copyIPKcEEu7__decayIT_EOS6_:
 2107|   961k|{
 2108|   961k|    return SCN_FWD(t);
  ------------------
  |  | 1110|   961k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2109|   961k|}
_ZNK3scn2v46ranges6detail4end_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2939|   164k|    {
 2940|   164k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1110|   164k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2941|   164k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEPKcSD_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2921|   164k|    {
 2922|   164k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  | 1110|   164k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2923|   164k|    }
_ZN3scn2v44scanIJ2tmENS0_6ranges6detail9subrange_8subrangeIPKcS8_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEEOSE_NS0_24basic_scan_format_stringIcNSJ_13type_identityISE_E4typeEJDpNSV_ISP_E4typeEEEE:
 9892|  13.1k|{
 9893|  13.1k|    auto result = make_scan_result<Source, Args...>();
 9894|  13.1k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  | 1110|  13.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9895|  13.1k|                                   make_scan_args(result->values())));
 9896|  13.1k|    return result;
 9897|  13.1k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJ2tmEEEDav:
 9848|  27.2k|{
 9849|  27.2k|    return scan_result_type<Source, Args...>();
 9850|  27.2k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJ2tmEEENS0_10scan_errorEEC2Ev:
 1565|  27.2k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJ2tmEEENS0_10scan_errorELb1EEC2Ev:
  441|  27.2k|        : m_value(T{}), m_has_value(true)
  442|  27.2k|    {
  443|  27.2k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJ2tmEEC2Ev:
 6692|  27.2k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEC2Ev:
 6535|  81.6k|    constexpr scan_result_range_storage() = default;
_ZN3scn2v46ranges6detail9subrange_8subrangeIPKcS6_EC2Ev:
 3473|  81.6k|    subrange() = default;
_ZN3scn2v46detail25scan_result_value_storageIJ2tmEEC2Ev:
 6466|   124k|    constexpr scan_result_value_storage() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJ2tmEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSC_7is_sameINSG_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISG_EEONSS_ISM_EE:
 9833|  27.2k|{
 9834|  27.2k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  | 1039|  27.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 12.8k, False: 14.3k]
  |  |  ------------------
  ------------------
 9835|  12.8k|        out = unexpected(in.error());
 9836|  12.8k|    }
 9837|  14.3k|    else {
 9838|  14.3k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1108|  14.3k|    static_cast<    \
  |  | 1109|  14.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9839|  14.3k|    }
 9840|  27.2k|}
_ZNK3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEcvbEv:
 1753|  81.6k|    {
 1754|  81.6k|        return has_value();
 1755|  81.6k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE9has_valueEv:
  504|   163k|    {
  505|   163k|        return m_has_value;
  506|   163k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEE5errorEv:
 1759|  38.5k|    {
 1760|  38.5k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1104|  38.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  38.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1761|  38.5k|        return this->get_unexpected().error();
 1762|  38.5k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  487|  38.5k|    {
  488|  38.5k|        return m_unexpected;
  489|  38.5k|    }
_ZNR3scn2v410unexpectedINS0_10scan_errorEE5errorEv:
  379|  3.63M|    {
  380|  3.63M|        return m_unexpected;
  381|  3.63M|    }
_ZN3scn2v410unexpectedINS0_10scan_errorEEC2IRS2_vEEOT_:
  364|  1.90M|        : m_unexpected(std::forward<Err>(e))
  365|  1.90M|    {
  366|  1.90M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  | 1089|  1.90M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  367|  1.90M|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJ2tmEEENS0_10scan_errorEEC2ISC_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISC_OT_EEvE4typeELPv0ETnPNSG_IXsr3stdE16is_convertible_vISI_SC_EEvE4typeELSM_0EEEONS0_10unexpectedISH_EE:
 1629|  12.8k|        : base(unexpect, std::move(e.error())),
 1630|  12.8k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  12.8k|    {
 1632|  12.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJ2tmEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  464|  12.8k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|  12.8k|          m_has_value(false)
  466|  12.8k|    {
  467|  12.8k|    }
_ZN3scn2v410unexpectedINS0_10scan_errorEEC2IJS2_EvEENSt3__110in_place_tEDpOT_:
  373|  1.92M|        : m_unexpected(std::forward<Args>(args)...)
  374|  1.92M|    {
  375|  1.92M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  | 1089|  1.92M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  376|  1.92M|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJ2tmEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  12.8k|    {
 1330|  12.8k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJ2tmEEENS0_10scan_errorEEaSEOSD_:
 1570|  12.8k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJ2tmEEENS0_10scan_errorEvEaSEOSE_:
  916|  12.8k|    {
  917|  12.8k|        assign_common(std::move(other));
  918|  12.8k|        return *this;
  919|  12.8k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJ2tmEEENS0_10scan_errorEvE13assign_commonISE_EEvOT_:
  963|  12.8k|    {
  964|  12.8k|        if (this->has_value()) {
  ------------------
  |  Branch (964:13): [True: 12.8k, False: 0]
  ------------------
  965|  12.8k|            if (other.has_value()) {
  ------------------
  |  Branch (965:17): [True: 0, False: 12.8k]
  ------------------
  966|      0|                return reassign_value(std::forward<Other>(other));
  967|      0|            }
  968|  12.8k|            return assign_unexpected_over_value(std::forward<Other>(other));
  969|  12.8k|        }
  970|       |
  971|      0|        if (other.has_value()) {
  ------------------
  |  Branch (971:13): [True: 0, False: 0]
  ------------------
  972|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  973|      0|        }
  974|      0|        return reassign_unexpected(std::forward<Other>(other));
  975|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJ2tmEEENS0_10scan_errorELb1EE9has_valueEv:
  504|   108k|    {
  505|   108k|        return m_has_value;
  506|   108k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJ2tmEEENS0_10scan_errorELb1EE9get_valueEv:
  470|  55.9k|    {
  471|  55.9k|        return m_value;
  472|  55.9k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJ2tmEEENS0_10scan_errorEvE28assign_unexpected_over_valueISE_EEvOT_:
 1059|  12.8k|    {
 1060|  12.8k|        this->destroy_value();
 1061|  12.8k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1062|  12.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJ2tmEEENS0_10scan_errorELb1EE13destroy_valueEv:
  525|  12.8k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJ2tmEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISD_EEEEEvDpOT_:
  518|  12.8k|    {
  519|  12.8k|        scn::detail::construct_at(&get_unexpected(),
  520|  12.8k|                                  std::forward<Args>(args)...);
  521|  12.8k|        m_has_value = false;
  522|  12.8k|    }
_ZN3scn2v46detail12construct_atINS0_10unexpectedINS0_10scan_errorEEEJS5_EEEPT_S7_DpOT0_:
  410|   231k|{
  411|   231k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  412|   231k|        T(std::forward<Args>(args)...);
  413|   231k|}
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJ2tmEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  487|  12.8k|    {
  488|  12.8k|        return m_unexpected;
  489|  12.8k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJ2tmEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  495|  12.8k|    {
  496|  12.8k|        return std::move(m_unexpected);
  497|  12.8k|    }
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEE9set_rangeIS9_EEvOT_:
 6566|  43.1k|    {
 6567|  43.1k|        m_range = std::forward<Other>(r);
 6568|  43.1k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEdeIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1808|  43.1k|    {
 1809|  43.1k|        return value();
 1810|  43.1k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEE5valueIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1782|  43.1k|    {
 1783|  43.1k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|  43.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  43.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|  43.1k|        return this->get_value();
 1785|  43.1k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE9get_valueEv:
  470|  43.1k|    {
  471|  43.1k|        return m_value;
  472|  43.1k|    }
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NSA_17basic_string_viewIcNSA_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSH_16buffer_range_tagEcEEEE:
 9654|  39.5k|{
 9655|  39.5k|    return detail::vscan_generic(SCN_FWD(source), format, args);
  ------------------
  |  | 1110|  39.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9656|  39.5k|}
_ZN3scn2v46detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEcEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NSB_17basic_string_viewIT0_NSB_11char_traitsISQ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESQ_EEEE:
 9591|  39.5k|{
 9592|  39.5k|    auto buffer = make_scan_buffer(range);
 9593|       |
 9594|  39.5k|    auto result = vscan_impl(buffer, format, args);
 9595|  39.5k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  | 1039|  39.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 17.9k, False: 21.5k]
  |  |  ------------------
  ------------------
 9596|  17.9k|        return unexpected(result.error());
 9597|  17.9k|    }
 9598|  21.5k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  | 1110|  21.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9599|  39.5k|}
_ZN3scn2v46detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaRKT_:
 5398|  81.6k|{
 5399|  81.6k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 5400|       |
 5401|  81.6k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 5402|  81.6k|                  "\n"
 5403|  81.6k|                  "Unsupported range type given as input to a scanning "
 5404|  81.6k|                  "function.\n"
 5405|  81.6k|                  "A range needs to have a character type (value type) "
 5406|  81.6k|                  "of either `char` or `wchar_t` to be scannable.\n"
 5407|  81.6k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 5408|  81.6k|                  "to be included.\n"
 5409|  81.6k|                  "See the scnlib documentation for more details.");
 5410|  81.6k|    static_assert(
 5411|  81.6k|        !std::is_same_v<T, custom_char_traits>,
 5412|  81.6k|        "\n"
 5413|  81.6k|        "Unsupported range type given as input to a scanning "
 5414|  81.6k|        "function.\n"
 5415|  81.6k|        "String types (std::basic_string, and std::basic_string_view) "
 5416|  81.6k|        "need to use std::char_traits. Strings with custom Traits are "
 5417|  81.6k|        "not supported.");
 5418|  81.6k|    static_assert(!std::is_same_v<T, file_marker_found>,
 5419|  81.6k|                  "\n"
 5420|  81.6k|                  "Unsupported range type given as input to a scanning "
 5421|  81.6k|                  "function.\n"
 5422|  81.6k|                  "file_marker_found cannot be used as an "
 5423|  81.6k|                  "source range type to scn::scan.\n"
 5424|  81.6k|                  "To read from stdin, use scn::input or scn::prompt, "
 5425|  81.6k|                  "and do not provide an explicit source range, "
 5426|  81.6k|                  "or use scn::scan with a FILE* directly.");
 5427|  81.6k|    static_assert(!std::is_same_v<T, insufficient_range>,
 5428|  81.6k|                  "\n"
 5429|  81.6k|                  "Unsupported range type given as input to a scanning "
 5430|  81.6k|                  "function.\n"
 5431|  81.6k|                  "In order to be scannable, a range needs to satisfy "
 5432|  81.6k|                  "`forward_range`. `input_range` is not sufficient.");
 5433|  81.6k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 5434|  81.6k|                  "\n"
 5435|  81.6k|                  "Unsupported range type given as input to a scanning "
 5436|  81.6k|                  "function.\n"
 5437|  81.6k|                  "A range needs to model forward_range and have a valid "
 5438|  81.6k|                  "character type (char or wchar_t) to be scannable.\n"
 5439|  81.6k|                  "Examples of scannable ranges are std::string, "
 5440|  81.6k|                  "std::string_view, "
 5441|  81.6k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 5442|  81.6k|                  "See the scnlib documentation for more details.");
 5443|       |
 5444|  81.6k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 5445|  81.6k|}
_ZN3scn2v46detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeIPKcS9_EETnPNSt3__19enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE11sized_rangeISD_EEvE4typeELPv0EEEDaRKSD_NS1_12priority_tagILm2EEE:
 5337|  81.6k|{
 5338|  81.6k|    if constexpr (is_valid_char_type<detail::char_t<Range>>) {
 5339|  81.6k|        return std::basic_string_view{ranges::data(r), ranges::size(r)};
 5340|       |    }
 5341|       |    else {
 5342|       |        return invalid_char_type{};
 5343|       |    }
 5344|  81.6k|}
_ZNK3scn2v46ranges6detail5data_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 3013|  81.6k|    {
 3014|  81.6k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  | 1110|  81.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3015|  81.6k|    }
_ZN3scn2v46ranges6detail5data_2fn4implIKNS2_9subrange_8subrangeIPKcS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2994|  81.6k|    {
 2995|  81.6k|        return t.data();
 2996|  81.6k|    }
_ZNK3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE4dataIS8_vEEDav:
 3396|  81.6k|    {
 3397|  81.6k|        return detail::to_address(ranges::begin(derived()));
 3398|  81.6k|    }
_ZN3scn2v46detail10to_addressIPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  330|   321k|{
  331|   321k|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  | 1110|   321k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  332|   321k|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2882|   124k|    {
 2883|   124k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1110|   124k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2884|   124k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeIPKcS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESG_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2863|   124k|    {
 2864|   124k|        return decay_copy(t.begin());
 2865|   124k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKcS6_E5beginEv:
 3493|  1.08M|    {
 3494|  1.08M|        return m_iterator;
 3495|  1.08M|    }
_ZNK3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE7derivedEv:
 3352|  81.6k|    {
 3353|  81.6k|        return static_cast<const D&>(*this);
 3354|  81.6k|    }
_ZNK3scn2v46ranges6detail5size_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSD_:
 3088|  81.6k|    {
 3089|  81.6k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3090|  81.6k|    }
_ZN3scn2v46ranges6detail5size_2fn4implIRKNS2_9subrange_8subrangeIPKcS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESF_E4typeEOSG_NS0_6detail12priority_tagILm2EEE:
 3054|  81.6k|    {
 3055|  81.6k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  | 1110|  81.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3056|  81.6k|    }
_ZN3scn2v46ranges6detail10decay_copyImEEu7__decayIT_EOS4_:
 2107|   697k|{
 2108|   697k|    return SCN_FWD(t);
  ------------------
  |  | 1110|   697k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2109|   697k|}
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKcS6_E4sizeIS6_TnPNSt3__19enable_ifIX18sized_sentinel_forIS6_T_EEvE4typeELPv0EEEmv:
 3509|   364k|    {
 3510|   364k|        return static_cast<size_t>(m_sentinel - m_iterator);
 3511|   364k|    }
_ZNK3scn2v48expectedIlNS0_10scan_errorEEcvbEv:
 1753|   569k|    {
 1754|   569k|        return has_value();
 1755|   569k|    }
_ZNK3scn2v46detail21expected_storage_baseIlNS0_10scan_errorELb1EE9has_valueEv:
  504|  1.02M|    {
  505|  1.02M|        return m_has_value;
  506|  1.02M|    }
_ZNR3scn2v48expectedIlNS0_10scan_errorEE5errorEv:
 1759|   231k|    {
 1760|   231k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1104|   231k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   231k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1761|   231k|        return this->get_unexpected().error();
 1762|   231k|    }
_ZNR3scn2v46detail21expected_storage_baseIlNS0_10scan_errorELb1EE14get_unexpectedEv:
  487|   231k|    {
  488|   231k|        return m_unexpected;
  489|   231k|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEC2IS9_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSD_IXsr3stdE16is_convertible_vISF_S9_EEvE4typeELSJ_0EEEONS0_10unexpectedISE_EE:
 1629|  38.5k|        : base(unexpect, std::move(e.error())),
 1630|  38.5k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  38.5k|    {
 1632|  38.5k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  464|  38.5k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|  38.5k|          m_has_value(false)
  466|  38.5k|    {
  467|  38.5k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  81.6k|    {
 1330|  81.6k|    }
_ZN3scn2v46detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISB_EEE4typeEOSB_l:
 6796|  43.1k|{
 6797|       |    if constexpr (ranges::random_access_iterator<
 6798|  43.1k|                      ranges::iterator_t<SourceRange>>) {
 6799|  43.1k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 6800|       |    }
 6801|       |    else {
 6802|       |        auto it = ranges::begin(source);
 6803|       |        while (n > 0) {
 6804|       |            --n;
 6805|       |            ++it;
 6806|       |        }
 6807|       |        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 6808|       |    }
 6809|  43.1k|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2882|   361k|    {
 2883|   361k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1110|   361k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2884|   361k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2863|   361k|    {
 2864|   361k|        return decay_copy(t.begin());
 2865|   361k|    }
_ZN3scn2v46detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaRT_:
 6783|  43.1k|{
 6784|  43.1k|    return ranges::end(source);
 6785|  43.1k|}
_ZNK3scn2v46ranges6detail4end_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2939|   113k|    {
 2940|   113k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1110|   113k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2941|   113k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EES9_S9_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2921|   113k|    {
 2922|   113k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  | 1110|   113k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2923|   113k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKcS6_E3endEv:
 3497|   827k|    {
 3498|   827k|        return m_sentinel;
 3499|   827k|    }
_ZNR3scn2v48expectedIlNS0_10scan_errorEEdeIlTnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS7_v:
 1808|   222k|    {
 1809|   222k|        return value();
 1810|   222k|    }
_ZNR3scn2v48expectedIlNS0_10scan_errorEE5valueIlTnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS7_v:
 1782|   222k|    {
 1783|   222k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|   222k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   222k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|   222k|        return this->get_value();
 1785|   222k|    }
_ZNR3scn2v46detail21expected_storage_baseIlNS0_10scan_errorELb1EE9get_valueEv:
  470|   222k|    {
  471|   222k|        return m_value;
  472|   222k|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEC2IS8_vEEOT_:
 1583|  43.1k|        : base(std::in_place, std::forward<U>(val)),
 1584|  43.1k|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|  43.1k|    {
 1586|  43.1k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2IJS9_EvEENSt3__110in_place_tEDpOT_:
  455|  43.1k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|  43.1k|    {
  457|  43.1k|    }
_ZNK3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJ2tmEEcvNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEv:
 8854|  26.3k|    {
 8855|  26.3k|        return m_str;
 8856|  26.3k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEJ2tmEEEDaRNSt3__15tupleIJDpT0_EEE:
 6195|  57.5k|{
 6196|  57.5k|    detail::check_scan_arg_types<Args...>();
 6197|  57.5k|    return detail::scan_arg_store<Context, Args...>(values);
 6198|  57.5k|}
_ZN3scn2v46detail20check_scan_arg_typesIJ2tmEEEbv:
 5910|   124k|{
 5911|   124k|    constexpr bool default_constructible_constraint =
 5912|   124k|        std::conjunction_v<std::is_default_constructible<Args>...>;
 5913|   124k|    static_assert(default_constructible_constraint,
 5914|   124k|                  "Scan argument types must be default constructible");
 5915|       |
 5916|   124k|    constexpr bool destructible_constraint =
 5917|   124k|        std::conjunction_v<std::is_destructible<Args>...>;
 5918|   124k|    static_assert(destructible_constraint,
 5919|   124k|                  "Scan argument types must be Destructible");
 5920|       |
 5921|   124k|    constexpr bool non_reference_constraint =
 5922|   124k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>;
 5923|   124k|    static_assert(non_reference_constraint,
 5924|   124k|                  "Scan argument types must not be references");
 5925|       |
 5926|   124k|    constexpr bool movable_constraint =
 5927|   124k|        std::conjunction_v<std::is_move_constructible<Args>...>;
 5928|   124k|    static_assert(movable_constraint,
 5929|   124k|                  "Scan argument types must be move constructible");
 5930|       |
 5931|   124k|    return default_constructible_constraint && destructible_constraint &&
  ------------------
  |  Branch (5931:12): [Folded - Ignored]
  |  Branch (5931:48): [Folded - Ignored]
  ------------------
 5932|   124k|           non_reference_constraint && movable_constraint;
  ------------------
  |  Branch (5932:12): [Folded - Ignored]
  |  Branch (5932:40): [Folded - Ignored]
  ------------------
 5933|   124k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJ2tmEEC2ERNSt3__15tupleIJS6_EEE:
 6171|  57.5k|        : args(std::apply(make_argptrs<Args...>, args))
 6172|  57.5k|    {
 6173|  57.5k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJ2tmEE12make_argptrsIJS6_EEENSt3__15arrayINS1_9arg_valueELm1EEEDpRT_:
 6180|  57.5k|    {
 6181|  57.5k|        return {detail::make_arg<
 6182|  57.5k|            kind, Context,
 6183|  57.5k|            mapped_type_constant<remove_cvref_t<A>,
 6184|  57.5k|                                 typename Context::char_type>::value>(args)...};
 6185|  57.5k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE1ENS0_18basic_scan_contextINS1_16buffer_range_tagEcEELNS1_8arg_typeE29E2tmvEENS1_9arg_valueERT2_:
 5969|  57.5k|{
 5970|  57.5k|    return make_value<Context>(value);
 5971|  57.5k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEcEE2tmEEDaRT0_:
 5895|  59.2k|{
 5896|  59.2k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5897|       |
 5898|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5899|       |                                  needs_context_tag>) {
 5900|       |        return make_value_impl<T>(SCN_FWD(arg));
 5901|       |    }
 5902|  59.2k|    else {
 5903|  59.2k|        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5904|  59.2k|            value, context_tag<Context>{}));
 5905|  59.2k|    }
 5906|  59.2k|}
_ZN3scn2v46detail10arg_mapperIcE3mapI2tmTnPvLPv0EEENS1_17needs_context_tagERT_:
 5795|  59.2k|    {
 5796|  59.2k|        return {};
 5797|  59.2k|    }
_ZN3scn2v46detail15make_value_implI2tmNS1_14custom_wrapperIS3_NS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEEDaOT0_:
 5864|  59.2k|{
 5865|  59.2k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5866|  59.2k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5867|       |
 5868|  59.2k|    constexpr bool scannable_char =
 5869|  59.2k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5870|  59.2k|    static_assert(scannable_char,
 5871|  59.2k|                  "Cannot scan an argument of an unsupported character "
 5872|  59.2k|                  "type (i.e. char from a wchar_t source)");
 5873|       |
 5874|  59.2k|    constexpr bool scannable_const =
 5875|  59.2k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5876|  59.2k|    static_assert(scannable_const, "Cannot scan a const argument");
 5877|       |
 5878|  59.2k|    constexpr bool scannable_disabled =
 5879|  59.2k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5880|  59.2k|    static_assert(scannable_disabled,
 5881|  59.2k|                  "Cannot scan an argument that has been disabled by "
 5882|  59.2k|                  "flag (SCN_DISABLE_TYPE_*)");
 5883|       |
 5884|  59.2k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5885|  59.2k|    static_assert(
 5886|  59.2k|        scannable,
 5887|  59.2k|        "Cannot scan an argument. To make a type T scannable, provide "
 5888|  59.2k|        "a scn::scanner<T, CharT> specialization.");
 5889|       |
 5890|  59.2k|    return arg_value{arg};
 5891|  59.2k|}
_ZN3scn2v46detail9arg_valueC2I2tmNS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEENS1_14custom_wrapperIT_T0_EE:
 5651|  59.2k|        : custom_value{static_cast<void*>(&val.val),
 5652|  59.2k|                       scan_custom_arg<T, Context>}
 5653|  59.2k|    {
 5654|  59.2k|    }
_ZN3scn2v46detail9arg_value15scan_custom_argI2tmNS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEENS0_13scan_expectedIvEEPvSA_SA_:
 5669|  59.2k|    {
 5670|  59.2k|        static_assert(!is_type_disabled<T>,
 5671|  59.2k|                      "Scanning of custom types is disabled by "
 5672|  59.2k|                      "SCN_DISABLE_TYPE_CUSTOM");
 5673|  59.2k|        SCN_EXPECT(arg && pctx && ctx);
  ------------------
  |  | 1104|  59.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  59.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5674|       |
 5675|  59.2k|        using context_type = Context;
 5676|  59.2k|        using parse_context_type = typename context_type::parse_context_type;
 5677|  59.2k|        using scanner_type = typename context_type::template scanner_type<T>;
 5678|       |
 5679|  59.2k|        auto s = scanner_type{};
 5680|       |
 5681|  59.2k|        auto& arg_ref = *static_cast<T*>(arg);
 5682|  59.2k|        auto& pctx_ref = *static_cast<parse_context_type*>(pctx);
 5683|  59.2k|        auto& ctx_ref = *static_cast<context_type*>(ctx);
 5684|       |
 5685|  59.2k|        SCN_TRY_DISCARD(parse_custom_arg(arg_ref, s, pctx_ref));
  ------------------
  |  | 3948|  59.2k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|  59.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 1.71k, False: 57.5k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|  1.71k|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|  1.71k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|  1.71k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|  1.71k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|  1.71k|    }
  ------------------
 5686|  57.5k|        SCN_TRY(it, s.scan(arg_ref, ctx_ref));
  ------------------
  |  | 3958|  57.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  57.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  57.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  57.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 23.9k, False: 33.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  23.9k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  23.9k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  23.9k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  23.9k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  23.9k|    }                                                  \
  |  |  |  | 3957|  57.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  33.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5687|  33.5k|        ctx_ref.advance_to(SCN_MOVE(it));
  ------------------
  |  | 1108|  33.5k|    static_cast<    \
  |  | 1109|  33.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5688|       |
 5689|  33.5k|        return {};
 5690|  57.5k|    }
_ZN3scn2v46detail16parse_custom_argI2tmNS0_7scannerIS3_cvEENS0_24basic_scan_parse_contextIcEEEENS0_13scan_expectedIvEERT_RT0_RT1_:
 5602|  59.2k|{
 5603|  59.2k|#if SCN_HAS_EXCEPTIONS
 5604|  59.2k|    auto fmt_it = pctx.begin();
 5605|  59.2k|    try {
 5606|  59.2k|        fmt_it = s.parse(pctx);
 5607|  59.2k|    }
 5608|  59.2k|    catch (const detail::scan_format_string_error_base& ex) {
 5609|       |        // scan_error takes a const char*.
 5610|       |        // scan_format_string_error (or, actually, std::runtime_error)
 5611|       |        // stores a reference-counted string,
 5612|       |        // that will go out of scope here.
 5613|       |        // We need to provide a const char* that will stay in scope.
 5614|       |        // If scan_format_string_error was thrown with a string literal,
 5615|       |        // use that, otherwise refer to a thread_local std::string
 5616|      0|        if (const char* m = get_internal_literal_msg(ex)) {
  ------------------
  |  Branch (5616:25): [True: 0, False: 0]
  ------------------
 5617|      0|            return unexpected_scan_error(scan_error::invalid_format_string, m);
 5618|      0|        }
 5619|      0|        thread_local std::string err_msg{};
 5620|      0|        err_msg = ex.what();
 5621|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 5622|      0|                                     err_msg.c_str());
 5623|      0|    }
 5624|       |#else
 5625|       |    auto fmt_it = s.parse(pctx_ref);
 5626|       |#endif
 5627|  59.2k|    if (auto e = pctx.get_error(); SCN_UNLIKELY(!e)) {
  ------------------
  |  | 1039|  59.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 1.71k, False: 57.5k]
  |  |  ------------------
  ------------------
 5628|  1.71k|        return e;
 5629|  1.71k|    }
 5630|  57.5k|    pctx.advance_to(fmt_it);
 5631|  57.5k|    return {};
 5632|  59.2k|}
_ZNK3scn2v424basic_scan_parse_contextIcE5beginEv:
 6380|   873k|    {
 6381|   873k|        return m_format.data();
 6382|   873k|    }
_ZNK3scn2v424basic_scan_parse_contextIcE3endEv:
 6385|   177k|    {
 6386|   177k|        return m_format.data() + m_format.size();
 6387|   177k|    }
_ZN3scn2v424basic_scan_parse_contextIcE8on_errorEPKc:
 6426|  5.14k|    {
 6427|  5.14k|        m_error = unexpected(detail::handle_error(
 6428|  5.14k|            scan_error{scan_error::invalid_format_string, msg}));
 6429|  5.14k|        return m_error.error();
 6430|  5.14k|    }
_ZN3scn2v410scan_errorC2ENS1_4codeEPKc:
 3758|   900k|    constexpr scan_error(code_t c, const char* m) noexcept : m_msg(m), m_code(c)
 3759|   900k|    {
 3760|   900k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_code);
  ------------------
  |  | 1089|   900k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3761|   900k|    }
_ZN3scn2v410unexpectedINS0_10scan_errorEEC2IS2_vEEOT_:
  364|  15.4k|        : m_unexpected(std::forward<Err>(e))
  365|  15.4k|    {
  366|  15.4k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  | 1089|  15.4k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  367|  15.4k|    }
_ZNK3scn2v46detail21expected_storage_baseIvNS0_10scan_errorELb1EE9has_valueEv:
  586|  5.38M|    {
  587|  5.38M|        return m_has_value;
  588|  5.38M|    }
_ZN3scn2v46detail11is_cp_spaceEDi:
 4325|   559k|{
 4326|       |    // Pattern_White_Space property
 4327|   559k|    return (cp >= 0x09 && cp <= 0x0d) ||
  ------------------
  |  Branch (4327:13): [True: 478k, False: 81.0k]
  |  Branch (4327:27): [True: 8.01k, False: 470k]
  ------------------
 4328|   559k|           cp == 0x20 ||    // ASCII space characters
  ------------------
  |  Branch (4328:12): [True: 253k, False: 297k]
  ------------------
 4329|   559k|           cp == 0x85 ||    // NEXT LINE (NEL)
  ------------------
  |  Branch (4329:12): [True: 7.70k, False: 289k]
  ------------------
 4330|   559k|           cp == 0x200e ||  // LEFT-TO-RIGHT MARK
  ------------------
  |  Branch (4330:12): [True: 660, False: 289k]
  ------------------
 4331|   559k|           cp == 0x200f ||  // RIGHT-TO-LEFT MARK
  ------------------
  |  Branch (4331:12): [True: 1.00k, False: 288k]
  ------------------
 4332|   559k|           cp == 0x2028 ||  // LINE SEPARATOR
  ------------------
  |  Branch (4332:12): [True: 540, False: 287k]
  ------------------
 4333|   559k|           cp == 0x2029;    // PARAGRAPH SEPARATOR
  ------------------
  |  Branch (4333:12): [True: 0, False: 287k]
  ------------------
 4334|   559k|}
_ZN3scn2v46detail30make_string_view_from_pointersIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
 3993|   330k|{
 3994|       |    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
 3995|       |                                          const CharT*, const CharT*>) {
 3996|       |        return {first, last};
 3997|       |    }
 3998|   330k|    else {
 3999|   330k|        return {first, static_cast<size_t>(std::distance(first, last))};
 4000|   330k|    }
 4001|   330k|}
_ZN3scn2v424basic_scan_parse_contextIcE9get_errorEv:
 6433|   177k|    {
 6434|   177k|        return m_error;
 6435|   177k|    }
_ZN3scn2v424basic_scan_parse_contextIcE10advance_toEPKc:
 6391|   345k|    {
 6392|   345k|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
 6393|   345k|    }
_ZNK3scn2v48expectedIvNS0_10scan_errorEEcvbEv:
 1753|  3.81M|    {
 1754|  3.81M|        return has_value();
 1755|  3.81M|    }
_ZNR3scn2v48expectedIvNS0_10scan_errorEE5errorEv:
 1759|   689k|    {
 1760|   689k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1104|   689k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   689k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1761|   689k|        return this->get_unexpected().error();
 1762|   689k|    }
_ZNR3scn2v46detail21expected_storage_baseIvNS0_10scan_errorELb1EE14get_unexpectedEv:
  569|   689k|    {
  570|   689k|        return m_unexpected;
  571|   689k|    }
_ZN3scn2v48expectedIvNS0_10scan_errorEEC2IS2_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS2_OT_EEvE4typeELPv0ETnPNS6_IXsr3stdE16is_convertible_vIS8_S2_EEvE4typeELSC_0EEEONS0_10unexpectedIS7_EE:
 1629|   674k|        : base(unexpect, std::move(e.error())),
 1630|   674k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|   674k|    {
 1632|   674k|    }
_ZN3scn2v46detail21expected_storage_baseIvNS0_10scan_errorELb1EEC2IJS3_EvEENS0_10unexpect_tEDpOT_:
  563|   674k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  564|   674k|          m_has_value(false)
  565|   674k|    {
  566|   674k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIvNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|   674k|    {
 1330|   674k|    }
_ZNK3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEcvbEv:
 1753|   441k|    {
 1754|   441k|        return has_value();
 1755|   441k|    }
_ZNK3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE9has_valueEv:
  504|   883k|    {
  505|   883k|        return m_has_value;
  506|   883k|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEE5errorEv:
 1759|   147k|    {
 1760|   147k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1104|   147k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   147k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1761|   147k|        return this->get_unexpected().error();
 1762|   147k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE14get_unexpectedEv:
  487|   147k|    {
  488|   147k|        return m_unexpected;
  489|   147k|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSB_v:
 1818|   192k|    {
 1819|   192k|        return std::move(value());
 1820|   192k|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1782|   293k|    {
 1783|   293k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|   293k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   293k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|   293k|        return this->get_value();
 1785|   293k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE9get_valueEv:
  470|   293k|    {
  471|   293k|        return m_value;
  472|   293k|    }
_ZN3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEcE10advance_toENS2_17basic_scan_bufferIcE16forward_iteratorE:
 9057|   250k|    {
 9058|   250k|        m_current = SCN_MOVE(it);
  ------------------
  |  | 1108|   250k|    static_cast<    \
  |  | 1109|   250k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9059|   250k|    }
_ZN3scn2v48expectedIvNS0_10scan_errorEEC2Ev:
 1565|  1.95M|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseIvNS0_10scan_errorELb1EEC2Ev:
  543|  1.95M|        : m_deferred_init(), m_has_value(true)
  544|  1.95M|    {
  545|  1.95M|    }
_ZN3scn2v46detail10arg_mapperIcE3mapI2tmNS0_18basic_scan_contextINS1_16buffer_range_tagEcEETnPvLPv0EEENS1_14custom_wrapperIT_T0_EERSC_NS1_11context_tagISD_EE:
 5803|  59.2k|    {
 5804|  59.2k|        return {val};
 5805|  59.2k|    }
_ZNR3scn2v46detail25scan_result_value_storageIJ2tmEE6valuesEv:
 6475|   119k|    {
 6476|   119k|        return m_values;
 6477|   119k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2IJ2tmEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6221|  57.5k|        : basic_scan_args(store.desc, store.args.data())
 6222|  57.5k|    {
 6223|  57.5k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2EmPKNS3_9arg_valueE:
 6278|   172k|        : m_desc(desc), m_values(data)
 6279|   172k|    {
 6280|   172k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeIPKcS6_EC2IS6_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S6_EEvE4typeELPv0EEESB_S6_:
 3478|   601k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1108|   601k|    static_cast<    \
  |  | 1109|   601k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1108|   601k|    static_cast<    \
  |  | 1109|   601k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3479|   601k|    {
 3480|   601k|    }
_ZN3scn2v414runtime_formatENSt3__117basic_string_viewIcNS1_11char_traitsIcEEEE:
 8531|   172k|{
 8532|   172k|    return s;
 8533|   172k|}
_ZN3scn2v46detail27basic_runtime_format_stringIcEC2ENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEE:
 8508|   172k|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJ2tmEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8849|  26.3k|        : m_str(r.str)
 8850|  26.3k|    {
 8851|  26.3k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJ2tmEEENS0_10scan_errorEEcvbEv:
 1753|  27.2k|    {
 1754|  27.2k|        return has_value();
 1755|  27.2k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJ2tmEEENS0_10scan_errorEEptEv:
 1828|  55.9k|    {
 1829|  55.9k|        return &value();
 1830|  55.9k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJ2tmEEENS0_10scan_errorEE5valueISB_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSH_v:
 1782|  55.9k|    {
 1783|  55.9k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|  55.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  55.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|  55.9k|        return this->get_value();
 1785|  55.9k|    }
_ZNK3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEE5beginEv:
 6555|  43.1k|    {
 6556|  43.1k|        return ranges::begin(m_range);
 6557|  43.1k|    }
_ZN3scn2v44scanIJ2tmENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcSA_EEvvEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESJ_NS0_6detail22borrowed_tail_subrangeISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEJDpT_EEEEERKT0_OSF_NS0_24basic_scan_format_stringIcNSK_13type_identityISF_E4typeEJDpNSZ_ISQ_E4typeEEEE:
 9961|  13.1k|{
 9962|  13.1k|    auto result = make_scan_result<Source, Args...>();
 9963|  13.1k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1110|  13.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9964|  13.1k|                                   make_scan_args(result->values())));
 9965|  13.1k|    return result;
 9966|  13.1k|}
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENSt3__16localeEvEENS0_13scan_expectedINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEERKT0_OSD_NS9_17basic_string_viewIcNS9_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSI_16buffer_range_tagEcEEEE:
 9672|  39.5k|{
 9673|  39.5k|    return detail::vscan_localized_generic(loc, SCN_FWD(source), format, args);
  ------------------
  |  | 1110|  39.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9674|  39.5k|}
_ZN3scn2v46detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS1_22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEEERKT_OSE_NS3_17basic_string_viewIT1_NS3_11char_traitsISU_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESU_EEEE:
 9607|  39.5k|{
 9608|  39.5k|#if !SCN_DISABLE_LOCALE
 9609|  39.5k|    auto buffer = detail::make_scan_buffer(range);
 9610|       |
 9611|  39.5k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 9612|  39.5k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 9613|  39.5k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 9614|       |
 9615|  39.5k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  | 1039|  39.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 17.9k, False: 21.5k]
  |  |  ------------------
  ------------------
 9616|  17.9k|        return unexpected(result.error());
 9617|  17.9k|    }
 9618|  21.5k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  | 1110|  21.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9619|       |#else
 9620|       |    static_assert(dependent_false<Locale>::value,
 9621|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 9622|       |
 9623|       |    return {};
 9624|       |#endif
 9625|  39.5k|}
_ZN3scn2v410scan_valueI2tmNS0_6ranges6detail9subrange_8subrangeIPKcS8_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJT_EEEEEOSE_:
10002|    857|{
10003|    857|    auto result = make_scan_result<Source, T>();
10004|    857|    fill_scan_result(
10005|    857|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  | 1110|    857|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
10006|    857|                            detail::make_arg<scan_context>(result->value())));
10007|    857|    return result;
10008|    857|}
_ZN3scn2v411vscan_valueINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NS0_14basic_scan_argINS0_18basic_scan_contextINSH_16buffer_range_tagEcEEEE:
 9685|  2.57k|{
 9686|  2.57k|    return detail::vscan_value_generic(SCN_FWD(source), arg);
  ------------------
  |  | 1110|  2.57k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9687|  2.57k|}
_ZN3scn2v46detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEcEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagET0_EEEE:
 9631|  2.57k|{
 9632|  2.57k|    auto buffer = detail::make_scan_buffer(range);
 9633|       |
 9634|  2.57k|    auto result = detail::vscan_value_impl(buffer, arg);
 9635|  2.57k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  | 1039|  2.57k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 2.57k, False: 0]
  |  |  ------------------
  ------------------
 9636|  2.57k|        return unexpected(result.error());
 9637|  2.57k|    }
 9638|      0|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9639|  2.57k|}
_ZN3scn2v46detail8make_argINS0_18basic_scan_contextINS1_16buffer_range_tagEcEE2tmEENS0_14basic_scan_argIT_EERT0_:
 5945|  1.71k|{
 5946|  1.71k|    check_scan_arg_types<T>();
 5947|       |
 5948|  1.71k|    basic_scan_arg<Context> arg;
 5949|  1.71k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5950|  1.71k|    arg.m_value = make_value<Context>(value);
 5951|  1.71k|    return arg;
 5952|  1.71k|}
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2Ev:
 6040|   177k|    constexpr basic_scan_arg() = default;
_ZN3scn2v46detail9arg_valueC2Ev:
 5641|   374k|    arg_value() = default;
_ZNR3scn2v46detail25scan_result_value_storageIJ2tmEE5valueILm1ETnPNSt3__19enable_ifIXeqT_Li1EEvE4typeELPv0EEEDcv:
 6497|  5.14k|    {
 6498|  5.14k|        return std::get<0>(m_values);
 6499|  5.14k|    }
_ZN3scn2v44scanIJNS0_10tm_with_tzEENS0_6ranges6detail9subrange_8subrangeIPKcS8_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEEOSE_NS0_24basic_scan_format_stringIcNSJ_13type_identityISE_E4typeEJDpNSV_ISP_E4typeEEEE:
 9892|  13.1k|{
 9893|  13.1k|    auto result = make_scan_result<Source, Args...>();
 9894|  13.1k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  | 1110|  13.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9895|  13.1k|                                   make_scan_args(result->values())));
 9896|  13.1k|    return result;
 9897|  13.1k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNS0_10tm_with_tzEEEEDav:
 9848|  27.2k|{
 9849|  27.2k|    return scan_result_type<Source, Args...>();
 9850|  27.2k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEEC2Ev:
 1565|  27.2k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EEC2Ev:
  626|  27.2k|    constexpr expected_storage_base() noexcept : m_has_value(true)
  627|  27.2k|    {
  628|  27.2k|        construct();
  629|  27.2k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE9constructIJEEEvDpOT_:
  708|  27.2k|    {
  709|  27.2k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  710|  27.2k|        m_has_value = true;
  711|  27.2k|    }
_ZN3scn2v46detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_10tm_with_tzEEEEJEEEPT_SE_DpOT0_:
  410|  27.2k|{
  411|  27.2k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  412|  27.2k|        T(std::forward<Args>(args)...);
  413|  27.2k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNS0_10tm_with_tzEEEC2Ev:
 6692|  27.2k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_value_storageIJNS0_10tm_with_tzEEEC2Ev:
 6466|   124k|    constexpr scan_result_value_storage() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE9value_ptrEv:
  732|   110k|    {
  733|   110k|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  | 1074|   110k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  734|   110k|    }
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNS0_10tm_with_tzEEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSC_7is_sameINSG_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISG_EEONSS_ISM_EE:
 9833|  27.2k|{
 9834|  27.2k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  | 1039|  27.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 12.8k, False: 14.3k]
  |  |  ------------------
  ------------------
 9835|  12.8k|        out = unexpected(in.error());
 9836|  12.8k|    }
 9837|  14.3k|    else {
 9838|  14.3k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1108|  14.3k|    static_cast<    \
  |  | 1109|  14.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9839|  14.3k|    }
 9840|  27.2k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEEC2ISC_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISC_OT_EEvE4typeELPv0ETnPNSG_IXsr3stdE16is_convertible_vISI_SC_EEvE4typeELSM_0EEEONS0_10unexpectedISH_EE:
 1629|  12.8k|        : base(unexpect, std::move(e.error())),
 1630|  12.8k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  12.8k|    {
 1632|  12.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  651|  12.8k|        : m_has_value(false)
  652|  12.8k|    {
  653|  12.8k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  654|  12.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNSt3__110in_place_tESD_EEEvDpOT_:
  715|  12.8k|    {
  716|  12.8k|        scn::detail::construct_at(unexpected_ptr(),
  717|  12.8k|                                  std::forward<Args>(args)...);
  718|  12.8k|        m_has_value = false;
  719|  12.8k|    }
_ZN3scn2v46detail12construct_atINS0_10unexpectedINS0_10scan_errorEEEJRKNSt3__110in_place_tES4_EEEPT_SB_DpOT0_:
  410|   154k|{
  411|   154k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  412|   154k|        T(std::forward<Args>(args)...);
  413|   154k|}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  744|  64.2k|    {
  745|  64.2k|        return reinterpret_cast<unexpected<E>*>(
  746|  64.2k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  | 1074|  64.2k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  747|  64.2k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  12.8k|    {
 1330|  12.8k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEEaSEOSD_:
 1570|  12.8k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEvEaSEOSE_:
  916|  12.8k|    {
  917|  12.8k|        assign_common(std::move(other));
  918|  12.8k|        return *this;
  919|  12.8k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEvE13assign_commonISE_EEvOT_:
  963|  12.8k|    {
  964|  12.8k|        if (this->has_value()) {
  ------------------
  |  Branch (964:13): [True: 12.8k, False: 0]
  ------------------
  965|  12.8k|            if (other.has_value()) {
  ------------------
  |  Branch (965:17): [True: 0, False: 12.8k]
  ------------------
  966|      0|                return reassign_value(std::forward<Other>(other));
  967|      0|            }
  968|  12.8k|            return assign_unexpected_over_value(std::forward<Other>(other));
  969|  12.8k|        }
  970|       |
  971|      0|        if (other.has_value()) {
  ------------------
  |  Branch (971:13): [True: 0, False: 0]
  ------------------
  972|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  973|      0|        }
  974|      0|        return reassign_unexpected(std::forward<Other>(other));
  975|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE9has_valueEv:
  701|   149k|    {
  702|   149k|        return m_has_value;
  703|   149k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE9get_valueEv:
  667|  55.9k|    {
  668|  55.9k|        return *value_ptr();
  669|  55.9k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEvE28assign_unexpected_over_valueISE_EEvOT_:
 1059|  12.8k|    {
 1060|  12.8k|        this->destroy_value();
 1061|  12.8k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1062|  12.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  722|  27.2k|    {
  723|  27.2k|        scn::detail::destroy_at(value_ptr());
  724|  27.2k|    }
_ZN3scn2v46detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_10tm_with_tzEEEEEEvPT_:
  416|  27.2k|{
  417|       |    if constexpr (std::is_array_v<T>) {
  418|       |        for (auto& elem : *p) {
  419|       |            scn::detail::destroy_at(&elem);
  420|       |        }
  421|       |    }
  422|  27.2k|    else {
  423|  27.2k|        p->~T();
  424|  27.2k|    }
  425|  27.2k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNS0_10tm_with_tzEEED2Ev:
 6699|  27.2k|    ~scan_result() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE20construct_unexpectedIJNS0_10unexpectedISD_EEEEEvDpOT_:
  715|  12.8k|    {
  716|  12.8k|        scn::detail::construct_at(unexpected_ptr(),
  717|  12.8k|                                  std::forward<Args>(args)...);
  718|  12.8k|        m_has_value = false;
  719|  12.8k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE14get_unexpectedEv:
  692|  12.8k|    {
  693|  12.8k|        return std::move(*unexpected_ptr());
  694|  12.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  726|  25.7k|    {
  727|  25.7k|        scn::detail::destroy_at(unexpected_ptr());
  728|  25.7k|    }
_ZN3scn2v46detail10destroy_atINS0_10unexpectedINS0_10scan_errorEEEEEvPT_:
  416|   308k|{
  417|       |    if constexpr (std::is_array_v<T>) {
  418|       |        for (auto& elem : *p) {
  419|       |            scn::detail::destroy_at(&elem);
  420|       |        }
  421|       |    }
  422|   308k|    else {
  423|   308k|        p->~T();
  424|   308k|    }
  425|   308k|}
_ZNK3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNS0_10tm_with_tzEEEcvNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEv:
 8854|  26.3k|    {
 8855|  26.3k|        return m_str;
 8856|  26.3k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEJNS0_10tm_with_tzEEEEDaRNSt3__15tupleIJDpT0_EEE:
 6195|  57.5k|{
 6196|  57.5k|    detail::check_scan_arg_types<Args...>();
 6197|  57.5k|    return detail::scan_arg_store<Context, Args...>(values);
 6198|  57.5k|}
_ZN3scn2v46detail20check_scan_arg_typesIJNS0_10tm_with_tzEEEEbv:
 5910|   124k|{
 5911|   124k|    constexpr bool default_constructible_constraint =
 5912|   124k|        std::conjunction_v<std::is_default_constructible<Args>...>;
 5913|   124k|    static_assert(default_constructible_constraint,
 5914|   124k|                  "Scan argument types must be default constructible");
 5915|       |
 5916|   124k|    constexpr bool destructible_constraint =
 5917|   124k|        std::conjunction_v<std::is_destructible<Args>...>;
 5918|   124k|    static_assert(destructible_constraint,
 5919|   124k|                  "Scan argument types must be Destructible");
 5920|       |
 5921|   124k|    constexpr bool non_reference_constraint =
 5922|   124k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>;
 5923|   124k|    static_assert(non_reference_constraint,
 5924|   124k|                  "Scan argument types must not be references");
 5925|       |
 5926|   124k|    constexpr bool movable_constraint =
 5927|   124k|        std::conjunction_v<std::is_move_constructible<Args>...>;
 5928|   124k|    static_assert(movable_constraint,
 5929|   124k|                  "Scan argument types must be move constructible");
 5930|       |
 5931|   124k|    return default_constructible_constraint && destructible_constraint &&
  ------------------
  |  Branch (5931:12): [Folded - Ignored]
  |  Branch (5931:48): [Folded - Ignored]
  ------------------
 5932|   124k|           non_reference_constraint && movable_constraint;
  ------------------
  |  Branch (5932:12): [Folded - Ignored]
  |  Branch (5932:40): [Folded - Ignored]
  ------------------
 5933|   124k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJNS0_10tm_with_tzEEEC2ERNSt3__15tupleIJS6_EEE:
 6171|  57.5k|        : args(std::apply(make_argptrs<Args...>, args))
 6172|  57.5k|    {
 6173|  57.5k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJNS0_10tm_with_tzEEE12make_argptrsIJS6_EEENSt3__15arrayINS1_9arg_valueELm1EEEDpRT_:
 6180|  57.5k|    {
 6181|  57.5k|        return {detail::make_arg<
 6182|  57.5k|            kind, Context,
 6183|  57.5k|            mapped_type_constant<remove_cvref_t<A>,
 6184|  57.5k|                                 typename Context::char_type>::value>(args)...};
 6185|  57.5k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE1ENS0_18basic_scan_contextINS1_16buffer_range_tagEcEELNS1_8arg_typeE29ENS0_10tm_with_tzEvEENS1_9arg_valueERT2_:
 5969|  57.5k|{
 5970|  57.5k|    return make_value<Context>(value);
 5971|  57.5k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEcEENS0_10tm_with_tzEEEDaRT0_:
 5895|  59.2k|{
 5896|  59.2k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5897|       |
 5898|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5899|       |                                  needs_context_tag>) {
 5900|       |        return make_value_impl<T>(SCN_FWD(arg));
 5901|       |    }
 5902|  59.2k|    else {
 5903|  59.2k|        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5904|  59.2k|            value, context_tag<Context>{}));
 5905|  59.2k|    }
 5906|  59.2k|}
_ZN3scn2v46detail10arg_mapperIcE3mapINS0_10tm_with_tzETnPvLPv0EEENS1_17needs_context_tagERT_:
 5795|  59.2k|    {
 5796|  59.2k|        return {};
 5797|  59.2k|    }
_ZN3scn2v46detail15make_value_implINS0_10tm_with_tzENS1_14custom_wrapperIS3_NS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEEDaOT0_:
 5864|  59.2k|{
 5865|  59.2k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5866|  59.2k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5867|       |
 5868|  59.2k|    constexpr bool scannable_char =
 5869|  59.2k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5870|  59.2k|    static_assert(scannable_char,
 5871|  59.2k|                  "Cannot scan an argument of an unsupported character "
 5872|  59.2k|                  "type (i.e. char from a wchar_t source)");
 5873|       |
 5874|  59.2k|    constexpr bool scannable_const =
 5875|  59.2k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5876|  59.2k|    static_assert(scannable_const, "Cannot scan a const argument");
 5877|       |
 5878|  59.2k|    constexpr bool scannable_disabled =
 5879|  59.2k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5880|  59.2k|    static_assert(scannable_disabled,
 5881|  59.2k|                  "Cannot scan an argument that has been disabled by "
 5882|  59.2k|                  "flag (SCN_DISABLE_TYPE_*)");
 5883|       |
 5884|  59.2k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5885|  59.2k|    static_assert(
 5886|  59.2k|        scannable,
 5887|  59.2k|        "Cannot scan an argument. To make a type T scannable, provide "
 5888|  59.2k|        "a scn::scanner<T, CharT> specialization.");
 5889|       |
 5890|  59.2k|    return arg_value{arg};
 5891|  59.2k|}
_ZN3scn2v46detail9arg_valueC2INS0_10tm_with_tzENS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEENS1_14custom_wrapperIT_T0_EE:
 5651|  59.2k|        : custom_value{static_cast<void*>(&val.val),
 5652|  59.2k|                       scan_custom_arg<T, Context>}
 5653|  59.2k|    {
 5654|  59.2k|    }
_ZN3scn2v46detail9arg_value15scan_custom_argINS0_10tm_with_tzENS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEENS0_13scan_expectedIvEEPvSA_SA_:
 5669|  59.2k|    {
 5670|  59.2k|        static_assert(!is_type_disabled<T>,
 5671|  59.2k|                      "Scanning of custom types is disabled by "
 5672|  59.2k|                      "SCN_DISABLE_TYPE_CUSTOM");
 5673|  59.2k|        SCN_EXPECT(arg && pctx && ctx);
  ------------------
  |  | 1104|  59.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  59.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5674|       |
 5675|  59.2k|        using context_type = Context;
 5676|  59.2k|        using parse_context_type = typename context_type::parse_context_type;
 5677|  59.2k|        using scanner_type = typename context_type::template scanner_type<T>;
 5678|       |
 5679|  59.2k|        auto s = scanner_type{};
 5680|       |
 5681|  59.2k|        auto& arg_ref = *static_cast<T*>(arg);
 5682|  59.2k|        auto& pctx_ref = *static_cast<parse_context_type*>(pctx);
 5683|  59.2k|        auto& ctx_ref = *static_cast<context_type*>(ctx);
 5684|       |
 5685|  59.2k|        SCN_TRY_DISCARD(parse_custom_arg(arg_ref, s, pctx_ref));
  ------------------
  |  | 3948|  59.2k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|  59.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 1.71k, False: 57.5k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|  1.71k|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|  1.71k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|  1.71k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|  1.71k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|  1.71k|    }
  ------------------
 5686|  57.5k|        SCN_TRY(it, s.scan(arg_ref, ctx_ref));
  ------------------
  |  | 3958|  57.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  57.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  57.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  57.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 23.9k, False: 33.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  23.9k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  23.9k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  23.9k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  23.9k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  23.9k|    }                                                  \
  |  |  |  | 3957|  57.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  33.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5687|  33.5k|        ctx_ref.advance_to(SCN_MOVE(it));
  ------------------
  |  | 1108|  33.5k|    static_cast<    \
  |  | 1109|  33.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5688|       |
 5689|  33.5k|        return {};
 5690|  57.5k|    }
_ZN3scn2v46detail16parse_custom_argINS0_10tm_with_tzENS0_7scannerIS3_cvEENS0_24basic_scan_parse_contextIcEEEENS0_13scan_expectedIvEERT_RT0_RT1_:
 5602|  59.2k|{
 5603|  59.2k|#if SCN_HAS_EXCEPTIONS
 5604|  59.2k|    auto fmt_it = pctx.begin();
 5605|  59.2k|    try {
 5606|  59.2k|        fmt_it = s.parse(pctx);
 5607|  59.2k|    }
 5608|  59.2k|    catch (const detail::scan_format_string_error_base& ex) {
 5609|       |        // scan_error takes a const char*.
 5610|       |        // scan_format_string_error (or, actually, std::runtime_error)
 5611|       |        // stores a reference-counted string,
 5612|       |        // that will go out of scope here.
 5613|       |        // We need to provide a const char* that will stay in scope.
 5614|       |        // If scan_format_string_error was thrown with a string literal,
 5615|       |        // use that, otherwise refer to a thread_local std::string
 5616|      0|        if (const char* m = get_internal_literal_msg(ex)) {
  ------------------
  |  Branch (5616:25): [True: 0, False: 0]
  ------------------
 5617|      0|            return unexpected_scan_error(scan_error::invalid_format_string, m);
 5618|      0|        }
 5619|      0|        thread_local std::string err_msg{};
 5620|      0|        err_msg = ex.what();
 5621|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 5622|      0|                                     err_msg.c_str());
 5623|      0|    }
 5624|       |#else
 5625|       |    auto fmt_it = s.parse(pctx_ref);
 5626|       |#endif
 5627|  59.2k|    if (auto e = pctx.get_error(); SCN_UNLIKELY(!e)) {
  ------------------
  |  | 1039|  59.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 1.71k, False: 57.5k]
  |  |  ------------------
  ------------------
 5628|  1.71k|        return e;
 5629|  1.71k|    }
 5630|  57.5k|    pctx.advance_to(fmt_it);
 5631|  57.5k|    return {};
 5632|  59.2k|}
_ZN3scn2v46detail10arg_mapperIcE3mapINS0_10tm_with_tzENS0_18basic_scan_contextINS1_16buffer_range_tagEcEETnPvLPv0EEENS1_14custom_wrapperIT_T0_EERSC_NS1_11context_tagISD_EE:
 5803|  59.2k|    {
 5804|  59.2k|        return {val};
 5805|  59.2k|    }
_ZNR3scn2v46detail25scan_result_value_storageIJNS0_10tm_with_tzEEE6valuesEv:
 6475|   119k|    {
 6476|   119k|        return m_values;
 6477|   119k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2IJNS0_10tm_with_tzEEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6221|  57.5k|        : basic_scan_args(store.desc, store.args.data())
 6222|  57.5k|    {
 6223|  57.5k|    }
_ZN3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNS0_10tm_with_tzEEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8849|  26.3k|        : m_str(r.str)
 8850|  26.3k|    {
 8851|  26.3k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEEcvbEv:
 1753|  27.2k|    {
 1754|  27.2k|        return has_value();
 1755|  27.2k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEEptEv:
 1828|  55.9k|    {
 1829|  55.9k|        return &value();
 1830|  55.9k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEE5valueISB_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSH_v:
 1782|  55.9k|    {
 1783|  55.9k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|  55.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  55.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|  55.9k|        return this->get_value();
 1785|  55.9k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EED2Ev:
  657|  40.0k|    {
  658|  40.0k|        if (has_value()) {
  ------------------
  |  Branch (658:13): [True: 14.3k, False: 25.7k]
  ------------------
  659|  14.3k|            destroy_value();
  660|  14.3k|        }
  661|  25.7k|        else {
  662|  25.7k|            destroy_unexpected();
  663|  25.7k|        }
  664|  40.0k|    }
_ZN3scn2v44scanIJNS0_10tm_with_tzEENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcSA_EEvvEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESJ_NS0_6detail22borrowed_tail_subrangeISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEJDpT_EEEEERKT0_OSF_NS0_24basic_scan_format_stringIcNSK_13type_identityISF_E4typeEJDpNSZ_ISQ_E4typeEEEE:
 9961|  13.1k|{
 9962|  13.1k|    auto result = make_scan_result<Source, Args...>();
 9963|  13.1k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1110|  13.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9964|  13.1k|                                   make_scan_args(result->values())));
 9965|  13.1k|    return result;
 9966|  13.1k|}
_ZN3scn2v410scan_valueINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcS8_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJT_EEEEEOSE_:
10002|    857|{
10003|    857|    auto result = make_scan_result<Source, T>();
10004|    857|    fill_scan_result(
10005|    857|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  | 1110|    857|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
10006|    857|                            detail::make_arg<scan_context>(result->value())));
10007|    857|    return result;
10008|    857|}
_ZN3scn2v46detail8make_argINS0_18basic_scan_contextINS1_16buffer_range_tagEcEENS0_10tm_with_tzEEENS0_14basic_scan_argIT_EERT0_:
 5945|  1.71k|{
 5946|  1.71k|    check_scan_arg_types<T>();
 5947|       |
 5948|  1.71k|    basic_scan_arg<Context> arg;
 5949|  1.71k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5950|  1.71k|    arg.m_value = make_value<Context>(value);
 5951|  1.71k|    return arg;
 5952|  1.71k|}
_ZNR3scn2v46detail25scan_result_value_storageIJNS0_10tm_with_tzEEE5valueILm1ETnPNSt3__19enable_ifIXeqT_Li1EEvE4typeELPv0EEEDcv:
 6497|  5.14k|    {
 6498|  5.14k|        return std::get<0>(m_values);
 6499|  5.14k|    }
_ZN3scn2v44scanIJNS0_19datetime_componentsEENS0_6ranges6detail9subrange_8subrangeIPKcS8_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEEOSE_NS0_24basic_scan_format_stringIcNSJ_13type_identityISE_E4typeEJDpNSV_ISP_E4typeEEEE:
 9892|  13.1k|{
 9893|  13.1k|    auto result = make_scan_result<Source, Args...>();
 9894|  13.1k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  | 1110|  13.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9895|  13.1k|                                   make_scan_args(result->values())));
 9896|  13.1k|    return result;
 9897|  13.1k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNS0_19datetime_componentsEEEEDav:
 9848|  27.2k|{
 9849|  27.2k|    return scan_result_type<Source, Args...>();
 9850|  27.2k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEEC2Ev:
 1565|  27.2k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EEC2Ev:
  626|  27.2k|    constexpr expected_storage_base() noexcept : m_has_value(true)
  627|  27.2k|    {
  628|  27.2k|        construct();
  629|  27.2k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE9constructIJEEEvDpOT_:
  708|  27.2k|    {
  709|  27.2k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  710|  27.2k|        m_has_value = true;
  711|  27.2k|    }
_ZN3scn2v46detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_19datetime_componentsEEEEJEEEPT_SE_DpOT0_:
  410|  27.2k|{
  411|  27.2k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  412|  27.2k|        T(std::forward<Args>(args)...);
  413|  27.2k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNS0_19datetime_componentsEEEC2Ev:
 6692|  27.2k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_value_storageIJNS0_19datetime_componentsEEEC2Ev:
 6466|   124k|    constexpr scan_result_value_storage() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE9value_ptrEv:
  732|   110k|    {
  733|   110k|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  | 1074|   110k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  734|   110k|    }
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNS0_19datetime_componentsEEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSC_7is_sameINSG_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISG_EEONSS_ISM_EE:
 9833|  27.2k|{
 9834|  27.2k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  | 1039|  27.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 12.8k, False: 14.3k]
  |  |  ------------------
  ------------------
 9835|  12.8k|        out = unexpected(in.error());
 9836|  12.8k|    }
 9837|  14.3k|    else {
 9838|  14.3k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1108|  14.3k|    static_cast<    \
  |  | 1109|  14.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9839|  14.3k|    }
 9840|  27.2k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEEC2ISC_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISC_OT_EEvE4typeELPv0ETnPNSG_IXsr3stdE16is_convertible_vISI_SC_EEvE4typeELSM_0EEEONS0_10unexpectedISH_EE:
 1629|  12.8k|        : base(unexpect, std::move(e.error())),
 1630|  12.8k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  12.8k|    {
 1632|  12.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  651|  12.8k|        : m_has_value(false)
  652|  12.8k|    {
  653|  12.8k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  654|  12.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNSt3__110in_place_tESD_EEEvDpOT_:
  715|  12.8k|    {
  716|  12.8k|        scn::detail::construct_at(unexpected_ptr(),
  717|  12.8k|                                  std::forward<Args>(args)...);
  718|  12.8k|        m_has_value = false;
  719|  12.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  744|  64.2k|    {
  745|  64.2k|        return reinterpret_cast<unexpected<E>*>(
  746|  64.2k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  | 1074|  64.2k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  747|  64.2k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  12.8k|    {
 1330|  12.8k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEEaSEOSD_:
 1570|  12.8k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEvEaSEOSE_:
  916|  12.8k|    {
  917|  12.8k|        assign_common(std::move(other));
  918|  12.8k|        return *this;
  919|  12.8k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEvE13assign_commonISE_EEvOT_:
  963|  12.8k|    {
  964|  12.8k|        if (this->has_value()) {
  ------------------
  |  Branch (964:13): [True: 12.8k, False: 0]
  ------------------
  965|  12.8k|            if (other.has_value()) {
  ------------------
  |  Branch (965:17): [True: 0, False: 12.8k]
  ------------------
  966|      0|                return reassign_value(std::forward<Other>(other));
  967|      0|            }
  968|  12.8k|            return assign_unexpected_over_value(std::forward<Other>(other));
  969|  12.8k|        }
  970|       |
  971|      0|        if (other.has_value()) {
  ------------------
  |  Branch (971:13): [True: 0, False: 0]
  ------------------
  972|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  973|      0|        }
  974|      0|        return reassign_unexpected(std::forward<Other>(other));
  975|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE9has_valueEv:
  701|   149k|    {
  702|   149k|        return m_has_value;
  703|   149k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE9get_valueEv:
  667|  55.9k|    {
  668|  55.9k|        return *value_ptr();
  669|  55.9k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEvE28assign_unexpected_over_valueISE_EEvOT_:
 1059|  12.8k|    {
 1060|  12.8k|        this->destroy_value();
 1061|  12.8k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1062|  12.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  722|  27.2k|    {
  723|  27.2k|        scn::detail::destroy_at(value_ptr());
  724|  27.2k|    }
_ZN3scn2v46detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_19datetime_componentsEEEEEEvPT_:
  416|  27.2k|{
  417|       |    if constexpr (std::is_array_v<T>) {
  418|       |        for (auto& elem : *p) {
  419|       |            scn::detail::destroy_at(&elem);
  420|       |        }
  421|       |    }
  422|  27.2k|    else {
  423|  27.2k|        p->~T();
  424|  27.2k|    }
  425|  27.2k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNS0_19datetime_componentsEEED2Ev:
 6699|  27.2k|    ~scan_result() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE20construct_unexpectedIJNS0_10unexpectedISD_EEEEEvDpOT_:
  715|  12.8k|    {
  716|  12.8k|        scn::detail::construct_at(unexpected_ptr(),
  717|  12.8k|                                  std::forward<Args>(args)...);
  718|  12.8k|        m_has_value = false;
  719|  12.8k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE14get_unexpectedEv:
  692|  12.8k|    {
  693|  12.8k|        return std::move(*unexpected_ptr());
  694|  12.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  726|  25.7k|    {
  727|  25.7k|        scn::detail::destroy_at(unexpected_ptr());
  728|  25.7k|    }
_ZNK3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNS0_19datetime_componentsEEEcvNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEv:
 8854|  26.3k|    {
 8855|  26.3k|        return m_str;
 8856|  26.3k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEJNS0_19datetime_componentsEEEEDaRNSt3__15tupleIJDpT0_EEE:
 6195|  57.5k|{
 6196|  57.5k|    detail::check_scan_arg_types<Args...>();
 6197|  57.5k|    return detail::scan_arg_store<Context, Args...>(values);
 6198|  57.5k|}
_ZN3scn2v46detail20check_scan_arg_typesIJNS0_19datetime_componentsEEEEbv:
 5910|   124k|{
 5911|   124k|    constexpr bool default_constructible_constraint =
 5912|   124k|        std::conjunction_v<std::is_default_constructible<Args>...>;
 5913|   124k|    static_assert(default_constructible_constraint,
 5914|   124k|                  "Scan argument types must be default constructible");
 5915|       |
 5916|   124k|    constexpr bool destructible_constraint =
 5917|   124k|        std::conjunction_v<std::is_destructible<Args>...>;
 5918|   124k|    static_assert(destructible_constraint,
 5919|   124k|                  "Scan argument types must be Destructible");
 5920|       |
 5921|   124k|    constexpr bool non_reference_constraint =
 5922|   124k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>;
 5923|   124k|    static_assert(non_reference_constraint,
 5924|   124k|                  "Scan argument types must not be references");
 5925|       |
 5926|   124k|    constexpr bool movable_constraint =
 5927|   124k|        std::conjunction_v<std::is_move_constructible<Args>...>;
 5928|   124k|    static_assert(movable_constraint,
 5929|   124k|                  "Scan argument types must be move constructible");
 5930|       |
 5931|   124k|    return default_constructible_constraint && destructible_constraint &&
  ------------------
  |  Branch (5931:12): [Folded - Ignored]
  |  Branch (5931:48): [Folded - Ignored]
  ------------------
 5932|   124k|           non_reference_constraint && movable_constraint;
  ------------------
  |  Branch (5932:12): [Folded - Ignored]
  |  Branch (5932:40): [Folded - Ignored]
  ------------------
 5933|   124k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJNS0_19datetime_componentsEEEC2ERNSt3__15tupleIJS6_EEE:
 6171|  57.5k|        : args(std::apply(make_argptrs<Args...>, args))
 6172|  57.5k|    {
 6173|  57.5k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJNS0_19datetime_componentsEEE12make_argptrsIJS6_EEENSt3__15arrayINS1_9arg_valueELm1EEEDpRT_:
 6180|  57.5k|    {
 6181|  57.5k|        return {detail::make_arg<
 6182|  57.5k|            kind, Context,
 6183|  57.5k|            mapped_type_constant<remove_cvref_t<A>,
 6184|  57.5k|                                 typename Context::char_type>::value>(args)...};
 6185|  57.5k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE1ENS0_18basic_scan_contextINS1_16buffer_range_tagEcEELNS1_8arg_typeE29ENS0_19datetime_componentsEvEENS1_9arg_valueERT2_:
 5969|  57.5k|{
 5970|  57.5k|    return make_value<Context>(value);
 5971|  57.5k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEcEENS0_19datetime_componentsEEEDaRT0_:
 5895|  59.2k|{
 5896|  59.2k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5897|       |
 5898|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5899|       |                                  needs_context_tag>) {
 5900|       |        return make_value_impl<T>(SCN_FWD(arg));
 5901|       |    }
 5902|  59.2k|    else {
 5903|  59.2k|        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5904|  59.2k|            value, context_tag<Context>{}));
 5905|  59.2k|    }
 5906|  59.2k|}
_ZN3scn2v46detail10arg_mapperIcE3mapINS0_19datetime_componentsETnPvLPv0EEENS1_17needs_context_tagERT_:
 5795|  59.2k|    {
 5796|  59.2k|        return {};
 5797|  59.2k|    }
_ZN3scn2v46detail15make_value_implINS0_19datetime_componentsENS1_14custom_wrapperIS3_NS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEEDaOT0_:
 5864|  59.2k|{
 5865|  59.2k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5866|  59.2k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5867|       |
 5868|  59.2k|    constexpr bool scannable_char =
 5869|  59.2k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5870|  59.2k|    static_assert(scannable_char,
 5871|  59.2k|                  "Cannot scan an argument of an unsupported character "
 5872|  59.2k|                  "type (i.e. char from a wchar_t source)");
 5873|       |
 5874|  59.2k|    constexpr bool scannable_const =
 5875|  59.2k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5876|  59.2k|    static_assert(scannable_const, "Cannot scan a const argument");
 5877|       |
 5878|  59.2k|    constexpr bool scannable_disabled =
 5879|  59.2k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5880|  59.2k|    static_assert(scannable_disabled,
 5881|  59.2k|                  "Cannot scan an argument that has been disabled by "
 5882|  59.2k|                  "flag (SCN_DISABLE_TYPE_*)");
 5883|       |
 5884|  59.2k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5885|  59.2k|    static_assert(
 5886|  59.2k|        scannable,
 5887|  59.2k|        "Cannot scan an argument. To make a type T scannable, provide "
 5888|  59.2k|        "a scn::scanner<T, CharT> specialization.");
 5889|       |
 5890|  59.2k|    return arg_value{arg};
 5891|  59.2k|}
_ZN3scn2v46detail9arg_valueC2INS0_19datetime_componentsENS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEENS1_14custom_wrapperIT_T0_EE:
 5651|  59.2k|        : custom_value{static_cast<void*>(&val.val),
 5652|  59.2k|                       scan_custom_arg<T, Context>}
 5653|  59.2k|    {
 5654|  59.2k|    }
_ZN3scn2v46detail9arg_value15scan_custom_argINS0_19datetime_componentsENS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEENS0_13scan_expectedIvEEPvSA_SA_:
 5669|  59.2k|    {
 5670|  59.2k|        static_assert(!is_type_disabled<T>,
 5671|  59.2k|                      "Scanning of custom types is disabled by "
 5672|  59.2k|                      "SCN_DISABLE_TYPE_CUSTOM");
 5673|  59.2k|        SCN_EXPECT(arg && pctx && ctx);
  ------------------
  |  | 1104|  59.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  59.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5674|       |
 5675|  59.2k|        using context_type = Context;
 5676|  59.2k|        using parse_context_type = typename context_type::parse_context_type;
 5677|  59.2k|        using scanner_type = typename context_type::template scanner_type<T>;
 5678|       |
 5679|  59.2k|        auto s = scanner_type{};
 5680|       |
 5681|  59.2k|        auto& arg_ref = *static_cast<T*>(arg);
 5682|  59.2k|        auto& pctx_ref = *static_cast<parse_context_type*>(pctx);
 5683|  59.2k|        auto& ctx_ref = *static_cast<context_type*>(ctx);
 5684|       |
 5685|  59.2k|        SCN_TRY_DISCARD(parse_custom_arg(arg_ref, s, pctx_ref));
  ------------------
  |  | 3948|  59.2k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|  59.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 1.71k, False: 57.5k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|  1.71k|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|  1.71k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|  1.71k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|  1.71k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|  1.71k|    }
  ------------------
 5686|  57.5k|        SCN_TRY(it, s.scan(arg_ref, ctx_ref));
  ------------------
  |  | 3958|  57.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  57.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  57.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  57.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 23.9k, False: 33.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  23.9k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  23.9k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  23.9k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  23.9k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  23.9k|    }                                                  \
  |  |  |  | 3957|  57.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  33.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5687|  33.5k|        ctx_ref.advance_to(SCN_MOVE(it));
  ------------------
  |  | 1108|  33.5k|    static_cast<    \
  |  | 1109|  33.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5688|       |
 5689|  33.5k|        return {};
 5690|  57.5k|    }
_ZN3scn2v46detail16parse_custom_argINS0_19datetime_componentsENS0_7scannerIS3_cvEENS0_24basic_scan_parse_contextIcEEEENS0_13scan_expectedIvEERT_RT0_RT1_:
 5602|  59.2k|{
 5603|  59.2k|#if SCN_HAS_EXCEPTIONS
 5604|  59.2k|    auto fmt_it = pctx.begin();
 5605|  59.2k|    try {
 5606|  59.2k|        fmt_it = s.parse(pctx);
 5607|  59.2k|    }
 5608|  59.2k|    catch (const detail::scan_format_string_error_base& ex) {
 5609|       |        // scan_error takes a const char*.
 5610|       |        // scan_format_string_error (or, actually, std::runtime_error)
 5611|       |        // stores a reference-counted string,
 5612|       |        // that will go out of scope here.
 5613|       |        // We need to provide a const char* that will stay in scope.
 5614|       |        // If scan_format_string_error was thrown with a string literal,
 5615|       |        // use that, otherwise refer to a thread_local std::string
 5616|      0|        if (const char* m = get_internal_literal_msg(ex)) {
  ------------------
  |  Branch (5616:25): [True: 0, False: 0]
  ------------------
 5617|      0|            return unexpected_scan_error(scan_error::invalid_format_string, m);
 5618|      0|        }
 5619|      0|        thread_local std::string err_msg{};
 5620|      0|        err_msg = ex.what();
 5621|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 5622|      0|                                     err_msg.c_str());
 5623|      0|    }
 5624|       |#else
 5625|       |    auto fmt_it = s.parse(pctx_ref);
 5626|       |#endif
 5627|  59.2k|    if (auto e = pctx.get_error(); SCN_UNLIKELY(!e)) {
  ------------------
  |  | 1039|  59.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 1.71k, False: 57.5k]
  |  |  ------------------
  ------------------
 5628|  1.71k|        return e;
 5629|  1.71k|    }
 5630|  57.5k|    pctx.advance_to(fmt_it);
 5631|  57.5k|    return {};
 5632|  59.2k|}
_ZN3scn2v46detail10arg_mapperIcE3mapINS0_19datetime_componentsENS0_18basic_scan_contextINS1_16buffer_range_tagEcEETnPvLPv0EEENS1_14custom_wrapperIT_T0_EERSC_NS1_11context_tagISD_EE:
 5803|  59.2k|    {
 5804|  59.2k|        return {val};
 5805|  59.2k|    }
_ZNR3scn2v46detail25scan_result_value_storageIJNS0_19datetime_componentsEEE6valuesEv:
 6475|   119k|    {
 6476|   119k|        return m_values;
 6477|   119k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2IJNS0_19datetime_componentsEEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6221|  57.5k|        : basic_scan_args(store.desc, store.args.data())
 6222|  57.5k|    {
 6223|  57.5k|    }
_ZN3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNS0_19datetime_componentsEEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8849|  26.3k|        : m_str(r.str)
 8850|  26.3k|    {
 8851|  26.3k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEEcvbEv:
 1753|  27.2k|    {
 1754|  27.2k|        return has_value();
 1755|  27.2k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEEptEv:
 1828|  55.9k|    {
 1829|  55.9k|        return &value();
 1830|  55.9k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEE5valueISB_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSH_v:
 1782|  55.9k|    {
 1783|  55.9k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|  55.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  55.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|  55.9k|        return this->get_value();
 1785|  55.9k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EED2Ev:
  657|  40.0k|    {
  658|  40.0k|        if (has_value()) {
  ------------------
  |  Branch (658:13): [True: 14.3k, False: 25.7k]
  ------------------
  659|  14.3k|            destroy_value();
  660|  14.3k|        }
  661|  25.7k|        else {
  662|  25.7k|            destroy_unexpected();
  663|  25.7k|        }
  664|  40.0k|    }
_ZN3scn2v44scanIJNS0_19datetime_componentsEENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcSA_EEvvEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESJ_NS0_6detail22borrowed_tail_subrangeISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEJDpT_EEEEERKT0_OSF_NS0_24basic_scan_format_stringIcNSK_13type_identityISF_E4typeEJDpNSZ_ISQ_E4typeEEEE:
 9961|  13.1k|{
 9962|  13.1k|    auto result = make_scan_result<Source, Args...>();
 9963|  13.1k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1110|  13.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9964|  13.1k|                                   make_scan_args(result->values())));
 9965|  13.1k|    return result;
 9966|  13.1k|}
_ZN3scn2v410scan_valueINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcS8_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJT_EEEEEOSE_:
10002|    857|{
10003|    857|    auto result = make_scan_result<Source, T>();
10004|    857|    fill_scan_result(
10005|    857|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  | 1110|    857|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
10006|    857|                            detail::make_arg<scan_context>(result->value())));
10007|    857|    return result;
10008|    857|}
_ZN3scn2v46detail8make_argINS0_18basic_scan_contextINS1_16buffer_range_tagEcEENS0_19datetime_componentsEEENS0_14basic_scan_argIT_EERT0_:
 5945|  1.71k|{
 5946|  1.71k|    check_scan_arg_types<T>();
 5947|       |
 5948|  1.71k|    basic_scan_arg<Context> arg;
 5949|  1.71k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5950|  1.71k|    arg.m_value = make_value<Context>(value);
 5951|  1.71k|    return arg;
 5952|  1.71k|}
_ZNR3scn2v46detail25scan_result_value_storageIJNS0_19datetime_componentsEEE5valueILm1ETnPNSt3__19enable_ifIXeqT_Li1EEvE4typeELPv0EEEDcv:
 6497|  5.14k|    {
 6498|  5.14k|        return std::get<0>(m_values);
 6499|  5.14k|    }
_ZNK3scn2v46ranges6detail6begin_2fnclIRKNSt3__15dequeIcNS6_9allocatorIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2882|  38.5k|    {
 2883|  38.5k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1110|  38.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2884|  38.5k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRKNSt3__15dequeIcNS6_9allocatorIcEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2863|  38.5k|    {
 2864|  38.5k|        return decay_copy(t.begin());
 2865|  38.5k|    }
_ZN3scn2v46ranges6detail10decay_copyINSt3__116__deque_iteratorIcPKcRS6_PKS7_lLl4096EEEEEu7__decayIT_EOSC_:
 2107|  2.63M|{
 2108|  2.63M|    return SCN_FWD(t);
  ------------------
  |  | 1110|  2.63M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2109|  2.63M|}
_ZNK3scn2v46ranges6detail4end_2fnclIRKNSt3__15dequeIcNS6_9allocatorIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2939|   192k|    {
 2940|   192k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1110|   192k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2941|   192k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRKNSt3__15dequeIcNS6_9allocatorIcEEEENS6_16__deque_iteratorIcPKcRSE_PKSF_lLl4096EEESJ_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2921|   192k|    {
 2922|   192k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  | 1110|   192k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2923|   192k|    }
_ZN3scn2v44scanIJ2tmENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEvEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEEOSJ_NS0_24basic_scan_format_stringIcNSO_13type_identityISJ_E4typeEJDpNS10_ISU_E4typeEEEE:
 9892|  15.5k|{
 9893|  15.5k|    auto result = make_scan_result<Source, Args...>();
 9894|  15.5k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  | 1110|  15.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9895|  15.5k|                                   make_scan_args(result->values())));
 9896|  15.5k|    return result;
 9897|  15.5k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJ2tmEEEDav:
 9848|  32.0k|{
 9849|  32.0k|    return scan_result_type<Source, Args...>();
 9850|  32.0k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJ2tmEEENS0_10scan_errorEEC2Ev:
 1565|  32.0k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJ2tmEEENS0_10scan_errorELb1EEC2Ev:
  441|  32.0k|        : m_value(T{}), m_has_value(true)
  442|  32.0k|    {
  443|  32.0k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJ2tmEEC2Ev:
 6692|  32.0k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEC2Ev:
 6535|  96.1k|    constexpr scan_result_range_storage() = default;
_ZN3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_EC2Ev:
 3473|  96.1k|    subrange() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJ2tmEEESF_TnPNS7_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENS7_7is_sameINSL_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISL_EEONSX_ISR_EE:
 9833|  32.0k|{
 9834|  32.0k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  | 1039|  32.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 12.8k, False: 19.1k]
  |  |  ------------------
  ------------------
 9835|  12.8k|        out = unexpected(in.error());
 9836|  12.8k|    }
 9837|  19.1k|    else {
 9838|  19.1k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1108|  19.1k|    static_cast<    \
  |  | 1109|  19.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9839|  19.1k|    }
 9840|  32.0k|}
_ZNK3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEcvbEv:
 1753|  96.1k|    {
 1754|  96.1k|        return has_value();
 1755|  96.1k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EE9has_valueEv:
  504|   192k|    {
  505|   192k|        return m_has_value;
  506|   192k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEE5errorEv:
 1759|  38.5k|    {
 1760|  38.5k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1104|  38.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  38.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1761|  38.5k|        return this->get_unexpected().error();
 1762|  38.5k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  487|  38.5k|    {
  488|  38.5k|        return m_unexpected;
  489|  38.5k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJ2tmEEENS0_10scan_errorEEC2ISI_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISI_OT_EEvE4typeELPv0ETnPNSL_IXsr3stdE16is_convertible_vISN_SI_EEvE4typeELSR_0EEEONS0_10unexpectedISM_EE:
 1629|  12.8k|        : base(unexpect, std::move(e.error())),
 1630|  12.8k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  12.8k|    {
 1632|  12.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJ2tmEEENS0_10scan_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  464|  12.8k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|  12.8k|          m_has_value(false)
  466|  12.8k|    {
  467|  12.8k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJ2tmEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  12.8k|    {
 1330|  12.8k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJ2tmEEENS0_10scan_errorEEaSEOSJ_:
 1570|  12.8k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJ2tmEEENS0_10scan_errorEvEaSEOSK_:
  916|  12.8k|    {
  917|  12.8k|        assign_common(std::move(other));
  918|  12.8k|        return *this;
  919|  12.8k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJ2tmEEENS0_10scan_errorEvE13assign_commonISK_EEvOT_:
  963|  12.8k|    {
  964|  12.8k|        if (this->has_value()) {
  ------------------
  |  Branch (964:13): [True: 12.8k, False: 0]
  ------------------
  965|  12.8k|            if (other.has_value()) {
  ------------------
  |  Branch (965:17): [True: 0, False: 12.8k]
  ------------------
  966|      0|                return reassign_value(std::forward<Other>(other));
  967|      0|            }
  968|  12.8k|            return assign_unexpected_over_value(std::forward<Other>(other));
  969|  12.8k|        }
  970|       |
  971|      0|        if (other.has_value()) {
  ------------------
  |  Branch (971:13): [True: 0, False: 0]
  ------------------
  972|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  973|      0|        }
  974|      0|        return reassign_unexpected(std::forward<Other>(other));
  975|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJ2tmEEENS0_10scan_errorELb1EE9has_valueEv:
  504|   128k|    {
  505|   128k|        return m_has_value;
  506|   128k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJ2tmEEENS0_10scan_errorELb1EE9get_valueEv:
  470|  70.4k|    {
  471|  70.4k|        return m_value;
  472|  70.4k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJ2tmEEENS0_10scan_errorEvE28assign_unexpected_over_valueISK_EEvOT_:
 1059|  12.8k|    {
 1060|  12.8k|        this->destroy_value();
 1061|  12.8k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1062|  12.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJ2tmEEENS0_10scan_errorELb1EE13destroy_valueEv:
  525|  12.8k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJ2tmEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISJ_EEEEEvDpOT_:
  518|  12.8k|    {
  519|  12.8k|        scn::detail::construct_at(&get_unexpected(),
  520|  12.8k|                                  std::forward<Args>(args)...);
  521|  12.8k|        m_has_value = false;
  522|  12.8k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJ2tmEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  487|  12.8k|    {
  488|  12.8k|        return m_unexpected;
  489|  12.8k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJ2tmEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  495|  12.8k|    {
  496|  12.8k|        return std::move(m_unexpected);
  497|  12.8k|    }
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEE9set_rangeISF_EEvOT_:
 6566|  57.5k|    {
 6567|  57.5k|        m_range = std::forward<Other>(r);
 6568|  57.5k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEdeISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSJ_v:
 1808|  57.5k|    {
 1809|  57.5k|        return value();
 1810|  57.5k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEE5valueISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSJ_v:
 1782|  57.5k|    {
 1783|  57.5k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|  57.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  57.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|  57.5k|        return this->get_value();
 1785|  57.5k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EE9get_valueEv:
  470|  57.5k|    {
  471|  57.5k|        return m_value;
  472|  57.5k|    }
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS6_17basic_string_viewIcNS6_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSM_16buffer_range_tagEcEEEE:
 9654|  46.7k|{
 9655|  46.7k|    return detail::vscan_generic(SCN_FWD(source), format, args);
  ------------------
  |  | 1110|  46.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9656|  46.7k|}
_ZN3scn2v46detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEcEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS7_17basic_string_viewIT0_NS7_11char_traitsISV_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESV_EEEE:
 9591|  46.7k|{
 9592|  46.7k|    auto buffer = make_scan_buffer(range);
 9593|       |
 9594|  46.7k|    auto result = vscan_impl(buffer, format, args);
 9595|  46.7k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  | 1039|  46.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 17.9k, False: 28.7k]
  |  |  ------------------
  ------------------
 9596|  17.9k|        return unexpected(result.error());
 9597|  17.9k|    }
 9598|  28.7k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  | 1110|  28.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9599|  46.7k|}
_ZN3scn2v46detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEEDaRKT_:
 5398|  96.1k|{
 5399|  96.1k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 5400|       |
 5401|  96.1k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 5402|  96.1k|                  "\n"
 5403|  96.1k|                  "Unsupported range type given as input to a scanning "
 5404|  96.1k|                  "function.\n"
 5405|  96.1k|                  "A range needs to have a character type (value type) "
 5406|  96.1k|                  "of either `char` or `wchar_t` to be scannable.\n"
 5407|  96.1k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 5408|  96.1k|                  "to be included.\n"
 5409|  96.1k|                  "See the scnlib documentation for more details.");
 5410|  96.1k|    static_assert(
 5411|  96.1k|        !std::is_same_v<T, custom_char_traits>,
 5412|  96.1k|        "\n"
 5413|  96.1k|        "Unsupported range type given as input to a scanning "
 5414|  96.1k|        "function.\n"
 5415|  96.1k|        "String types (std::basic_string, and std::basic_string_view) "
 5416|  96.1k|        "need to use std::char_traits. Strings with custom Traits are "
 5417|  96.1k|        "not supported.");
 5418|  96.1k|    static_assert(!std::is_same_v<T, file_marker_found>,
 5419|  96.1k|                  "\n"
 5420|  96.1k|                  "Unsupported range type given as input to a scanning "
 5421|  96.1k|                  "function.\n"
 5422|  96.1k|                  "file_marker_found cannot be used as an "
 5423|  96.1k|                  "source range type to scn::scan.\n"
 5424|  96.1k|                  "To read from stdin, use scn::input or scn::prompt, "
 5425|  96.1k|                  "and do not provide an explicit source range, "
 5426|  96.1k|                  "or use scn::scan with a FILE* directly.");
 5427|  96.1k|    static_assert(!std::is_same_v<T, insufficient_range>,
 5428|  96.1k|                  "\n"
 5429|  96.1k|                  "Unsupported range type given as input to a scanning "
 5430|  96.1k|                  "function.\n"
 5431|  96.1k|                  "In order to be scannable, a range needs to satisfy "
 5432|  96.1k|                  "`forward_range`. `input_range` is not sufficient.");
 5433|  96.1k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 5434|  96.1k|                  "\n"
 5435|  96.1k|                  "Unsupported range type given as input to a scanning "
 5436|  96.1k|                  "function.\n"
 5437|  96.1k|                  "A range needs to model forward_range and have a valid "
 5438|  96.1k|                  "character type (char or wchar_t) to be scannable.\n"
 5439|  96.1k|                  "Examples of scannable ranges are std::string, "
 5440|  96.1k|                  "std::string_view, "
 5441|  96.1k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 5442|  96.1k|                  "See the scnlib documentation for more details.");
 5443|       |
 5444|  96.1k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 5445|  96.1k|}
_ZN3scn2v46detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDaRKT_NS1_12priority_tagILm0EEE:
 5368|  96.1k|{
 5369|       |    if constexpr (std::is_same_v<Range, file_marker>) {
 5370|       |        return file_marker_found{};
 5371|       |    }
 5372|       |    else if constexpr (!ranges::forward_range<Range>) {
 5373|       |        if constexpr (ranges::range<Range>) {
 5374|       |            return insufficient_range{};
 5375|       |        }
 5376|       |        else {
 5377|       |            return invalid_input_range{};
 5378|       |        }
 5379|       |    }
 5380|       |    else if constexpr (!is_valid_char_type<detail::char_t<Range>>) {
 5381|       |        return invalid_char_type{};
 5382|       |    }
 5383|  96.1k|    else {
 5384|  96.1k|        return make_forward_scan_buffer(r);
 5385|  96.1k|    }
 5386|  96.1k|}
_ZN3scn2v46detail24make_forward_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEEDaRKT_:
 5202|  96.1k|{
 5203|  96.1k|    return basic_scan_forward_buffer_impl(range);
 5204|  96.1k|}
_ZN3scn2v46detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEC2IRKSF_TnPNS7_9enable_ifIXaa11is_not_selfIT_SG_Esr3stdE16is_convertible_vISL_SJ_EEvE4typeELPv0EEEOSL_:
 4782|  96.1k|        : m_range(std::addressof(static_cast<const Range&>(SCN_FWD(r)))),
  ------------------
  |  | 1110|  96.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4783|  96.1k|          m_cursor(ranges::begin(*m_range))
 4784|  96.1k|    {
 4785|  96.1k|    }
_ZN3scn2v46detail30basic_scan_forward_buffer_baseIcEC2Ev:
 4754|  96.1k|    basic_scan_forward_buffer_base() : base(typename base::non_contiguous_tag{})
 4755|  96.1k|    {
 4756|  96.1k|    }
_ZN3scn2v46detail17basic_scan_bufferIcEC2ENS3_18non_contiguous_tagENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEE:
 4445|  96.1k|        : m_current_view(sv), m_is_contiguous(false)
 4446|  96.1k|    {
 4447|  96.1k|    }
_ZN3scn2v46detail17basic_scan_bufferIcED2Ev:
 4358|   175k|    virtual ~basic_scan_buffer() = default;
_ZNK3scn2v46ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2882|   153k|    {
 2883|   153k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1110|   153k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2884|   153k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESL_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2863|   153k|    {
 2864|   153k|        return decay_copy(t.begin());
 2865|   153k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_E5beginEv:
 3493|   211k|    {
 3494|   211k|        return m_iterator;
 3495|   211k|    }
_ZN3scn2v46detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEE4fillEv:
 4788|   721k|    {
 4789|   721k|        if (m_cursor == ranges::end(*m_range)) {
  ------------------
  |  Branch (4789:13): [True: 14.7k, False: 706k]
  ------------------
 4790|  14.7k|            return false;
 4791|  14.7k|        }
 4792|   706k|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
 4793|   706k|            SCN_EXPECT(m_cursor < ranges::end(*m_range));
  ------------------
  |  | 1104|   706k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   706k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4794|   706k|        }
 4795|   706k|        if (!this->m_current_view.empty()) {
  ------------------
  |  Branch (4795:13): [True: 613k, False: 93.3k]
  ------------------
 4796|   613k|            this->m_putback_buffer.insert(this->m_putback_buffer.end(),
 4797|   613k|                                          this->m_current_view.begin(),
 4798|   613k|                                          this->m_current_view.end());
 4799|   613k|        }
 4800|   706k|        m_latest = *m_cursor;
 4801|   706k|        ++m_cursor;
 4802|   706k|        this->m_current_view = std::basic_string_view<char_type>{&m_latest, 1};
 4803|   706k|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
 4804|   706k|            SCN_EXPECT(m_cursor <= ranges::end(*m_range));
  ------------------
  |  | 1104|   706k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   706k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4805|   706k|        }
 4806|   706k|        return true;
 4807|   721k|    }
_ZNK3scn2v46ranges6detail4end_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2939|  2.13M|    {
 2940|  2.13M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1110|  2.13M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2941|  2.13M|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2921|  2.13M|    {
 2922|  2.13M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  | 1110|  2.13M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2923|  2.13M|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_E3endEv:
 3497|  2.19M|    {
 3498|  2.19M|        return m_sentinel;
 3499|  2.19M|    }
_ZN3scn2v46detail17basic_scan_bufferIcE4syncEl:
 4363|  96.1k|    {
 4364|  96.1k|        SCN_UNUSED(position);
  ------------------
  |  | 1089|  96.1k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4365|  96.1k|        return true;
 4366|  96.1k|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEC2ISF_TnPNS6_9enable_ifIXsr3stdE18is_constructible_vISF_OT_EEvE4typeELPv0ETnPNSI_IXsr3stdE16is_convertible_vISK_SF_EEvE4typeELSO_0EEEONS0_10unexpectedISJ_EE:
 1629|  38.5k|        : base(unexpect, std::move(e.error())),
 1630|  38.5k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  38.5k|    {
 1632|  38.5k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EEC2IJSG_EvEENS0_10unexpect_tEDpOT_:
  464|  38.5k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|  38.5k|          m_has_value(false)
  466|  38.5k|    {
  467|  38.5k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  96.1k|    {
 1330|  96.1k|    }
_ZN3scn2v46detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_l:
 6796|  57.5k|{
 6797|       |    if constexpr (ranges::random_access_iterator<
 6798|  57.5k|                      ranges::iterator_t<SourceRange>>) {
 6799|  57.5k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 6800|       |    }
 6801|       |    else {
 6802|       |        auto it = ranges::begin(source);
 6803|       |        while (n > 0) {
 6804|       |            --n;
 6805|       |            ++it;
 6806|       |        }
 6807|       |        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 6808|       |    }
 6809|  57.5k|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2882|  57.5k|    {
 2883|  57.5k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1110|  57.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2884|  57.5k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESK_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2863|  57.5k|    {
 2864|  57.5k|        return decay_copy(t.begin());
 2865|  57.5k|    }
_ZN3scn2v46detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEEDaRT_:
 6783|  57.5k|{
 6784|  57.5k|    return ranges::end(source);
 6785|  57.5k|}
_ZNK3scn2v46ranges6detail4end_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2939|  57.5k|    {
 2940|  57.5k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1110|  57.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2941|  57.5k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2921|  57.5k|    {
 2922|  57.5k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  | 1110|  57.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2923|  57.5k|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEC2ISE_vEEOT_:
 1583|  57.5k|        : base(std::in_place, std::forward<U>(val)),
 1584|  57.5k|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|  57.5k|    {
 1586|  57.5k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EEC2IJSF_EvEENS7_10in_place_tEDpOT_:
  455|  57.5k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|  57.5k|    {
  457|  57.5k|    }
_ZNK3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJ2tmEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
 8854|  31.1k|    {
 8855|  31.1k|        return m_str;
 8856|  31.1k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_EC2ISC_TnPNS5_9enable_ifIXsr3stdE16is_convertible_vIT_SC_EEvE4typeELPv0EEESG_SC_:
 3478|   153k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1108|   153k|    static_cast<    \
  |  | 1109|   153k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1108|   153k|    static_cast<    \
  |  | 1109|   153k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3479|   153k|    {
 3480|   153k|    }
_ZN3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJ2tmEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8849|  31.1k|        : m_str(r.str)
 8850|  31.1k|    {
 8851|  31.1k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJ2tmEEENS0_10scan_errorEEcvbEv:
 1753|  32.0k|    {
 1754|  32.0k|        return has_value();
 1755|  32.0k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJ2tmEEENS0_10scan_errorEEptEv:
 1828|  70.4k|    {
 1829|  70.4k|        return &value();
 1830|  70.4k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJ2tmEEENS0_10scan_errorEE5valueISH_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSM_v:
 1782|  70.4k|    {
 1783|  70.4k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|  70.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  70.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|  70.4k|        return this->get_value();
 1785|  70.4k|    }
_ZNK3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEE5beginEv:
 6555|  57.5k|    {
 6556|  57.5k|        return ranges::begin(m_range);
 6557|  57.5k|    }
_ZN3scn2v44scanIJ2tmENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS3_16__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEvvEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT_EEEEERKT0_OSK_NS0_24basic_scan_format_stringIcNSP_13type_identityISK_E4typeEJDpNS14_ISV_E4typeEEEE:
 9961|  15.5k|{
 9962|  15.5k|    auto result = make_scan_result<Source, Args...>();
 9963|  15.5k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1110|  15.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9964|  15.5k|                                   make_scan_args(result->values())));
 9965|  15.5k|    return result;
 9966|  15.5k|}
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS6_6localeEvEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEERKT0_OSI_NS6_17basic_string_viewIcNS6_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSN_16buffer_range_tagEcEEEE:
 9672|  46.7k|{
 9673|  46.7k|    return detail::vscan_localized_generic(loc, SCN_FWD(source), format, args);
  ------------------
  |  | 1110|  46.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9674|  46.7k|}
_ZN3scn2v46detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS3_16__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS1_22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEEERKT_OSJ_NS3_17basic_string_viewIT1_NS3_11char_traitsISZ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESZ_EEEE:
 9607|  46.7k|{
 9608|  46.7k|#if !SCN_DISABLE_LOCALE
 9609|  46.7k|    auto buffer = detail::make_scan_buffer(range);
 9610|       |
 9611|  46.7k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 9612|  46.7k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 9613|  46.7k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 9614|       |
 9615|  46.7k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  | 1039|  46.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 17.9k, False: 28.7k]
  |  |  ------------------
  ------------------
 9616|  17.9k|        return unexpected(result.error());
 9617|  17.9k|    }
 9618|  28.7k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  | 1110|  28.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9619|       |#else
 9620|       |    static_assert(dependent_false<Locale>::value,
 9621|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 9622|       |
 9623|       |    return {};
 9624|       |#endif
 9625|  46.7k|}
_ZN3scn2v410scan_valueI2tmNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEvEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJT_EEEEEOSJ_:
10002|    857|{
10003|    857|    auto result = make_scan_result<Source, T>();
10004|    857|    fill_scan_result(
10005|    857|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  | 1110|    857|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
10006|    857|                            detail::make_arg<scan_context>(result->value())));
10007|    857|    return result;
10008|    857|}
_ZN3scn2v411vscan_valueINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS0_14basic_scan_argINS0_18basic_scan_contextINSM_16buffer_range_tagEcEEEE:
 9685|  2.57k|{
 9686|  2.57k|    return detail::vscan_value_generic(SCN_FWD(source), arg);
  ------------------
  |  | 1110|  2.57k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9687|  2.57k|}
_ZN3scn2v46detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEcEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagET0_EEEE:
 9631|  2.57k|{
 9632|  2.57k|    auto buffer = detail::make_scan_buffer(range);
 9633|       |
 9634|  2.57k|    auto result = detail::vscan_value_impl(buffer, arg);
 9635|  2.57k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  | 1039|  2.57k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 2.57k, False: 0]
  |  |  ------------------
  ------------------
 9636|  2.57k|        return unexpected(result.error());
 9637|  2.57k|    }
 9638|      0|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9639|  2.57k|}
_ZN3scn2v44scanIJNS0_10tm_with_tzEENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEvEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEEOSJ_NS0_24basic_scan_format_stringIcNSO_13type_identityISJ_E4typeEJDpNS10_ISU_E4typeEEEE:
 9892|  15.5k|{
 9893|  15.5k|    auto result = make_scan_result<Source, Args...>();
 9894|  15.5k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  | 1110|  15.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9895|  15.5k|                                   make_scan_args(result->values())));
 9896|  15.5k|    return result;
 9897|  15.5k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJNS0_10tm_with_tzEEEEDav:
 9848|  32.0k|{
 9849|  32.0k|    return scan_result_type<Source, Args...>();
 9850|  32.0k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEEC2Ev:
 1565|  32.0k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EEC2Ev:
  626|  32.0k|    constexpr expected_storage_base() noexcept : m_has_value(true)
  627|  32.0k|    {
  628|  32.0k|        construct();
  629|  32.0k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE9constructIJEEEvDpOT_:
  708|  32.0k|    {
  709|  32.0k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  710|  32.0k|        m_has_value = true;
  711|  32.0k|    }
_ZN3scn2v46detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_10tm_with_tzEEEEJEEEPT_SK_DpOT0_:
  410|  32.0k|{
  411|  32.0k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  412|  32.0k|        T(std::forward<Args>(args)...);
  413|  32.0k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJNS0_10tm_with_tzEEEC2Ev:
 6692|  32.0k|    constexpr scan_result() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE9value_ptrEv:
  732|   134k|    {
  733|   134k|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  | 1074|   134k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  734|   134k|    }
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS0_10tm_with_tzEEEESF_TnPNS7_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENS7_7is_sameINSL_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISL_EEONSX_ISR_EE:
 9833|  32.0k|{
 9834|  32.0k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  | 1039|  32.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 12.8k, False: 19.1k]
  |  |  ------------------
  ------------------
 9835|  12.8k|        out = unexpected(in.error());
 9836|  12.8k|    }
 9837|  19.1k|    else {
 9838|  19.1k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1108|  19.1k|    static_cast<    \
  |  | 1109|  19.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9839|  19.1k|    }
 9840|  32.0k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEEC2ISI_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISI_OT_EEvE4typeELPv0ETnPNSL_IXsr3stdE16is_convertible_vISN_SI_EEvE4typeELSR_0EEEONS0_10unexpectedISM_EE:
 1629|  12.8k|        : base(unexpect, std::move(e.error())),
 1630|  12.8k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  12.8k|    {
 1632|  12.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  651|  12.8k|        : m_has_value(false)
  652|  12.8k|    {
  653|  12.8k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  654|  12.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS8_10in_place_tESJ_EEEvDpOT_:
  715|  12.8k|    {
  716|  12.8k|        scn::detail::construct_at(unexpected_ptr(),
  717|  12.8k|                                  std::forward<Args>(args)...);
  718|  12.8k|        m_has_value = false;
  719|  12.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  744|  64.2k|    {
  745|  64.2k|        return reinterpret_cast<unexpected<E>*>(
  746|  64.2k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  | 1074|  64.2k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  747|  64.2k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  12.8k|    {
 1330|  12.8k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEEaSEOSJ_:
 1570|  12.8k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEvEaSEOSK_:
  916|  12.8k|    {
  917|  12.8k|        assign_common(std::move(other));
  918|  12.8k|        return *this;
  919|  12.8k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEvE13assign_commonISK_EEvOT_:
  963|  12.8k|    {
  964|  12.8k|        if (this->has_value()) {
  ------------------
  |  Branch (964:13): [True: 12.8k, False: 0]
  ------------------
  965|  12.8k|            if (other.has_value()) {
  ------------------
  |  Branch (965:17): [True: 0, False: 12.8k]
  ------------------
  966|      0|                return reassign_value(std::forward<Other>(other));
  967|      0|            }
  968|  12.8k|            return assign_unexpected_over_value(std::forward<Other>(other));
  969|  12.8k|        }
  970|       |
  971|      0|        if (other.has_value()) {
  ------------------
  |  Branch (971:13): [True: 0, False: 0]
  ------------------
  972|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  973|      0|        }
  974|      0|        return reassign_unexpected(std::forward<Other>(other));
  975|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE9has_valueEv:
  701|   173k|    {
  702|   173k|        return m_has_value;
  703|   173k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE9get_valueEv:
  667|  70.4k|    {
  668|  70.4k|        return *value_ptr();
  669|  70.4k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEvE28assign_unexpected_over_valueISK_EEvOT_:
 1059|  12.8k|    {
 1060|  12.8k|        this->destroy_value();
 1061|  12.8k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1062|  12.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  722|  32.0k|    {
  723|  32.0k|        scn::detail::destroy_at(value_ptr());
  724|  32.0k|    }
_ZN3scn2v46detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_10tm_with_tzEEEEEEvPT_:
  416|  32.0k|{
  417|       |    if constexpr (std::is_array_v<T>) {
  418|       |        for (auto& elem : *p) {
  419|       |            scn::detail::destroy_at(&elem);
  420|       |        }
  421|       |    }
  422|  32.0k|    else {
  423|  32.0k|        p->~T();
  424|  32.0k|    }
  425|  32.0k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJNS0_10tm_with_tzEEED2Ev:
 6699|  32.0k|    ~scan_result() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE20construct_unexpectedIJNS0_10unexpectedISJ_EEEEEvDpOT_:
  715|  12.8k|    {
  716|  12.8k|        scn::detail::construct_at(unexpected_ptr(),
  717|  12.8k|                                  std::forward<Args>(args)...);
  718|  12.8k|        m_has_value = false;
  719|  12.8k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE14get_unexpectedEv:
  692|  12.8k|    {
  693|  12.8k|        return std::move(*unexpected_ptr());
  694|  12.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  726|  25.7k|    {
  727|  25.7k|        scn::detail::destroy_at(unexpected_ptr());
  728|  25.7k|    }
_ZNK3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJNS0_10tm_with_tzEEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
 8854|  31.1k|    {
 8855|  31.1k|        return m_str;
 8856|  31.1k|    }
_ZN3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJNS0_10tm_with_tzEEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8849|  31.1k|        : m_str(r.str)
 8850|  31.1k|    {
 8851|  31.1k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEEcvbEv:
 1753|  32.0k|    {
 1754|  32.0k|        return has_value();
 1755|  32.0k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEEptEv:
 1828|  70.4k|    {
 1829|  70.4k|        return &value();
 1830|  70.4k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEE5valueISH_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSM_v:
 1782|  70.4k|    {
 1783|  70.4k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|  70.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  70.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|  70.4k|        return this->get_value();
 1785|  70.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EED2Ev:
  657|  44.9k|    {
  658|  44.9k|        if (has_value()) {
  ------------------
  |  Branch (658:13): [True: 19.1k, False: 25.7k]
  ------------------
  659|  19.1k|            destroy_value();
  660|  19.1k|        }
  661|  25.7k|        else {
  662|  25.7k|            destroy_unexpected();
  663|  25.7k|        }
  664|  44.9k|    }
_ZN3scn2v44scanIJNS0_10tm_with_tzEENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS3_16__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEvvEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT_EEEEERKT0_OSK_NS0_24basic_scan_format_stringIcNSP_13type_identityISK_E4typeEJDpNS14_ISV_E4typeEEEE:
 9961|  15.5k|{
 9962|  15.5k|    auto result = make_scan_result<Source, Args...>();
 9963|  15.5k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1110|  15.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9964|  15.5k|                                   make_scan_args(result->values())));
 9965|  15.5k|    return result;
 9966|  15.5k|}
_ZN3scn2v410scan_valueINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEvEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJT_EEEEEOSJ_:
10002|    857|{
10003|    857|    auto result = make_scan_result<Source, T>();
10004|    857|    fill_scan_result(
10005|    857|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  | 1110|    857|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
10006|    857|                            detail::make_arg<scan_context>(result->value())));
10007|    857|    return result;
10008|    857|}
_ZN3scn2v44scanIJNS0_19datetime_componentsEENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEvEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEEOSJ_NS0_24basic_scan_format_stringIcNSO_13type_identityISJ_E4typeEJDpNS10_ISU_E4typeEEEE:
 9892|  15.5k|{
 9893|  15.5k|    auto result = make_scan_result<Source, Args...>();
 9894|  15.5k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  | 1110|  15.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9895|  15.5k|                                   make_scan_args(result->values())));
 9896|  15.5k|    return result;
 9897|  15.5k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJNS0_19datetime_componentsEEEEDav:
 9848|  32.0k|{
 9849|  32.0k|    return scan_result_type<Source, Args...>();
 9850|  32.0k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEEC2Ev:
 1565|  32.0k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EEC2Ev:
  626|  32.0k|    constexpr expected_storage_base() noexcept : m_has_value(true)
  627|  32.0k|    {
  628|  32.0k|        construct();
  629|  32.0k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE9constructIJEEEvDpOT_:
  708|  32.0k|    {
  709|  32.0k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  710|  32.0k|        m_has_value = true;
  711|  32.0k|    }
_ZN3scn2v46detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_19datetime_componentsEEEEJEEEPT_SK_DpOT0_:
  410|  32.0k|{
  411|  32.0k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  412|  32.0k|        T(std::forward<Args>(args)...);
  413|  32.0k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJNS0_19datetime_componentsEEEC2Ev:
 6692|  32.0k|    constexpr scan_result() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE9value_ptrEv:
  732|   134k|    {
  733|   134k|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  | 1074|   134k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  734|   134k|    }
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS0_19datetime_componentsEEEESF_TnPNS7_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENS7_7is_sameINSL_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISL_EEONSX_ISR_EE:
 9833|  32.0k|{
 9834|  32.0k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  | 1039|  32.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 12.8k, False: 19.1k]
  |  |  ------------------
  ------------------
 9835|  12.8k|        out = unexpected(in.error());
 9836|  12.8k|    }
 9837|  19.1k|    else {
 9838|  19.1k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1108|  19.1k|    static_cast<    \
  |  | 1109|  19.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9839|  19.1k|    }
 9840|  32.0k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEEC2ISI_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISI_OT_EEvE4typeELPv0ETnPNSL_IXsr3stdE16is_convertible_vISN_SI_EEvE4typeELSR_0EEEONS0_10unexpectedISM_EE:
 1629|  12.8k|        : base(unexpect, std::move(e.error())),
 1630|  12.8k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  12.8k|    {
 1632|  12.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  651|  12.8k|        : m_has_value(false)
  652|  12.8k|    {
  653|  12.8k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  654|  12.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS8_10in_place_tESJ_EEEvDpOT_:
  715|  12.8k|    {
  716|  12.8k|        scn::detail::construct_at(unexpected_ptr(),
  717|  12.8k|                                  std::forward<Args>(args)...);
  718|  12.8k|        m_has_value = false;
  719|  12.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  744|  64.2k|    {
  745|  64.2k|        return reinterpret_cast<unexpected<E>*>(
  746|  64.2k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  | 1074|  64.2k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  747|  64.2k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  12.8k|    {
 1330|  12.8k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEEaSEOSJ_:
 1570|  12.8k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEvEaSEOSK_:
  916|  12.8k|    {
  917|  12.8k|        assign_common(std::move(other));
  918|  12.8k|        return *this;
  919|  12.8k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEvE13assign_commonISK_EEvOT_:
  963|  12.8k|    {
  964|  12.8k|        if (this->has_value()) {
  ------------------
  |  Branch (964:13): [True: 12.8k, False: 0]
  ------------------
  965|  12.8k|            if (other.has_value()) {
  ------------------
  |  Branch (965:17): [True: 0, False: 12.8k]
  ------------------
  966|      0|                return reassign_value(std::forward<Other>(other));
  967|      0|            }
  968|  12.8k|            return assign_unexpected_over_value(std::forward<Other>(other));
  969|  12.8k|        }
  970|       |
  971|      0|        if (other.has_value()) {
  ------------------
  |  Branch (971:13): [True: 0, False: 0]
  ------------------
  972|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  973|      0|        }
  974|      0|        return reassign_unexpected(std::forward<Other>(other));
  975|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE9has_valueEv:
  701|   173k|    {
  702|   173k|        return m_has_value;
  703|   173k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE9get_valueEv:
  667|  70.4k|    {
  668|  70.4k|        return *value_ptr();
  669|  70.4k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEvE28assign_unexpected_over_valueISK_EEvOT_:
 1059|  12.8k|    {
 1060|  12.8k|        this->destroy_value();
 1061|  12.8k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1062|  12.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  722|  32.0k|    {
  723|  32.0k|        scn::detail::destroy_at(value_ptr());
  724|  32.0k|    }
_ZN3scn2v46detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_19datetime_componentsEEEEEEvPT_:
  416|  32.0k|{
  417|       |    if constexpr (std::is_array_v<T>) {
  418|       |        for (auto& elem : *p) {
  419|       |            scn::detail::destroy_at(&elem);
  420|       |        }
  421|       |    }
  422|  32.0k|    else {
  423|  32.0k|        p->~T();
  424|  32.0k|    }
  425|  32.0k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJNS0_19datetime_componentsEEED2Ev:
 6699|  32.0k|    ~scan_result() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE20construct_unexpectedIJNS0_10unexpectedISJ_EEEEEvDpOT_:
  715|  12.8k|    {
  716|  12.8k|        scn::detail::construct_at(unexpected_ptr(),
  717|  12.8k|                                  std::forward<Args>(args)...);
  718|  12.8k|        m_has_value = false;
  719|  12.8k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE14get_unexpectedEv:
  692|  12.8k|    {
  693|  12.8k|        return std::move(*unexpected_ptr());
  694|  12.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  726|  25.7k|    {
  727|  25.7k|        scn::detail::destroy_at(unexpected_ptr());
  728|  25.7k|    }
_ZNK3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJNS0_19datetime_componentsEEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
 8854|  31.1k|    {
 8855|  31.1k|        return m_str;
 8856|  31.1k|    }
_ZN3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJNS0_19datetime_componentsEEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8849|  31.1k|        : m_str(r.str)
 8850|  31.1k|    {
 8851|  31.1k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEEcvbEv:
 1753|  32.0k|    {
 1754|  32.0k|        return has_value();
 1755|  32.0k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEEptEv:
 1828|  70.4k|    {
 1829|  70.4k|        return &value();
 1830|  70.4k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEE5valueISH_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSM_v:
 1782|  70.4k|    {
 1783|  70.4k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|  70.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  70.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|  70.4k|        return this->get_value();
 1785|  70.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EED2Ev:
  657|  44.9k|    {
  658|  44.9k|        if (has_value()) {
  ------------------
  |  Branch (658:13): [True: 19.1k, False: 25.7k]
  ------------------
  659|  19.1k|            destroy_value();
  660|  19.1k|        }
  661|  25.7k|        else {
  662|  25.7k|            destroy_unexpected();
  663|  25.7k|        }
  664|  44.9k|    }
_ZN3scn2v44scanIJNS0_19datetime_componentsEENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS3_16__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEvvEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT_EEEEERKT0_OSK_NS0_24basic_scan_format_stringIcNSP_13type_identityISK_E4typeEJDpNS14_ISV_E4typeEEEE:
 9961|  15.5k|{
 9962|  15.5k|    auto result = make_scan_result<Source, Args...>();
 9963|  15.5k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1110|  15.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9964|  15.5k|                                   make_scan_args(result->values())));
 9965|  15.5k|    return result;
 9966|  15.5k|}
_ZN3scn2v410scan_valueINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEvEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJT_EEEEEOSJ_:
10002|    857|{
10003|    857|    auto result = make_scan_result<Source, T>();
10004|    857|    fill_scan_result(
10005|    857|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  | 1110|    857|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
10006|    857|                            detail::make_arg<scan_context>(result->value())));
10007|    857|    return result;
10008|    857|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2882|  78.8k|    {
 2883|  78.8k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1110|  78.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2884|  78.8k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESE_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2863|  78.8k|    {
 2864|  78.8k|        return decay_copy(t.begin());
 2865|  78.8k|    }
_ZN3scn2v46ranges6detail10decay_copyIPKwEEu7__decayIT_EOS6_:
 2107|  1.00M|{
 2108|  1.00M|    return SCN_FWD(t);
  ------------------
  |  | 1110|  1.00M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2109|  1.00M|}
_ZNK3scn2v46ranges6detail4end_2fnclIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2939|   198k|    {
 2940|   198k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1110|   198k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2941|   198k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEPKwSD_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2921|   198k|    {
 2922|   198k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  | 1110|   198k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2923|   198k|    }
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJ2tmEEEDav:
 9848|  32.8k|{
 9849|  32.8k|    return scan_result_type<Source, Args...>();
 9850|  32.8k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJ2tmEEENS0_10scan_errorEEC2Ev:
 1565|  32.8k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJ2tmEEENS0_10scan_errorELb1EEC2Ev:
  441|  32.8k|        : m_value(T{}), m_has_value(true)
  442|  32.8k|    {
  443|  32.8k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJ2tmEEC2Ev:
 6692|  32.8k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEC2Ev:
 6535|  98.5k|    constexpr scan_result_range_storage() = default;
_ZN3scn2v46ranges6detail9subrange_8subrangeIPKwS6_EC2Ev:
 3473|  98.5k|    subrange() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJ2tmEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSC_7is_sameINSG_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISG_EEONSS_ISM_EE:
 9833|  32.8k|{
 9834|  32.8k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  | 1039|  32.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 25.7k, False: 7.13k]
  |  |  ------------------
  ------------------
 9835|  25.7k|        out = unexpected(in.error());
 9836|  25.7k|    }
 9837|  7.13k|    else {
 9838|  7.13k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1108|  7.13k|    static_cast<    \
  |  | 1109|  7.13k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9839|  7.13k|    }
 9840|  32.8k|}
_ZNK3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEcvbEv:
 1753|  98.5k|    {
 1754|  98.5k|        return has_value();
 1755|  98.5k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE9has_valueEv:
  504|   197k|    {
  505|   197k|        return m_has_value;
  506|   197k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEE5errorEv:
 1759|  77.1k|    {
 1760|  77.1k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1104|  77.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  77.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1761|  77.1k|        return this->get_unexpected().error();
 1762|  77.1k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  487|  77.1k|    {
  488|  77.1k|        return m_unexpected;
  489|  77.1k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJ2tmEEENS0_10scan_errorEEC2ISC_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISC_OT_EEvE4typeELPv0ETnPNSG_IXsr3stdE16is_convertible_vISI_SC_EEvE4typeELSM_0EEEONS0_10unexpectedISH_EE:
 1629|  25.7k|        : base(unexpect, std::move(e.error())),
 1630|  25.7k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  25.7k|    {
 1632|  25.7k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJ2tmEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  464|  25.7k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|  25.7k|          m_has_value(false)
  466|  25.7k|    {
  467|  25.7k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJ2tmEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  25.7k|    {
 1330|  25.7k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJ2tmEEENS0_10scan_errorEEaSEOSD_:
 1570|  25.7k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJ2tmEEENS0_10scan_errorEvEaSEOSE_:
  916|  25.7k|    {
  917|  25.7k|        assign_common(std::move(other));
  918|  25.7k|        return *this;
  919|  25.7k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJ2tmEEENS0_10scan_errorEvE13assign_commonISE_EEvOT_:
  963|  25.7k|    {
  964|  25.7k|        if (this->has_value()) {
  ------------------
  |  Branch (964:13): [True: 25.7k, False: 0]
  ------------------
  965|  25.7k|            if (other.has_value()) {
  ------------------
  |  Branch (965:17): [True: 0, False: 25.7k]
  ------------------
  966|      0|                return reassign_value(std::forward<Other>(other));
  967|      0|            }
  968|  25.7k|            return assign_unexpected_over_value(std::forward<Other>(other));
  969|  25.7k|        }
  970|       |
  971|      0|        if (other.has_value()) {
  ------------------
  |  Branch (971:13): [True: 0, False: 0]
  ------------------
  972|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  973|      0|        }
  974|      0|        return reassign_unexpected(std::forward<Other>(other));
  975|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJ2tmEEENS0_10scan_errorELb1EE9has_valueEv:
  504|   131k|    {
  505|   131k|        return m_has_value;
  506|   131k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJ2tmEEENS0_10scan_errorELb1EE9get_valueEv:
  470|  47.1k|    {
  471|  47.1k|        return m_value;
  472|  47.1k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJ2tmEEENS0_10scan_errorEvE28assign_unexpected_over_valueISE_EEvOT_:
 1059|  25.7k|    {
 1060|  25.7k|        this->destroy_value();
 1061|  25.7k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1062|  25.7k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJ2tmEEENS0_10scan_errorELb1EE13destroy_valueEv:
  525|  25.7k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJ2tmEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISD_EEEEEvDpOT_:
  518|  25.7k|    {
  519|  25.7k|        scn::detail::construct_at(&get_unexpected(),
  520|  25.7k|                                  std::forward<Args>(args)...);
  521|  25.7k|        m_has_value = false;
  522|  25.7k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJ2tmEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  487|  25.7k|    {
  488|  25.7k|        return m_unexpected;
  489|  25.7k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJ2tmEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  495|  25.7k|    {
  496|  25.7k|        return std::move(m_unexpected);
  497|  25.7k|    }
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEE9set_rangeIS9_EEvOT_:
 6566|  21.3k|    {
 6567|  21.3k|        m_range = std::forward<Other>(r);
 6568|  21.3k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEdeIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1808|  21.3k|    {
 1809|  21.3k|        return value();
 1810|  21.3k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEE5valueIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1782|  21.3k|    {
 1783|  21.3k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|  21.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  21.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|  21.3k|        return this->get_value();
 1785|  21.3k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE9get_valueEv:
  470|  21.3k|    {
  471|  21.3k|        return m_value;
  472|  21.3k|    }
_ZN3scn2v46detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEwEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NSB_17basic_string_viewIT0_NSB_11char_traitsISQ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESQ_EEEE:
 9591|  46.6k|{
 9592|  46.6k|    auto buffer = make_scan_buffer(range);
 9593|       |
 9594|  46.6k|    auto result = vscan_impl(buffer, format, args);
 9595|  46.6k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  | 1039|  46.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 35.9k, False: 10.6k]
  |  |  ------------------
  ------------------
 9596|  35.9k|        return unexpected(result.error());
 9597|  35.9k|    }
 9598|  10.6k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  | 1110|  10.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9599|  46.6k|}
_ZN3scn2v46detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDaRKT_:
 5398|  98.5k|{
 5399|  98.5k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 5400|       |
 5401|  98.5k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 5402|  98.5k|                  "\n"
 5403|  98.5k|                  "Unsupported range type given as input to a scanning "
 5404|  98.5k|                  "function.\n"
 5405|  98.5k|                  "A range needs to have a character type (value type) "
 5406|  98.5k|                  "of either `char` or `wchar_t` to be scannable.\n"
 5407|  98.5k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 5408|  98.5k|                  "to be included.\n"
 5409|  98.5k|                  "See the scnlib documentation for more details.");
 5410|  98.5k|    static_assert(
 5411|  98.5k|        !std::is_same_v<T, custom_char_traits>,
 5412|  98.5k|        "\n"
 5413|  98.5k|        "Unsupported range type given as input to a scanning "
 5414|  98.5k|        "function.\n"
 5415|  98.5k|        "String types (std::basic_string, and std::basic_string_view) "
 5416|  98.5k|        "need to use std::char_traits. Strings with custom Traits are "
 5417|  98.5k|        "not supported.");
 5418|  98.5k|    static_assert(!std::is_same_v<T, file_marker_found>,
 5419|  98.5k|                  "\n"
 5420|  98.5k|                  "Unsupported range type given as input to a scanning "
 5421|  98.5k|                  "function.\n"
 5422|  98.5k|                  "file_marker_found cannot be used as an "
 5423|  98.5k|                  "source range type to scn::scan.\n"
 5424|  98.5k|                  "To read from stdin, use scn::input or scn::prompt, "
 5425|  98.5k|                  "and do not provide an explicit source range, "
 5426|  98.5k|                  "or use scn::scan with a FILE* directly.");
 5427|  98.5k|    static_assert(!std::is_same_v<T, insufficient_range>,
 5428|  98.5k|                  "\n"
 5429|  98.5k|                  "Unsupported range type given as input to a scanning "
 5430|  98.5k|                  "function.\n"
 5431|  98.5k|                  "In order to be scannable, a range needs to satisfy "
 5432|  98.5k|                  "`forward_range`. `input_range` is not sufficient.");
 5433|  98.5k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 5434|  98.5k|                  "\n"
 5435|  98.5k|                  "Unsupported range type given as input to a scanning "
 5436|  98.5k|                  "function.\n"
 5437|  98.5k|                  "A range needs to model forward_range and have a valid "
 5438|  98.5k|                  "character type (char or wchar_t) to be scannable.\n"
 5439|  98.5k|                  "Examples of scannable ranges are std::string, "
 5440|  98.5k|                  "std::string_view, "
 5441|  98.5k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 5442|  98.5k|                  "See the scnlib documentation for more details.");
 5443|       |
 5444|  98.5k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 5445|  98.5k|}
_ZN3scn2v46detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeIPKwS9_EETnPNSt3__19enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE11sized_rangeISD_EEvE4typeELPv0EEEDaRKSD_NS1_12priority_tagILm2EEE:
 5337|  98.5k|{
 5338|  98.5k|    if constexpr (is_valid_char_type<detail::char_t<Range>>) {
 5339|  98.5k|        return std::basic_string_view{ranges::data(r), ranges::size(r)};
 5340|       |    }
 5341|       |    else {
 5342|       |        return invalid_char_type{};
 5343|       |    }
 5344|  98.5k|}
_ZNK3scn2v46ranges6detail5data_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 3013|  98.5k|    {
 3014|  98.5k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  | 1110|  98.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3015|  98.5k|    }
_ZN3scn2v46ranges6detail5data_2fn4implIKNS2_9subrange_8subrangeIPKwS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2994|  98.5k|    {
 2995|  98.5k|        return t.data();
 2996|  98.5k|    }
_ZNK3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE4dataIS8_vEEDav:
 3396|  98.5k|    {
 3397|  98.5k|        return detail::to_address(ranges::begin(derived()));
 3398|  98.5k|    }
_ZN3scn2v46detail10to_addressIPKwEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  330|   290k|{
  331|   290k|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  | 1110|   290k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  332|   290k|}
_ZN3scn2v46detail15to_address_implIKwEEPT_S5_NS1_12priority_tagILm2EEE:
  308|   290k|{
  309|   290k|    return p;
  310|   290k|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2882|   119k|    {
 2883|   119k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1110|   119k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2884|   119k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeIPKwS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESG_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2863|   119k|    {
 2864|   119k|        return decay_copy(t.begin());
 2865|   119k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKwS6_E5beginEv:
 3493|  1.71M|    {
 3494|  1.71M|        return m_iterator;
 3495|  1.71M|    }
_ZNK3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE7derivedEv:
 3352|  98.5k|    {
 3353|  98.5k|        return static_cast<const D&>(*this);
 3354|  98.5k|    }
_ZNK3scn2v46ranges6detail5size_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSD_:
 3088|  98.5k|    {
 3089|  98.5k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3090|  98.5k|    }
_ZN3scn2v46ranges6detail5size_2fn4implIRKNS2_9subrange_8subrangeIPKwS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESF_E4typeEOSG_NS0_6detail12priority_tagILm2EEE:
 3054|  98.5k|    {
 3055|  98.5k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  | 1110|  98.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3056|  98.5k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKwS6_E4sizeIS6_TnPNSt3__19enable_ifIX18sized_sentinel_forIS6_T_EEvE4typeELPv0EEEmv:
 3509|   311k|    {
 3510|   311k|        return static_cast<size_t>(m_sentinel - m_iterator);
 3511|   311k|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEC2IS9_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSD_IXsr3stdE16is_convertible_vISF_S9_EEvE4typeELSJ_0EEEONS0_10unexpectedISE_EE:
 1629|  77.1k|        : base(unexpect, std::move(e.error())),
 1630|  77.1k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  77.1k|    {
 1632|  77.1k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  464|  77.1k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|  77.1k|          m_has_value(false)
  466|  77.1k|    {
  467|  77.1k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  98.5k|    {
 1330|  98.5k|    }
_ZN3scn2v46detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISB_EEE4typeEOSB_l:
 6796|  21.3k|{
 6797|       |    if constexpr (ranges::random_access_iterator<
 6798|  21.3k|                      ranges::iterator_t<SourceRange>>) {
 6799|  21.3k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 6800|       |    }
 6801|       |    else {
 6802|       |        auto it = ranges::begin(source);
 6803|       |        while (n > 0) {
 6804|       |            --n;
 6805|       |            ++it;
 6806|       |        }
 6807|       |        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 6808|       |    }
 6809|  21.3k|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2882|   305k|    {
 2883|   305k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1110|   305k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2884|   305k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2863|   305k|    {
 2864|   305k|        return decay_copy(t.begin());
 2865|   305k|    }
_ZN3scn2v46detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDaRT_:
 6783|  21.3k|{
 6784|  21.3k|    return ranges::end(source);
 6785|  21.3k|}
_ZNK3scn2v46ranges6detail4end_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2939|   112k|    {
 2940|   112k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1110|   112k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2941|   112k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EES9_S9_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2921|   112k|    {
 2922|   112k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  | 1110|   112k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2923|   112k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKwS6_E3endEv:
 3497|  1.36M|    {
 3498|  1.36M|        return m_sentinel;
 3499|  1.36M|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEC2IS8_vEEOT_:
 1583|  21.3k|        : base(std::in_place, std::forward<U>(val)),
 1584|  21.3k|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|  21.3k|    {
 1586|  21.3k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2IJS9_EvEENSt3__110in_place_tEDpOT_:
  455|  21.3k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|  21.3k|    {
  457|  21.3k|    }
_ZNK3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJ2tmEEcvNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEv:
 8854|  31.1k|    {
 8855|  31.1k|        return m_str;
 8856|  31.1k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEJ2tmEEEDaRNSt3__15tupleIJDpT0_EEE:
 6195|  62.2k|{
 6196|  62.2k|    detail::check_scan_arg_types<Args...>();
 6197|  62.2k|    return detail::scan_arg_store<Context, Args...>(values);
 6198|  62.2k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJ2tmEEC2ERNSt3__15tupleIJS6_EEE:
 6171|  62.2k|        : args(std::apply(make_argptrs<Args...>, args))
 6172|  62.2k|    {
 6173|  62.2k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJ2tmEE12make_argptrsIJS6_EEENSt3__15arrayINS1_9arg_valueELm1EEEDpRT_:
 6180|  62.2k|    {
 6181|  62.2k|        return {detail::make_arg<
 6182|  62.2k|            kind, Context,
 6183|  62.2k|            mapped_type_constant<remove_cvref_t<A>,
 6184|  62.2k|                                 typename Context::char_type>::value>(args)...};
 6185|  62.2k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE1ENS0_18basic_scan_contextINS1_16buffer_range_tagEwEELNS1_8arg_typeE29E2tmvEENS1_9arg_valueERT2_:
 5969|  62.2k|{
 5970|  62.2k|    return make_value<Context>(value);
 5971|  62.2k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEwEE2tmEEDaRT0_:
 5895|  65.6k|{
 5896|  65.6k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5897|       |
 5898|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5899|       |                                  needs_context_tag>) {
 5900|       |        return make_value_impl<T>(SCN_FWD(arg));
 5901|       |    }
 5902|  65.6k|    else {
 5903|  65.6k|        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5904|  65.6k|            value, context_tag<Context>{}));
 5905|  65.6k|    }
 5906|  65.6k|}
_ZN3scn2v46detail10arg_mapperIwE3mapI2tmTnPvLPv0EEENS1_17needs_context_tagERT_:
 5795|  65.6k|    {
 5796|  65.6k|        return {};
 5797|  65.6k|    }
_ZN3scn2v46detail15make_value_implI2tmNS1_14custom_wrapperIS3_NS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEEDaOT0_:
 5864|  65.6k|{
 5865|  65.6k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5866|  65.6k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5867|       |
 5868|  65.6k|    constexpr bool scannable_char =
 5869|  65.6k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5870|  65.6k|    static_assert(scannable_char,
 5871|  65.6k|                  "Cannot scan an argument of an unsupported character "
 5872|  65.6k|                  "type (i.e. char from a wchar_t source)");
 5873|       |
 5874|  65.6k|    constexpr bool scannable_const =
 5875|  65.6k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5876|  65.6k|    static_assert(scannable_const, "Cannot scan a const argument");
 5877|       |
 5878|  65.6k|    constexpr bool scannable_disabled =
 5879|  65.6k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5880|  65.6k|    static_assert(scannable_disabled,
 5881|  65.6k|                  "Cannot scan an argument that has been disabled by "
 5882|  65.6k|                  "flag (SCN_DISABLE_TYPE_*)");
 5883|       |
 5884|  65.6k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5885|  65.6k|    static_assert(
 5886|  65.6k|        scannable,
 5887|  65.6k|        "Cannot scan an argument. To make a type T scannable, provide "
 5888|  65.6k|        "a scn::scanner<T, CharT> specialization.");
 5889|       |
 5890|  65.6k|    return arg_value{arg};
 5891|  65.6k|}
_ZN3scn2v46detail9arg_valueC2I2tmNS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEENS1_14custom_wrapperIT_T0_EE:
 5651|  65.6k|        : custom_value{static_cast<void*>(&val.val),
 5652|  65.6k|                       scan_custom_arg<T, Context>}
 5653|  65.6k|    {
 5654|  65.6k|    }
_ZN3scn2v46detail9arg_value15scan_custom_argI2tmNS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEENS0_13scan_expectedIvEEPvSA_SA_:
 5669|  65.6k|    {
 5670|  65.6k|        static_assert(!is_type_disabled<T>,
 5671|  65.6k|                      "Scanning of custom types is disabled by "
 5672|  65.6k|                      "SCN_DISABLE_TYPE_CUSTOM");
 5673|  65.6k|        SCN_EXPECT(arg && pctx && ctx);
  ------------------
  |  | 1104|  65.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  65.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5674|       |
 5675|  65.6k|        using context_type = Context;
 5676|  65.6k|        using parse_context_type = typename context_type::parse_context_type;
 5677|  65.6k|        using scanner_type = typename context_type::template scanner_type<T>;
 5678|       |
 5679|  65.6k|        auto s = scanner_type{};
 5680|       |
 5681|  65.6k|        auto& arg_ref = *static_cast<T*>(arg);
 5682|  65.6k|        auto& pctx_ref = *static_cast<parse_context_type*>(pctx);
 5683|  65.6k|        auto& ctx_ref = *static_cast<context_type*>(ctx);
 5684|       |
 5685|  65.6k|        SCN_TRY_DISCARD(parse_custom_arg(arg_ref, s, pctx_ref));
  ------------------
  |  | 3948|  65.6k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|  65.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 3.42k, False: 62.2k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|  3.42k|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|  3.42k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|  3.42k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|  3.42k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|  3.42k|    }
  ------------------
 5686|  62.2k|        SCN_TRY(it, s.scan(arg_ref, ctx_ref));
  ------------------
  |  | 3958|  62.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  62.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  62.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  62.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 47.9k, False: 14.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  47.9k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  47.9k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  47.9k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  47.9k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  47.9k|    }                                                  \
  |  |  |  | 3957|  62.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  14.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5687|  14.2k|        ctx_ref.advance_to(SCN_MOVE(it));
  ------------------
  |  | 1108|  14.2k|    static_cast<    \
  |  | 1109|  14.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5688|       |
 5689|  14.2k|        return {};
 5690|  62.2k|    }
_ZN3scn2v46detail16parse_custom_argI2tmNS0_7scannerIS3_wvEENS0_24basic_scan_parse_contextIwEEEENS0_13scan_expectedIvEERT_RT0_RT1_:
 5602|  65.6k|{
 5603|  65.6k|#if SCN_HAS_EXCEPTIONS
 5604|  65.6k|    auto fmt_it = pctx.begin();
 5605|  65.6k|    try {
 5606|  65.6k|        fmt_it = s.parse(pctx);
 5607|  65.6k|    }
 5608|  65.6k|    catch (const detail::scan_format_string_error_base& ex) {
 5609|       |        // scan_error takes a const char*.
 5610|       |        // scan_format_string_error (or, actually, std::runtime_error)
 5611|       |        // stores a reference-counted string,
 5612|       |        // that will go out of scope here.
 5613|       |        // We need to provide a const char* that will stay in scope.
 5614|       |        // If scan_format_string_error was thrown with a string literal,
 5615|       |        // use that, otherwise refer to a thread_local std::string
 5616|      0|        if (const char* m = get_internal_literal_msg(ex)) {
  ------------------
  |  Branch (5616:25): [True: 0, False: 0]
  ------------------
 5617|      0|            return unexpected_scan_error(scan_error::invalid_format_string, m);
 5618|      0|        }
 5619|      0|        thread_local std::string err_msg{};
 5620|      0|        err_msg = ex.what();
 5621|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 5622|      0|                                     err_msg.c_str());
 5623|      0|    }
 5624|       |#else
 5625|       |    auto fmt_it = s.parse(pctx_ref);
 5626|       |#endif
 5627|  65.6k|    if (auto e = pctx.get_error(); SCN_UNLIKELY(!e)) {
  ------------------
  |  | 1039|  65.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 3.42k, False: 62.2k]
  |  |  ------------------
  ------------------
 5628|  3.42k|        return e;
 5629|  3.42k|    }
 5630|  62.2k|    pctx.advance_to(fmt_it);
 5631|  62.2k|    return {};
 5632|  65.6k|}
_ZNK3scn2v424basic_scan_parse_contextIwE5beginEv:
 6380|   954k|    {
 6381|   954k|        return m_format.data();
 6382|   954k|    }
_ZNK3scn2v424basic_scan_parse_contextIwE3endEv:
 6385|   197k|    {
 6386|   197k|        return m_format.data() + m_format.size();
 6387|   197k|    }
_ZN3scn2v424basic_scan_parse_contextIwE8on_errorEPKc:
 6426|  10.2k|    {
 6427|  10.2k|        m_error = unexpected(detail::handle_error(
 6428|  10.2k|            scan_error{scan_error::invalid_format_string, msg}));
 6429|  10.2k|        return m_error.error();
 6430|  10.2k|    }
_ZN3scn2v46detail39code_point_length_by_starting_code_unitIwEEmT_:
 4085|   450k|{
 4086|       |    if constexpr (sizeof(U) == 1) {
 4087|       |        return utf8_code_point_length_by_starting_code_unit(ch);
 4088|       |    }
 4089|       |    else if constexpr (sizeof(U) == 2) {
 4090|       |        return utf16_code_point_length_by_starting_code_unit(ch);
 4091|       |    }
 4092|   450k|    else {
 4093|       |        // utf-32
 4094|   450k|        static_assert(sizeof(U) == 4);
 4095|   450k|        SCN_UNUSED(ch);
  ------------------
  |  | 1089|   450k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4096|   450k|        return 1;
 4097|   450k|    }
 4098|   450k|}
_ZN3scn2v46detail28decode_code_point_exhaustiveIwEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 4291|   346k|{
 4292|       |    if constexpr (sizeof(CharT) == 1) {
 4293|       |        return decode_utf8_code_point_exhaustive(input);
 4294|       |    }
 4295|       |    else if constexpr (sizeof(CharT) == 2) {
 4296|       |        return decode_utf16_code_point_exhaustive(input);
 4297|       |    }
 4298|   346k|    else {
 4299|   346k|        SCN_EXPECT(input.size() == 1);
  ------------------
  |  | 1104|   346k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   346k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4300|   346k|        auto cp = static_cast<char32_t>(input.front());
 4301|   346k|        if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  | 1039|   346k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 45.2k, False: 301k]
  |  |  ------------------
  ------------------
 4302|  45.2k|            return invalid_code_point;
 4303|  45.2k|        }
 4304|   301k|        return cp;
 4305|   346k|    }
 4306|   346k|}
_ZN3scn2v46detail30make_string_view_from_pointersIwEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
 3993|   373k|{
 3994|       |    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
 3995|       |                                          const CharT*, const CharT*>) {
 3996|       |        return {first, last};
 3997|       |    }
 3998|   373k|    else {
 3999|   373k|        return {first, static_cast<size_t>(std::distance(first, last))};
 4000|   373k|    }
 4001|   373k|}
_ZN3scn2v424basic_scan_parse_contextIwE9get_errorEv:
 6433|   197k|    {
 6434|   197k|        return m_error;
 6435|   197k|    }
_ZN3scn2v424basic_scan_parse_contextIwE10advance_toEPKw:
 6391|   373k|    {
 6392|   373k|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
 6393|   373k|    }
_ZNK3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEcvbEv:
 1753|   472k|    {
 1754|   472k|        return has_value();
 1755|   472k|    }
_ZNK3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE9has_valueEv:
  504|   944k|    {
  505|   944k|        return m_has_value;
  506|   944k|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEE5errorEv:
 1759|   294k|    {
 1760|   294k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1104|   294k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   294k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1761|   294k|        return this->get_unexpected().error();
 1762|   294k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE14get_unexpectedEv:
  487|   294k|    {
  488|   294k|        return m_unexpected;
  489|   294k|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSB_v:
 1818|   135k|    {
 1819|   135k|        return std::move(value());
 1820|   135k|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1782|   177k|    {
 1783|   177k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|   177k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   177k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|   177k|        return this->get_value();
 1785|   177k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE9get_valueEv:
  470|   177k|    {
  471|   177k|        return m_value;
  472|   177k|    }
_ZN3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEwE10advance_toENS2_17basic_scan_bufferIwE16forward_iteratorE:
 9057|   156k|    {
 9058|   156k|        m_current = SCN_MOVE(it);
  ------------------
  |  | 1108|   156k|    static_cast<    \
  |  | 1109|   156k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9059|   156k|    }
_ZN3scn2v46detail10arg_mapperIwE3mapI2tmNS0_18basic_scan_contextINS1_16buffer_range_tagEwEETnPvLPv0EEENS1_14custom_wrapperIT_T0_EERSC_NS1_11context_tagISD_EE:
 5803|  65.6k|    {
 5804|  65.6k|        return {val};
 5805|  65.6k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2IJ2tmEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6221|  62.2k|        : basic_scan_args(store.desc, store.args.data())
 6222|  62.2k|    {
 6223|  62.2k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2EmPKNS3_9arg_valueE:
 6278|   186k|        : m_desc(desc), m_values(data)
 6279|   186k|    {
 6280|   186k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeIPKwS6_EC2IS6_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S6_EEvE4typeELPv0EEESB_S6_:
 3478|   857k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1108|   857k|    static_cast<    \
  |  | 1109|   857k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1108|   857k|    static_cast<    \
  |  | 1109|   857k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3479|   857k|    {
 3480|   857k|    }
_ZN3scn2v414runtime_formatENSt3__117basic_string_viewIwNS1_11char_traitsIwEEEE:
 8536|   186k|{
 8537|   186k|    return s;
 8538|   186k|}
_ZN3scn2v46detail27basic_runtime_format_stringIwEC2ENSt3__117basic_string_viewIwNS4_11char_traitsIwEEEE:
 8508|   186k|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJ2tmEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8849|  31.1k|        : m_str(r.str)
 8850|  31.1k|    {
 8851|  31.1k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJ2tmEEENS0_10scan_errorEEcvbEv:
 1753|  32.8k|    {
 1754|  32.8k|        return has_value();
 1755|  32.8k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJ2tmEEENS0_10scan_errorEEptEv:
 1828|  47.1k|    {
 1829|  47.1k|        return &value();
 1830|  47.1k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJ2tmEEENS0_10scan_errorEE5valueISB_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSH_v:
 1782|  47.1k|    {
 1783|  47.1k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|  47.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  47.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|  47.1k|        return this->get_value();
 1785|  47.1k|    }
_ZNK3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEE5beginEv:
 6555|  21.3k|    {
 6556|  21.3k|        return ranges::begin(m_range);
 6557|  21.3k|    }
_ZN3scn2v46detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS1_22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEEERKT_OSE_NS3_17basic_string_viewIT1_NS3_11char_traitsISU_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESU_EEEE:
 9607|  46.6k|{
 9608|  46.6k|#if !SCN_DISABLE_LOCALE
 9609|  46.6k|    auto buffer = detail::make_scan_buffer(range);
 9610|       |
 9611|  46.6k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 9612|  46.6k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 9613|  46.6k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 9614|       |
 9615|  46.6k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  | 1039|  46.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 35.9k, False: 10.6k]
  |  |  ------------------
  ------------------
 9616|  35.9k|        return unexpected(result.error());
 9617|  35.9k|    }
 9618|  10.6k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  | 1110|  10.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9619|       |#else
 9620|       |    static_assert(dependent_false<Locale>::value,
 9621|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 9622|       |
 9623|       |    return {};
 9624|       |#endif
 9625|  46.6k|}
_ZN3scn2v46detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEwEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagET0_EEEE:
 9631|  5.14k|{
 9632|  5.14k|    auto buffer = detail::make_scan_buffer(range);
 9633|       |
 9634|  5.14k|    auto result = detail::vscan_value_impl(buffer, arg);
 9635|  5.14k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  | 1039|  5.14k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 5.14k, False: 0]
  |  |  ------------------
  ------------------
 9636|  5.14k|        return unexpected(result.error());
 9637|  5.14k|    }
 9638|      0|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9639|  5.14k|}
_ZN3scn2v46detail8make_argINS0_18basic_scan_contextINS1_16buffer_range_tagEwEE2tmEENS0_14basic_scan_argIT_EERT0_:
 5945|  3.42k|{
 5946|  3.42k|    check_scan_arg_types<T>();
 5947|       |
 5948|  3.42k|    basic_scan_arg<Context> arg;
 5949|  3.42k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5950|  3.42k|    arg.m_value = make_value<Context>(value);
 5951|  3.42k|    return arg;
 5952|  3.42k|}
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2Ev:
 6040|   197k|    constexpr basic_scan_arg() = default;
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNS0_10tm_with_tzEEEEDav:
 9848|  32.8k|{
 9849|  32.8k|    return scan_result_type<Source, Args...>();
 9850|  32.8k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEEC2Ev:
 1565|  32.8k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EEC2Ev:
  626|  32.8k|    constexpr expected_storage_base() noexcept : m_has_value(true)
  627|  32.8k|    {
  628|  32.8k|        construct();
  629|  32.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE9constructIJEEEvDpOT_:
  708|  32.8k|    {
  709|  32.8k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  710|  32.8k|        m_has_value = true;
  711|  32.8k|    }
_ZN3scn2v46detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_10tm_with_tzEEEEJEEEPT_SE_DpOT0_:
  410|  32.8k|{
  411|  32.8k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  412|  32.8k|        T(std::forward<Args>(args)...);
  413|  32.8k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNS0_10tm_with_tzEEEC2Ev:
 6692|  32.8k|    constexpr scan_result() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE9value_ptrEv:
  732|   112k|    {
  733|   112k|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  | 1074|   112k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  734|   112k|    }
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNS0_10tm_with_tzEEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSC_7is_sameINSG_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISG_EEONSS_ISM_EE:
 9833|  32.8k|{
 9834|  32.8k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  | 1039|  32.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 25.7k, False: 7.13k]
  |  |  ------------------
  ------------------
 9835|  25.7k|        out = unexpected(in.error());
 9836|  25.7k|    }
 9837|  7.13k|    else {
 9838|  7.13k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1108|  7.13k|    static_cast<    \
  |  | 1109|  7.13k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9839|  7.13k|    }
 9840|  32.8k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEEC2ISC_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISC_OT_EEvE4typeELPv0ETnPNSG_IXsr3stdE16is_convertible_vISI_SC_EEvE4typeELSM_0EEEONS0_10unexpectedISH_EE:
 1629|  25.7k|        : base(unexpect, std::move(e.error())),
 1630|  25.7k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  25.7k|    {
 1632|  25.7k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  651|  25.7k|        : m_has_value(false)
  652|  25.7k|    {
  653|  25.7k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  654|  25.7k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNSt3__110in_place_tESD_EEEvDpOT_:
  715|  25.7k|    {
  716|  25.7k|        scn::detail::construct_at(unexpected_ptr(),
  717|  25.7k|                                  std::forward<Args>(args)...);
  718|  25.7k|        m_has_value = false;
  719|  25.7k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  744|   128k|    {
  745|   128k|        return reinterpret_cast<unexpected<E>*>(
  746|   128k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  | 1074|   128k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  747|   128k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  25.7k|    {
 1330|  25.7k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEEaSEOSD_:
 1570|  25.7k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEvEaSEOSE_:
  916|  25.7k|    {
  917|  25.7k|        assign_common(std::move(other));
  918|  25.7k|        return *this;
  919|  25.7k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEvE13assign_commonISE_EEvOT_:
  963|  25.7k|    {
  964|  25.7k|        if (this->has_value()) {
  ------------------
  |  Branch (964:13): [True: 25.7k, False: 0]
  ------------------
  965|  25.7k|            if (other.has_value()) {
  ------------------
  |  Branch (965:17): [True: 0, False: 25.7k]
  ------------------
  966|      0|                return reassign_value(std::forward<Other>(other));
  967|      0|            }
  968|  25.7k|            return assign_unexpected_over_value(std::forward<Other>(other));
  969|  25.7k|        }
  970|       |
  971|      0|        if (other.has_value()) {
  ------------------
  |  Branch (971:13): [True: 0, False: 0]
  ------------------
  972|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  973|      0|        }
  974|      0|        return reassign_unexpected(std::forward<Other>(other));
  975|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE9has_valueEv:
  701|   189k|    {
  702|   189k|        return m_has_value;
  703|   189k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE9get_valueEv:
  667|  47.1k|    {
  668|  47.1k|        return *value_ptr();
  669|  47.1k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEvE28assign_unexpected_over_valueISE_EEvOT_:
 1059|  25.7k|    {
 1060|  25.7k|        this->destroy_value();
 1061|  25.7k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1062|  25.7k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  722|  32.8k|    {
  723|  32.8k|        scn::detail::destroy_at(value_ptr());
  724|  32.8k|    }
_ZN3scn2v46detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_10tm_with_tzEEEEEEvPT_:
  416|  32.8k|{
  417|       |    if constexpr (std::is_array_v<T>) {
  418|       |        for (auto& elem : *p) {
  419|       |            scn::detail::destroy_at(&elem);
  420|       |        }
  421|       |    }
  422|  32.8k|    else {
  423|  32.8k|        p->~T();
  424|  32.8k|    }
  425|  32.8k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNS0_10tm_with_tzEEED2Ev:
 6699|  32.8k|    ~scan_result() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE20construct_unexpectedIJNS0_10unexpectedISD_EEEEEvDpOT_:
  715|  25.7k|    {
  716|  25.7k|        scn::detail::construct_at(unexpected_ptr(),
  717|  25.7k|                                  std::forward<Args>(args)...);
  718|  25.7k|        m_has_value = false;
  719|  25.7k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE14get_unexpectedEv:
  692|  25.7k|    {
  693|  25.7k|        return std::move(*unexpected_ptr());
  694|  25.7k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  726|  51.4k|    {
  727|  51.4k|        scn::detail::destroy_at(unexpected_ptr());
  728|  51.4k|    }
_ZNK3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNS0_10tm_with_tzEEEcvNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEv:
 8854|  31.1k|    {
 8855|  31.1k|        return m_str;
 8856|  31.1k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEJNS0_10tm_with_tzEEEEDaRNSt3__15tupleIJDpT0_EEE:
 6195|  62.2k|{
 6196|  62.2k|    detail::check_scan_arg_types<Args...>();
 6197|  62.2k|    return detail::scan_arg_store<Context, Args...>(values);
 6198|  62.2k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJNS0_10tm_with_tzEEEC2ERNSt3__15tupleIJS6_EEE:
 6171|  62.2k|        : args(std::apply(make_argptrs<Args...>, args))
 6172|  62.2k|    {
 6173|  62.2k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJNS0_10tm_with_tzEEE12make_argptrsIJS6_EEENSt3__15arrayINS1_9arg_valueELm1EEEDpRT_:
 6180|  62.2k|    {
 6181|  62.2k|        return {detail::make_arg<
 6182|  62.2k|            kind, Context,
 6183|  62.2k|            mapped_type_constant<remove_cvref_t<A>,
 6184|  62.2k|                                 typename Context::char_type>::value>(args)...};
 6185|  62.2k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE1ENS0_18basic_scan_contextINS1_16buffer_range_tagEwEELNS1_8arg_typeE29ENS0_10tm_with_tzEvEENS1_9arg_valueERT2_:
 5969|  62.2k|{
 5970|  62.2k|    return make_value<Context>(value);
 5971|  62.2k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEwEENS0_10tm_with_tzEEEDaRT0_:
 5895|  65.6k|{
 5896|  65.6k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5897|       |
 5898|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5899|       |                                  needs_context_tag>) {
 5900|       |        return make_value_impl<T>(SCN_FWD(arg));
 5901|       |    }
 5902|  65.6k|    else {
 5903|  65.6k|        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5904|  65.6k|            value, context_tag<Context>{}));
 5905|  65.6k|    }
 5906|  65.6k|}
_ZN3scn2v46detail10arg_mapperIwE3mapINS0_10tm_with_tzETnPvLPv0EEENS1_17needs_context_tagERT_:
 5795|  65.6k|    {
 5796|  65.6k|        return {};
 5797|  65.6k|    }
_ZN3scn2v46detail15make_value_implINS0_10tm_with_tzENS1_14custom_wrapperIS3_NS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEEDaOT0_:
 5864|  65.6k|{
 5865|  65.6k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5866|  65.6k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5867|       |
 5868|  65.6k|    constexpr bool scannable_char =
 5869|  65.6k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5870|  65.6k|    static_assert(scannable_char,
 5871|  65.6k|                  "Cannot scan an argument of an unsupported character "
 5872|  65.6k|                  "type (i.e. char from a wchar_t source)");
 5873|       |
 5874|  65.6k|    constexpr bool scannable_const =
 5875|  65.6k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5876|  65.6k|    static_assert(scannable_const, "Cannot scan a const argument");
 5877|       |
 5878|  65.6k|    constexpr bool scannable_disabled =
 5879|  65.6k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5880|  65.6k|    static_assert(scannable_disabled,
 5881|  65.6k|                  "Cannot scan an argument that has been disabled by "
 5882|  65.6k|                  "flag (SCN_DISABLE_TYPE_*)");
 5883|       |
 5884|  65.6k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5885|  65.6k|    static_assert(
 5886|  65.6k|        scannable,
 5887|  65.6k|        "Cannot scan an argument. To make a type T scannable, provide "
 5888|  65.6k|        "a scn::scanner<T, CharT> specialization.");
 5889|       |
 5890|  65.6k|    return arg_value{arg};
 5891|  65.6k|}
_ZN3scn2v46detail9arg_valueC2INS0_10tm_with_tzENS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEENS1_14custom_wrapperIT_T0_EE:
 5651|  65.6k|        : custom_value{static_cast<void*>(&val.val),
 5652|  65.6k|                       scan_custom_arg<T, Context>}
 5653|  65.6k|    {
 5654|  65.6k|    }
_ZN3scn2v46detail9arg_value15scan_custom_argINS0_10tm_with_tzENS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEENS0_13scan_expectedIvEEPvSA_SA_:
 5669|  65.6k|    {
 5670|  65.6k|        static_assert(!is_type_disabled<T>,
 5671|  65.6k|                      "Scanning of custom types is disabled by "
 5672|  65.6k|                      "SCN_DISABLE_TYPE_CUSTOM");
 5673|  65.6k|        SCN_EXPECT(arg && pctx && ctx);
  ------------------
  |  | 1104|  65.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  65.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5674|       |
 5675|  65.6k|        using context_type = Context;
 5676|  65.6k|        using parse_context_type = typename context_type::parse_context_type;
 5677|  65.6k|        using scanner_type = typename context_type::template scanner_type<T>;
 5678|       |
 5679|  65.6k|        auto s = scanner_type{};
 5680|       |
 5681|  65.6k|        auto& arg_ref = *static_cast<T*>(arg);
 5682|  65.6k|        auto& pctx_ref = *static_cast<parse_context_type*>(pctx);
 5683|  65.6k|        auto& ctx_ref = *static_cast<context_type*>(ctx);
 5684|       |
 5685|  65.6k|        SCN_TRY_DISCARD(parse_custom_arg(arg_ref, s, pctx_ref));
  ------------------
  |  | 3948|  65.6k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|  65.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 3.42k, False: 62.2k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|  3.42k|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|  3.42k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|  3.42k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|  3.42k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|  3.42k|    }
  ------------------
 5686|  62.2k|        SCN_TRY(it, s.scan(arg_ref, ctx_ref));
  ------------------
  |  | 3958|  62.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  62.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  62.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  62.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 47.9k, False: 14.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  47.9k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  47.9k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  47.9k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  47.9k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  47.9k|    }                                                  \
  |  |  |  | 3957|  62.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  14.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5687|  14.2k|        ctx_ref.advance_to(SCN_MOVE(it));
  ------------------
  |  | 1108|  14.2k|    static_cast<    \
  |  | 1109|  14.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5688|       |
 5689|  14.2k|        return {};
 5690|  62.2k|    }
_ZN3scn2v46detail16parse_custom_argINS0_10tm_with_tzENS0_7scannerIS3_wvEENS0_24basic_scan_parse_contextIwEEEENS0_13scan_expectedIvEERT_RT0_RT1_:
 5602|  65.6k|{
 5603|  65.6k|#if SCN_HAS_EXCEPTIONS
 5604|  65.6k|    auto fmt_it = pctx.begin();
 5605|  65.6k|    try {
 5606|  65.6k|        fmt_it = s.parse(pctx);
 5607|  65.6k|    }
 5608|  65.6k|    catch (const detail::scan_format_string_error_base& ex) {
 5609|       |        // scan_error takes a const char*.
 5610|       |        // scan_format_string_error (or, actually, std::runtime_error)
 5611|       |        // stores a reference-counted string,
 5612|       |        // that will go out of scope here.
 5613|       |        // We need to provide a const char* that will stay in scope.
 5614|       |        // If scan_format_string_error was thrown with a string literal,
 5615|       |        // use that, otherwise refer to a thread_local std::string
 5616|      0|        if (const char* m = get_internal_literal_msg(ex)) {
  ------------------
  |  Branch (5616:25): [True: 0, False: 0]
  ------------------
 5617|      0|            return unexpected_scan_error(scan_error::invalid_format_string, m);
 5618|      0|        }
 5619|      0|        thread_local std::string err_msg{};
 5620|      0|        err_msg = ex.what();
 5621|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 5622|      0|                                     err_msg.c_str());
 5623|      0|    }
 5624|       |#else
 5625|       |    auto fmt_it = s.parse(pctx_ref);
 5626|       |#endif
 5627|  65.6k|    if (auto e = pctx.get_error(); SCN_UNLIKELY(!e)) {
  ------------------
  |  | 1039|  65.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 3.42k, False: 62.2k]
  |  |  ------------------
  ------------------
 5628|  3.42k|        return e;
 5629|  3.42k|    }
 5630|  62.2k|    pctx.advance_to(fmt_it);
 5631|  62.2k|    return {};
 5632|  65.6k|}
_ZN3scn2v46detail10arg_mapperIwE3mapINS0_10tm_with_tzENS0_18basic_scan_contextINS1_16buffer_range_tagEwEETnPvLPv0EEENS1_14custom_wrapperIT_T0_EERSC_NS1_11context_tagISD_EE:
 5803|  65.6k|    {
 5804|  65.6k|        return {val};
 5805|  65.6k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2IJNS0_10tm_with_tzEEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6221|  62.2k|        : basic_scan_args(store.desc, store.args.data())
 6222|  62.2k|    {
 6223|  62.2k|    }
_ZN3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNS0_10tm_with_tzEEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8849|  31.1k|        : m_str(r.str)
 8850|  31.1k|    {
 8851|  31.1k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEEcvbEv:
 1753|  32.8k|    {
 1754|  32.8k|        return has_value();
 1755|  32.8k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEEptEv:
 1828|  47.1k|    {
 1829|  47.1k|        return &value();
 1830|  47.1k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEE5valueISB_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSH_v:
 1782|  47.1k|    {
 1783|  47.1k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|  47.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  47.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|  47.1k|        return this->get_value();
 1785|  47.1k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EED2Ev:
  657|  58.5k|    {
  658|  58.5k|        if (has_value()) {
  ------------------
  |  Branch (658:13): [True: 7.13k, False: 51.4k]
  ------------------
  659|  7.13k|            destroy_value();
  660|  7.13k|        }
  661|  51.4k|        else {
  662|  51.4k|            destroy_unexpected();
  663|  51.4k|        }
  664|  58.5k|    }
_ZN3scn2v46detail8make_argINS0_18basic_scan_contextINS1_16buffer_range_tagEwEENS0_10tm_with_tzEEENS0_14basic_scan_argIT_EERT0_:
 5945|  3.42k|{
 5946|  3.42k|    check_scan_arg_types<T>();
 5947|       |
 5948|  3.42k|    basic_scan_arg<Context> arg;
 5949|  3.42k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5950|  3.42k|    arg.m_value = make_value<Context>(value);
 5951|  3.42k|    return arg;
 5952|  3.42k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNS0_19datetime_componentsEEEEDav:
 9848|  32.8k|{
 9849|  32.8k|    return scan_result_type<Source, Args...>();
 9850|  32.8k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEEC2Ev:
 1565|  32.8k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EEC2Ev:
  626|  32.8k|    constexpr expected_storage_base() noexcept : m_has_value(true)
  627|  32.8k|    {
  628|  32.8k|        construct();
  629|  32.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE9constructIJEEEvDpOT_:
  708|  32.8k|    {
  709|  32.8k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  710|  32.8k|        m_has_value = true;
  711|  32.8k|    }
_ZN3scn2v46detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_19datetime_componentsEEEEJEEEPT_SE_DpOT0_:
  410|  32.8k|{
  411|  32.8k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  412|  32.8k|        T(std::forward<Args>(args)...);
  413|  32.8k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNS0_19datetime_componentsEEEC2Ev:
 6692|  32.8k|    constexpr scan_result() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE9value_ptrEv:
  732|   112k|    {
  733|   112k|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  | 1074|   112k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  734|   112k|    }
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNS0_19datetime_componentsEEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSC_7is_sameINSG_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISG_EEONSS_ISM_EE:
 9833|  32.8k|{
 9834|  32.8k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  | 1039|  32.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 25.7k, False: 7.13k]
  |  |  ------------------
  ------------------
 9835|  25.7k|        out = unexpected(in.error());
 9836|  25.7k|    }
 9837|  7.13k|    else {
 9838|  7.13k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1108|  7.13k|    static_cast<    \
  |  | 1109|  7.13k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9839|  7.13k|    }
 9840|  32.8k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEEC2ISC_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISC_OT_EEvE4typeELPv0ETnPNSG_IXsr3stdE16is_convertible_vISI_SC_EEvE4typeELSM_0EEEONS0_10unexpectedISH_EE:
 1629|  25.7k|        : base(unexpect, std::move(e.error())),
 1630|  25.7k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  25.7k|    {
 1632|  25.7k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  651|  25.7k|        : m_has_value(false)
  652|  25.7k|    {
  653|  25.7k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  654|  25.7k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNSt3__110in_place_tESD_EEEvDpOT_:
  715|  25.7k|    {
  716|  25.7k|        scn::detail::construct_at(unexpected_ptr(),
  717|  25.7k|                                  std::forward<Args>(args)...);
  718|  25.7k|        m_has_value = false;
  719|  25.7k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  744|   128k|    {
  745|   128k|        return reinterpret_cast<unexpected<E>*>(
  746|   128k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  | 1074|   128k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  747|   128k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  25.7k|    {
 1330|  25.7k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEEaSEOSD_:
 1570|  25.7k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEvEaSEOSE_:
  916|  25.7k|    {
  917|  25.7k|        assign_common(std::move(other));
  918|  25.7k|        return *this;
  919|  25.7k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEvE13assign_commonISE_EEvOT_:
  963|  25.7k|    {
  964|  25.7k|        if (this->has_value()) {
  ------------------
  |  Branch (964:13): [True: 25.7k, False: 0]
  ------------------
  965|  25.7k|            if (other.has_value()) {
  ------------------
  |  Branch (965:17): [True: 0, False: 25.7k]
  ------------------
  966|      0|                return reassign_value(std::forward<Other>(other));
  967|      0|            }
  968|  25.7k|            return assign_unexpected_over_value(std::forward<Other>(other));
  969|  25.7k|        }
  970|       |
  971|      0|        if (other.has_value()) {
  ------------------
  |  Branch (971:13): [True: 0, False: 0]
  ------------------
  972|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  973|      0|        }
  974|      0|        return reassign_unexpected(std::forward<Other>(other));
  975|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE9has_valueEv:
  701|   189k|    {
  702|   189k|        return m_has_value;
  703|   189k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE9get_valueEv:
  667|  47.1k|    {
  668|  47.1k|        return *value_ptr();
  669|  47.1k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEvE28assign_unexpected_over_valueISE_EEvOT_:
 1059|  25.7k|    {
 1060|  25.7k|        this->destroy_value();
 1061|  25.7k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1062|  25.7k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  722|  32.8k|    {
  723|  32.8k|        scn::detail::destroy_at(value_ptr());
  724|  32.8k|    }
_ZN3scn2v46detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_19datetime_componentsEEEEEEvPT_:
  416|  32.8k|{
  417|       |    if constexpr (std::is_array_v<T>) {
  418|       |        for (auto& elem : *p) {
  419|       |            scn::detail::destroy_at(&elem);
  420|       |        }
  421|       |    }
  422|  32.8k|    else {
  423|  32.8k|        p->~T();
  424|  32.8k|    }
  425|  32.8k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNS0_19datetime_componentsEEED2Ev:
 6699|  32.8k|    ~scan_result() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE20construct_unexpectedIJNS0_10unexpectedISD_EEEEEvDpOT_:
  715|  25.7k|    {
  716|  25.7k|        scn::detail::construct_at(unexpected_ptr(),
  717|  25.7k|                                  std::forward<Args>(args)...);
  718|  25.7k|        m_has_value = false;
  719|  25.7k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE14get_unexpectedEv:
  692|  25.7k|    {
  693|  25.7k|        return std::move(*unexpected_ptr());
  694|  25.7k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  726|  51.4k|    {
  727|  51.4k|        scn::detail::destroy_at(unexpected_ptr());
  728|  51.4k|    }
_ZNK3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNS0_19datetime_componentsEEEcvNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEv:
 8854|  31.1k|    {
 8855|  31.1k|        return m_str;
 8856|  31.1k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEJNS0_19datetime_componentsEEEEDaRNSt3__15tupleIJDpT0_EEE:
 6195|  62.2k|{
 6196|  62.2k|    detail::check_scan_arg_types<Args...>();
 6197|  62.2k|    return detail::scan_arg_store<Context, Args...>(values);
 6198|  62.2k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJNS0_19datetime_componentsEEEC2ERNSt3__15tupleIJS6_EEE:
 6171|  62.2k|        : args(std::apply(make_argptrs<Args...>, args))
 6172|  62.2k|    {
 6173|  62.2k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJNS0_19datetime_componentsEEE12make_argptrsIJS6_EEENSt3__15arrayINS1_9arg_valueELm1EEEDpRT_:
 6180|  62.2k|    {
 6181|  62.2k|        return {detail::make_arg<
 6182|  62.2k|            kind, Context,
 6183|  62.2k|            mapped_type_constant<remove_cvref_t<A>,
 6184|  62.2k|                                 typename Context::char_type>::value>(args)...};
 6185|  62.2k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE1ENS0_18basic_scan_contextINS1_16buffer_range_tagEwEELNS1_8arg_typeE29ENS0_19datetime_componentsEvEENS1_9arg_valueERT2_:
 5969|  62.2k|{
 5970|  62.2k|    return make_value<Context>(value);
 5971|  62.2k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEwEENS0_19datetime_componentsEEEDaRT0_:
 5895|  65.6k|{
 5896|  65.6k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5897|       |
 5898|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5899|       |                                  needs_context_tag>) {
 5900|       |        return make_value_impl<T>(SCN_FWD(arg));
 5901|       |    }
 5902|  65.6k|    else {
 5903|  65.6k|        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5904|  65.6k|            value, context_tag<Context>{}));
 5905|  65.6k|    }
 5906|  65.6k|}
_ZN3scn2v46detail10arg_mapperIwE3mapINS0_19datetime_componentsETnPvLPv0EEENS1_17needs_context_tagERT_:
 5795|  65.6k|    {
 5796|  65.6k|        return {};
 5797|  65.6k|    }
_ZN3scn2v46detail15make_value_implINS0_19datetime_componentsENS1_14custom_wrapperIS3_NS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEEDaOT0_:
 5864|  65.6k|{
 5865|  65.6k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5866|  65.6k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5867|       |
 5868|  65.6k|    constexpr bool scannable_char =
 5869|  65.6k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5870|  65.6k|    static_assert(scannable_char,
 5871|  65.6k|                  "Cannot scan an argument of an unsupported character "
 5872|  65.6k|                  "type (i.e. char from a wchar_t source)");
 5873|       |
 5874|  65.6k|    constexpr bool scannable_const =
 5875|  65.6k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5876|  65.6k|    static_assert(scannable_const, "Cannot scan a const argument");
 5877|       |
 5878|  65.6k|    constexpr bool scannable_disabled =
 5879|  65.6k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5880|  65.6k|    static_assert(scannable_disabled,
 5881|  65.6k|                  "Cannot scan an argument that has been disabled by "
 5882|  65.6k|                  "flag (SCN_DISABLE_TYPE_*)");
 5883|       |
 5884|  65.6k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5885|  65.6k|    static_assert(
 5886|  65.6k|        scannable,
 5887|  65.6k|        "Cannot scan an argument. To make a type T scannable, provide "
 5888|  65.6k|        "a scn::scanner<T, CharT> specialization.");
 5889|       |
 5890|  65.6k|    return arg_value{arg};
 5891|  65.6k|}
_ZN3scn2v46detail9arg_valueC2INS0_19datetime_componentsENS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEENS1_14custom_wrapperIT_T0_EE:
 5651|  65.6k|        : custom_value{static_cast<void*>(&val.val),
 5652|  65.6k|                       scan_custom_arg<T, Context>}
 5653|  65.6k|    {
 5654|  65.6k|    }
_ZN3scn2v46detail9arg_value15scan_custom_argINS0_19datetime_componentsENS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEENS0_13scan_expectedIvEEPvSA_SA_:
 5669|  65.6k|    {
 5670|  65.6k|        static_assert(!is_type_disabled<T>,
 5671|  65.6k|                      "Scanning of custom types is disabled by "
 5672|  65.6k|                      "SCN_DISABLE_TYPE_CUSTOM");
 5673|  65.6k|        SCN_EXPECT(arg && pctx && ctx);
  ------------------
  |  | 1104|  65.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  65.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5674|       |
 5675|  65.6k|        using context_type = Context;
 5676|  65.6k|        using parse_context_type = typename context_type::parse_context_type;
 5677|  65.6k|        using scanner_type = typename context_type::template scanner_type<T>;
 5678|       |
 5679|  65.6k|        auto s = scanner_type{};
 5680|       |
 5681|  65.6k|        auto& arg_ref = *static_cast<T*>(arg);
 5682|  65.6k|        auto& pctx_ref = *static_cast<parse_context_type*>(pctx);
 5683|  65.6k|        auto& ctx_ref = *static_cast<context_type*>(ctx);
 5684|       |
 5685|  65.6k|        SCN_TRY_DISCARD(parse_custom_arg(arg_ref, s, pctx_ref));
  ------------------
  |  | 3948|  65.6k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|  65.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 3.42k, False: 62.2k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|  3.42k|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|  3.42k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|  3.42k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|  3.42k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|  3.42k|    }
  ------------------
 5686|  62.2k|        SCN_TRY(it, s.scan(arg_ref, ctx_ref));
  ------------------
  |  | 3958|  62.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  62.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  62.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  62.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 47.9k, False: 14.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  47.9k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  47.9k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  47.9k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  47.9k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  47.9k|    }                                                  \
  |  |  |  | 3957|  62.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  14.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5687|  14.2k|        ctx_ref.advance_to(SCN_MOVE(it));
  ------------------
  |  | 1108|  14.2k|    static_cast<    \
  |  | 1109|  14.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5688|       |
 5689|  14.2k|        return {};
 5690|  62.2k|    }
_ZN3scn2v46detail16parse_custom_argINS0_19datetime_componentsENS0_7scannerIS3_wvEENS0_24basic_scan_parse_contextIwEEEENS0_13scan_expectedIvEERT_RT0_RT1_:
 5602|  65.6k|{
 5603|  65.6k|#if SCN_HAS_EXCEPTIONS
 5604|  65.6k|    auto fmt_it = pctx.begin();
 5605|  65.6k|    try {
 5606|  65.6k|        fmt_it = s.parse(pctx);
 5607|  65.6k|    }
 5608|  65.6k|    catch (const detail::scan_format_string_error_base& ex) {
 5609|       |        // scan_error takes a const char*.
 5610|       |        // scan_format_string_error (or, actually, std::runtime_error)
 5611|       |        // stores a reference-counted string,
 5612|       |        // that will go out of scope here.
 5613|       |        // We need to provide a const char* that will stay in scope.
 5614|       |        // If scan_format_string_error was thrown with a string literal,
 5615|       |        // use that, otherwise refer to a thread_local std::string
 5616|      0|        if (const char* m = get_internal_literal_msg(ex)) {
  ------------------
  |  Branch (5616:25): [True: 0, False: 0]
  ------------------
 5617|      0|            return unexpected_scan_error(scan_error::invalid_format_string, m);
 5618|      0|        }
 5619|      0|        thread_local std::string err_msg{};
 5620|      0|        err_msg = ex.what();
 5621|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 5622|      0|                                     err_msg.c_str());
 5623|      0|    }
 5624|       |#else
 5625|       |    auto fmt_it = s.parse(pctx_ref);
 5626|       |#endif
 5627|  65.6k|    if (auto e = pctx.get_error(); SCN_UNLIKELY(!e)) {
  ------------------
  |  | 1039|  65.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 3.42k, False: 62.2k]
  |  |  ------------------
  ------------------
 5628|  3.42k|        return e;
 5629|  3.42k|    }
 5630|  62.2k|    pctx.advance_to(fmt_it);
 5631|  62.2k|    return {};
 5632|  65.6k|}
_ZN3scn2v46detail10arg_mapperIwE3mapINS0_19datetime_componentsENS0_18basic_scan_contextINS1_16buffer_range_tagEwEETnPvLPv0EEENS1_14custom_wrapperIT_T0_EERSC_NS1_11context_tagISD_EE:
 5803|  65.6k|    {
 5804|  65.6k|        return {val};
 5805|  65.6k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2IJNS0_19datetime_componentsEEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6221|  62.2k|        : basic_scan_args(store.desc, store.args.data())
 6222|  62.2k|    {
 6223|  62.2k|    }
_ZN3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNS0_19datetime_componentsEEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8849|  31.1k|        : m_str(r.str)
 8850|  31.1k|    {
 8851|  31.1k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEEcvbEv:
 1753|  32.8k|    {
 1754|  32.8k|        return has_value();
 1755|  32.8k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEEptEv:
 1828|  47.1k|    {
 1829|  47.1k|        return &value();
 1830|  47.1k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEE5valueISB_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSH_v:
 1782|  47.1k|    {
 1783|  47.1k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|  47.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  47.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|  47.1k|        return this->get_value();
 1785|  47.1k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EED2Ev:
  657|  58.5k|    {
  658|  58.5k|        if (has_value()) {
  ------------------
  |  Branch (658:13): [True: 7.13k, False: 51.4k]
  ------------------
  659|  7.13k|            destroy_value();
  660|  7.13k|        }
  661|  51.4k|        else {
  662|  51.4k|            destroy_unexpected();
  663|  51.4k|        }
  664|  58.5k|    }
_ZN3scn2v46detail8make_argINS0_18basic_scan_contextINS1_16buffer_range_tagEwEENS0_19datetime_componentsEEENS0_14basic_scan_argIT_EERT0_:
 5945|  3.42k|{
 5946|  3.42k|    check_scan_arg_types<T>();
 5947|       |
 5948|  3.42k|    basic_scan_arg<Context> arg;
 5949|  3.42k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5950|  3.42k|    arg.m_value = make_value<Context>(value);
 5951|  3.42k|    return arg;
 5952|  3.42k|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRKNSt3__15dequeIwNS6_9allocatorIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2882|  77.1k|    {
 2883|  77.1k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1110|  77.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2884|  77.1k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRKNSt3__15dequeIwNS6_9allocatorIwEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2863|  77.1k|    {
 2864|  77.1k|        return decay_copy(t.begin());
 2865|  77.1k|    }
_ZN3scn2v46ranges6detail10decay_copyINSt3__116__deque_iteratorIwPKwRS6_PKS7_lLl1024EEEEEu7__decayIT_EOSC_:
 2107|  1.39M|{
 2108|  1.39M|    return SCN_FWD(t);
  ------------------
  |  | 1110|  1.39M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2109|  1.39M|}
_ZNK3scn2v46ranges6detail4end_2fnclIRKNSt3__15dequeIwNS6_9allocatorIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2939|   197k|    {
 2940|   197k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1110|   197k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2941|   197k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRKNSt3__15dequeIwNS6_9allocatorIwEEEENS6_16__deque_iteratorIwPKwRSE_PKSF_lLl1024EEESJ_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2921|   197k|    {
 2922|   197k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  | 1110|   197k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2923|   197k|    }
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJ2tmEEEDav:
 9848|  32.8k|{
 9849|  32.8k|    return scan_result_type<Source, Args...>();
 9850|  32.8k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJ2tmEEENS0_10scan_errorEEC2Ev:
 1565|  32.8k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJ2tmEEENS0_10scan_errorELb1EEC2Ev:
  441|  32.8k|        : m_value(T{}), m_has_value(true)
  442|  32.8k|    {
  443|  32.8k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJ2tmEEC2Ev:
 6692|  32.8k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEC2Ev:
 6535|  98.5k|    constexpr scan_result_range_storage() = default;
_ZN3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_EC2Ev:
 3473|  98.5k|    subrange() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJ2tmEEESF_TnPNS7_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENS7_7is_sameINSL_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISL_EEONSX_ISR_EE:
 9833|  32.8k|{
 9834|  32.8k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  | 1039|  32.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 25.7k, False: 7.13k]
  |  |  ------------------
  ------------------
 9835|  25.7k|        out = unexpected(in.error());
 9836|  25.7k|    }
 9837|  7.13k|    else {
 9838|  7.13k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1108|  7.13k|    static_cast<    \
  |  | 1109|  7.13k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9839|  7.13k|    }
 9840|  32.8k|}
_ZNK3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEcvbEv:
 1753|  98.5k|    {
 1754|  98.5k|        return has_value();
 1755|  98.5k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EE9has_valueEv:
  504|   197k|    {
  505|   197k|        return m_has_value;
  506|   197k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEE5errorEv:
 1759|  77.1k|    {
 1760|  77.1k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1104|  77.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  77.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1761|  77.1k|        return this->get_unexpected().error();
 1762|  77.1k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  487|  77.1k|    {
  488|  77.1k|        return m_unexpected;
  489|  77.1k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJ2tmEEENS0_10scan_errorEEC2ISI_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISI_OT_EEvE4typeELPv0ETnPNSL_IXsr3stdE16is_convertible_vISN_SI_EEvE4typeELSR_0EEEONS0_10unexpectedISM_EE:
 1629|  25.7k|        : base(unexpect, std::move(e.error())),
 1630|  25.7k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  25.7k|    {
 1632|  25.7k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJ2tmEEENS0_10scan_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  464|  25.7k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|  25.7k|          m_has_value(false)
  466|  25.7k|    {
  467|  25.7k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJ2tmEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  25.7k|    {
 1330|  25.7k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJ2tmEEENS0_10scan_errorEEaSEOSJ_:
 1570|  25.7k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJ2tmEEENS0_10scan_errorEvEaSEOSK_:
  916|  25.7k|    {
  917|  25.7k|        assign_common(std::move(other));
  918|  25.7k|        return *this;
  919|  25.7k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJ2tmEEENS0_10scan_errorEvE13assign_commonISK_EEvOT_:
  963|  25.7k|    {
  964|  25.7k|        if (this->has_value()) {
  ------------------
  |  Branch (964:13): [True: 25.7k, False: 0]
  ------------------
  965|  25.7k|            if (other.has_value()) {
  ------------------
  |  Branch (965:17): [True: 0, False: 25.7k]
  ------------------
  966|      0|                return reassign_value(std::forward<Other>(other));
  967|      0|            }
  968|  25.7k|            return assign_unexpected_over_value(std::forward<Other>(other));
  969|  25.7k|        }
  970|       |
  971|      0|        if (other.has_value()) {
  ------------------
  |  Branch (971:13): [True: 0, False: 0]
  ------------------
  972|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  973|      0|        }
  974|      0|        return reassign_unexpected(std::forward<Other>(other));
  975|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJ2tmEEENS0_10scan_errorELb1EE9has_valueEv:
  504|   131k|    {
  505|   131k|        return m_has_value;
  506|   131k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJ2tmEEENS0_10scan_errorELb1EE9get_valueEv:
  470|  47.1k|    {
  471|  47.1k|        return m_value;
  472|  47.1k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJ2tmEEENS0_10scan_errorEvE28assign_unexpected_over_valueISK_EEvOT_:
 1059|  25.7k|    {
 1060|  25.7k|        this->destroy_value();
 1061|  25.7k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1062|  25.7k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJ2tmEEENS0_10scan_errorELb1EE13destroy_valueEv:
  525|  25.7k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJ2tmEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISJ_EEEEEvDpOT_:
  518|  25.7k|    {
  519|  25.7k|        scn::detail::construct_at(&get_unexpected(),
  520|  25.7k|                                  std::forward<Args>(args)...);
  521|  25.7k|        m_has_value = false;
  522|  25.7k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJ2tmEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  487|  25.7k|    {
  488|  25.7k|        return m_unexpected;
  489|  25.7k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJ2tmEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  495|  25.7k|    {
  496|  25.7k|        return std::move(m_unexpected);
  497|  25.7k|    }
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEE9set_rangeISF_EEvOT_:
 6566|  21.3k|    {
 6567|  21.3k|        m_range = std::forward<Other>(r);
 6568|  21.3k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEdeISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSJ_v:
 1808|  21.3k|    {
 1809|  21.3k|        return value();
 1810|  21.3k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEE5valueISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSJ_v:
 1782|  21.3k|    {
 1783|  21.3k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|  21.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  21.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|  21.3k|        return this->get_value();
 1785|  21.3k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EE9get_valueEv:
  470|  21.3k|    {
  471|  21.3k|        return m_value;
  472|  21.3k|    }
_ZN3scn2v46detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEwEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS7_17basic_string_viewIT0_NS7_11char_traitsISV_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESV_EEEE:
 9591|  46.6k|{
 9592|  46.6k|    auto buffer = make_scan_buffer(range);
 9593|       |
 9594|  46.6k|    auto result = vscan_impl(buffer, format, args);
 9595|  46.6k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  | 1039|  46.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 35.9k, False: 10.6k]
  |  |  ------------------
  ------------------
 9596|  35.9k|        return unexpected(result.error());
 9597|  35.9k|    }
 9598|  10.6k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  | 1110|  10.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9599|  46.6k|}
_ZN3scn2v46detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEEDaRKT_:
 5398|  98.5k|{
 5399|  98.5k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 5400|       |
 5401|  98.5k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 5402|  98.5k|                  "\n"
 5403|  98.5k|                  "Unsupported range type given as input to a scanning "
 5404|  98.5k|                  "function.\n"
 5405|  98.5k|                  "A range needs to have a character type (value type) "
 5406|  98.5k|                  "of either `char` or `wchar_t` to be scannable.\n"
 5407|  98.5k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 5408|  98.5k|                  "to be included.\n"
 5409|  98.5k|                  "See the scnlib documentation for more details.");
 5410|  98.5k|    static_assert(
 5411|  98.5k|        !std::is_same_v<T, custom_char_traits>,
 5412|  98.5k|        "\n"
 5413|  98.5k|        "Unsupported range type given as input to a scanning "
 5414|  98.5k|        "function.\n"
 5415|  98.5k|        "String types (std::basic_string, and std::basic_string_view) "
 5416|  98.5k|        "need to use std::char_traits. Strings with custom Traits are "
 5417|  98.5k|        "not supported.");
 5418|  98.5k|    static_assert(!std::is_same_v<T, file_marker_found>,
 5419|  98.5k|                  "\n"
 5420|  98.5k|                  "Unsupported range type given as input to a scanning "
 5421|  98.5k|                  "function.\n"
 5422|  98.5k|                  "file_marker_found cannot be used as an "
 5423|  98.5k|                  "source range type to scn::scan.\n"
 5424|  98.5k|                  "To read from stdin, use scn::input or scn::prompt, "
 5425|  98.5k|                  "and do not provide an explicit source range, "
 5426|  98.5k|                  "or use scn::scan with a FILE* directly.");
 5427|  98.5k|    static_assert(!std::is_same_v<T, insufficient_range>,
 5428|  98.5k|                  "\n"
 5429|  98.5k|                  "Unsupported range type given as input to a scanning "
 5430|  98.5k|                  "function.\n"
 5431|  98.5k|                  "In order to be scannable, a range needs to satisfy "
 5432|  98.5k|                  "`forward_range`. `input_range` is not sufficient.");
 5433|  98.5k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 5434|  98.5k|                  "\n"
 5435|  98.5k|                  "Unsupported range type given as input to a scanning "
 5436|  98.5k|                  "function.\n"
 5437|  98.5k|                  "A range needs to model forward_range and have a valid "
 5438|  98.5k|                  "character type (char or wchar_t) to be scannable.\n"
 5439|  98.5k|                  "Examples of scannable ranges are std::string, "
 5440|  98.5k|                  "std::string_view, "
 5441|  98.5k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 5442|  98.5k|                  "See the scnlib documentation for more details.");
 5443|       |
 5444|  98.5k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 5445|  98.5k|}
_ZN3scn2v46detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDaRKT_NS1_12priority_tagILm0EEE:
 5368|  98.5k|{
 5369|       |    if constexpr (std::is_same_v<Range, file_marker>) {
 5370|       |        return file_marker_found{};
 5371|       |    }
 5372|       |    else if constexpr (!ranges::forward_range<Range>) {
 5373|       |        if constexpr (ranges::range<Range>) {
 5374|       |            return insufficient_range{};
 5375|       |        }
 5376|       |        else {
 5377|       |            return invalid_input_range{};
 5378|       |        }
 5379|       |    }
 5380|       |    else if constexpr (!is_valid_char_type<detail::char_t<Range>>) {
 5381|       |        return invalid_char_type{};
 5382|       |    }
 5383|  98.5k|    else {
 5384|  98.5k|        return make_forward_scan_buffer(r);
 5385|  98.5k|    }
 5386|  98.5k|}
_ZN3scn2v46detail24make_forward_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEEDaRKT_:
 5202|  98.5k|{
 5203|  98.5k|    return basic_scan_forward_buffer_impl(range);
 5204|  98.5k|}
_ZN3scn2v46detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEC2IRKSF_TnPNS7_9enable_ifIXaa11is_not_selfIT_SG_Esr3stdE16is_convertible_vISL_SJ_EEvE4typeELPv0EEEOSL_:
 4782|  98.5k|        : m_range(std::addressof(static_cast<const Range&>(SCN_FWD(r)))),
  ------------------
  |  | 1110|  98.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4783|  98.5k|          m_cursor(ranges::begin(*m_range))
 4784|  98.5k|    {
 4785|  98.5k|    }
_ZN3scn2v46detail30basic_scan_forward_buffer_baseIwEC2Ev:
 4754|  98.5k|    basic_scan_forward_buffer_base() : base(typename base::non_contiguous_tag{})
 4755|  98.5k|    {
 4756|  98.5k|    }
_ZN3scn2v46detail17basic_scan_bufferIwEC2ENS3_18non_contiguous_tagENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEE:
 4445|  98.5k|        : m_current_view(sv), m_is_contiguous(false)
 4446|  98.5k|    {
 4447|  98.5k|    }
_ZN3scn2v46detail17basic_scan_bufferIwED2Ev:
 4358|   191k|    virtual ~basic_scan_buffer() = default;
_ZNK3scn2v46ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2882|   119k|    {
 2883|   119k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1110|   119k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2884|   119k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESL_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2863|   119k|    {
 2864|   119k|        return decay_copy(t.begin());
 2865|   119k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_E5beginEv:
 3493|   141k|    {
 3494|   141k|        return m_iterator;
 3495|   141k|    }
_ZN3scn2v46detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEE4fillEv:
 4788|   332k|    {
 4789|   332k|        if (m_cursor == ranges::end(*m_range)) {
  ------------------
  |  Branch (4789:13): [True: 18.5k, False: 313k]
  ------------------
 4790|  18.5k|            return false;
 4791|  18.5k|        }
 4792|   313k|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
 4793|   313k|            SCN_EXPECT(m_cursor < ranges::end(*m_range));
  ------------------
  |  | 1104|   313k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   313k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4794|   313k|        }
 4795|   313k|        if (!this->m_current_view.empty()) {
  ------------------
  |  Branch (4795:13): [True: 220k, False: 93.2k]
  ------------------
 4796|   220k|            this->m_putback_buffer.insert(this->m_putback_buffer.end(),
 4797|   220k|                                          this->m_current_view.begin(),
 4798|   220k|                                          this->m_current_view.end());
 4799|   220k|        }
 4800|   313k|        m_latest = *m_cursor;
 4801|   313k|        ++m_cursor;
 4802|   313k|        this->m_current_view = std::basic_string_view<char_type>{&m_latest, 1};
 4803|   313k|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
 4804|   313k|            SCN_EXPECT(m_cursor <= ranges::end(*m_range));
  ------------------
  |  | 1104|   313k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   313k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4805|   313k|        }
 4806|   313k|        return true;
 4807|   332k|    }
_ZNK3scn2v46ranges6detail4end_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2939|   960k|    {
 2940|   960k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1110|   960k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2941|   960k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2921|   960k|    {
 2922|   960k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  | 1110|   960k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2923|   960k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_E3endEv:
 3497|   981k|    {
 3498|   981k|        return m_sentinel;
 3499|   981k|    }
_ZN3scn2v46detail17basic_scan_bufferIwE4syncEl:
 4363|  98.5k|    {
 4364|  98.5k|        SCN_UNUSED(position);
  ------------------
  |  | 1089|  98.5k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4365|  98.5k|        return true;
 4366|  98.5k|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEC2ISF_TnPNS6_9enable_ifIXsr3stdE18is_constructible_vISF_OT_EEvE4typeELPv0ETnPNSI_IXsr3stdE16is_convertible_vISK_SF_EEvE4typeELSO_0EEEONS0_10unexpectedISJ_EE:
 1629|  77.1k|        : base(unexpect, std::move(e.error())),
 1630|  77.1k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  77.1k|    {
 1632|  77.1k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EEC2IJSG_EvEENS0_10unexpect_tEDpOT_:
  464|  77.1k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|  77.1k|          m_has_value(false)
  466|  77.1k|    {
  467|  77.1k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  98.5k|    {
 1330|  98.5k|    }
_ZN3scn2v46detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_l:
 6796|  21.3k|{
 6797|       |    if constexpr (ranges::random_access_iterator<
 6798|  21.3k|                      ranges::iterator_t<SourceRange>>) {
 6799|  21.3k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 6800|       |    }
 6801|       |    else {
 6802|       |        auto it = ranges::begin(source);
 6803|       |        while (n > 0) {
 6804|       |            --n;
 6805|       |            ++it;
 6806|       |        }
 6807|       |        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 6808|       |    }
 6809|  21.3k|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2882|  21.3k|    {
 2883|  21.3k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1110|  21.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2884|  21.3k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESK_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2863|  21.3k|    {
 2864|  21.3k|        return decay_copy(t.begin());
 2865|  21.3k|    }
_ZN3scn2v46detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEEDaRT_:
 6783|  21.3k|{
 6784|  21.3k|    return ranges::end(source);
 6785|  21.3k|}
_ZNK3scn2v46ranges6detail4end_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2939|  21.3k|    {
 2940|  21.3k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1110|  21.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2941|  21.3k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2921|  21.3k|    {
 2922|  21.3k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  | 1110|  21.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2923|  21.3k|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEC2ISE_vEEOT_:
 1583|  21.3k|        : base(std::in_place, std::forward<U>(val)),
 1584|  21.3k|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|  21.3k|    {
 1586|  21.3k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EEC2IJSF_EvEENS7_10in_place_tEDpOT_:
  455|  21.3k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|  21.3k|    {
  457|  21.3k|    }
_ZNK3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJ2tmEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
 8854|  31.1k|    {
 8855|  31.1k|        return m_str;
 8856|  31.1k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_EC2ISC_TnPNS5_9enable_ifIXsr3stdE16is_convertible_vIT_SC_EEvE4typeELPv0EEESG_SC_:
 3478|   119k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1108|   119k|    static_cast<    \
  |  | 1109|   119k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1108|   119k|    static_cast<    \
  |  | 1109|   119k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3479|   119k|    {
 3480|   119k|    }
_ZN3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJ2tmEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8849|  31.1k|        : m_str(r.str)
 8850|  31.1k|    {
 8851|  31.1k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJ2tmEEENS0_10scan_errorEEcvbEv:
 1753|  32.8k|    {
 1754|  32.8k|        return has_value();
 1755|  32.8k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJ2tmEEENS0_10scan_errorEEptEv:
 1828|  47.1k|    {
 1829|  47.1k|        return &value();
 1830|  47.1k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJ2tmEEENS0_10scan_errorEE5valueISH_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSM_v:
 1782|  47.1k|    {
 1783|  47.1k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|  47.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  47.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|  47.1k|        return this->get_value();
 1785|  47.1k|    }
_ZNK3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEE5beginEv:
 6555|  21.3k|    {
 6556|  21.3k|        return ranges::begin(m_range);
 6557|  21.3k|    }
_ZN3scn2v46detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS3_16__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS1_22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEEERKT_OSJ_NS3_17basic_string_viewIT1_NS3_11char_traitsISZ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESZ_EEEE:
 9607|  46.6k|{
 9608|  46.6k|#if !SCN_DISABLE_LOCALE
 9609|  46.6k|    auto buffer = detail::make_scan_buffer(range);
 9610|       |
 9611|  46.6k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 9612|  46.6k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 9613|  46.6k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 9614|       |
 9615|  46.6k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  | 1039|  46.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 35.9k, False: 10.6k]
  |  |  ------------------
  ------------------
 9616|  35.9k|        return unexpected(result.error());
 9617|  35.9k|    }
 9618|  10.6k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  | 1110|  10.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9619|       |#else
 9620|       |    static_assert(dependent_false<Locale>::value,
 9621|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 9622|       |
 9623|       |    return {};
 9624|       |#endif
 9625|  46.6k|}
_ZN3scn2v46detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEwEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagET0_EEEE:
 9631|  5.14k|{
 9632|  5.14k|    auto buffer = detail::make_scan_buffer(range);
 9633|       |
 9634|  5.14k|    auto result = detail::vscan_value_impl(buffer, arg);
 9635|  5.14k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  | 1039|  5.14k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 5.14k, False: 0]
  |  |  ------------------
  ------------------
 9636|  5.14k|        return unexpected(result.error());
 9637|  5.14k|    }
 9638|      0|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9639|  5.14k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJNS0_10tm_with_tzEEEEDav:
 9848|  32.8k|{
 9849|  32.8k|    return scan_result_type<Source, Args...>();
 9850|  32.8k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEEC2Ev:
 1565|  32.8k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EEC2Ev:
  626|  32.8k|    constexpr expected_storage_base() noexcept : m_has_value(true)
  627|  32.8k|    {
  628|  32.8k|        construct();
  629|  32.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE9constructIJEEEvDpOT_:
  708|  32.8k|    {
  709|  32.8k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  710|  32.8k|        m_has_value = true;
  711|  32.8k|    }
_ZN3scn2v46detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_10tm_with_tzEEEEJEEEPT_SK_DpOT0_:
  410|  32.8k|{
  411|  32.8k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  412|  32.8k|        T(std::forward<Args>(args)...);
  413|  32.8k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJNS0_10tm_with_tzEEEC2Ev:
 6692|  32.8k|    constexpr scan_result() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE9value_ptrEv:
  732|   112k|    {
  733|   112k|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  | 1074|   112k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  734|   112k|    }
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS0_10tm_with_tzEEEESF_TnPNS7_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENS7_7is_sameINSL_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISL_EEONSX_ISR_EE:
 9833|  32.8k|{
 9834|  32.8k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  | 1039|  32.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 25.7k, False: 7.13k]
  |  |  ------------------
  ------------------
 9835|  25.7k|        out = unexpected(in.error());
 9836|  25.7k|    }
 9837|  7.13k|    else {
 9838|  7.13k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1108|  7.13k|    static_cast<    \
  |  | 1109|  7.13k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9839|  7.13k|    }
 9840|  32.8k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEEC2ISI_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISI_OT_EEvE4typeELPv0ETnPNSL_IXsr3stdE16is_convertible_vISN_SI_EEvE4typeELSR_0EEEONS0_10unexpectedISM_EE:
 1629|  25.7k|        : base(unexpect, std::move(e.error())),
 1630|  25.7k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  25.7k|    {
 1632|  25.7k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  651|  25.7k|        : m_has_value(false)
  652|  25.7k|    {
  653|  25.7k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  654|  25.7k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS8_10in_place_tESJ_EEEvDpOT_:
  715|  25.7k|    {
  716|  25.7k|        scn::detail::construct_at(unexpected_ptr(),
  717|  25.7k|                                  std::forward<Args>(args)...);
  718|  25.7k|        m_has_value = false;
  719|  25.7k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  744|   128k|    {
  745|   128k|        return reinterpret_cast<unexpected<E>*>(
  746|   128k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  | 1074|   128k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  747|   128k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  25.7k|    {
 1330|  25.7k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEEaSEOSJ_:
 1570|  25.7k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEvEaSEOSK_:
  916|  25.7k|    {
  917|  25.7k|        assign_common(std::move(other));
  918|  25.7k|        return *this;
  919|  25.7k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEvE13assign_commonISK_EEvOT_:
  963|  25.7k|    {
  964|  25.7k|        if (this->has_value()) {
  ------------------
  |  Branch (964:13): [True: 25.7k, False: 0]
  ------------------
  965|  25.7k|            if (other.has_value()) {
  ------------------
  |  Branch (965:17): [True: 0, False: 25.7k]
  ------------------
  966|      0|                return reassign_value(std::forward<Other>(other));
  967|      0|            }
  968|  25.7k|            return assign_unexpected_over_value(std::forward<Other>(other));
  969|  25.7k|        }
  970|       |
  971|      0|        if (other.has_value()) {
  ------------------
  |  Branch (971:13): [True: 0, False: 0]
  ------------------
  972|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  973|      0|        }
  974|      0|        return reassign_unexpected(std::forward<Other>(other));
  975|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE9has_valueEv:
  701|   189k|    {
  702|   189k|        return m_has_value;
  703|   189k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE9get_valueEv:
  667|  47.1k|    {
  668|  47.1k|        return *value_ptr();
  669|  47.1k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEvE28assign_unexpected_over_valueISK_EEvOT_:
 1059|  25.7k|    {
 1060|  25.7k|        this->destroy_value();
 1061|  25.7k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1062|  25.7k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  722|  32.8k|    {
  723|  32.8k|        scn::detail::destroy_at(value_ptr());
  724|  32.8k|    }
_ZN3scn2v46detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_10tm_with_tzEEEEEEvPT_:
  416|  32.8k|{
  417|       |    if constexpr (std::is_array_v<T>) {
  418|       |        for (auto& elem : *p) {
  419|       |            scn::detail::destroy_at(&elem);
  420|       |        }
  421|       |    }
  422|  32.8k|    else {
  423|  32.8k|        p->~T();
  424|  32.8k|    }
  425|  32.8k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJNS0_10tm_with_tzEEED2Ev:
 6699|  32.8k|    ~scan_result() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE20construct_unexpectedIJNS0_10unexpectedISJ_EEEEEvDpOT_:
  715|  25.7k|    {
  716|  25.7k|        scn::detail::construct_at(unexpected_ptr(),
  717|  25.7k|                                  std::forward<Args>(args)...);
  718|  25.7k|        m_has_value = false;
  719|  25.7k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE14get_unexpectedEv:
  692|  25.7k|    {
  693|  25.7k|        return std::move(*unexpected_ptr());
  694|  25.7k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  726|  51.4k|    {
  727|  51.4k|        scn::detail::destroy_at(unexpected_ptr());
  728|  51.4k|    }
_ZNK3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJNS0_10tm_with_tzEEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
 8854|  31.1k|    {
 8855|  31.1k|        return m_str;
 8856|  31.1k|    }
_ZN3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJNS0_10tm_with_tzEEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8849|  31.1k|        : m_str(r.str)
 8850|  31.1k|    {
 8851|  31.1k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEEcvbEv:
 1753|  32.8k|    {
 1754|  32.8k|        return has_value();
 1755|  32.8k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEEptEv:
 1828|  47.1k|    {
 1829|  47.1k|        return &value();
 1830|  47.1k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS0_10tm_with_tzEEEENS0_10scan_errorEE5valueISH_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSM_v:
 1782|  47.1k|    {
 1783|  47.1k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|  47.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  47.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|  47.1k|        return this->get_value();
 1785|  47.1k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_10tm_with_tzEEEENS0_10scan_errorELb0EED2Ev:
  657|  58.5k|    {
  658|  58.5k|        if (has_value()) {
  ------------------
  |  Branch (658:13): [True: 7.13k, False: 51.4k]
  ------------------
  659|  7.13k|            destroy_value();
  660|  7.13k|        }
  661|  51.4k|        else {
  662|  51.4k|            destroy_unexpected();
  663|  51.4k|        }
  664|  58.5k|    }
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJNS0_19datetime_componentsEEEEDav:
 9848|  32.8k|{
 9849|  32.8k|    return scan_result_type<Source, Args...>();
 9850|  32.8k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEEC2Ev:
 1565|  32.8k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EEC2Ev:
  626|  32.8k|    constexpr expected_storage_base() noexcept : m_has_value(true)
  627|  32.8k|    {
  628|  32.8k|        construct();
  629|  32.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE9constructIJEEEvDpOT_:
  708|  32.8k|    {
  709|  32.8k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  710|  32.8k|        m_has_value = true;
  711|  32.8k|    }
_ZN3scn2v46detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_19datetime_componentsEEEEJEEEPT_SK_DpOT0_:
  410|  32.8k|{
  411|  32.8k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  412|  32.8k|        T(std::forward<Args>(args)...);
  413|  32.8k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJNS0_19datetime_componentsEEEC2Ev:
 6692|  32.8k|    constexpr scan_result() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE9value_ptrEv:
  732|   112k|    {
  733|   112k|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  | 1074|   112k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  734|   112k|    }
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS0_19datetime_componentsEEEESF_TnPNS7_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENS7_7is_sameINSL_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISL_EEONSX_ISR_EE:
 9833|  32.8k|{
 9834|  32.8k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  | 1039|  32.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 25.7k, False: 7.13k]
  |  |  ------------------
  ------------------
 9835|  25.7k|        out = unexpected(in.error());
 9836|  25.7k|    }
 9837|  7.13k|    else {
 9838|  7.13k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1108|  7.13k|    static_cast<    \
  |  | 1109|  7.13k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9839|  7.13k|    }
 9840|  32.8k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEEC2ISI_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISI_OT_EEvE4typeELPv0ETnPNSL_IXsr3stdE16is_convertible_vISN_SI_EEvE4typeELSR_0EEEONS0_10unexpectedISM_EE:
 1629|  25.7k|        : base(unexpect, std::move(e.error())),
 1630|  25.7k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  25.7k|    {
 1632|  25.7k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  651|  25.7k|        : m_has_value(false)
  652|  25.7k|    {
  653|  25.7k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  654|  25.7k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS8_10in_place_tESJ_EEEvDpOT_:
  715|  25.7k|    {
  716|  25.7k|        scn::detail::construct_at(unexpected_ptr(),
  717|  25.7k|                                  std::forward<Args>(args)...);
  718|  25.7k|        m_has_value = false;
  719|  25.7k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  744|   128k|    {
  745|   128k|        return reinterpret_cast<unexpected<E>*>(
  746|   128k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  | 1074|   128k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  747|   128k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  25.7k|    {
 1330|  25.7k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEEaSEOSJ_:
 1570|  25.7k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEvEaSEOSK_:
  916|  25.7k|    {
  917|  25.7k|        assign_common(std::move(other));
  918|  25.7k|        return *this;
  919|  25.7k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEvE13assign_commonISK_EEvOT_:
  963|  25.7k|    {
  964|  25.7k|        if (this->has_value()) {
  ------------------
  |  Branch (964:13): [True: 25.7k, False: 0]
  ------------------
  965|  25.7k|            if (other.has_value()) {
  ------------------
  |  Branch (965:17): [True: 0, False: 25.7k]
  ------------------
  966|      0|                return reassign_value(std::forward<Other>(other));
  967|      0|            }
  968|  25.7k|            return assign_unexpected_over_value(std::forward<Other>(other));
  969|  25.7k|        }
  970|       |
  971|      0|        if (other.has_value()) {
  ------------------
  |  Branch (971:13): [True: 0, False: 0]
  ------------------
  972|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  973|      0|        }
  974|      0|        return reassign_unexpected(std::forward<Other>(other));
  975|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE9has_valueEv:
  701|   189k|    {
  702|   189k|        return m_has_value;
  703|   189k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE9get_valueEv:
  667|  47.1k|    {
  668|  47.1k|        return *value_ptr();
  669|  47.1k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEvE28assign_unexpected_over_valueISK_EEvOT_:
 1059|  25.7k|    {
 1060|  25.7k|        this->destroy_value();
 1061|  25.7k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1062|  25.7k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  722|  32.8k|    {
  723|  32.8k|        scn::detail::destroy_at(value_ptr());
  724|  32.8k|    }
_ZN3scn2v46detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_19datetime_componentsEEEEEEvPT_:
  416|  32.8k|{
  417|       |    if constexpr (std::is_array_v<T>) {
  418|       |        for (auto& elem : *p) {
  419|       |            scn::detail::destroy_at(&elem);
  420|       |        }
  421|       |    }
  422|  32.8k|    else {
  423|  32.8k|        p->~T();
  424|  32.8k|    }
  425|  32.8k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJNS0_19datetime_componentsEEED2Ev:
 6699|  32.8k|    ~scan_result() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE20construct_unexpectedIJNS0_10unexpectedISJ_EEEEEvDpOT_:
  715|  25.7k|    {
  716|  25.7k|        scn::detail::construct_at(unexpected_ptr(),
  717|  25.7k|                                  std::forward<Args>(args)...);
  718|  25.7k|        m_has_value = false;
  719|  25.7k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE14get_unexpectedEv:
  692|  25.7k|    {
  693|  25.7k|        return std::move(*unexpected_ptr());
  694|  25.7k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  726|  51.4k|    {
  727|  51.4k|        scn::detail::destroy_at(unexpected_ptr());
  728|  51.4k|    }
_ZNK3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJNS0_19datetime_componentsEEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
 8854|  31.1k|    {
 8855|  31.1k|        return m_str;
 8856|  31.1k|    }
_ZN3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJNS0_19datetime_componentsEEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8849|  31.1k|        : m_str(r.str)
 8850|  31.1k|    {
 8851|  31.1k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEEcvbEv:
 1753|  32.8k|    {
 1754|  32.8k|        return has_value();
 1755|  32.8k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEEptEv:
 1828|  47.1k|    {
 1829|  47.1k|        return &value();
 1830|  47.1k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS0_19datetime_componentsEEEENS0_10scan_errorEE5valueISH_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSM_v:
 1782|  47.1k|    {
 1783|  47.1k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|  47.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  47.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|  47.1k|        return this->get_value();
 1785|  47.1k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS0_19datetime_componentsEEEENS0_10scan_errorELb0EED2Ev:
  657|  58.5k|    {
  658|  58.5k|        if (has_value()) {
  ------------------
  |  Branch (658:13): [True: 7.13k, False: 51.4k]
  ------------------
  659|  7.13k|            destroy_value();
  660|  7.13k|        }
  661|  51.4k|        else {
  662|  51.4k|            destroy_unexpected();
  663|  51.4k|        }
  664|  58.5k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEE5beginEv:
 3493|  1.27M|    {
 3494|  1.27M|        return m_iterator;
 3495|  1.27M|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEE5beginEv:
 3493|  1.08M|    {
 3494|  1.08M|        return m_iterator;
 3495|  1.08M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iterator13stores_parentEv:
 4490|  12.0M|    {
 4491|  12.0M|        assert(m_begin);
 4492|  12.0M|        return m_end == nullptr;
 4493|  12.0M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iterator18contiguous_segmentEv:
 4507|   172k|    {
 4508|   172k|        if (!stores_parent()) {
  ------------------
  |  Branch (4508:13): [True: 79.1k, False: 93.5k]
  ------------------
 4509|  79.1k|            return make_string_view_from_pointers(
 4510|  79.1k|                static_cast<const CharT*>(m_begin) + position(),
 4511|  79.1k|                static_cast<const CharT*>(m_end));
 4512|  79.1k|        }
 4513|  93.5k|        return parent()->get_segment_starting_at(position());
 4514|   172k|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iterator6parentEv:
 4501|  6.97M|    {
 4502|  6.97M|        SCN_EXPECT(stores_parent());
  ------------------
  |  | 1104|  6.97M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  6.97M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4503|  6.97M|        return static_cast<const basic_scan_buffer<CharT>*>(m_begin);
 4504|  6.97M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE23get_segment_starting_atEl:
 4394|  93.5k|    {
 4395|  93.5k|        if (SCN_UNLIKELY(
  ------------------
  |  | 1039|  93.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 93.5k]
  |  |  ------------------
  ------------------
 4396|  93.5k|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4397|      0|            return std::basic_string_view<CharT>(m_putback_buffer).substr(pos);
 4398|      0|        }
 4399|  93.5k|        const auto start = pos - m_putback_buffer.size();
 4400|  93.5k|        SCN_EXPECT(start <= m_current_view.size());
  ------------------
  |  | 1104|  93.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  93.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4401|  93.5k|        return m_current_view.substr(start);
 4402|  93.5k|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iterator8positionEv:
 4485|   258k|    {
 4486|   258k|        return m_position;
 4487|   258k|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE13is_contiguousEv:
 4416|   367k|    {
 4417|   367k|        return m_is_contiguous;
 4418|   367k|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iterator13stores_parentEv:
 4490|  6.50M|    {
 4491|  6.50M|        assert(m_begin);
 4492|  6.50M|        return m_end == nullptr;
 4493|  6.50M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iterator18contiguous_segmentEv:
 4507|  93.3k|    {
 4508|  93.3k|        if (!stores_parent()) {
  ------------------
  |  Branch (4508:13): [True: 93.3k, False: 0]
  ------------------
 4509|  93.3k|            return make_string_view_from_pointers(
 4510|  93.3k|                static_cast<const CharT*>(m_begin) + position(),
 4511|  93.3k|                static_cast<const CharT*>(m_end));
 4512|  93.3k|        }
 4513|      0|        return parent()->get_segment_starting_at(position());
 4514|  93.3k|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iterator6parentEv:
 4501|  3.60M|    {
 4502|  3.60M|        SCN_EXPECT(stores_parent());
  ------------------
  |  | 1104|  3.60M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  3.60M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4503|  3.60M|        return static_cast<const basic_scan_buffer<CharT>*>(m_begin);
 4504|  3.60M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iterator8positionEv:
 4485|   136k|    {
 4486|   136k|        return m_position;
 4487|   136k|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE13is_contiguousEv:
 4416|   388k|    {
 4417|   388k|        return m_is_contiguous;
 4418|   388k|    }
_ZN3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE7derivedEv:
 3347|   239k|    {
 3348|   239k|        return static_cast<D&>(*this);
 3349|   239k|    }
_ZN3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE4dataIS8_vEEDav:
 3388|   239k|    {
 3389|   239k|        return detail::to_address(ranges::begin(derived()));
 3390|   239k|    }
_ZN3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE7derivedEv:
 3347|   191k|    {
 3348|   191k|        return static_cast<D&>(*this);
 3349|   191k|    }
_ZN3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE4dataIS8_vEEDav:
 3388|   191k|    {
 3389|   191k|        return detail::to_address(ranges::begin(derived()));
 3390|   191k|    }
_ZNK3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEcE5rangeEv:
 9051|   185k|    {
 9052|   185k|        return ranges::subrange{begin(), end()};
 9053|   185k|    }
_ZNK3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEcE3endEv:
 9043|   185k|    {
 9044|   185k|        return ranges::default_sentinel;
 9045|   185k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEC2IS8_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S8_EEvE4typeELPv0EEESE_S9_:
 3478|   684k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1108|   684k|    static_cast<    \
  |  | 1109|   684k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1108|   684k|    static_cast<    \
  |  | 1109|   684k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3479|   684k|    {
 3480|   684k|    }
_ZN3scn2v46detail10locale_refC2Ev:
 8870|   195k|    constexpr locale_ref() = default;
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1992|  93.5k|    {
 1993|  93.5k|        return detail::transform_error_impl(std::move(*this),
 1994|  93.5k|                                            std::forward<F>(f));
 1995|  93.5k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEERFNS0_10scan_errorES8_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSF_OT0_:
 1475|  93.5k|{
 1476|       |    if constexpr (std::is_void_v<Ret>) {
 1477|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1478|       |        if (SCN_LIKELY(exp.has_value())) {
 1479|       |            return result(*std::forward<Exp>(exp));
 1480|       |        }
 1481|       |
 1482|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1483|       |        return result(unexpect, monostate{});
 1484|       |    }
 1485|  93.5k|    else {
 1486|  93.5k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1487|  93.5k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  | 1038|  93.5k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 92.1k, False: 1.44k]
  |  |  ------------------
  ------------------
 1488|  93.5k|                   ? result(*std::forward<Exp>(exp))
 1489|  93.5k|                   : result(unexpect,
 1490|  1.44k|                            trivial_invoke(std::forward<F>(f),
 1491|  1.44k|                                           std::forward<Exp>(exp).error()));
 1492|  93.5k|    }
 1493|  93.5k|}
_ZNK3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE9has_valueEv:
  504|   187k|    {
  505|   187k|        return m_has_value;
  506|   187k|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1818|  92.1k|    {
 1819|  92.1k|        return std::move(value());
 1820|  92.1k|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1782|  92.1k|    {
 1783|  92.1k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|  92.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  92.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|  92.1k|        return this->get_value();
 1785|  92.1k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE9get_valueEv:
  470|  92.1k|    {
  471|  92.1k|        return m_value;
  472|  92.1k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IS5_vEEOT_:
 1583|   250k|        : base(std::in_place, std::forward<U>(val)),
 1584|   250k|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|   250k|    {
 1586|   250k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  455|   250k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|   250k|    {
  457|   250k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|   441k|    {
 1330|   441k|    }
_ZN3scn2v46detail14trivial_invokeIRFNS0_10scan_errorENS0_4impl9eof_errorEEJS5_EvEEDcOT_DpOT0_:
 1363|  4.35k|{
 1364|  4.35k|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1365|  4.35k|}
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1769|  1.44k|    {
 1770|  1.44k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1104|  1.44k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  1.44k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1771|  1.44k|        return std::move(this->get_unexpected().error());
 1772|  1.44k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  487|  1.44k|    {
  488|  1.44k|        return m_unexpected;
  489|  1.44k|    }
_ZNR3scn2v410unexpectedINS0_4impl9eof_errorEE5errorEv:
  379|  8.71k|    {
  380|  8.71k|        return m_unexpected;
  381|  8.71k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
 1639|  1.44k|        : base(unexpect, std::forward<Args>(args)...),
 1640|  1.44k|          ctor_base(detail::non_default_ctor_tag_t{})
 1641|  1.44k|    {
 1642|  1.44k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  464|   147k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|   147k|          m_has_value(false)
  466|   147k|    {
  467|   147k|    }
_ZNK3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEwE5rangeEv:
 9051|   185k|    {
 9052|   185k|        return ranges::subrange{begin(), end()};
 9053|   185k|    }
_ZNK3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEwE3endEv:
 9043|   185k|    {
 9044|   185k|        return ranges::default_sentinel;
 9045|   185k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEEC2IS8_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S8_EEvE4typeELPv0EEESE_S9_:
 3478|   644k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1108|   644k|    static_cast<    \
  |  | 1109|   644k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1108|   644k|    static_cast<    \
  |  | 1109|   644k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3479|   644k|    {
 3480|   644k|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1992|  93.3k|    {
 1993|  93.3k|        return detail::transform_error_impl(std::move(*this),
 1994|  93.3k|                                            std::forward<F>(f));
 1995|  93.3k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEERFNS0_10scan_errorES8_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSF_OT0_:
 1475|  93.3k|{
 1476|       |    if constexpr (std::is_void_v<Ret>) {
 1477|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1478|       |        if (SCN_LIKELY(exp.has_value())) {
 1479|       |            return result(*std::forward<Exp>(exp));
 1480|       |        }
 1481|       |
 1482|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1483|       |        return result(unexpect, monostate{});
 1484|       |    }
 1485|  93.3k|    else {
 1486|  93.3k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1487|  93.3k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  | 1038|  93.3k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 92.2k, False: 1.08k]
  |  |  ------------------
  ------------------
 1488|  93.3k|                   ? result(*std::forward<Exp>(exp))
 1489|  93.3k|                   : result(unexpect,
 1490|  1.08k|                            trivial_invoke(std::forward<F>(f),
 1491|  1.08k|                                           std::forward<Exp>(exp).error()));
 1492|  93.3k|    }
 1493|  93.3k|}
_ZNK3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE9has_valueEv:
  504|   186k|    {
  505|   186k|        return m_has_value;
  506|   186k|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1818|  92.2k|    {
 1819|  92.2k|        return std::move(value());
 1820|  92.2k|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1782|  92.2k|    {
 1783|  92.2k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|  92.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  92.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|  92.2k|        return this->get_value();
 1785|  92.2k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE9get_valueEv:
  470|  92.2k|    {
  471|  92.2k|        return m_value;
  472|  92.2k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IS5_vEEOT_:
 1583|   156k|        : base(std::in_place, std::forward<U>(val)),
 1584|   156k|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|   156k|    {
 1586|   156k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  455|   156k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|   156k|    {
  457|   156k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|   472k|    {
 1330|   472k|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1769|  1.08k|    {
 1770|  1.08k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1104|  1.08k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  1.08k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1771|  1.08k|        return std::move(this->get_unexpected().error());
 1772|  1.08k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  487|  1.08k|    {
  488|  1.08k|        return m_unexpected;
  489|  1.08k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
 1639|  1.08k|        : base(unexpect, std::forward<Args>(args)...),
 1640|  1.08k|          ctor_base(detail::non_default_ctor_tag_t{})
 1641|  1.08k|    {
 1642|  1.08k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  464|   294k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|   294k|          m_has_value(false)
  466|   294k|    {
  467|   294k|    }
_ZN3scn2v48expectedIlNS0_10scan_errorEEC2IS2_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS2_OT_EEvE4typeELPv0ETnPNS6_IXsr3stdE16is_convertible_vIS8_S2_EEvE4typeELSC_0EEEONS0_10unexpectedIS7_EE:
 1629|   231k|        : base(unexpect, std::move(e.error())),
 1630|   231k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|   231k|    {
 1632|   231k|    }
_ZN3scn2v46detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJS3_EvEENS0_10unexpect_tEDpOT_:
  464|   231k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|   231k|          m_has_value(false)
  466|   231k|    {
  467|   231k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIlNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|   374k|    {
 1330|   374k|    }
_ZN3scn2v48expectedIPKcNS0_10scan_errorEEC2IS4_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS4_OT_EEvE4typeELPv0ETnPNS8_IXsr3stdE16is_convertible_vISA_S4_EEvE4typeELSE_0EEEONS0_10unexpectedIS9_EE:
 1629|  38.5k|        : base(unexpect, std::move(e.error())),
 1630|  38.5k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  38.5k|    {
 1632|  38.5k|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  464|  39.3k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|  39.3k|          m_has_value(false)
  466|  39.3k|    {
  467|  39.3k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIPKcNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|   160k|    {
 1330|   160k|    }
_ZN3scn2v48expectedIPKcNS0_10scan_errorEEC2IS3_vEEOT_:
 1583|   121k|        : base(std::in_place, std::forward<U>(val)),
 1584|   121k|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|   121k|    {
 1586|   121k|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  455|   121k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|   121k|    {
  457|   121k|    }
_ZNK3scn2v48expectedIPKcNS0_10scan_errorEEcvbEv:
 1753|   160k|    {
 1754|   160k|        return has_value();
 1755|   160k|    }
_ZNK3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9has_valueEv:
  504|   321k|    {
  505|   321k|        return m_has_value;
  506|   321k|    }
_ZNR3scn2v48expectedIPKcNS0_10scan_errorEE5errorEv:
 1759|  39.3k|    {
 1760|  39.3k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1104|  39.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  39.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1761|  39.3k|        return this->get_unexpected().error();
 1762|  39.3k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE14get_unexpectedEv:
  487|  39.3k|    {
  488|  39.3k|        return m_unexpected;
  489|  39.3k|    }
_ZNO3scn2v48expectedIPKcNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOS9_v:
 1818|   121k|    {
 1819|   121k|        return std::move(value());
 1820|   121k|    }
_ZNR3scn2v48expectedIPKcNS0_10scan_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1782|   121k|    {
 1783|   121k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|   121k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   121k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|   121k|        return this->get_value();
 1785|   121k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9get_valueEv:
  470|   121k|    {
  471|   121k|        return m_value;
  472|   121k|    }
_ZN3scn2v48expectedIPKwNS0_10scan_errorEEC2IS4_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS4_OT_EEvE4typeELPv0ETnPNS8_IXsr3stdE16is_convertible_vISA_S4_EEvE4typeELSE_0EEEONS0_10unexpectedIS9_EE:
 1629|  77.1k|        : base(unexpect, std::move(e.error())),
 1630|  77.1k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  77.1k|    {
 1632|  77.1k|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  464|  78.2k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|  78.2k|          m_has_value(false)
  466|  78.2k|    {
  467|  78.2k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIPKwNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|   191k|    {
 1330|   191k|    }
_ZN3scn2v48expectedIPKwNS0_10scan_errorEEC2IS3_vEEOT_:
 1583|   113k|        : base(std::in_place, std::forward<U>(val)),
 1584|   113k|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|   113k|    {
 1586|   113k|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  455|   113k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|   113k|    {
  457|   113k|    }
_ZNK3scn2v48expectedIPKwNS0_10scan_errorEEcvbEv:
 1753|   191k|    {
 1754|   191k|        return has_value();
 1755|   191k|    }
_ZNK3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9has_valueEv:
  504|   383k|    {
  505|   383k|        return m_has_value;
  506|   383k|    }
_ZNR3scn2v48expectedIPKwNS0_10scan_errorEE5errorEv:
 1759|  78.2k|    {
 1760|  78.2k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1104|  78.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  78.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1761|  78.2k|        return this->get_unexpected().error();
 1762|  78.2k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE14get_unexpectedEv:
  487|  78.2k|    {
  488|  78.2k|        return m_unexpected;
  489|  78.2k|    }
_ZNO3scn2v48expectedIPKwNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOS9_v:
 1818|   113k|    {
 1819|   113k|        return std::move(value());
 1820|   113k|    }
_ZNR3scn2v48expectedIPKwNS0_10scan_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1782|   113k|    {
 1783|   113k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|   113k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   113k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|   113k|        return this->get_value();
 1785|   113k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9get_valueEv:
  470|   113k|    {
  471|   113k|        return m_value;
  472|   113k|    }
_ZNO3scn2v48expectedIPKcNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1992|  79.1k|    {
 1993|  79.1k|        return detail::transform_error_impl(std::move(*this),
 1994|  79.1k|                                            std::forward<F>(f));
 1995|  79.1k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedIPKcNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ES9_EEDaOSE_OT0_:
 1475|  79.1k|{
 1476|       |    if constexpr (std::is_void_v<Ret>) {
 1477|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1478|       |        if (SCN_LIKELY(exp.has_value())) {
 1479|       |            return result(*std::forward<Exp>(exp));
 1480|       |        }
 1481|       |
 1482|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1483|       |        return result(unexpect, monostate{});
 1484|       |    }
 1485|  79.1k|    else {
 1486|  79.1k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1487|  79.1k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  | 1038|  79.1k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 78.3k, False: 738]
  |  |  ------------------
  ------------------
 1488|  79.1k|                   ? result(*std::forward<Exp>(exp))
 1489|  79.1k|                   : result(unexpect,
 1490|    738|                            trivial_invoke(std::forward<F>(f),
 1491|    738|                                           std::forward<Exp>(exp).error()));
 1492|  79.1k|    }
 1493|  79.1k|}
_ZNK3scn2v46detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9has_valueEv:
  504|   158k|    {
  505|   158k|        return m_has_value;
  506|   158k|    }
_ZNO3scn2v48expectedIPKcNS0_4impl9eof_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSA_v:
 1818|  78.3k|    {
 1819|  78.3k|        return std::move(value());
 1820|  78.3k|    }
_ZNR3scn2v48expectedIPKcNS0_4impl9eof_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1782|  78.3k|    {
 1783|  78.3k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|  78.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  78.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|  78.3k|        return this->get_value();
 1785|  78.3k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9get_valueEv:
  470|  78.3k|    {
  471|  78.3k|        return m_value;
  472|  78.3k|    }
_ZNO3scn2v48expectedIPKcNS0_4impl9eof_errorEE5errorEv:
 1769|    738|    {
 1770|    738|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1104|    738|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|    738|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1771|    738|        return std::move(this->get_unexpected().error());
 1772|    738|    }
_ZNR3scn2v46detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  487|    738|    {
  488|    738|        return m_unexpected;
  489|    738|    }
_ZN3scn2v48expectedIPKcNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1639|    738|        : base(unexpect, std::forward<Args>(args)...),
 1640|    738|          ctor_base(detail::non_default_ctor_tag_t{})
 1641|    738|    {
 1642|    738|    }
_ZNK3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEcE5beginEv:
 9035|   732k|    {
 9036|   732k|        return m_current;
 9037|   732k|    }
_ZNK3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEE4argsEv:
 8923|   158k|    {
 8924|   158k|        return m_args;
 8925|   158k|    }
_ZNK3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEE6localeEv:
 8928|   328k|    {
 8929|   328k|        return m_locale;
 8930|   328k|    }
_ZN3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEC2ES7_NS1_10locale_refE:
 8934|   336k|        : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  | 1108|   336k|    static_cast<    \
  |  | 1109|   336k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  | 1108|   336k|    static_cast<    \
  |  | 1109|   336k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8935|   336k|    {
 8936|   336k|    }
_ZNK3scn2v46ranges6detail5data_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 3013|   158k|    {
 3014|   158k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  | 1110|   158k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3015|   158k|    }
_ZN3scn2v46ranges6detail5data_2fn4implINSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEPKcEENS6_9enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2994|   158k|    {
 2995|   158k|        return t.data();
 2996|   158k|    }
_ZNK3scn2v46ranges6detail5size_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSC_:
 3088|  79.1k|    {
 3089|  79.1k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3090|  79.1k|    }
_ZN3scn2v46ranges6detail5size_2fn4implIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEmEENS6_9enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESD_E4typeEOSE_NS0_6detail12priority_tagILm2EEE:
 3054|  79.1k|    {
 3055|  79.1k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  | 1110|  79.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3056|  79.1k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IS6_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS6_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S6_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1629|   146k|        : base(unexpect, std::move(e.error())),
 1630|   146k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|   146k|    {
 1632|   146k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IRS5_vEEOT_:
 1583|  43.1k|        : base(std::in_place, std::forward<U>(val)),
 1584|  43.1k|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|  43.1k|    {
 1586|  43.1k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJRS5_EvEENSt3__110in_place_tEDpOT_:
  455|  43.1k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|  43.1k|    {
  457|  43.1k|    }
_ZNK3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEwE5beginEv:
 9035|   644k|    {
 9036|   644k|        return m_current;
 9037|   644k|    }
_ZNK3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEE4argsEv:
 8923|   186k|    {
 8924|   186k|        return m_args;
 8925|   186k|    }
_ZNK3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEE6localeEv:
 8928|   371k|    {
 8929|   371k|        return m_locale;
 8930|   371k|    }
_ZN3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEC2ES7_NS1_10locale_refE:
 8934|   383k|        : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  | 1108|   383k|    static_cast<    \
  |  | 1109|   383k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  | 1108|   383k|    static_cast<    \
  |  | 1109|   383k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8935|   383k|    {
 8936|   383k|    }
_ZNK3scn2v46ranges6detail5data_2fnclIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 3013|   186k|    {
 3014|   186k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  | 1110|   186k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3015|   186k|    }
_ZN3scn2v46ranges6detail5data_2fn4implINSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEPKwEENS6_9enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2994|   186k|    {
 2995|   186k|        return t.data();
 2996|   186k|    }
_ZNK3scn2v46ranges6detail5size_2fnclIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSC_:
 3088|  93.3k|    {
 3089|  93.3k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3090|  93.3k|    }
_ZN3scn2v46ranges6detail5size_2fn4implIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEmEENS6_9enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESD_E4typeEOSE_NS0_6detail12priority_tagILm2EEE:
 3054|  93.3k|    {
 3055|  93.3k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  | 1110|  93.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3056|  93.3k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IS6_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS6_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S6_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1629|   293k|        : base(unexpect, std::move(e.error())),
 1630|   293k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|   293k|    {
 1632|   293k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IRS5_vEEOT_:
 1583|  21.3k|        : base(std::in_place, std::forward<U>(val)),
 1584|  21.3k|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|  21.3k|    {
 1586|  21.3k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2IJRS5_EvEENSt3__110in_place_tEDpOT_:
  455|  21.3k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|  21.3k|    {
  457|  21.3k|    }
_ZN3scn2v46detaileqERKNS1_17basic_scan_bufferIcE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4576|   521k|    {
 4577|   521k|        return x.is_at_end();
 4578|   521k|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iterator9is_at_endEv:
 4620|  1.25M|    {
 4621|  1.25M|        if (m_end) {
  ------------------
  |  Branch (4621:13): [True: 0, False: 1.25M]
  ------------------
 4622|      0|            return (static_cast<const CharT*>(m_begin) + position()) == m_end;
 4623|      0|        }
 4624|  1.25M|        if (!m_begin) {
  ------------------
  |  Branch (4624:13): [True: 0, False: 1.25M]
  ------------------
 4625|      0|            return true;
 4626|      0|        }
 4627|  1.25M|        return !read_at_position();
 4628|  1.25M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iterator16read_at_positionEv:
 4600|  3.60M|    {
 4601|  3.60M|        SCN_EXPECT(m_begin);
  ------------------
  |  | 1104|  3.60M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  3.60M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4602|       |
 4603|  3.60M|        if (!stores_parent()) {
  ------------------
  |  Branch (4603:13): [True: 0, False: 3.60M]
  ------------------
 4604|      0|            return true;
 4605|      0|        }
 4606|       |
 4607|  3.60M|        if (SCN_LIKELY(m_position < parent()->chars_available())) {
  ------------------
  |  | 1038|  3.60M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 2.88M, False: 721k]
  |  |  ------------------
  ------------------
 4608|  2.88M|            return true;
 4609|  2.88M|        }
 4610|       |
 4611|  1.42M|        while (m_position >= parent()->chars_available()) {
  ------------------
  |  Branch (4611:16): [True: 721k, False: 706k]
  ------------------
 4612|   721k|            if (!const_cast<basic_scan_buffer<CharT>*>(parent())->fill()) {
  ------------------
  |  Branch (4612:17): [True: 14.7k, False: 706k]
  ------------------
 4613|  14.7k|                return false;
 4614|  14.7k|            }
 4615|   721k|        }
 4616|   706k|        return true;
 4617|   721k|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iteratordeEv:
 4535|  1.12M|    {
 4536|  1.12M|        SCN_EXPECT(m_begin);
  ------------------
  |  | 1104|  1.12M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  1.12M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4537|       |
 4538|  1.12M|        if (!stores_parent()) {
  ------------------
  |  Branch (4538:13): [True: 0, False: 1.12M]
  ------------------
 4539|      0|            auto ptr = static_cast<const CharT*>(m_begin) + position();
 4540|      0|            SCN_EXPECT(ptr != m_end);
  ------------------
  |  | 1104|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4541|      0|            return *ptr;
 4542|      0|        }
 4543|       |
 4544|  1.12M|        auto res = read_at_position();
 4545|  1.12M|        SCN_EXPECT(res);
  ------------------
  |  | 1104|  1.12M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  1.12M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4546|  1.12M|        return parent()->get_character_at(m_position);
 4547|  1.12M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16get_character_atEl:
 4405|  1.12M|    {
 4406|  1.12M|        if (SCN_UNLIKELY(
  ------------------
  |  | 1039|  1.12M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 377k, False: 752k]
  |  |  ------------------
  ------------------
 4407|  1.12M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4408|   377k|            return m_putback_buffer[pos];
 4409|   377k|        }
 4410|   752k|        const auto start = pos - m_putback_buffer.size();
 4411|   752k|        SCN_EXPECT(start < m_current_view.size());
  ------------------
  |  | 1104|   752k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   752k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4412|   752k|        return m_current_view[start];
 4413|   752k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEC2IS5_vEEOT_:
 1583|  92.1k|        : base(std::in_place, std::forward<U>(val)),
 1584|  92.1k|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|  92.1k|    {
 1586|  92.1k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  455|  92.1k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|  92.1k|    {
  457|  92.1k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  93.5k|    {
 1330|  93.5k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEC2IS7_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSB_IXsr3stdE16is_convertible_vISD_S7_EEvE4typeELSH_0EEEONS0_10unexpectedISC_EE:
 1629|  1.44k|        : base(unexpect, std::move(e.error())),
 1630|  1.44k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  1.44k|    {
 1632|  1.44k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  464|  1.44k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|  1.44k|          m_has_value(false)
  466|  1.44k|    {
  467|  1.44k|    }
_ZN3scn2v410unexpectedINS0_4impl9eof_errorEEC2IJS3_EvEENSt3__110in_place_tEDpOT_:
  373|  4.35k|        : m_unexpected(std::forward<Args>(args)...)
  374|  4.35k|    {
  375|  4.35k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  | 1089|  4.35k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  376|  4.35k|    }
_ZN3scn2v46detail17basic_scan_bufferIcE16forward_iteratorppEv:
 4521|  1.22M|    {
 4522|  1.22M|        ++m_position;
 4523|  1.22M|        (void)read_at_position();
 4524|  1.22M|        return *this;
 4525|  1.22M|    }
_ZN3scn2v46detailneERKNS1_17basic_scan_bufferIcE16forward_iteratorES6_:
 4570|   541k|    {
 4571|   541k|        return !(lhs == rhs);
 4572|   541k|    }
_ZN3scn2v46detaileqERKNS1_17basic_scan_bufferIcE16forward_iteratorES6_:
 4565|   541k|    {
 4566|   541k|        return lhs.m_begin == rhs.m_begin && lhs.m_position == rhs.m_position;
  ------------------
  |  Branch (4566:16): [True: 541k, False: 0]
  |  Branch (4566:46): [True: 66.9k, False: 474k]
  ------------------
 4567|   541k|    }
_ZN3scn2v410unexpectedINS0_4impl9eof_errorEEC2IRS3_vEEOT_:
  364|  4.35k|        : m_unexpected(std::forward<Err>(e))
  365|  4.35k|    {
  366|  4.35k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  | 1089|  4.35k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  367|  4.35k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEE3endEv:
 3497|  1.56M|    {
 3498|  1.56M|        return m_sentinel;
 3499|  1.56M|    }
_ZN3scn2v46detailneERKNS1_17basic_scan_bufferIcE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4587|   729k|    {
 4588|   729k|        return !x.is_at_end();
 4589|   729k|    }
_ZN3scn2v48expectedIPKcNS0_4impl9eof_errorEEC2IS5_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNS9_IXsr3stdE16is_convertible_vISB_S5_EEvE4typeELSF_0EEEONS0_10unexpectedISA_EE:
 1629|    738|        : base(unexpect, std::move(e.error())),
 1630|    738|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|    738|    {
 1632|    738|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  464|    738|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|    738|          m_has_value(false)
  466|    738|    {
  467|    738|    }
_ZN3scn2v46detail26expected_default_ctor_baseIPKcNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  79.1k|    {
 1330|  79.1k|    }
_ZN3scn2v48expectedIPKcNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1583|  78.3k|        : base(std::in_place, std::forward<U>(val)),
 1584|  78.3k|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|  78.3k|    {
 1586|  78.3k|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  455|  78.3k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|  78.3k|    {
  457|  78.3k|    }
_ZNK3scn2v46ranges6detail5data_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 3013|   237k|    {
 3014|   237k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  | 1110|   237k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3015|   237k|    }
_ZN3scn2v46ranges6detail5data_2fn4implINS2_9subrange_8subrangeIPKcS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2994|   237k|    {
 2995|   237k|        return t.data();
 2996|   237k|    }
_ZN3scn2v48expectedIlNS0_10scan_errorEEC2IlvEEOT_:
 1583|   143k|        : base(std::in_place, std::forward<U>(val)),
 1584|   143k|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|   143k|    {
 1586|   143k|    }
_ZN3scn2v46detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJlEvEENSt3__110in_place_tEDpOT_:
  455|   143k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|   143k|    {
  457|   143k|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1808|   100k|    {
 1809|   100k|        return value();
 1810|   100k|    }
_ZNK3scn2v46ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS8_12priority_tagILm3EEEEEEOT_:
 2882|  92.1k|    {
 2883|  92.1k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1110|  92.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2884|  92.1k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESI_E4typeEOT_NS8_12priority_tagILm1EEE:
 2863|  92.1k|    {
 2864|  92.1k|        return decay_copy(t.begin());
 2865|  92.1k|    }
_ZN3scn2v46ranges6detail10decay_copyINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEEu7__decayIT_EOS8_:
 2107|  92.1k|{
 2108|  92.1k|    return SCN_FWD(t);
  ------------------
  |  | 1110|  92.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2109|  92.1k|}
_ZN3scn2v413scan_expectedIPKcEC2EONS0_8expectedIS3_NS0_10scan_errorEEE:
 3928|  79.1k|        : expected<T, scan_error>(SCN_MOVE(other))
  ------------------
  |  | 1108|  79.1k|    static_cast<    \
  |  | 1109|  79.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3929|  79.1k|    {
 3930|  79.1k|    }
_ZN3scn2v413scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEC2EONS0_8expectedIS5_NS0_10scan_errorEEE:
 3928|  93.5k|        : expected<T, scan_error>(SCN_MOVE(other))
  ------------------
  |  | 1108|  93.5k|    static_cast<    \
  |  | 1109|  93.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3929|  93.5k|    {
 3930|  93.5k|    }
_ZN3scn2v46detaileqERKNS1_17basic_scan_bufferIwE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4576|   413k|    {
 4577|   413k|        return x.is_at_end();
 4578|   413k|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iterator9is_at_endEv:
 4620|   795k|    {
 4621|   795k|        if (m_end) {
  ------------------
  |  Branch (4621:13): [True: 0, False: 795k]
  ------------------
 4622|      0|            return (static_cast<const CharT*>(m_begin) + position()) == m_end;
 4623|      0|        }
 4624|   795k|        if (!m_begin) {
  ------------------
  |  Branch (4624:13): [True: 0, False: 795k]
  ------------------
 4625|      0|            return true;
 4626|      0|        }
 4627|   795k|        return !read_at_position();
 4628|   795k|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iterator16read_at_positionEv:
 4600|  1.92M|    {
 4601|  1.92M|        SCN_EXPECT(m_begin);
  ------------------
  |  | 1104|  1.92M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  1.92M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4602|       |
 4603|  1.92M|        if (!stores_parent()) {
  ------------------
  |  Branch (4603:13): [True: 0, False: 1.92M]
  ------------------
 4604|      0|            return true;
 4605|      0|        }
 4606|       |
 4607|  1.92M|        if (SCN_LIKELY(m_position < parent()->chars_available())) {
  ------------------
  |  | 1038|  1.92M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 1.59M, False: 332k]
  |  |  ------------------
  ------------------
 4608|  1.59M|            return true;
 4609|  1.59M|        }
 4610|       |
 4611|   646k|        while (m_position >= parent()->chars_available()) {
  ------------------
  |  Branch (4611:16): [True: 332k, False: 313k]
  ------------------
 4612|   332k|            if (!const_cast<basic_scan_buffer<CharT>*>(parent())->fill()) {
  ------------------
  |  Branch (4612:17): [True: 18.5k, False: 313k]
  ------------------
 4613|  18.5k|                return false;
 4614|  18.5k|            }
 4615|   332k|        }
 4616|   313k|        return true;
 4617|   332k|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE15chars_availableEv:
 4374|  2.57M|    {
 4375|  2.57M|        return m_putback_buffer.size() + m_current_view.size();
 4376|  2.57M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iteratordeEv:
 4535|   699k|    {
 4536|   699k|        SCN_EXPECT(m_begin);
  ------------------
  |  | 1104|   699k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   699k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4537|       |
 4538|   699k|        if (!stores_parent()) {
  ------------------
  |  Branch (4538:13): [True: 0, False: 699k]
  ------------------
 4539|      0|            auto ptr = static_cast<const CharT*>(m_begin) + position();
 4540|      0|            SCN_EXPECT(ptr != m_end);
  ------------------
  |  | 1104|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4541|      0|            return *ptr;
 4542|      0|        }
 4543|       |
 4544|   699k|        auto res = read_at_position();
 4545|   699k|        SCN_EXPECT(res);
  ------------------
  |  | 1104|   699k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   699k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4546|   699k|        return parent()->get_character_at(m_position);
 4547|   699k|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16get_character_atEl:
 4405|   699k|    {
 4406|   699k|        if (SCN_UNLIKELY(
  ------------------
  |  | 1039|   699k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 384k, False: 315k]
  |  |  ------------------
  ------------------
 4407|   699k|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4408|   384k|            return m_putback_buffer[pos];
 4409|   384k|        }
 4410|   315k|        const auto start = pos - m_putback_buffer.size();
 4411|   315k|        SCN_EXPECT(start < m_current_view.size());
  ------------------
  |  | 1104|   315k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   315k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4412|   315k|        return m_current_view[start];
 4413|   315k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEC2IS5_vEEOT_:
 1583|  92.2k|        : base(std::in_place, std::forward<U>(val)),
 1584|  92.2k|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|  92.2k|    {
 1586|  92.2k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  455|  92.2k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|  92.2k|    {
  457|  92.2k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  93.3k|    {
 1330|  93.3k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEC2IS7_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSB_IXsr3stdE16is_convertible_vISD_S7_EEvE4typeELSH_0EEEONS0_10unexpectedISC_EE:
 1629|  1.08k|        : base(unexpect, std::move(e.error())),
 1630|  1.08k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  1.08k|    {
 1632|  1.08k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  464|  1.08k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|  1.08k|          m_has_value(false)
  466|  1.08k|    {
  467|  1.08k|    }
_ZN3scn2v46detail17basic_scan_bufferIwE16forward_iteratorppEv:
 4521|   430k|    {
 4522|   430k|        ++m_position;
 4523|   430k|        (void)read_at_position();
 4524|   430k|        return *this;
 4525|   430k|    }
_ZN3scn2v46detailneERKNS1_17basic_scan_bufferIwE16forward_iteratorES6_:
 4570|   148k|    {
 4571|   148k|        return !(lhs == rhs);
 4572|   148k|    }
_ZN3scn2v46detaileqERKNS1_17basic_scan_bufferIwE16forward_iteratorES6_:
 4565|   148k|    {
 4566|   148k|        return lhs.m_begin == rhs.m_begin && lhs.m_position == rhs.m_position;
  ------------------
  |  Branch (4566:16): [True: 148k, False: 0]
  |  Branch (4566:46): [True: 21.3k, False: 127k]
  ------------------
 4567|   148k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEE3endEv:
 3497|  1.06M|    {
 3498|  1.06M|        return m_sentinel;
 3499|  1.06M|    }
_ZN3scn2v46detailneERKNS1_17basic_scan_bufferIwE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4587|   381k|    {
 4588|   381k|        return !x.is_at_end();
 4589|   381k|    }
_ZN3scn2v48expectedIPKwNS0_4impl9eof_errorEEC2IS5_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNS9_IXsr3stdE16is_convertible_vISB_S5_EEvE4typeELSF_0EEEONS0_10unexpectedISA_EE:
 1629|  1.08k|        : base(unexpect, std::move(e.error())),
 1630|  1.08k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  1.08k|    {
 1632|  1.08k|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  464|  1.08k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|  1.08k|          m_has_value(false)
  466|  1.08k|    {
  467|  1.08k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIPKwNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  93.3k|    {
 1330|  93.3k|    }
_ZN3scn2v48expectedIPKwNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1583|  92.2k|        : base(std::in_place, std::forward<U>(val)),
 1584|  92.2k|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|  92.2k|    {
 1586|  92.2k|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  455|  92.2k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|  92.2k|    {
  457|  92.2k|    }
_ZNK3scn2v46detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9has_valueEv:
  504|   186k|    {
  505|   186k|        return m_has_value;
  506|   186k|    }
_ZNR3scn2v48expectedIPKwNS0_4impl9eof_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1782|  92.2k|    {
 1783|  92.2k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|  92.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  92.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|  92.2k|        return this->get_value();
 1785|  92.2k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9get_valueEv:
  470|  92.2k|    {
  471|  92.2k|        return m_value;
  472|  92.2k|    }
_ZNO3scn2v48expectedIPKwNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1992|  93.3k|    {
 1993|  93.3k|        return detail::transform_error_impl(std::move(*this),
 1994|  93.3k|                                            std::forward<F>(f));
 1995|  93.3k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedIPKwNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ES9_EEDaOSE_OT0_:
 1475|  93.3k|{
 1476|       |    if constexpr (std::is_void_v<Ret>) {
 1477|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1478|       |        if (SCN_LIKELY(exp.has_value())) {
 1479|       |            return result(*std::forward<Exp>(exp));
 1480|       |        }
 1481|       |
 1482|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1483|       |        return result(unexpect, monostate{});
 1484|       |    }
 1485|  93.3k|    else {
 1486|  93.3k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1487|  93.3k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  | 1038|  93.3k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 92.2k, False: 1.08k]
  |  |  ------------------
  ------------------
 1488|  93.3k|                   ? result(*std::forward<Exp>(exp))
 1489|  93.3k|                   : result(unexpect,
 1490|  1.08k|                            trivial_invoke(std::forward<F>(f),
 1491|  1.08k|                                           std::forward<Exp>(exp).error()));
 1492|  93.3k|    }
 1493|  93.3k|}
_ZNO3scn2v48expectedIPKwNS0_4impl9eof_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSA_v:
 1818|  92.2k|    {
 1819|  92.2k|        return std::move(value());
 1820|  92.2k|    }
_ZNO3scn2v48expectedIPKwNS0_4impl9eof_errorEE5errorEv:
 1769|  1.08k|    {
 1770|  1.08k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1104|  1.08k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  1.08k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1771|  1.08k|        return std::move(this->get_unexpected().error());
 1772|  1.08k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  487|  1.08k|    {
  488|  1.08k|        return m_unexpected;
  489|  1.08k|    }
_ZN3scn2v48expectedIPKwNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1639|  1.08k|        : base(unexpect, std::forward<Args>(args)...),
 1640|  1.08k|          ctor_base(detail::non_default_ctor_tag_t{})
 1641|  1.08k|    {
 1642|  1.08k|    }
_ZNK3scn2v46ranges6detail5data_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 3013|   186k|    {
 3014|   186k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  | 1110|   186k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3015|   186k|    }
_ZN3scn2v46ranges6detail5data_2fn4implINS2_9subrange_8subrangeIPKwS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2994|   186k|    {
 2995|   186k|        return t.data();
 2996|   186k|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1808|  42.7k|    {
 1809|  42.7k|        return value();
 1810|  42.7k|    }
_ZNK3scn2v46ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS8_12priority_tagILm3EEEEEEOT_:
 2882|  92.2k|    {
 2883|  92.2k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1110|  92.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2884|  92.2k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESI_E4typeEOT_NS8_12priority_tagILm1EEE:
 2863|  92.2k|    {
 2864|  92.2k|        return decay_copy(t.begin());
 2865|  92.2k|    }
_ZN3scn2v46ranges6detail10decay_copyINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEEu7__decayIT_EOS8_:
 2107|  92.2k|{
 2108|  92.2k|    return SCN_FWD(t);
  ------------------
  |  | 1110|  92.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2109|  92.2k|}
_ZN3scn2v413scan_expectedIPKwEC2EONS0_8expectedIS3_NS0_10scan_errorEEE:
 3928|  93.3k|        : expected<T, scan_error>(SCN_MOVE(other))
  ------------------
  |  | 1108|  93.3k|    static_cast<    \
  |  | 1109|  93.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3929|  93.3k|    {
 3930|  93.3k|    }
_ZN3scn2v413scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEC2EONS0_8expectedIS5_NS0_10scan_errorEEE:
 3928|  93.3k|        : expected<T, scan_error>(SCN_MOVE(other))
  ------------------
  |  | 1108|  93.3k|    static_cast<    \
  |  | 1109|  93.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3929|  93.3k|    {
 3930|  93.3k|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE15chars_availableEv:
 4374|  5.03M|    {
 4375|  5.03M|        return m_putback_buffer.size() + m_current_view.size();
 4376|  5.03M|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4sizeEv:
 6262|   172k|    {
 6263|   172k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  | 1039|   172k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 172k]
  |  |  ------------------
  ------------------
 6264|      0|            return max_size();
 6265|      0|        }
 6266|       |
 6267|   172k|        return static_cast<std::size_t>(m_desc &
 6268|   172k|                                        ((1 << detail::packed_arg_bits) - 1));
 6269|   172k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE9is_packedEv:
 6288|   345k|    {
 6289|   345k|        return (m_desc & detail::is_unpacked_bit) == 0;
 6290|   345k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE3getEm:
 6230|   172k|    {
 6231|   172k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  | 1039|   172k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 172k]
  |  |  ------------------
  ------------------
 6232|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  | 1038|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6233|      0|                return m_args[id];
 6234|      0|            }
 6235|      0|            return {};
 6236|      0|        }
 6237|       |
 6238|   172k|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  | 1039|   172k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 172k]
  |  |  ------------------
  ------------------
 6239|      0|            return {};
 6240|      0|        }
 6241|       |
 6242|   172k|        const auto t = type(id);
 6243|   172k|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  | 1039|   172k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 172k]
  |  |  ------------------
  ------------------
 6244|      0|            return {};
 6245|      0|        }
 6246|       |
 6247|   172k|        basic_scan_arg<Context> arg;
 6248|   172k|        arg.m_type = t;
 6249|   172k|        if (is_only_builtin()) {
  ------------------
  |  Branch (6249:13): [True: 0, False: 172k]
  ------------------
 6250|      0|            arg.m_value.ref_value = m_builtin_values[id];
 6251|      0|        }
 6252|   172k|        else {
 6253|   172k|            arg.m_value = m_values[id];
 6254|   172k|        }
 6255|   172k|        return arg;
 6256|   172k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4typeEm:
 6297|   172k|    {
 6298|       |        // First (0th) index is size, types start after that
 6299|   172k|        const auto shift = (index + 1) * detail::packed_arg_bits;
 6300|   172k|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
 6301|   172k|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
 6302|   172k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE15is_only_builtinEv:
 6292|   172k|    {
 6293|   172k|        return (m_desc & detail::has_custom_types_bit) == 0;
 6294|   172k|    }
_ZNK3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEcvbEv:
 6046|   350k|    {
 6047|   350k|        return m_type != detail::arg_type::none_type;
 6048|   350k|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE5visitINS0_4impl18default_arg_readerINS2_INS0_6ranges6detail9subrange_8subrangeIPKcSF_EEcEEEEEEDcOT_:
 9493|  2.57k|{
 9494|  2.57k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  | 1110|  2.57k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9495|  2.57k|}
_ZN3scn2v46detail10visit_implINS0_4impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEENS5_INS1_16buffer_range_tagEcEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 9352|  2.57k|{
 9353|  2.57k|#define SCN_VISIT(Type)                                                \
 9354|  2.57k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9355|  2.57k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9356|  2.57k|    }                                                                  \
 9357|  2.57k|    else {                                                             \
 9358|  2.57k|        return vis(monostate_val);                                     \
 9359|  2.57k|    }
 9360|       |
 9361|  2.57k|    monostate monostate_val{};
 9362|       |
 9363|  2.57k|    switch (get_arg_type(arg)) {
 9364|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9364:9): [True: 0, False: 2.57k]
  ------------------
 9365|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9366|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9366:9): [True: 0, False: 2.57k]
  ------------------
 9367|      0|            SCN_VISIT(short);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9368|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9368:9): [True: 0, False: 2.57k]
  ------------------
 9369|      0|            SCN_VISIT(int);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9370|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9370:9): [True: 0, False: 2.57k]
  ------------------
 9371|      0|            SCN_VISIT(long);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9372|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9372:9): [True: 0, False: 2.57k]
  ------------------
 9373|      0|            SCN_VISIT(long long);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9374|      0|        case detail::arg_type::int128_type:
  ------------------
  |  Branch (9374:9): [True: 0, False: 2.57k]
  ------------------
 9375|      0|#if SCN_HAS_INT128
 9376|      0|            SCN_VISIT(int128)
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9377|       |#else
 9378|       |            return vis(monostate_val);
 9379|       |#endif
 9380|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9380:9): [True: 0, False: 2.57k]
  ------------------
 9381|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9382|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9382:9): [True: 0, False: 2.57k]
  ------------------
 9383|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9384|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9384:9): [True: 0, False: 2.57k]
  ------------------
 9385|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9386|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9386:9): [True: 0, False: 2.57k]
  ------------------
 9387|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9388|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9388:9): [True: 0, False: 2.57k]
  ------------------
 9389|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9390|      0|        case detail::arg_type::uint128_type:
  ------------------
  |  Branch (9390:9): [True: 0, False: 2.57k]
  ------------------
 9391|      0|#if SCN_HAS_INT128
 9392|      0|            SCN_VISIT(uint128)
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9393|       |#else
 9394|       |            return vis(monostate_val);
 9395|       |#endif
 9396|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9396:9): [True: 0, False: 2.57k]
  ------------------
 9397|      0|            SCN_VISIT(void*);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9398|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9398:9): [True: 0, False: 2.57k]
  ------------------
 9399|      0|            SCN_VISIT(bool);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9400|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9400:9): [True: 0, False: 2.57k]
  ------------------
 9401|      0|            SCN_VISIT(char);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9402|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9402:9): [True: 0, False: 2.57k]
  ------------------
 9403|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9404|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9404:9): [True: 0, False: 2.57k]
  ------------------
 9405|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9406|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9406:9): [True: 0, False: 2.57k]
  ------------------
 9407|      0|            SCN_VISIT(float);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9408|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9408:9): [True: 0, False: 2.57k]
  ------------------
 9409|      0|            SCN_VISIT(double);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9410|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9410:9): [True: 0, False: 2.57k]
  ------------------
 9411|      0|            SCN_VISIT(long double);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9412|      0|        case detail::arg_type::float16_type:
  ------------------
  |  Branch (9412:9): [True: 0, False: 2.57k]
  ------------------
 9413|       |#if SCN_HAS_STD_F16
 9414|       |            SCN_VISIT(std::float16_t)
 9415|       |#else
 9416|      0|            return vis(monostate_val);
 9417|      0|#endif
 9418|      0|        case detail::arg_type::float32_type:
  ------------------
  |  Branch (9418:9): [True: 0, False: 2.57k]
  ------------------
 9419|       |#if SCN_HAS_STD_F32
 9420|       |            SCN_VISIT(std::float32_t)
 9421|       |#else
 9422|      0|            return vis(monostate_val);
 9423|      0|#endif
 9424|      0|        case detail::arg_type::float64_type:
  ------------------
  |  Branch (9424:9): [True: 0, False: 2.57k]
  ------------------
 9425|       |#if SCN_HAS_STD_F64
 9426|       |            SCN_VISIT(std::float64_t)
 9427|       |#else
 9428|      0|            return vis(monostate_val);
 9429|      0|#endif
 9430|      0|        case detail::arg_type::float128_type:
  ------------------
  |  Branch (9430:9): [True: 0, False: 2.57k]
  ------------------
 9431|       |#if SCN_HAS_STD_F64
 9432|       |            SCN_VISIT(std::float128_t)
 9433|       |#else
 9434|      0|            return vis(monostate_val);
 9435|      0|#endif
 9436|      0|        case detail::arg_type::bfloat16_type:
  ------------------
  |  Branch (9436:9): [True: 0, False: 2.57k]
  ------------------
 9437|       |#if SCN_HAS_STD_BF16
 9438|       |            SCN_VISIT(std::bfloat16_t)
 9439|       |#else
 9440|      0|            return vis(monostate_val);
 9441|      0|#endif
 9442|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9442:9): [True: 0, False: 2.57k]
  ------------------
 9443|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9444|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9444:9): [True: 0, False: 2.57k]
  ------------------
 9445|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9446|      0|        case detail::arg_type::string_view_type: {
  ------------------
  |  Branch (9446:9): [True: 0, False: 2.57k]
  ------------------
 9447|      0|            if constexpr (std::is_same_v<typename Ctx::char_type, char>) {
 9448|      0|                SCN_VISIT(std::string_view);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9449|       |            }
 9450|       |            else {
 9451|       |                SCN_VISIT(std::wstring_view);
 9452|       |            }
 9453|      0|        }
 9454|       |
 9455|  2.57k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9455:9): [True: 2.57k, False: 0]
  ------------------
 9456|  2.57k|#if !SCN_DISABLE_TYPE_CUSTOM
 9457|  2.57k|            return vis(typename basic_scan_arg<Ctx>::handle(
 9458|  2.57k|                get_arg_value(arg).custom_value));
 9459|       |#else
 9460|       |            return vis(monostate_val);
 9461|       |#endif
 9462|       |
 9463|      0|            SCN_CLANG_PUSH
 9464|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9465|       |
 9466|      0|            SCN_UNLIKELY_ATTR
 9467|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9467:9): [True: 0, False: 2.57k]
  ------------------
 9468|      0|        default: {
  ------------------
  |  Branch (9468:9): [True: 0, False: 2.57k]
  ------------------
 9469|      0|            return vis(monostate_val);
 9470|      0|        }
 9471|       |
 9472|  2.57k|            SCN_CLANG_POP
 9473|  2.57k|    }
 9474|       |
 9475|      0|#undef SCN_VISIT
 9476|       |
 9477|      0|    SCN_ENSURE(false);
  ------------------
  |  | 1105|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1101|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9478|      0|    SCN_UNREACHABLE;
  ------------------
  |  | 1067|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9479|      0|}
_ZN3scn2v46detail12get_arg_typeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEERNS1_8arg_typeERNS0_14basic_scan_argIT_EE:
 6091|   350k|{
 6092|   350k|    return arg.m_type;
 6093|   350k|}
_ZN3scn2v46detail13get_arg_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEERNS1_9arg_valueERNS0_14basic_scan_argIT_EE:
 6103|   177k|{
 6104|   177k|    return arg.m_value;
 6105|   177k|}
_ZN3scn2v424basic_scan_parse_contextIcEC2INS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENS0_15source_tag_typeIT_EENSt3__117basic_string_viewIcNSE_11char_traitsIcEEEEi:
 6361|  2.57k|        : m_format{format},
 6362|  2.57k|          m_next_arg_id{next_arg_id},
 6363|  2.57k|          m_is_contiguous(ranges::range<Source> &&
  ------------------
  |  Branch (6363:27): [Folded - Ignored]
  ------------------
 6364|  2.57k|                          ranges::contiguous_range<Source>),
  ------------------
  |  Branch (6364:27): [Folded - Ignored]
  ------------------
 6365|       |          m_is_borrowed(
 6366|  2.57k|              (ranges::range<Source> && ranges::borrowed_range<Source>) ||
  ------------------
  |  Branch (6366:16): [Folded - Ignored]
  |  Branch (6366:41): [Folded - Ignored]
  ------------------
 6367|  2.57k|              std::is_same_v<detail::remove_cvref_t<Source>, std::FILE*>)
  ------------------
  |  Branch (6367:15): [Folded - Ignored]
  ------------------
 6368|  2.57k|    {
 6369|  2.57k|    }
_ZN3scn2v46detail17basic_scan_bufferIcE16forward_iteratorC2ENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEl:
 4478|  81.6k|        : m_begin(const_cast<CharT*>(view.data())),
 4479|  81.6k|          m_end(const_cast<CharT*>(view.data() + view.size())),
 4480|  81.6k|          m_position(pos)
 4481|  81.6k|    {
 4482|  81.6k|    }
_ZN3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEcEC2ENS2_17basic_scan_bufferIcE16forward_iteratorENS0_15basic_scan_argsIS4_EENS2_10locale_refE:
 9019|   177k|        : base(SCN_MOVE(a), loc), m_current(curr)
  ------------------
  |  | 1108|   177k|    static_cast<    \
  |  | 1109|   177k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9020|   177k|    {
 9021|   177k|    }
_ZNK3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE6handle4scanERNS0_24basic_scan_parse_contextIcEERS5_:
 6024|   177k|        {
 6025|   177k|            return m_custom.scan(m_custom.value, &parse_ctx, &ctx);
 6026|   177k|        }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE6handleC2ENS3_17custom_value_typeE:
 6029|   177k|        explicit handle(detail::custom_value_type custom) : m_custom(custom) {}
_ZN3scn2v46detail17basic_scan_bufferIcE3getEv:
 4708|   175k|{
 4709|   175k|    if (is_contiguous()) {
  ------------------
  |  Branch (4709:9): [True: 79.1k, False: 96.1k]
  ------------------
 4710|  79.1k|        return ranges::subrange{forward_iterator{m_current_view, 0},
 4711|  79.1k|                                ranges::default_sentinel};
 4712|  79.1k|    }
 4713|  96.1k|    return ranges::subrange{forward_iterator{this, 0},
 4714|  96.1k|                            ranges::default_sentinel};
 4715|   175k|}
_ZN3scn2v46detail17basic_scan_bufferIcE16forward_iteratorC2EPS3_l:
 4471|  96.1k|        : m_begin(parent), m_end(nullptr), m_position(pos)
 4472|  96.1k|    {
 4473|  96.1k|        SCN_EXPECT(parent);
  ------------------
  |  | 1104|  96.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  96.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4474|  96.1k|        SCN_EXPECT(!parent->is_contiguous());
  ------------------
  |  | 1104|  96.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  96.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4475|  96.1k|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE5visitINS0_4impl18default_arg_readerIS5_EEEEDcOT_:
 9493|  2.57k|{
 9494|  2.57k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  | 1110|  2.57k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9495|  2.57k|}
_ZN3scn2v46detail10visit_implINS0_4impl18default_arg_readerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEES7_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 9352|  2.57k|{
 9353|  2.57k|#define SCN_VISIT(Type)                                                \
 9354|  2.57k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9355|  2.57k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9356|  2.57k|    }                                                                  \
 9357|  2.57k|    else {                                                             \
 9358|  2.57k|        return vis(monostate_val);                                     \
 9359|  2.57k|    }
 9360|       |
 9361|  2.57k|    monostate monostate_val{};
 9362|       |
 9363|  2.57k|    switch (get_arg_type(arg)) {
 9364|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9364:9): [True: 0, False: 2.57k]
  ------------------
 9365|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9366|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9366:9): [True: 0, False: 2.57k]
  ------------------
 9367|      0|            SCN_VISIT(short);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9368|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9368:9): [True: 0, False: 2.57k]
  ------------------
 9369|      0|            SCN_VISIT(int);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9370|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9370:9): [True: 0, False: 2.57k]
  ------------------
 9371|      0|            SCN_VISIT(long);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9372|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9372:9): [True: 0, False: 2.57k]
  ------------------
 9373|      0|            SCN_VISIT(long long);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9374|      0|        case detail::arg_type::int128_type:
  ------------------
  |  Branch (9374:9): [True: 0, False: 2.57k]
  ------------------
 9375|      0|#if SCN_HAS_INT128
 9376|      0|            SCN_VISIT(int128)
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9377|       |#else
 9378|       |            return vis(monostate_val);
 9379|       |#endif
 9380|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9380:9): [True: 0, False: 2.57k]
  ------------------
 9381|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9382|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9382:9): [True: 0, False: 2.57k]
  ------------------
 9383|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9384|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9384:9): [True: 0, False: 2.57k]
  ------------------
 9385|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9386|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9386:9): [True: 0, False: 2.57k]
  ------------------
 9387|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9388|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9388:9): [True: 0, False: 2.57k]
  ------------------
 9389|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9390|      0|        case detail::arg_type::uint128_type:
  ------------------
  |  Branch (9390:9): [True: 0, False: 2.57k]
  ------------------
 9391|      0|#if SCN_HAS_INT128
 9392|      0|            SCN_VISIT(uint128)
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9393|       |#else
 9394|       |            return vis(monostate_val);
 9395|       |#endif
 9396|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9396:9): [True: 0, False: 2.57k]
  ------------------
 9397|      0|            SCN_VISIT(void*);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9398|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9398:9): [True: 0, False: 2.57k]
  ------------------
 9399|      0|            SCN_VISIT(bool);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9400|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9400:9): [True: 0, False: 2.57k]
  ------------------
 9401|      0|            SCN_VISIT(char);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9402|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9402:9): [True: 0, False: 2.57k]
  ------------------
 9403|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9404|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9404:9): [True: 0, False: 2.57k]
  ------------------
 9405|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9406|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9406:9): [True: 0, False: 2.57k]
  ------------------
 9407|      0|            SCN_VISIT(float);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9408|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9408:9): [True: 0, False: 2.57k]
  ------------------
 9409|      0|            SCN_VISIT(double);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9410|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9410:9): [True: 0, False: 2.57k]
  ------------------
 9411|      0|            SCN_VISIT(long double);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9412|      0|        case detail::arg_type::float16_type:
  ------------------
  |  Branch (9412:9): [True: 0, False: 2.57k]
  ------------------
 9413|       |#if SCN_HAS_STD_F16
 9414|       |            SCN_VISIT(std::float16_t)
 9415|       |#else
 9416|      0|            return vis(monostate_val);
 9417|      0|#endif
 9418|      0|        case detail::arg_type::float32_type:
  ------------------
  |  Branch (9418:9): [True: 0, False: 2.57k]
  ------------------
 9419|       |#if SCN_HAS_STD_F32
 9420|       |            SCN_VISIT(std::float32_t)
 9421|       |#else
 9422|      0|            return vis(monostate_val);
 9423|      0|#endif
 9424|      0|        case detail::arg_type::float64_type:
  ------------------
  |  Branch (9424:9): [True: 0, False: 2.57k]
  ------------------
 9425|       |#if SCN_HAS_STD_F64
 9426|       |            SCN_VISIT(std::float64_t)
 9427|       |#else
 9428|      0|            return vis(monostate_val);
 9429|      0|#endif
 9430|      0|        case detail::arg_type::float128_type:
  ------------------
  |  Branch (9430:9): [True: 0, False: 2.57k]
  ------------------
 9431|       |#if SCN_HAS_STD_F64
 9432|       |            SCN_VISIT(std::float128_t)
 9433|       |#else
 9434|      0|            return vis(monostate_val);
 9435|      0|#endif
 9436|      0|        case detail::arg_type::bfloat16_type:
  ------------------
  |  Branch (9436:9): [True: 0, False: 2.57k]
  ------------------
 9437|       |#if SCN_HAS_STD_BF16
 9438|       |            SCN_VISIT(std::bfloat16_t)
 9439|       |#else
 9440|      0|            return vis(monostate_val);
 9441|      0|#endif
 9442|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9442:9): [True: 0, False: 2.57k]
  ------------------
 9443|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9444|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9444:9): [True: 0, False: 2.57k]
  ------------------
 9445|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9446|      0|        case detail::arg_type::string_view_type: {
  ------------------
  |  Branch (9446:9): [True: 0, False: 2.57k]
  ------------------
 9447|      0|            if constexpr (std::is_same_v<typename Ctx::char_type, char>) {
 9448|      0|                SCN_VISIT(std::string_view);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9449|       |            }
 9450|       |            else {
 9451|       |                SCN_VISIT(std::wstring_view);
 9452|       |            }
 9453|      0|        }
 9454|       |
 9455|  2.57k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9455:9): [True: 2.57k, False: 0]
  ------------------
 9456|  2.57k|#if !SCN_DISABLE_TYPE_CUSTOM
 9457|  2.57k|            return vis(typename basic_scan_arg<Ctx>::handle(
 9458|  2.57k|                get_arg_value(arg).custom_value));
 9459|       |#else
 9460|       |            return vis(monostate_val);
 9461|       |#endif
 9462|       |
 9463|      0|            SCN_CLANG_PUSH
 9464|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9465|       |
 9466|      0|            SCN_UNLIKELY_ATTR
 9467|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9467:9): [True: 0, False: 2.57k]
  ------------------
 9468|      0|        default: {
  ------------------
  |  Branch (9468:9): [True: 0, False: 2.57k]
  ------------------
 9469|      0|            return vis(monostate_val);
 9470|      0|        }
 9471|       |
 9472|  2.57k|            SCN_CLANG_POP
 9473|  2.57k|    }
 9474|       |
 9475|      0|#undef SCN_VISIT
 9476|       |
 9477|      0|    SCN_ENSURE(false);
  ------------------
  |  | 1105|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1101|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9478|      0|    SCN_UNREACHABLE;
  ------------------
  |  | 1067|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9479|      0|}
_ZN3scn2v424basic_scan_parse_contextIcEC2INS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEEENS0_15source_tag_typeIT_EENSt3__117basic_string_viewIcNSH_11char_traitsIcEEEEi:
 6361|  2.57k|        : m_format{format},
 6362|  2.57k|          m_next_arg_id{next_arg_id},
 6363|  2.57k|          m_is_contiguous(ranges::range<Source> &&
  ------------------
  |  Branch (6363:27): [Folded - Ignored]
  ------------------
 6364|  2.57k|                          ranges::contiguous_range<Source>),
  ------------------
  |  Branch (6364:27): [Folded - Ignored]
  ------------------
 6365|       |          m_is_borrowed(
 6366|  2.57k|              (ranges::range<Source> && ranges::borrowed_range<Source>) ||
  ------------------
  |  Branch (6366:16): [Folded - Ignored]
  |  Branch (6366:41): [Folded - Ignored]
  ------------------
 6367|  2.57k|              std::is_same_v<detail::remove_cvref_t<Source>, std::FILE*>)
  ------------------
  |  Branch (6367:15): [Folded - Ignored]
  ------------------
 6368|  2.57k|    {
 6369|  2.57k|    }
_ZN3scn2v424basic_scan_parse_contextIcEC2IONS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENS0_15source_tag_typeIT_EENSt3__117basic_string_viewIcNSF_11char_traitsIcEEEEi:
 6361|  79.1k|        : m_format{format},
 6362|  79.1k|          m_next_arg_id{next_arg_id},
 6363|  79.1k|          m_is_contiguous(ranges::range<Source> &&
  ------------------
  |  Branch (6363:27): [Folded - Ignored]
  ------------------
 6364|  79.1k|                          ranges::contiguous_range<Source>),
  ------------------
  |  Branch (6364:27): [Folded - Ignored]
  ------------------
 6365|       |          m_is_borrowed(
 6366|  79.1k|              (ranges::range<Source> && ranges::borrowed_range<Source>) ||
  ------------------
  |  Branch (6366:16): [Folded - Ignored]
  |  Branch (6366:41): [Folded - Ignored]
  ------------------
 6367|  79.1k|              std::is_same_v<detail::remove_cvref_t<Source>, std::FILE*>)
  ------------------
  |  Branch (6367:15): [Folded - Ignored]
  ------------------
 6368|  79.1k|    {
 6369|  79.1k|    }
_ZNK3scn2v46ranges6detail5size_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSC_:
 3088|  79.1k|    {
 3089|  79.1k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3090|  79.1k|    }
_ZN3scn2v46ranges6detail5size_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESE_E4typeEOSF_NS0_6detail12priority_tagILm2EEE:
 3054|  79.1k|    {
 3055|  79.1k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  | 1110|  79.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3056|  79.1k|    }
impl.cpp:_ZN3scn2v46detail19parse_format_stringILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEENS0_13scan_expectedIvEENSt3__117basic_string_viewIT0_NS9_11char_traitsISB_EEEEOT1_:
 7877|  79.1k|{
 7878|  79.1k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7879|  79.1k|    handler.check_args_exhausted();
 7880|  79.1k|    return handler.get_error();
 7881|  79.1k|}
impl.cpp:_ZN3scn2v46detail24parse_format_string_implILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7842|  79.1k|{
 7843|       |    // TODO: memchr fast path with a larger (> 32) format string
 7844|       |
 7845|  79.1k|    auto begin = format.data();
 7846|  79.1k|    auto it = begin;
 7847|  79.1k|    const auto end = format.data() + format.size();
 7848|       |
 7849|   122k|    while (it != end) {
  ------------------
  |  Branch (7849:12): [True: 79.1k, False: 43.1k]
  ------------------
 7850|  79.1k|        const auto ch = *it++;
 7851|  79.1k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7851:13): [True: 79.1k, False: 0]
  ------------------
 7852|  79.1k|            handler.on_literal_text(begin, it - 1);
 7853|       |
 7854|  79.1k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7855|  79.1k|            if (!handler.get_error()) {
  ------------------
  |  Branch (7855:17): [True: 35.9k, False: 43.1k]
  ------------------
 7856|  35.9k|                return;
 7857|  35.9k|            }
 7858|  79.1k|        }
 7859|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7859:18): [True: 0, False: 0]
  ------------------
 7860|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  Branch (1039:45): [True: 0, False: 0]
  |  |  |  Branch (1039:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7861|      0|                handler.on_error("Unmatched '}' in format string");
 7862|      0|                return;
 7863|      0|            }
 7864|       |
 7865|      0|            handler.on_literal_text(begin, it);
 7866|      0|            begin = ++it;
 7867|      0|        }
 7868|  79.1k|    }
 7869|       |
 7870|  43.1k|    handler.on_literal_text(begin, end);
 7871|  43.1k|}
impl.cpp:_ZN3scn2v46detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_:
 7774|  79.1k|{
 7775|  79.1k|    struct id_adapter {
 7776|  79.1k|        constexpr void operator()()
 7777|  79.1k|        {
 7778|  79.1k|            arg_id = handler.on_arg_id();
 7779|  79.1k|        }
 7780|  79.1k|        constexpr void operator()(std::size_t id)
 7781|  79.1k|        {
 7782|  79.1k|            arg_id = handler.on_arg_id(id);
 7783|  79.1k|        }
 7784|       |
 7785|  79.1k|        constexpr void on_error(const char* msg)
 7786|  79.1k|        {
 7787|  79.1k|            SCN_UNLIKELY_ATTR
 7788|  79.1k|            handler.on_error(msg);
 7789|  79.1k|        }
 7790|       |
 7791|  79.1k|        Handler& handler;
 7792|  79.1k|        std::size_t arg_id;
 7793|  79.1k|    };
 7794|       |
 7795|  79.1k|    ++begin;
 7796|  79.1k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|  79.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 79.1k]
  |  |  ------------------
  ------------------
 7797|      0|        handler.on_error("Unexpected end of replacement field");
 7798|      0|        return begin;
 7799|      0|    }
 7800|       |
 7801|  79.1k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7801:9): [True: 0, False: 79.1k]
  ------------------
 7802|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 7803|      0|    }
 7804|  79.1k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (7804:14): [True: 0, False: 79.1k]
  ------------------
 7805|      0|        handler.on_literal_text(begin, begin + 1);
 7806|      0|    }
 7807|  79.1k|    else {
 7808|  79.1k|        auto adapter = id_adapter{handler, 0};
 7809|  79.1k|        begin = parse_arg_id(begin, end, adapter);
 7810|       |
 7811|  79.1k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|  79.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 79.1k]
  |  |  ------------------
  ------------------
 7812|      0|            handler.on_error("Missing '}' in format string");
 7813|      0|            return begin;
 7814|      0|        }
 7815|       |
 7816|  79.1k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7816:13): [True: 0, False: 79.1k]
  ------------------
 7817|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 7818|      0|        }
 7819|  79.1k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (7819:18): [True: 79.1k, False: 0]
  ------------------
 7820|  79.1k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  | 1039|  79.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 79.1k]
  |  |  ------------------
  ------------------
 7821|      0|                handler.on_error("Unexpected end of replacement field");
 7822|      0|                return begin;
 7823|      0|            }
 7824|  79.1k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 7825|  79.1k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  | 1039|   158k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 79.1k]
  |  |  |  Branch (1039:45): [True: 0, False: 79.1k]
  |  |  |  Branch (1039:45): [True: 0, False: 79.1k]
  |  |  ------------------
  ------------------
 7826|      0|                handler.on_error("Unknown format specifier");
 7827|      0|                return begin;
 7828|      0|            }
 7829|  79.1k|        }
 7830|      0|        else {
 7831|      0|            SCN_UNLIKELY_ATTR
 7832|      0|            handler.on_error("Missing '}' in format string");
 7833|      0|            return begin;
 7834|      0|        }
 7835|  79.1k|    }
 7836|  79.1k|    return begin + 1;
 7837|  79.1k|}
_ZNK3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEE3argEm:
 8918|   172k|    {
 8919|   172k|        return m_args.get(id);
 8920|   172k|    }
_ZN3scn2v424basic_scan_parse_contextIcE11next_arg_idEv:
 6396|   172k|    {
 6397|   172k|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  | 1039|   172k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 172k]
  |  |  ------------------
  ------------------
 6398|      0|            on_error(
 6399|      0|                "Cannot switch from manual to automatic argument indexing");
 6400|      0|            return 0;
 6401|      0|        }
 6402|       |
 6403|   172k|        auto id = static_cast<size_t>(m_next_arg_id++);
 6404|   172k|        do_check_arg_id(id);
 6405|   172k|        return id;
 6406|   172k|    }
_ZN3scn2v424basic_scan_parse_contextIcE15do_check_arg_idEm:
 6890|   172k|{
 6891|   172k|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (6891:9): [Folded - Ignored]
  ------------------
 6892|   172k|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  256|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  256|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   25|      0|    ((major) * 10000000 + (minor) * 10000 + (patch))
  ------------------
  |  Branch (6892:10): [Folded - Ignored]
  |  Branch (6892:22): [Folded - Ignored]
  ------------------
 6893|       |        // The cast below will cause an error on gcc pre-12
 6894|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
 6895|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (6895:13): [True: 0, False: 0]
  ------------------
 6896|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
 6897|      0|            SCN_UNLIKELY_ATTR
 6898|      0|            on_error("Argument not found");
 6899|      0|        }
 6900|      0|    }
 6901|   172k|}
impl.cpp:_ZN3scn2v46detail12parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 7275|  79.1k|{
 7276|  79.1k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1104|  79.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  79.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7277|  79.1k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (7277:9): [True: 79.1k, False: 0]
  |  Branch (7277:26): [True: 0, False: 79.1k]
  ------------------
 7278|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7279|      0|    }
 7280|       |
 7281|  79.1k|    handler();
 7282|  79.1k|    return begin;
 7283|  79.1k|}
impl.cpp:_ZZN3scn2v46detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 7777|  79.1k|        {
 7778|  79.1k|            arg_id = handler.on_arg_id();
 7779|  79.1k|        }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE5visitINS0_4impl13custom_readerIS5_EEEEDcOT_:
 9493|   172k|{
 9494|   172k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  | 1110|   172k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9495|   172k|}
_ZN3scn2v46detail10visit_implINS0_4impl13custom_readerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEES7_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 9352|   172k|{
 9353|   172k|#define SCN_VISIT(Type)                                                \
 9354|   172k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9355|   172k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9356|   172k|    }                                                                  \
 9357|   172k|    else {                                                             \
 9358|   172k|        return vis(monostate_val);                                     \
 9359|   172k|    }
 9360|       |
 9361|   172k|    monostate monostate_val{};
 9362|       |
 9363|   172k|    switch (get_arg_type(arg)) {
 9364|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9364:9): [True: 0, False: 172k]
  ------------------
 9365|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9366|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9366:9): [True: 0, False: 172k]
  ------------------
 9367|      0|            SCN_VISIT(short);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9368|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9368:9): [True: 0, False: 172k]
  ------------------
 9369|      0|            SCN_VISIT(int);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9370|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9370:9): [True: 0, False: 172k]
  ------------------
 9371|      0|            SCN_VISIT(long);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9372|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9372:9): [True: 0, False: 172k]
  ------------------
 9373|      0|            SCN_VISIT(long long);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9374|      0|        case detail::arg_type::int128_type:
  ------------------
  |  Branch (9374:9): [True: 0, False: 172k]
  ------------------
 9375|      0|#if SCN_HAS_INT128
 9376|      0|            SCN_VISIT(int128)
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9377|       |#else
 9378|       |            return vis(monostate_val);
 9379|       |#endif
 9380|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9380:9): [True: 0, False: 172k]
  ------------------
 9381|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9382|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9382:9): [True: 0, False: 172k]
  ------------------
 9383|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9384|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9384:9): [True: 0, False: 172k]
  ------------------
 9385|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9386|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9386:9): [True: 0, False: 172k]
  ------------------
 9387|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9388|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9388:9): [True: 0, False: 172k]
  ------------------
 9389|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9390|      0|        case detail::arg_type::uint128_type:
  ------------------
  |  Branch (9390:9): [True: 0, False: 172k]
  ------------------
 9391|      0|#if SCN_HAS_INT128
 9392|      0|            SCN_VISIT(uint128)
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9393|       |#else
 9394|       |            return vis(monostate_val);
 9395|       |#endif
 9396|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9396:9): [True: 0, False: 172k]
  ------------------
 9397|      0|            SCN_VISIT(void*);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9398|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9398:9): [True: 0, False: 172k]
  ------------------
 9399|      0|            SCN_VISIT(bool);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9400|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9400:9): [True: 0, False: 172k]
  ------------------
 9401|      0|            SCN_VISIT(char);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9402|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9402:9): [True: 0, False: 172k]
  ------------------
 9403|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9404|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9404:9): [True: 0, False: 172k]
  ------------------
 9405|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9406|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9406:9): [True: 0, False: 172k]
  ------------------
 9407|      0|            SCN_VISIT(float);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9408|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9408:9): [True: 0, False: 172k]
  ------------------
 9409|      0|            SCN_VISIT(double);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9410|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9410:9): [True: 0, False: 172k]
  ------------------
 9411|      0|            SCN_VISIT(long double);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9412|      0|        case detail::arg_type::float16_type:
  ------------------
  |  Branch (9412:9): [True: 0, False: 172k]
  ------------------
 9413|       |#if SCN_HAS_STD_F16
 9414|       |            SCN_VISIT(std::float16_t)
 9415|       |#else
 9416|      0|            return vis(monostate_val);
 9417|      0|#endif
 9418|      0|        case detail::arg_type::float32_type:
  ------------------
  |  Branch (9418:9): [True: 0, False: 172k]
  ------------------
 9419|       |#if SCN_HAS_STD_F32
 9420|       |            SCN_VISIT(std::float32_t)
 9421|       |#else
 9422|      0|            return vis(monostate_val);
 9423|      0|#endif
 9424|      0|        case detail::arg_type::float64_type:
  ------------------
  |  Branch (9424:9): [True: 0, False: 172k]
  ------------------
 9425|       |#if SCN_HAS_STD_F64
 9426|       |            SCN_VISIT(std::float64_t)
 9427|       |#else
 9428|      0|            return vis(monostate_val);
 9429|      0|#endif
 9430|      0|        case detail::arg_type::float128_type:
  ------------------
  |  Branch (9430:9): [True: 0, False: 172k]
  ------------------
 9431|       |#if SCN_HAS_STD_F64
 9432|       |            SCN_VISIT(std::float128_t)
 9433|       |#else
 9434|      0|            return vis(monostate_val);
 9435|      0|#endif
 9436|      0|        case detail::arg_type::bfloat16_type:
  ------------------
  |  Branch (9436:9): [True: 0, False: 172k]
  ------------------
 9437|       |#if SCN_HAS_STD_BF16
 9438|       |            SCN_VISIT(std::bfloat16_t)
 9439|       |#else
 9440|      0|            return vis(monostate_val);
 9441|      0|#endif
 9442|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9442:9): [True: 0, False: 172k]
  ------------------
 9443|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9444|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9444:9): [True: 0, False: 172k]
  ------------------
 9445|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9446|      0|        case detail::arg_type::string_view_type: {
  ------------------
  |  Branch (9446:9): [True: 0, False: 172k]
  ------------------
 9447|      0|            if constexpr (std::is_same_v<typename Ctx::char_type, char>) {
 9448|      0|                SCN_VISIT(std::string_view);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9449|       |            }
 9450|       |            else {
 9451|       |                SCN_VISIT(std::wstring_view);
 9452|       |            }
 9453|      0|        }
 9454|       |
 9455|   172k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9455:9): [True: 172k, False: 0]
  ------------------
 9456|   172k|#if !SCN_DISABLE_TYPE_CUSTOM
 9457|   172k|            return vis(typename basic_scan_arg<Ctx>::handle(
 9458|   172k|                get_arg_value(arg).custom_value));
 9459|       |#else
 9460|       |            return vis(monostate_val);
 9461|       |#endif
 9462|       |
 9463|      0|            SCN_CLANG_PUSH
 9464|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9465|       |
 9466|      0|            SCN_UNLIKELY_ATTR
 9467|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9467:9): [True: 0, False: 172k]
  ------------------
 9468|      0|        default: {
  ------------------
  |  Branch (9468:9): [True: 0, False: 172k]
  ------------------
 9469|      0|            return vis(monostate_val);
 9470|      0|        }
 9471|       |
 9472|   172k|            SCN_CLANG_POP
 9473|   172k|    }
 9474|       |
 9475|      0|#undef SCN_VISIT
 9476|       |
 9477|      0|    SCN_ENSURE(false);
  ------------------
  |  | 1105|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1101|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9478|      0|    SCN_UNREACHABLE;
  ------------------
  |  | 1067|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9479|      0|}
_ZN3scn2v46detail24basic_scan_string_bufferIcEC2ENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEE:
 4734|  79.1k|        : base(typename base::contiguous_tag{}, sv)
 4735|  79.1k|    {
 4736|  79.1k|    }
_ZN3scn2v46detail17basic_scan_bufferIcEC2ENS3_14contiguous_tagENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEE:
 4439|  79.1k|        : m_current_view(sv), m_is_contiguous(true)
 4440|  79.1k|    {
 4441|  79.1k|    }
_ZNK3scn2v46ranges6detail5data_2fnclINS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 3013|   158k|    {
 3014|   158k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  | 1110|   158k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3015|   158k|    }
_ZN3scn2v46ranges6detail5data_2fn4implINS2_9subrange_8subrangeIPKcS9_EEEENSt3__19enable_ifIX19is_object_pointer_vIDTclL_ZNS1_5beginEEscDtfp_Efp_EEEESE_E4typeEOT_NS0_6detail12priority_tagILm0EEE:
 3004|   158k|    {
 3005|   158k|        return scn::ranges::begin(SCN_FWD(t));
  ------------------
  |  | 1110|   158k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3006|   158k|    }
_ZNK3scn2v46ranges6detail6begin_2fnclINS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2882|   158k|    {
 2883|   158k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1110|   158k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2884|   158k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implINS2_9subrange_8subrangeIPKcS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESE_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2863|   158k|    {
 2864|   158k|        return decay_copy(t.begin());
 2865|   158k|    }
_ZNK3scn2v46ranges6detail5size_2fnclINS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSB_:
 3088|  79.1k|    {
 3089|  79.1k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3090|  79.1k|    }
_ZN3scn2v46ranges6detail5size_2fn4implINS2_9subrange_8subrangeIPKcS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESD_E4typeEOSE_NS0_6detail12priority_tagILm2EEE:
 3054|  79.1k|    {
 3055|  79.1k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  | 1110|  79.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3056|  79.1k|    }
_ZN3scn2v46detail17basic_scan_bufferIcE16forward_iterator16batch_advance_toEl:
 4557|  79.1k|    {
 4558|  79.1k|        SCN_EXPECT(i >= m_position);
  ------------------
  |  | 1104|  79.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  79.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4559|  79.1k|        m_position = i;
 4560|  79.1k|        return *this;
 4561|  79.1k|    }
_ZN3scn2v424basic_scan_parse_contextIcEC2IRNS0_6detail17basic_scan_bufferIcEEEENS0_15source_tag_typeIT_EENSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEi:
 6361|  93.5k|        : m_format{format},
 6362|  93.5k|          m_next_arg_id{next_arg_id},
 6363|  93.5k|          m_is_contiguous(ranges::range<Source> &&
  ------------------
  |  Branch (6363:27): [Folded - Ignored]
  ------------------
 6364|  93.5k|                          ranges::contiguous_range<Source>),
  ------------------
  |  Branch (6364:27): [Folded - Ignored]
  ------------------
 6365|       |          m_is_borrowed(
 6366|  93.5k|              (ranges::range<Source> && ranges::borrowed_range<Source>) ||
  ------------------
  |  Branch (6366:16): [Folded - Ignored]
  |  Branch (6366:41): [Folded - Ignored]
  ------------------
 6367|  93.5k|              std::is_same_v<detail::remove_cvref_t<Source>, std::FILE*>)
  ------------------
  |  Branch (6367:15): [Folded - Ignored]
  ------------------
 6368|  93.5k|    {
 6369|  93.5k|    }
impl.cpp:_ZN3scn2v46detail19parse_format_stringILb0EcRNS0_12_GLOBAL__N_114format_handlerILb0EcEEEENS0_13scan_expectedIvEENSt3__117basic_string_viewIT0_NS9_11char_traitsISB_EEEEOT1_:
 7877|  93.5k|{
 7878|  93.5k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7879|  93.5k|    handler.check_args_exhausted();
 7880|  93.5k|    return handler.get_error();
 7881|  93.5k|}
impl.cpp:_ZN3scn2v46detail24parse_format_string_implILb0EcRNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7842|  93.5k|{
 7843|       |    // TODO: memchr fast path with a larger (> 32) format string
 7844|       |
 7845|  93.5k|    auto begin = format.data();
 7846|  93.5k|    auto it = begin;
 7847|  93.5k|    const auto end = format.data() + format.size();
 7848|       |
 7849|   151k|    while (it != end) {
  ------------------
  |  Branch (7849:12): [True: 93.5k, False: 57.5k]
  ------------------
 7850|  93.5k|        const auto ch = *it++;
 7851|  93.5k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7851:13): [True: 93.5k, False: 0]
  ------------------
 7852|  93.5k|            handler.on_literal_text(begin, it - 1);
 7853|       |
 7854|  93.5k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7855|  93.5k|            if (!handler.get_error()) {
  ------------------
  |  Branch (7855:17): [True: 35.9k, False: 57.5k]
  ------------------
 7856|  35.9k|                return;
 7857|  35.9k|            }
 7858|  93.5k|        }
 7859|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7859:18): [True: 0, False: 0]
  ------------------
 7860|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  Branch (1039:45): [True: 0, False: 0]
  |  |  |  Branch (1039:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7861|      0|                handler.on_error("Unmatched '}' in format string");
 7862|      0|                return;
 7863|      0|            }
 7864|       |
 7865|      0|            handler.on_literal_text(begin, it);
 7866|      0|            begin = ++it;
 7867|      0|        }
 7868|  93.5k|    }
 7869|       |
 7870|  57.5k|    handler.on_literal_text(begin, end);
 7871|  57.5k|}
impl.cpp:_ZN3scn2v46detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S8_S8_RT0_:
 7774|  93.5k|{
 7775|  93.5k|    struct id_adapter {
 7776|  93.5k|        constexpr void operator()()
 7777|  93.5k|        {
 7778|  93.5k|            arg_id = handler.on_arg_id();
 7779|  93.5k|        }
 7780|  93.5k|        constexpr void operator()(std::size_t id)
 7781|  93.5k|        {
 7782|  93.5k|            arg_id = handler.on_arg_id(id);
 7783|  93.5k|        }
 7784|       |
 7785|  93.5k|        constexpr void on_error(const char* msg)
 7786|  93.5k|        {
 7787|  93.5k|            SCN_UNLIKELY_ATTR
 7788|  93.5k|            handler.on_error(msg);
 7789|  93.5k|        }
 7790|       |
 7791|  93.5k|        Handler& handler;
 7792|  93.5k|        std::size_t arg_id;
 7793|  93.5k|    };
 7794|       |
 7795|  93.5k|    ++begin;
 7796|  93.5k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|  93.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 93.5k]
  |  |  ------------------
  ------------------
 7797|      0|        handler.on_error("Unexpected end of replacement field");
 7798|      0|        return begin;
 7799|      0|    }
 7800|       |
 7801|  93.5k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7801:9): [True: 0, False: 93.5k]
  ------------------
 7802|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 7803|      0|    }
 7804|  93.5k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (7804:14): [True: 0, False: 93.5k]
  ------------------
 7805|      0|        handler.on_literal_text(begin, begin + 1);
 7806|      0|    }
 7807|  93.5k|    else {
 7808|  93.5k|        auto adapter = id_adapter{handler, 0};
 7809|  93.5k|        begin = parse_arg_id(begin, end, adapter);
 7810|       |
 7811|  93.5k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|  93.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 93.5k]
  |  |  ------------------
  ------------------
 7812|      0|            handler.on_error("Missing '}' in format string");
 7813|      0|            return begin;
 7814|      0|        }
 7815|       |
 7816|  93.5k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7816:13): [True: 0, False: 93.5k]
  ------------------
 7817|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 7818|      0|        }
 7819|  93.5k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (7819:18): [True: 93.5k, False: 0]
  ------------------
 7820|  93.5k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  | 1039|  93.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 93.5k]
  |  |  ------------------
  ------------------
 7821|      0|                handler.on_error("Unexpected end of replacement field");
 7822|      0|                return begin;
 7823|      0|            }
 7824|  93.5k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 7825|  93.5k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  | 1039|   187k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 93.5k]
  |  |  |  Branch (1039:45): [True: 0, False: 93.5k]
  |  |  |  Branch (1039:45): [True: 0, False: 93.5k]
  |  |  ------------------
  ------------------
 7826|      0|                handler.on_error("Unknown format specifier");
 7827|      0|                return begin;
 7828|      0|            }
 7829|  93.5k|        }
 7830|      0|        else {
 7831|      0|            SCN_UNLIKELY_ATTR
 7832|      0|            handler.on_error("Missing '}' in format string");
 7833|      0|            return begin;
 7834|      0|        }
 7835|  93.5k|    }
 7836|  93.5k|    return begin + 1;
 7837|  93.5k|}
impl.cpp:_ZN3scn2v46detail12parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 7275|  93.5k|{
 7276|  93.5k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1104|  93.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  93.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7277|  93.5k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (7277:9): [True: 93.5k, False: 0]
  |  Branch (7277:26): [True: 0, False: 93.5k]
  ------------------
 7278|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7279|      0|    }
 7280|       |
 7281|  93.5k|    handler();
 7282|  93.5k|    return begin;
 7283|  93.5k|}
impl.cpp:_ZZN3scn2v46detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 7777|  93.5k|        {
 7778|  93.5k|            arg_id = handler.on_arg_id();
 7779|  93.5k|        }
_ZN3scn2v46detail17basic_scan_bufferIcE8sync_allEv:
 4369|  38.5k|    {
 4370|  38.5k|        return sync(0);
 4371|  38.5k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4sizeEv:
 6262|   186k|    {
 6263|   186k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  | 1039|   186k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 186k]
  |  |  ------------------
  ------------------
 6264|      0|            return max_size();
 6265|      0|        }
 6266|       |
 6267|   186k|        return static_cast<std::size_t>(m_desc &
 6268|   186k|                                        ((1 << detail::packed_arg_bits) - 1));
 6269|   186k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE9is_packedEv:
 6288|   373k|    {
 6289|   373k|        return (m_desc & detail::is_unpacked_bit) == 0;
 6290|   373k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE3getEm:
 6230|   186k|    {
 6231|   186k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  | 1039|   186k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 186k]
  |  |  ------------------
  ------------------
 6232|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  | 1038|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6233|      0|                return m_args[id];
 6234|      0|            }
 6235|      0|            return {};
 6236|      0|        }
 6237|       |
 6238|   186k|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  | 1039|   186k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 186k]
  |  |  ------------------
  ------------------
 6239|      0|            return {};
 6240|      0|        }
 6241|       |
 6242|   186k|        const auto t = type(id);
 6243|   186k|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  | 1039|   186k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 186k]
  |  |  ------------------
  ------------------
 6244|      0|            return {};
 6245|      0|        }
 6246|       |
 6247|   186k|        basic_scan_arg<Context> arg;
 6248|   186k|        arg.m_type = t;
 6249|   186k|        if (is_only_builtin()) {
  ------------------
  |  Branch (6249:13): [True: 0, False: 186k]
  ------------------
 6250|      0|            arg.m_value.ref_value = m_builtin_values[id];
 6251|      0|        }
 6252|   186k|        else {
 6253|   186k|            arg.m_value = m_values[id];
 6254|   186k|        }
 6255|   186k|        return arg;
 6256|   186k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4typeEm:
 6297|   186k|    {
 6298|       |        // First (0th) index is size, types start after that
 6299|   186k|        const auto shift = (index + 1) * detail::packed_arg_bits;
 6300|   186k|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
 6301|   186k|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
 6302|   186k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE15is_only_builtinEv:
 6292|   186k|    {
 6293|   186k|        return (m_desc & detail::has_custom_types_bit) == 0;
 6294|   186k|    }
_ZNK3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEcvbEv:
 6046|   383k|    {
 6047|   383k|        return m_type != detail::arg_type::none_type;
 6048|   383k|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE5visitINS0_4impl18default_arg_readerINS2_INS0_6ranges6detail9subrange_8subrangeIPKwSF_EEwEEEEEEDcOT_:
 9493|  5.14k|{
 9494|  5.14k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  | 1110|  5.14k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9495|  5.14k|}
_ZN3scn2v46detail10visit_implINS0_4impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEENS5_INS1_16buffer_range_tagEwEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 9352|  5.14k|{
 9353|  5.14k|#define SCN_VISIT(Type)                                                \
 9354|  5.14k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9355|  5.14k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9356|  5.14k|    }                                                                  \
 9357|  5.14k|    else {                                                             \
 9358|  5.14k|        return vis(monostate_val);                                     \
 9359|  5.14k|    }
 9360|       |
 9361|  5.14k|    monostate monostate_val{};
 9362|       |
 9363|  5.14k|    switch (get_arg_type(arg)) {
 9364|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9364:9): [True: 0, False: 5.14k]
  ------------------
 9365|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9366|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9366:9): [True: 0, False: 5.14k]
  ------------------
 9367|      0|            SCN_VISIT(short);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9368|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9368:9): [True: 0, False: 5.14k]
  ------------------
 9369|      0|            SCN_VISIT(int);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9370|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9370:9): [True: 0, False: 5.14k]
  ------------------
 9371|      0|            SCN_VISIT(long);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9372|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9372:9): [True: 0, False: 5.14k]
  ------------------
 9373|      0|            SCN_VISIT(long long);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9374|      0|        case detail::arg_type::int128_type:
  ------------------
  |  Branch (9374:9): [True: 0, False: 5.14k]
  ------------------
 9375|      0|#if SCN_HAS_INT128
 9376|      0|            SCN_VISIT(int128)
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9377|       |#else
 9378|       |            return vis(monostate_val);
 9379|       |#endif
 9380|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9380:9): [True: 0, False: 5.14k]
  ------------------
 9381|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9382|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9382:9): [True: 0, False: 5.14k]
  ------------------
 9383|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9384|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9384:9): [True: 0, False: 5.14k]
  ------------------
 9385|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9386|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9386:9): [True: 0, False: 5.14k]
  ------------------
 9387|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9388|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9388:9): [True: 0, False: 5.14k]
  ------------------
 9389|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9390|      0|        case detail::arg_type::uint128_type:
  ------------------
  |  Branch (9390:9): [True: 0, False: 5.14k]
  ------------------
 9391|      0|#if SCN_HAS_INT128
 9392|      0|            SCN_VISIT(uint128)
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9393|       |#else
 9394|       |            return vis(monostate_val);
 9395|       |#endif
 9396|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9396:9): [True: 0, False: 5.14k]
  ------------------
 9397|      0|            SCN_VISIT(void*);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9398|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9398:9): [True: 0, False: 5.14k]
  ------------------
 9399|      0|            SCN_VISIT(bool);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9400|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9400:9): [True: 0, False: 5.14k]
  ------------------
 9401|      0|            SCN_VISIT(char);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9402|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9402:9): [True: 0, False: 5.14k]
  ------------------
 9403|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9404|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9404:9): [True: 0, False: 5.14k]
  ------------------
 9405|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9406|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9406:9): [True: 0, False: 5.14k]
  ------------------
 9407|      0|            SCN_VISIT(float);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9408|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9408:9): [True: 0, False: 5.14k]
  ------------------
 9409|      0|            SCN_VISIT(double);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9410|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9410:9): [True: 0, False: 5.14k]
  ------------------
 9411|      0|            SCN_VISIT(long double);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9412|      0|        case detail::arg_type::float16_type:
  ------------------
  |  Branch (9412:9): [True: 0, False: 5.14k]
  ------------------
 9413|       |#if SCN_HAS_STD_F16
 9414|       |            SCN_VISIT(std::float16_t)
 9415|       |#else
 9416|      0|            return vis(monostate_val);
 9417|      0|#endif
 9418|      0|        case detail::arg_type::float32_type:
  ------------------
  |  Branch (9418:9): [True: 0, False: 5.14k]
  ------------------
 9419|       |#if SCN_HAS_STD_F32
 9420|       |            SCN_VISIT(std::float32_t)
 9421|       |#else
 9422|      0|            return vis(monostate_val);
 9423|      0|#endif
 9424|      0|        case detail::arg_type::float64_type:
  ------------------
  |  Branch (9424:9): [True: 0, False: 5.14k]
  ------------------
 9425|       |#if SCN_HAS_STD_F64
 9426|       |            SCN_VISIT(std::float64_t)
 9427|       |#else
 9428|      0|            return vis(monostate_val);
 9429|      0|#endif
 9430|      0|        case detail::arg_type::float128_type:
  ------------------
  |  Branch (9430:9): [True: 0, False: 5.14k]
  ------------------
 9431|       |#if SCN_HAS_STD_F64
 9432|       |            SCN_VISIT(std::float128_t)
 9433|       |#else
 9434|      0|            return vis(monostate_val);
 9435|      0|#endif
 9436|      0|        case detail::arg_type::bfloat16_type:
  ------------------
  |  Branch (9436:9): [True: 0, False: 5.14k]
  ------------------
 9437|       |#if SCN_HAS_STD_BF16
 9438|       |            SCN_VISIT(std::bfloat16_t)
 9439|       |#else
 9440|      0|            return vis(monostate_val);
 9441|      0|#endif
 9442|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9442:9): [True: 0, False: 5.14k]
  ------------------
 9443|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9444|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9444:9): [True: 0, False: 5.14k]
  ------------------
 9445|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9446|      0|        case detail::arg_type::string_view_type: {
  ------------------
  |  Branch (9446:9): [True: 0, False: 5.14k]
  ------------------
 9447|       |            if constexpr (std::is_same_v<typename Ctx::char_type, char>) {
 9448|       |                SCN_VISIT(std::string_view);
 9449|       |            }
 9450|      0|            else {
 9451|      0|                SCN_VISIT(std::wstring_view);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9452|      0|            }
 9453|      0|        }
 9454|       |
 9455|  5.14k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9455:9): [True: 5.14k, False: 0]
  ------------------
 9456|  5.14k|#if !SCN_DISABLE_TYPE_CUSTOM
 9457|  5.14k|            return vis(typename basic_scan_arg<Ctx>::handle(
 9458|  5.14k|                get_arg_value(arg).custom_value));
 9459|       |#else
 9460|       |            return vis(monostate_val);
 9461|       |#endif
 9462|       |
 9463|      0|            SCN_CLANG_PUSH
 9464|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9465|       |
 9466|      0|            SCN_UNLIKELY_ATTR
 9467|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9467:9): [True: 0, False: 5.14k]
  ------------------
 9468|      0|        default: {
  ------------------
  |  Branch (9468:9): [True: 0, False: 5.14k]
  ------------------
 9469|      0|            return vis(monostate_val);
 9470|      0|        }
 9471|       |
 9472|  5.14k|            SCN_CLANG_POP
 9473|  5.14k|    }
 9474|       |
 9475|      0|#undef SCN_VISIT
 9476|       |
 9477|      0|    SCN_ENSURE(false);
  ------------------
  |  | 1105|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1101|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9478|      0|    SCN_UNREACHABLE;
  ------------------
  |  | 1067|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9479|      0|}
_ZN3scn2v46detail12get_arg_typeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEERNS1_8arg_typeERNS0_14basic_scan_argIT_EE:
 6091|   383k|{
 6092|   383k|    return arg.m_type;
 6093|   383k|}
_ZN3scn2v46detail13get_arg_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEERNS1_9arg_valueERNS0_14basic_scan_argIT_EE:
 6103|   197k|{
 6104|   197k|    return arg.m_value;
 6105|   197k|}
_ZN3scn2v424basic_scan_parse_contextIwEC2INS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEENS0_15source_tag_typeIT_EENSt3__117basic_string_viewIwNSE_11char_traitsIwEEEEi:
 6361|  5.14k|        : m_format{format},
 6362|  5.14k|          m_next_arg_id{next_arg_id},
 6363|  5.14k|          m_is_contiguous(ranges::range<Source> &&
  ------------------
  |  Branch (6363:27): [Folded - Ignored]
  ------------------
 6364|  5.14k|                          ranges::contiguous_range<Source>),
  ------------------
  |  Branch (6364:27): [Folded - Ignored]
  ------------------
 6365|       |          m_is_borrowed(
 6366|  5.14k|              (ranges::range<Source> && ranges::borrowed_range<Source>) ||
  ------------------
  |  Branch (6366:16): [Folded - Ignored]
  |  Branch (6366:41): [Folded - Ignored]
  ------------------
 6367|  5.14k|              std::is_same_v<detail::remove_cvref_t<Source>, std::FILE*>)
  ------------------
  |  Branch (6367:15): [Folded - Ignored]
  ------------------
 6368|  5.14k|    {
 6369|  5.14k|    }
_ZN3scn2v46detail17basic_scan_bufferIwE16forward_iteratorC2ENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEl:
 4478|  98.5k|        : m_begin(const_cast<CharT*>(view.data())),
 4479|  98.5k|          m_end(const_cast<CharT*>(view.data() + view.size())),
 4480|  98.5k|          m_position(pos)
 4481|  98.5k|    {
 4482|  98.5k|    }
_ZN3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEwEC2ENS2_17basic_scan_bufferIwE16forward_iteratorENS0_15basic_scan_argsIS4_EENS2_10locale_refE:
 9019|   197k|        : base(SCN_MOVE(a), loc), m_current(curr)
  ------------------
  |  | 1108|   197k|    static_cast<    \
  |  | 1109|   197k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9020|   197k|    {
 9021|   197k|    }
_ZNK3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE6handle4scanERNS0_24basic_scan_parse_contextIwEERS5_:
 6024|   197k|        {
 6025|   197k|            return m_custom.scan(m_custom.value, &parse_ctx, &ctx);
 6026|   197k|        }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE6handleC2ENS3_17custom_value_typeE:
 6029|   197k|        explicit handle(detail::custom_value_type custom) : m_custom(custom) {}
_ZN3scn2v424basic_scan_parse_contextIwEC2IONS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEENS0_15source_tag_typeIT_EENSt3__117basic_string_viewIwNSF_11char_traitsIwEEEEi:
 6361|  93.3k|        : m_format{format},
 6362|  93.3k|          m_next_arg_id{next_arg_id},
 6363|  93.3k|          m_is_contiguous(ranges::range<Source> &&
  ------------------
  |  Branch (6363:27): [Folded - Ignored]
  ------------------
 6364|  93.3k|                          ranges::contiguous_range<Source>),
  ------------------
  |  Branch (6364:27): [Folded - Ignored]
  ------------------
 6365|       |          m_is_borrowed(
 6366|  93.3k|              (ranges::range<Source> && ranges::borrowed_range<Source>) ||
  ------------------
  |  Branch (6366:16): [Folded - Ignored]
  |  Branch (6366:41): [Folded - Ignored]
  ------------------
 6367|  93.3k|              std::is_same_v<detail::remove_cvref_t<Source>, std::FILE*>)
  ------------------
  |  Branch (6367:15): [Folded - Ignored]
  ------------------
 6368|  93.3k|    {
 6369|  93.3k|    }
_ZNK3scn2v46ranges6detail5size_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSC_:
 3088|  93.3k|    {
 3089|  93.3k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3090|  93.3k|    }
_ZN3scn2v46ranges6detail5size_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESE_E4typeEOSF_NS0_6detail12priority_tagILm2EEE:
 3054|  93.3k|    {
 3055|  93.3k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  | 1110|  93.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3056|  93.3k|    }
impl.cpp:_ZN3scn2v46detail19parse_format_stringILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEENS0_13scan_expectedIvEENSt3__117basic_string_viewIT0_NS9_11char_traitsISB_EEEEOT1_:
 7877|  93.3k|{
 7878|  93.3k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7879|  93.3k|    handler.check_args_exhausted();
 7880|  93.3k|    return handler.get_error();
 7881|  93.3k|}
impl.cpp:_ZN3scn2v46detail24parse_format_string_implILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7842|  93.3k|{
 7843|       |    // TODO: memchr fast path with a larger (> 32) format string
 7844|       |
 7845|  93.3k|    auto begin = format.data();
 7846|  93.3k|    auto it = begin;
 7847|  93.3k|    const auto end = format.data() + format.size();
 7848|       |
 7849|   114k|    while (it != end) {
  ------------------
  |  Branch (7849:12): [True: 93.3k, False: 21.3k]
  ------------------
 7850|  93.3k|        const auto ch = *it++;
 7851|  93.3k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7851:13): [True: 93.3k, False: 0]
  ------------------
 7852|  93.3k|            handler.on_literal_text(begin, it - 1);
 7853|       |
 7854|  93.3k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7855|  93.3k|            if (!handler.get_error()) {
  ------------------
  |  Branch (7855:17): [True: 71.9k, False: 21.3k]
  ------------------
 7856|  71.9k|                return;
 7857|  71.9k|            }
 7858|  93.3k|        }
 7859|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7859:18): [True: 0, False: 0]
  ------------------
 7860|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  Branch (1039:45): [True: 0, False: 0]
  |  |  |  Branch (1039:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7861|      0|                handler.on_error("Unmatched '}' in format string");
 7862|      0|                return;
 7863|      0|            }
 7864|       |
 7865|      0|            handler.on_literal_text(begin, it);
 7866|      0|            begin = ++it;
 7867|      0|        }
 7868|  93.3k|    }
 7869|       |
 7870|  21.3k|    handler.on_literal_text(begin, end);
 7871|  21.3k|}
impl.cpp:_ZN3scn2v46detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_:
 7774|  93.3k|{
 7775|  93.3k|    struct id_adapter {
 7776|  93.3k|        constexpr void operator()()
 7777|  93.3k|        {
 7778|  93.3k|            arg_id = handler.on_arg_id();
 7779|  93.3k|        }
 7780|  93.3k|        constexpr void operator()(std::size_t id)
 7781|  93.3k|        {
 7782|  93.3k|            arg_id = handler.on_arg_id(id);
 7783|  93.3k|        }
 7784|       |
 7785|  93.3k|        constexpr void on_error(const char* msg)
 7786|  93.3k|        {
 7787|  93.3k|            SCN_UNLIKELY_ATTR
 7788|  93.3k|            handler.on_error(msg);
 7789|  93.3k|        }
 7790|       |
 7791|  93.3k|        Handler& handler;
 7792|  93.3k|        std::size_t arg_id;
 7793|  93.3k|    };
 7794|       |
 7795|  93.3k|    ++begin;
 7796|  93.3k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|  93.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 93.3k]
  |  |  ------------------
  ------------------
 7797|      0|        handler.on_error("Unexpected end of replacement field");
 7798|      0|        return begin;
 7799|      0|    }
 7800|       |
 7801|  93.3k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7801:9): [True: 0, False: 93.3k]
  ------------------
 7802|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 7803|      0|    }
 7804|  93.3k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (7804:14): [True: 0, False: 93.3k]
  ------------------
 7805|      0|        handler.on_literal_text(begin, begin + 1);
 7806|      0|    }
 7807|  93.3k|    else {
 7808|  93.3k|        auto adapter = id_adapter{handler, 0};
 7809|  93.3k|        begin = parse_arg_id(begin, end, adapter);
 7810|       |
 7811|  93.3k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|  93.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 93.3k]
  |  |  ------------------
  ------------------
 7812|      0|            handler.on_error("Missing '}' in format string");
 7813|      0|            return begin;
 7814|      0|        }
 7815|       |
 7816|  93.3k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7816:13): [True: 0, False: 93.3k]
  ------------------
 7817|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 7818|      0|        }
 7819|  93.3k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (7819:18): [True: 93.3k, False: 0]
  ------------------
 7820|  93.3k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  | 1039|  93.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 93.3k]
  |  |  ------------------
  ------------------
 7821|      0|                handler.on_error("Unexpected end of replacement field");
 7822|      0|                return begin;
 7823|      0|            }
 7824|  93.3k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 7825|  93.3k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  | 1039|   186k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 93.3k]
  |  |  |  Branch (1039:45): [True: 0, False: 93.3k]
  |  |  |  Branch (1039:45): [True: 0, False: 93.3k]
  |  |  ------------------
  ------------------
 7826|      0|                handler.on_error("Unknown format specifier");
 7827|      0|                return begin;
 7828|      0|            }
 7829|  93.3k|        }
 7830|      0|        else {
 7831|      0|            SCN_UNLIKELY_ATTR
 7832|      0|            handler.on_error("Missing '}' in format string");
 7833|      0|            return begin;
 7834|      0|        }
 7835|  93.3k|    }
 7836|  93.3k|    return begin + 1;
 7837|  93.3k|}
_ZNK3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEE3argEm:
 8918|   186k|    {
 8919|   186k|        return m_args.get(id);
 8920|   186k|    }
_ZN3scn2v424basic_scan_parse_contextIwE11next_arg_idEv:
 6396|   186k|    {
 6397|   186k|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  | 1039|   186k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 186k]
  |  |  ------------------
  ------------------
 6398|      0|            on_error(
 6399|      0|                "Cannot switch from manual to automatic argument indexing");
 6400|      0|            return 0;
 6401|      0|        }
 6402|       |
 6403|   186k|        auto id = static_cast<size_t>(m_next_arg_id++);
 6404|   186k|        do_check_arg_id(id);
 6405|   186k|        return id;
 6406|   186k|    }
_ZN3scn2v424basic_scan_parse_contextIwE15do_check_arg_idEm:
 6890|   186k|{
 6891|   186k|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (6891:9): [Folded - Ignored]
  ------------------
 6892|   186k|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  256|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  256|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   25|      0|    ((major) * 10000000 + (minor) * 10000 + (patch))
  ------------------
  |  Branch (6892:10): [Folded - Ignored]
  |  Branch (6892:22): [Folded - Ignored]
  ------------------
 6893|       |        // The cast below will cause an error on gcc pre-12
 6894|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
 6895|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (6895:13): [True: 0, False: 0]
  ------------------
 6896|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
 6897|      0|            SCN_UNLIKELY_ATTR
 6898|      0|            on_error("Argument not found");
 6899|      0|        }
 6900|      0|    }
 6901|   186k|}
impl.cpp:_ZN3scn2v46detail12parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 7275|  93.3k|{
 7276|  93.3k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1104|  93.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  93.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7277|  93.3k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (7277:9): [True: 93.3k, False: 0]
  |  Branch (7277:26): [True: 0, False: 93.3k]
  ------------------
 7278|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7279|      0|    }
 7280|       |
 7281|  93.3k|    handler();
 7282|  93.3k|    return begin;
 7283|  93.3k|}
impl.cpp:_ZZN3scn2v46detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 7777|  93.3k|        {
 7778|  93.3k|            arg_id = handler.on_arg_id();
 7779|  93.3k|        }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE5visitINS0_4impl13custom_readerIS5_EEEEDcOT_:
 9493|   186k|{
 9494|   186k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  | 1110|   186k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9495|   186k|}
_ZN3scn2v46detail10visit_implINS0_4impl13custom_readerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEES7_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 9352|   186k|{
 9353|   186k|#define SCN_VISIT(Type)                                                \
 9354|   186k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9355|   186k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9356|   186k|    }                                                                  \
 9357|   186k|    else {                                                             \
 9358|   186k|        return vis(monostate_val);                                     \
 9359|   186k|    }
 9360|       |
 9361|   186k|    monostate monostate_val{};
 9362|       |
 9363|   186k|    switch (get_arg_type(arg)) {
 9364|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9364:9): [True: 0, False: 186k]
  ------------------
 9365|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9366|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9366:9): [True: 0, False: 186k]
  ------------------
 9367|      0|            SCN_VISIT(short);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9368|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9368:9): [True: 0, False: 186k]
  ------------------
 9369|      0|            SCN_VISIT(int);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9370|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9370:9): [True: 0, False: 186k]
  ------------------
 9371|      0|            SCN_VISIT(long);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9372|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9372:9): [True: 0, False: 186k]
  ------------------
 9373|      0|            SCN_VISIT(long long);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9374|      0|        case detail::arg_type::int128_type:
  ------------------
  |  Branch (9374:9): [True: 0, False: 186k]
  ------------------
 9375|      0|#if SCN_HAS_INT128
 9376|      0|            SCN_VISIT(int128)
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9377|       |#else
 9378|       |            return vis(monostate_val);
 9379|       |#endif
 9380|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9380:9): [True: 0, False: 186k]
  ------------------
 9381|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9382|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9382:9): [True: 0, False: 186k]
  ------------------
 9383|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9384|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9384:9): [True: 0, False: 186k]
  ------------------
 9385|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9386|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9386:9): [True: 0, False: 186k]
  ------------------
 9387|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9388|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9388:9): [True: 0, False: 186k]
  ------------------
 9389|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9390|      0|        case detail::arg_type::uint128_type:
  ------------------
  |  Branch (9390:9): [True: 0, False: 186k]
  ------------------
 9391|      0|#if SCN_HAS_INT128
 9392|      0|            SCN_VISIT(uint128)
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9393|       |#else
 9394|       |            return vis(monostate_val);
 9395|       |#endif
 9396|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9396:9): [True: 0, False: 186k]
  ------------------
 9397|      0|            SCN_VISIT(void*);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9398|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9398:9): [True: 0, False: 186k]
  ------------------
 9399|      0|            SCN_VISIT(bool);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9400|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9400:9): [True: 0, False: 186k]
  ------------------
 9401|      0|            SCN_VISIT(char);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9402|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9402:9): [True: 0, False: 186k]
  ------------------
 9403|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9404|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9404:9): [True: 0, False: 186k]
  ------------------
 9405|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9406|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9406:9): [True: 0, False: 186k]
  ------------------
 9407|      0|            SCN_VISIT(float);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9408|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9408:9): [True: 0, False: 186k]
  ------------------
 9409|      0|            SCN_VISIT(double);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9410|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9410:9): [True: 0, False: 186k]
  ------------------
 9411|      0|            SCN_VISIT(long double);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9412|      0|        case detail::arg_type::float16_type:
  ------------------
  |  Branch (9412:9): [True: 0, False: 186k]
  ------------------
 9413|       |#if SCN_HAS_STD_F16
 9414|       |            SCN_VISIT(std::float16_t)
 9415|       |#else
 9416|      0|            return vis(monostate_val);
 9417|      0|#endif
 9418|      0|        case detail::arg_type::float32_type:
  ------------------
  |  Branch (9418:9): [True: 0, False: 186k]
  ------------------
 9419|       |#if SCN_HAS_STD_F32
 9420|       |            SCN_VISIT(std::float32_t)
 9421|       |#else
 9422|      0|            return vis(monostate_val);
 9423|      0|#endif
 9424|      0|        case detail::arg_type::float64_type:
  ------------------
  |  Branch (9424:9): [True: 0, False: 186k]
  ------------------
 9425|       |#if SCN_HAS_STD_F64
 9426|       |            SCN_VISIT(std::float64_t)
 9427|       |#else
 9428|      0|            return vis(monostate_val);
 9429|      0|#endif
 9430|      0|        case detail::arg_type::float128_type:
  ------------------
  |  Branch (9430:9): [True: 0, False: 186k]
  ------------------
 9431|       |#if SCN_HAS_STD_F64
 9432|       |            SCN_VISIT(std::float128_t)
 9433|       |#else
 9434|      0|            return vis(monostate_val);
 9435|      0|#endif
 9436|      0|        case detail::arg_type::bfloat16_type:
  ------------------
  |  Branch (9436:9): [True: 0, False: 186k]
  ------------------
 9437|       |#if SCN_HAS_STD_BF16
 9438|       |            SCN_VISIT(std::bfloat16_t)
 9439|       |#else
 9440|      0|            return vis(monostate_val);
 9441|      0|#endif
 9442|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9442:9): [True: 0, False: 186k]
  ------------------
 9443|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9444|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9444:9): [True: 0, False: 186k]
  ------------------
 9445|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9446|      0|        case detail::arg_type::string_view_type: {
  ------------------
  |  Branch (9446:9): [True: 0, False: 186k]
  ------------------
 9447|       |            if constexpr (std::is_same_v<typename Ctx::char_type, char>) {
 9448|       |                SCN_VISIT(std::string_view);
 9449|       |            }
 9450|      0|            else {
 9451|      0|                SCN_VISIT(std::wstring_view);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9452|      0|            }
 9453|      0|        }
 9454|       |
 9455|   186k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9455:9): [True: 186k, False: 0]
  ------------------
 9456|   186k|#if !SCN_DISABLE_TYPE_CUSTOM
 9457|   186k|            return vis(typename basic_scan_arg<Ctx>::handle(
 9458|   186k|                get_arg_value(arg).custom_value));
 9459|       |#else
 9460|       |            return vis(monostate_val);
 9461|       |#endif
 9462|       |
 9463|      0|            SCN_CLANG_PUSH
 9464|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9465|       |
 9466|      0|            SCN_UNLIKELY_ATTR
 9467|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9467:9): [True: 0, False: 186k]
  ------------------
 9468|      0|        default: {
  ------------------
  |  Branch (9468:9): [True: 0, False: 186k]
  ------------------
 9469|      0|            return vis(monostate_val);
 9470|      0|        }
 9471|       |
 9472|   186k|            SCN_CLANG_POP
 9473|   186k|    }
 9474|       |
 9475|      0|#undef SCN_VISIT
 9476|       |
 9477|      0|    SCN_ENSURE(false);
  ------------------
  |  | 1105|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1101|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9478|      0|    SCN_UNREACHABLE;
  ------------------
  |  | 1067|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9479|      0|}
_ZN3scn2v46detail24basic_scan_string_bufferIwEC2ENSt3__117basic_string_viewIwNS4_11char_traitsIwEEEE:
 4734|  93.3k|        : base(typename base::contiguous_tag{}, sv)
 4735|  93.3k|    {
 4736|  93.3k|    }
_ZN3scn2v46detail17basic_scan_bufferIwEC2ENS3_14contiguous_tagENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEE:
 4439|  93.3k|        : m_current_view(sv), m_is_contiguous(true)
 4440|  93.3k|    {
 4441|  93.3k|    }
_ZNK3scn2v46ranges6detail5data_2fnclINS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 3013|   186k|    {
 3014|   186k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  | 1110|   186k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3015|   186k|    }
_ZN3scn2v46ranges6detail5data_2fn4implINS2_9subrange_8subrangeIPKwS9_EEEENSt3__19enable_ifIX19is_object_pointer_vIDTclL_ZNS1_5beginEEscDtfp_Efp_EEEESE_E4typeEOT_NS0_6detail12priority_tagILm0EEE:
 3004|   186k|    {
 3005|   186k|        return scn::ranges::begin(SCN_FWD(t));
  ------------------
  |  | 1110|   186k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3006|   186k|    }
_ZNK3scn2v46ranges6detail6begin_2fnclINS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2882|   186k|    {
 2883|   186k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1110|   186k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2884|   186k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implINS2_9subrange_8subrangeIPKwS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESE_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2863|   186k|    {
 2864|   186k|        return decay_copy(t.begin());
 2865|   186k|    }
_ZNK3scn2v46ranges6detail5size_2fnclINS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSB_:
 3088|  93.3k|    {
 3089|  93.3k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3090|  93.3k|    }
_ZN3scn2v46ranges6detail5size_2fn4implINS2_9subrange_8subrangeIPKwS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESD_E4typeEOSE_NS0_6detail12priority_tagILm2EEE:
 3054|  93.3k|    {
 3055|  93.3k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  | 1110|  93.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3056|  93.3k|    }
_ZN3scn2v46detail17basic_scan_bufferIwE3getEv:
 4708|   191k|{
 4709|   191k|    if (is_contiguous()) {
  ------------------
  |  Branch (4709:9): [True: 93.3k, False: 98.5k]
  ------------------
 4710|  93.3k|        return ranges::subrange{forward_iterator{m_current_view, 0},
 4711|  93.3k|                                ranges::default_sentinel};
 4712|  93.3k|    }
 4713|  98.5k|    return ranges::subrange{forward_iterator{this, 0},
 4714|  98.5k|                            ranges::default_sentinel};
 4715|   191k|}
_ZN3scn2v46detail17basic_scan_bufferIwE16forward_iteratorC2EPS3_l:
 4471|  98.5k|        : m_begin(parent), m_end(nullptr), m_position(pos)
 4472|  98.5k|    {
 4473|  98.5k|        SCN_EXPECT(parent);
  ------------------
  |  | 1104|  98.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  98.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4474|  98.5k|        SCN_EXPECT(!parent->is_contiguous());
  ------------------
  |  | 1104|  98.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  98.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4475|  98.5k|    }
_ZN3scn2v46detail17basic_scan_bufferIwE16forward_iterator16batch_advance_toEl:
 4557|  93.3k|    {
 4558|  93.3k|        SCN_EXPECT(i >= m_position);
  ------------------
  |  | 1104|  93.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  93.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4559|  93.3k|        m_position = i;
 4560|  93.3k|        return *this;
 4561|  93.3k|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE5visitINS0_4impl18default_arg_readerIS5_EEEEDcOT_:
 9493|  5.14k|{
 9494|  5.14k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  | 1110|  5.14k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9495|  5.14k|}
_ZN3scn2v46detail10visit_implINS0_4impl18default_arg_readerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEES7_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 9352|  5.14k|{
 9353|  5.14k|#define SCN_VISIT(Type)                                                \
 9354|  5.14k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9355|  5.14k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9356|  5.14k|    }                                                                  \
 9357|  5.14k|    else {                                                             \
 9358|  5.14k|        return vis(monostate_val);                                     \
 9359|  5.14k|    }
 9360|       |
 9361|  5.14k|    monostate monostate_val{};
 9362|       |
 9363|  5.14k|    switch (get_arg_type(arg)) {
 9364|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9364:9): [True: 0, False: 5.14k]
  ------------------
 9365|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9366|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9366:9): [True: 0, False: 5.14k]
  ------------------
 9367|      0|            SCN_VISIT(short);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9368|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9368:9): [True: 0, False: 5.14k]
  ------------------
 9369|      0|            SCN_VISIT(int);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9370|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9370:9): [True: 0, False: 5.14k]
  ------------------
 9371|      0|            SCN_VISIT(long);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9372|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9372:9): [True: 0, False: 5.14k]
  ------------------
 9373|      0|            SCN_VISIT(long long);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9374|      0|        case detail::arg_type::int128_type:
  ------------------
  |  Branch (9374:9): [True: 0, False: 5.14k]
  ------------------
 9375|      0|#if SCN_HAS_INT128
 9376|      0|            SCN_VISIT(int128)
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9377|       |#else
 9378|       |            return vis(monostate_val);
 9379|       |#endif
 9380|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9380:9): [True: 0, False: 5.14k]
  ------------------
 9381|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9382|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9382:9): [True: 0, False: 5.14k]
  ------------------
 9383|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9384|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9384:9): [True: 0, False: 5.14k]
  ------------------
 9385|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9386|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9386:9): [True: 0, False: 5.14k]
  ------------------
 9387|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9388|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9388:9): [True: 0, False: 5.14k]
  ------------------
 9389|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9390|      0|        case detail::arg_type::uint128_type:
  ------------------
  |  Branch (9390:9): [True: 0, False: 5.14k]
  ------------------
 9391|      0|#if SCN_HAS_INT128
 9392|      0|            SCN_VISIT(uint128)
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9393|       |#else
 9394|       |            return vis(monostate_val);
 9395|       |#endif
 9396|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9396:9): [True: 0, False: 5.14k]
  ------------------
 9397|      0|            SCN_VISIT(void*);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9398|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9398:9): [True: 0, False: 5.14k]
  ------------------
 9399|      0|            SCN_VISIT(bool);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9400|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9400:9): [True: 0, False: 5.14k]
  ------------------
 9401|      0|            SCN_VISIT(char);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9402|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9402:9): [True: 0, False: 5.14k]
  ------------------
 9403|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9404|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9404:9): [True: 0, False: 5.14k]
  ------------------
 9405|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9406|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9406:9): [True: 0, False: 5.14k]
  ------------------
 9407|      0|            SCN_VISIT(float);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9408|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9408:9): [True: 0, False: 5.14k]
  ------------------
 9409|      0|            SCN_VISIT(double);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9410|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9410:9): [True: 0, False: 5.14k]
  ------------------
 9411|      0|            SCN_VISIT(long double);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9412|      0|        case detail::arg_type::float16_type:
  ------------------
  |  Branch (9412:9): [True: 0, False: 5.14k]
  ------------------
 9413|       |#if SCN_HAS_STD_F16
 9414|       |            SCN_VISIT(std::float16_t)
 9415|       |#else
 9416|      0|            return vis(monostate_val);
 9417|      0|#endif
 9418|      0|        case detail::arg_type::float32_type:
  ------------------
  |  Branch (9418:9): [True: 0, False: 5.14k]
  ------------------
 9419|       |#if SCN_HAS_STD_F32
 9420|       |            SCN_VISIT(std::float32_t)
 9421|       |#else
 9422|      0|            return vis(monostate_val);
 9423|      0|#endif
 9424|      0|        case detail::arg_type::float64_type:
  ------------------
  |  Branch (9424:9): [True: 0, False: 5.14k]
  ------------------
 9425|       |#if SCN_HAS_STD_F64
 9426|       |            SCN_VISIT(std::float64_t)
 9427|       |#else
 9428|      0|            return vis(monostate_val);
 9429|      0|#endif
 9430|      0|        case detail::arg_type::float128_type:
  ------------------
  |  Branch (9430:9): [True: 0, False: 5.14k]
  ------------------
 9431|       |#if SCN_HAS_STD_F64
 9432|       |            SCN_VISIT(std::float128_t)
 9433|       |#else
 9434|      0|            return vis(monostate_val);
 9435|      0|#endif
 9436|      0|        case detail::arg_type::bfloat16_type:
  ------------------
  |  Branch (9436:9): [True: 0, False: 5.14k]
  ------------------
 9437|       |#if SCN_HAS_STD_BF16
 9438|       |            SCN_VISIT(std::bfloat16_t)
 9439|       |#else
 9440|      0|            return vis(monostate_val);
 9441|      0|#endif
 9442|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9442:9): [True: 0, False: 5.14k]
  ------------------
 9443|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9444|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9444:9): [True: 0, False: 5.14k]
  ------------------
 9445|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9446|      0|        case detail::arg_type::string_view_type: {
  ------------------
  |  Branch (9446:9): [True: 0, False: 5.14k]
  ------------------
 9447|       |            if constexpr (std::is_same_v<typename Ctx::char_type, char>) {
 9448|       |                SCN_VISIT(std::string_view);
 9449|       |            }
 9450|      0|            else {
 9451|      0|                SCN_VISIT(std::wstring_view);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9452|      0|            }
 9453|      0|        }
 9454|       |
 9455|  5.14k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9455:9): [True: 5.14k, False: 0]
  ------------------
 9456|  5.14k|#if !SCN_DISABLE_TYPE_CUSTOM
 9457|  5.14k|            return vis(typename basic_scan_arg<Ctx>::handle(
 9458|  5.14k|                get_arg_value(arg).custom_value));
 9459|       |#else
 9460|       |            return vis(monostate_val);
 9461|       |#endif
 9462|       |
 9463|      0|            SCN_CLANG_PUSH
 9464|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9465|       |
 9466|      0|            SCN_UNLIKELY_ATTR
 9467|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9467:9): [True: 0, False: 5.14k]
  ------------------
 9468|      0|        default: {
  ------------------
  |  Branch (9468:9): [True: 0, False: 5.14k]
  ------------------
 9469|      0|            return vis(monostate_val);
 9470|      0|        }
 9471|       |
 9472|  5.14k|            SCN_CLANG_POP
 9473|  5.14k|    }
 9474|       |
 9475|      0|#undef SCN_VISIT
 9476|       |
 9477|      0|    SCN_ENSURE(false);
  ------------------
  |  | 1105|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1101|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9478|      0|    SCN_UNREACHABLE;
  ------------------
  |  | 1067|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9479|      0|}
_ZN3scn2v424basic_scan_parse_contextIwEC2INS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEEENS0_15source_tag_typeIT_EENSt3__117basic_string_viewIwNSH_11char_traitsIwEEEEi:
 6361|  5.14k|        : m_format{format},
 6362|  5.14k|          m_next_arg_id{next_arg_id},
 6363|  5.14k|          m_is_contiguous(ranges::range<Source> &&
  ------------------
  |  Branch (6363:27): [Folded - Ignored]
  ------------------
 6364|  5.14k|                          ranges::contiguous_range<Source>),
  ------------------
  |  Branch (6364:27): [Folded - Ignored]
  ------------------
 6365|       |          m_is_borrowed(
 6366|  5.14k|              (ranges::range<Source> && ranges::borrowed_range<Source>) ||
  ------------------
  |  Branch (6366:16): [Folded - Ignored]
  |  Branch (6366:41): [Folded - Ignored]
  ------------------
 6367|  5.14k|              std::is_same_v<detail::remove_cvref_t<Source>, std::FILE*>)
  ------------------
  |  Branch (6367:15): [Folded - Ignored]
  ------------------
 6368|  5.14k|    {
 6369|  5.14k|    }
_ZN3scn2v424basic_scan_parse_contextIwEC2IRNS0_6detail17basic_scan_bufferIwEEEENS0_15source_tag_typeIT_EENSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEi:
 6361|  93.3k|        : m_format{format},
 6362|  93.3k|          m_next_arg_id{next_arg_id},
 6363|  93.3k|          m_is_contiguous(ranges::range<Source> &&
  ------------------
  |  Branch (6363:27): [Folded - Ignored]
  ------------------
 6364|  93.3k|                          ranges::contiguous_range<Source>),
  ------------------
  |  Branch (6364:27): [Folded - Ignored]
  ------------------
 6365|       |          m_is_borrowed(
 6366|  93.3k|              (ranges::range<Source> && ranges::borrowed_range<Source>) ||
  ------------------
  |  Branch (6366:16): [Folded - Ignored]
  |  Branch (6366:41): [Folded - Ignored]
  ------------------
 6367|  93.3k|              std::is_same_v<detail::remove_cvref_t<Source>, std::FILE*>)
  ------------------
  |  Branch (6367:15): [Folded - Ignored]
  ------------------
 6368|  93.3k|    {
 6369|  93.3k|    }
impl.cpp:_ZN3scn2v46detail19parse_format_stringILb0EwRNS0_12_GLOBAL__N_114format_handlerILb0EwEEEENS0_13scan_expectedIvEENSt3__117basic_string_viewIT0_NS9_11char_traitsISB_EEEEOT1_:
 7877|  93.3k|{
 7878|  93.3k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7879|  93.3k|    handler.check_args_exhausted();
 7880|  93.3k|    return handler.get_error();
 7881|  93.3k|}
impl.cpp:_ZN3scn2v46detail24parse_format_string_implILb0EwRNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7842|  93.3k|{
 7843|       |    // TODO: memchr fast path with a larger (> 32) format string
 7844|       |
 7845|  93.3k|    auto begin = format.data();
 7846|  93.3k|    auto it = begin;
 7847|  93.3k|    const auto end = format.data() + format.size();
 7848|       |
 7849|   114k|    while (it != end) {
  ------------------
  |  Branch (7849:12): [True: 93.3k, False: 21.3k]
  ------------------
 7850|  93.3k|        const auto ch = *it++;
 7851|  93.3k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7851:13): [True: 93.3k, False: 0]
  ------------------
 7852|  93.3k|            handler.on_literal_text(begin, it - 1);
 7853|       |
 7854|  93.3k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7855|  93.3k|            if (!handler.get_error()) {
  ------------------
  |  Branch (7855:17): [True: 71.9k, False: 21.3k]
  ------------------
 7856|  71.9k|                return;
 7857|  71.9k|            }
 7858|  93.3k|        }
 7859|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7859:18): [True: 0, False: 0]
  ------------------
 7860|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  Branch (1039:45): [True: 0, False: 0]
  |  |  |  Branch (1039:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7861|      0|                handler.on_error("Unmatched '}' in format string");
 7862|      0|                return;
 7863|      0|            }
 7864|       |
 7865|      0|            handler.on_literal_text(begin, it);
 7866|      0|            begin = ++it;
 7867|      0|        }
 7868|  93.3k|    }
 7869|       |
 7870|  21.3k|    handler.on_literal_text(begin, end);
 7871|  21.3k|}
impl.cpp:_ZN3scn2v46detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S8_S8_RT0_:
 7774|  93.3k|{
 7775|  93.3k|    struct id_adapter {
 7776|  93.3k|        constexpr void operator()()
 7777|  93.3k|        {
 7778|  93.3k|            arg_id = handler.on_arg_id();
 7779|  93.3k|        }
 7780|  93.3k|        constexpr void operator()(std::size_t id)
 7781|  93.3k|        {
 7782|  93.3k|            arg_id = handler.on_arg_id(id);
 7783|  93.3k|        }
 7784|       |
 7785|  93.3k|        constexpr void on_error(const char* msg)
 7786|  93.3k|        {
 7787|  93.3k|            SCN_UNLIKELY_ATTR
 7788|  93.3k|            handler.on_error(msg);
 7789|  93.3k|        }
 7790|       |
 7791|  93.3k|        Handler& handler;
 7792|  93.3k|        std::size_t arg_id;
 7793|  93.3k|    };
 7794|       |
 7795|  93.3k|    ++begin;
 7796|  93.3k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|  93.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 93.3k]
  |  |  ------------------
  ------------------
 7797|      0|        handler.on_error("Unexpected end of replacement field");
 7798|      0|        return begin;
 7799|      0|    }
 7800|       |
 7801|  93.3k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7801:9): [True: 0, False: 93.3k]
  ------------------
 7802|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 7803|      0|    }
 7804|  93.3k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (7804:14): [True: 0, False: 93.3k]
  ------------------
 7805|      0|        handler.on_literal_text(begin, begin + 1);
 7806|      0|    }
 7807|  93.3k|    else {
 7808|  93.3k|        auto adapter = id_adapter{handler, 0};
 7809|  93.3k|        begin = parse_arg_id(begin, end, adapter);
 7810|       |
 7811|  93.3k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|  93.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 93.3k]
  |  |  ------------------
  ------------------
 7812|      0|            handler.on_error("Missing '}' in format string");
 7813|      0|            return begin;
 7814|      0|        }
 7815|       |
 7816|  93.3k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7816:13): [True: 0, False: 93.3k]
  ------------------
 7817|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 7818|      0|        }
 7819|  93.3k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (7819:18): [True: 93.3k, False: 0]
  ------------------
 7820|  93.3k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  | 1039|  93.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 93.3k]
  |  |  ------------------
  ------------------
 7821|      0|                handler.on_error("Unexpected end of replacement field");
 7822|      0|                return begin;
 7823|      0|            }
 7824|  93.3k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 7825|  93.3k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  | 1039|   186k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 93.3k]
  |  |  |  Branch (1039:45): [True: 0, False: 93.3k]
  |  |  |  Branch (1039:45): [True: 0, False: 93.3k]
  |  |  ------------------
  ------------------
 7826|      0|                handler.on_error("Unknown format specifier");
 7827|      0|                return begin;
 7828|      0|            }
 7829|  93.3k|        }
 7830|      0|        else {
 7831|      0|            SCN_UNLIKELY_ATTR
 7832|      0|            handler.on_error("Missing '}' in format string");
 7833|      0|            return begin;
 7834|      0|        }
 7835|  93.3k|    }
 7836|  93.3k|    return begin + 1;
 7837|  93.3k|}
impl.cpp:_ZN3scn2v46detail12parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 7275|  93.3k|{
 7276|  93.3k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1104|  93.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  93.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7277|  93.3k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (7277:9): [True: 93.3k, False: 0]
  |  Branch (7277:26): [True: 0, False: 93.3k]
  ------------------
 7278|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7279|      0|    }
 7280|       |
 7281|  93.3k|    handler();
 7282|  93.3k|    return begin;
 7283|  93.3k|}
impl.cpp:_ZZN3scn2v46detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 7777|  93.3k|        {
 7778|  93.3k|            arg_id = handler.on_arg_id();
 7779|  93.3k|        }
_ZN3scn2v46detail17basic_scan_bufferIwE8sync_allEv:
 4369|  77.1k|    {
 4370|  77.1k|        return sync(0);
 4371|  77.1k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2Ev:
 6216|  5.14k|    constexpr basic_scan_args() = default;
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2Ev:
 6216|  10.2k|    constexpr basic_scan_args() = default;
_ZNK3scn2v46ranges6detail4end_2fnclIRNS2_9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS8_12priority_tagILm3EEEEEEOT_:
 2939|  95.8k|    {
 2940|  95.8k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1110|  95.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2941|  95.8k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEESC_SB_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS8_12priority_tagILm1EEE:
 2921|  95.8k|    {
 2922|  95.8k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  | 1110|  95.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2923|  95.8k|    }
_ZN3scn2v46ranges6detail10decay_copyINS1_18default_sentinel_tEEEu7__decayIT_EOS5_:
 2107|   187k|{
 2108|   187k|    return SCN_FWD(t);
  ------------------
  |  | 1110|   187k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2109|   187k|}
_ZN3scn2v46detail17basic_scan_bufferIcE16forward_iterator13batch_advanceEl:
 4550|  43.1k|    {
 4551|  43.1k|        SCN_EXPECT(n >= 0);
  ------------------
  |  | 1104|  43.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  43.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4552|  43.1k|        m_position += n;
 4553|  43.1k|        return *this;
 4554|  43.1k|    }
_ZNK3scn2v46ranges6detail4end_2fnclIRNS2_9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS8_12priority_tagILm3EEEEEEOT_:
 2939|  91.1k|    {
 2940|  91.1k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1110|  91.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2941|  91.1k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEEESC_SB_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS8_12priority_tagILm1EEE:
 2921|  91.1k|    {
 2922|  91.1k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  | 1110|  91.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2923|  91.1k|    }
_ZN3scn2v46detail17basic_scan_bufferIwE16forward_iterator13batch_advanceEl:
 4550|  21.3k|    {
 4551|  21.3k|        SCN_EXPECT(n >= 0);
  ------------------
  |  | 1104|  21.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  21.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4552|  21.3k|        m_position += n;
 4553|  21.3k|        return *this;
 4554|  21.3k|    }

_ZN3scn2v44scanIJ2tmENS0_6ranges6detail9subrange_8subrangeIPKwS8_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINSA_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISC_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEEOSC_NS0_24basic_scan_format_stringIwNSO_13type_identityISC_E4typeEJDpNS10_ISU_E4typeEEEE:
   88|  15.5k|{
   89|  15.5k|    auto result = make_scan_result<Source, Args...>();
   90|  15.5k|    fill_scan_result(result,
   91|  15.5k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  | 1110|  15.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  15.5k|                           make_scan_args<wscan_context>(result->values())));
   93|  15.5k|    return result;
   94|  15.5k|}
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NSA_17basic_string_viewIwNSA_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSH_16buffer_range_tagEwEEEE:
   43|  46.6k|{
   44|  46.6k|    return detail::vscan_generic(SCN_FWD(range), format, args);
  ------------------
  |  | 1110|  46.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   45|  46.6k|}
_ZN3scn2v44scanIJ2tmENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwSA_EETnPNS3_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSH_0EEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISD_EEP8_IO_FILEEESP_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEERKT0_OSD_NS0_24basic_scan_format_stringIwNSQ_13type_identityISD_E4typeEJDpNS15_ISW_E4typeEEEE:
  130|  15.5k|{
  131|  15.5k|    auto result = make_scan_result<Source, Args...>();
  132|  15.5k|    fill_scan_result(result,
  133|  15.5k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1110|  15.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  15.5k|                           make_scan_args<wscan_context>(result->values())));
  135|  15.5k|    return result;
  136|  15.5k|}
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENSt3__16localeETnPvLPv0EEENS0_13scan_expectedINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESJ_NS0_6detail22borrowed_tail_subrangeISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEEERKT0_OSF_NS9_17basic_string_viewIwNS9_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSK_16buffer_range_tagEwEEEE:
   59|  46.6k|{
   60|  46.6k|    return detail::vscan_localized_generic(loc, SCN_FWD(range), format, args);
  ------------------
  |  | 1110|  46.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   61|  46.6k|}
_ZN3scn2v410scan_valueI2tmNS0_6ranges6detail9subrange_8subrangeIPKwS8_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINSA_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISC_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJT_EEEEEOSC_:
  170|  1.71k|{
  171|  1.71k|    auto result = make_scan_result<Source, T>();
  172|  1.71k|    fill_scan_result(
  173|  1.71k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  | 1110|  1.71k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  174|  1.71k|                            detail::make_arg<wscan_context>(result->value())));
  175|  1.71k|    return result;
  176|  1.71k|}
_ZN3scn2v411vscan_valueINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NS0_14basic_scan_argINS0_18basic_scan_contextINSH_16buffer_range_tagEwEEEE:
   71|  5.14k|{
   72|  5.14k|    return detail::vscan_value_generic(SCN_FWD(range), arg);
  ------------------
  |  | 1110|  5.14k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   73|  5.14k|}
_ZN3scn2v44scanIJNS0_10tm_with_tzEENS0_6ranges6detail9subrange_8subrangeIPKwS8_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINSA_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISC_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEEOSC_NS0_24basic_scan_format_stringIwNSO_13type_identityISC_E4typeEJDpNS10_ISU_E4typeEEEE:
   88|  15.5k|{
   89|  15.5k|    auto result = make_scan_result<Source, Args...>();
   90|  15.5k|    fill_scan_result(result,
   91|  15.5k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  | 1110|  15.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  15.5k|                           make_scan_args<wscan_context>(result->values())));
   93|  15.5k|    return result;
   94|  15.5k|}
_ZN3scn2v44scanIJNS0_10tm_with_tzEENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwSA_EETnPNS3_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSH_0EEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISD_EEP8_IO_FILEEESP_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEERKT0_OSD_NS0_24basic_scan_format_stringIwNSQ_13type_identityISD_E4typeEJDpNS15_ISW_E4typeEEEE:
  130|  15.5k|{
  131|  15.5k|    auto result = make_scan_result<Source, Args...>();
  132|  15.5k|    fill_scan_result(result,
  133|  15.5k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1110|  15.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  15.5k|                           make_scan_args<wscan_context>(result->values())));
  135|  15.5k|    return result;
  136|  15.5k|}
_ZN3scn2v410scan_valueINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwS8_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINSA_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISC_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJT_EEEEEOSC_:
  170|  1.71k|{
  171|  1.71k|    auto result = make_scan_result<Source, T>();
  172|  1.71k|    fill_scan_result(
  173|  1.71k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  | 1110|  1.71k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  174|  1.71k|                            detail::make_arg<wscan_context>(result->value())));
  175|  1.71k|    return result;
  176|  1.71k|}
_ZN3scn2v44scanIJNS0_19datetime_componentsEENS0_6ranges6detail9subrange_8subrangeIPKwS8_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINSA_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISC_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEEOSC_NS0_24basic_scan_format_stringIwNSO_13type_identityISC_E4typeEJDpNS10_ISU_E4typeEEEE:
   88|  15.5k|{
   89|  15.5k|    auto result = make_scan_result<Source, Args...>();
   90|  15.5k|    fill_scan_result(result,
   91|  15.5k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  | 1110|  15.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  15.5k|                           make_scan_args<wscan_context>(result->values())));
   93|  15.5k|    return result;
   94|  15.5k|}
_ZN3scn2v44scanIJNS0_19datetime_componentsEENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwSA_EETnPNS3_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSH_0EEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISD_EEP8_IO_FILEEESP_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEERKT0_OSD_NS0_24basic_scan_format_stringIwNSQ_13type_identityISD_E4typeEJDpNS15_ISW_E4typeEEEE:
  130|  15.5k|{
  131|  15.5k|    auto result = make_scan_result<Source, Args...>();
  132|  15.5k|    fill_scan_result(result,
  133|  15.5k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1110|  15.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  15.5k|                           make_scan_args<wscan_context>(result->values())));
  135|  15.5k|    return result;
  136|  15.5k|}
_ZN3scn2v410scan_valueINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwS8_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINSA_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISC_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJT_EEEEEOSC_:
  170|  1.71k|{
  171|  1.71k|    auto result = make_scan_result<Source, T>();
  172|  1.71k|    fill_scan_result(
  173|  1.71k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  | 1110|  1.71k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  174|  1.71k|                            detail::make_arg<wscan_context>(result->value())));
  175|  1.71k|    return result;
  176|  1.71k|}
_ZN3scn2v44scanIJ2tmENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EETnPNS7_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISH_EEP8_IO_FILEEESS_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEEOSH_NS0_24basic_scan_format_stringIwNST_13type_identityISH_E4typeEJDpNS15_ISZ_E4typeEEEE:
   88|  15.5k|{
   89|  15.5k|    auto result = make_scan_result<Source, Args...>();
   90|  15.5k|    fill_scan_result(result,
   91|  15.5k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  | 1110|  15.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  15.5k|                           make_scan_args<wscan_context>(result->values())));
   93|  15.5k|    return result;
   94|  15.5k|}
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS6_17basic_string_viewIwNS6_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSM_16buffer_range_tagEwEEEE:
   43|  46.6k|{
   44|  46.6k|    return detail::vscan_generic(SCN_FWD(range), format, args);
  ------------------
  |  | 1110|  46.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   45|  46.6k|}
_ZN3scn2v44scanIJ2tmENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS3_16__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EETnPNS3_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSM_0EEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISI_EEP8_IO_FILEEESU_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEERKT0_OSI_NS0_24basic_scan_format_stringIwNSV_13type_identityISI_E4typeEJDpNS1A_IS11_E4typeEEEE:
  130|  15.5k|{
  131|  15.5k|    auto result = make_scan_result<Source, Args...>();
  132|  15.5k|    fill_scan_result(result,
  133|  15.5k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1110|  15.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  15.5k|                           make_scan_args<wscan_context>(result->values())));
  135|  15.5k|    return result;
  136|  15.5k|}
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS6_6localeETnPvLPv0EEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEEERKT0_OSK_NS6_17basic_string_viewIwNS6_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSP_16buffer_range_tagEwEEEE:
   59|  46.6k|{
   60|  46.6k|    return detail::vscan_localized_generic(loc, SCN_FWD(range), format, args);
  ------------------
  |  | 1110|  46.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   61|  46.6k|}
_ZN3scn2v410scan_valueI2tmNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EETnPNS7_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISH_EEP8_IO_FILEEESS_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT_EEEEEOSH_:
  170|  1.71k|{
  171|  1.71k|    auto result = make_scan_result<Source, T>();
  172|  1.71k|    fill_scan_result(
  173|  1.71k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  | 1110|  1.71k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  174|  1.71k|                            detail::make_arg<wscan_context>(result->value())));
  175|  1.71k|    return result;
  176|  1.71k|}
_ZN3scn2v411vscan_valueINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS0_14basic_scan_argINS0_18basic_scan_contextINSM_16buffer_range_tagEwEEEE:
   71|  5.14k|{
   72|  5.14k|    return detail::vscan_value_generic(SCN_FWD(range), arg);
  ------------------
  |  | 1110|  5.14k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   73|  5.14k|}
_ZN3scn2v44scanIJNS0_10tm_with_tzEENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EETnPNS7_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISH_EEP8_IO_FILEEESS_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEEOSH_NS0_24basic_scan_format_stringIwNST_13type_identityISH_E4typeEJDpNS15_ISZ_E4typeEEEE:
   88|  15.5k|{
   89|  15.5k|    auto result = make_scan_result<Source, Args...>();
   90|  15.5k|    fill_scan_result(result,
   91|  15.5k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  | 1110|  15.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  15.5k|                           make_scan_args<wscan_context>(result->values())));
   93|  15.5k|    return result;
   94|  15.5k|}
_ZN3scn2v44scanIJNS0_10tm_with_tzEENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS3_16__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EETnPNS3_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSM_0EEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISI_EEP8_IO_FILEEESU_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEERKT0_OSI_NS0_24basic_scan_format_stringIwNSV_13type_identityISI_E4typeEJDpNS1A_IS11_E4typeEEEE:
  130|  15.5k|{
  131|  15.5k|    auto result = make_scan_result<Source, Args...>();
  132|  15.5k|    fill_scan_result(result,
  133|  15.5k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1110|  15.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  15.5k|                           make_scan_args<wscan_context>(result->values())));
  135|  15.5k|    return result;
  136|  15.5k|}
_ZN3scn2v410scan_valueINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EETnPNS7_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISH_EEP8_IO_FILEEESS_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT_EEEEEOSH_:
  170|  1.71k|{
  171|  1.71k|    auto result = make_scan_result<Source, T>();
  172|  1.71k|    fill_scan_result(
  173|  1.71k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  | 1110|  1.71k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  174|  1.71k|                            detail::make_arg<wscan_context>(result->value())));
  175|  1.71k|    return result;
  176|  1.71k|}
_ZN3scn2v44scanIJNS0_19datetime_componentsEENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EETnPNS7_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISH_EEP8_IO_FILEEESS_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEEOSH_NS0_24basic_scan_format_stringIwNST_13type_identityISH_E4typeEJDpNS15_ISZ_E4typeEEEE:
   88|  15.5k|{
   89|  15.5k|    auto result = make_scan_result<Source, Args...>();
   90|  15.5k|    fill_scan_result(result,
   91|  15.5k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  | 1110|  15.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  15.5k|                           make_scan_args<wscan_context>(result->values())));
   93|  15.5k|    return result;
   94|  15.5k|}
_ZN3scn2v44scanIJNS0_19datetime_componentsEENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS3_16__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EETnPNS3_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSM_0EEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISI_EEP8_IO_FILEEESU_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEERKT0_OSI_NS0_24basic_scan_format_stringIwNSV_13type_identityISI_E4typeEJDpNS1A_IS11_E4typeEEEE:
  130|  15.5k|{
  131|  15.5k|    auto result = make_scan_result<Source, Args...>();
  132|  15.5k|    fill_scan_result(result,
  133|  15.5k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1110|  15.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  15.5k|                           make_scan_args<wscan_context>(result->values())));
  135|  15.5k|    return result;
  136|  15.5k|}
_ZN3scn2v410scan_valueINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EETnPNS7_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISH_EEP8_IO_FILEEESS_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT_EEEEEOSH_:
  170|  1.71k|{
  171|  1.71k|    auto result = make_scan_result<Source, T>();
  172|  1.71k|    fill_scan_result(
  173|  1.71k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  | 1110|  1.71k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  174|  1.71k|                            detail::make_arg<wscan_context>(result->value())));
  175|  1.71k|    return result;
  176|  1.71k|}

_ZN3scn2v46detail32internal_skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEESD_b:
  249|  93.5k|{
  250|  93.5k|    return impl::skip_classic_whitespace(r, allow_exhaustion)
  251|  93.5k|        .transform_error(impl::make_eof_scan_error);
  252|  93.5k|}
_ZN3scn2v46detail32internal_skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEESD_b:
  249|  93.3k|{
  250|  93.3k|    return impl::skip_classic_whitespace(r, allow_exhaustion)
  251|  93.3k|        .transform_error(impl::make_eof_scan_error);
  252|  93.3k|}
_ZN3scn2v46detail10locale_refC2INSt3__16localeEEERKT_:
  307|   179k|locale_ref::locale_ref(const Locale& loc) : m_locale(&loc)
  308|   179k|{
  309|   179k|    static_assert(std::is_same_v<Locale, std::locale>);
  310|   179k|}
_ZN3scn2v46detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIcNS3_11char_traitsIcEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEE:
 2951|  39.5k|{
 2952|  39.5k|    return vscan_internal(source, format, args, detail::locale_ref{loc});
 2953|  39.5k|}
_ZN3scn2v46detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_RNS1_17basic_scan_bufferIcEENS3_17basic_string_viewIcNS3_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEE:
 2959|  46.7k|{
 2960|  46.7k|    auto n = vscan_internal(source, format, args, detail::locale_ref{loc});
 2961|  46.7k|    return sync_after_vscan(source, n);
 2962|  46.7k|}
_ZN3scn2v46detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIwNS3_11char_traitsIwEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEE:
 2969|  46.6k|{
 2970|  46.6k|    return vscan_internal(source, format, args, detail::locale_ref{loc});
 2971|  46.6k|}
_ZN3scn2v46detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_RNS1_17basic_scan_bufferIwEENS3_17basic_string_viewIwNS3_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEE:
 2977|  46.6k|{
 2978|  46.6k|    auto n = vscan_internal(source, format, args, detail::locale_ref{loc});
 2979|  46.6k|    return sync_after_vscan(source, n);
 2980|  46.6k|}
_ZN3scn2v46detail16chrono_scan_implIc2tmNS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEENS0_13scan_expectedINT1_8iteratorEEENSt3__117basic_string_viewIT_NSB_11char_traitsISD_EEEERT0_RS8_:
 4644|  57.5k|{
 4645|  57.5k|    if (ctx.begin().stores_parent()) {
  ------------------
  |  Branch (4645:9): [True: 31.1k, False: 26.3k]
  ------------------
 4646|       |        // ctx.begin() stores parent (buffer) -> not contiguous
 4647|  31.1k|        return chrono_scan_inner_impl(fmt_str, t, ctx);
 4648|  31.1k|    }
 4649|       |
 4650|  26.3k|    auto contiguous_ctx = impl::basic_contiguous_scan_context<CharT>(
 4651|  26.3k|        ctx.begin().contiguous_segment(), ctx.args(), ctx.locale());
 4652|  26.3k|    auto begin = contiguous_ctx.begin();
 4653|  26.3k|    SCN_TRY(it, chrono_scan_inner_impl(fmt_str, t, contiguous_ctx));
  ------------------
  |  | 3958|  26.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  26.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  26.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  26.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 11.9k, False: 14.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  11.9k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  11.9k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  11.9k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  11.9k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  11.9k|    }                                                  \
  |  |  |  | 3957|  26.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  14.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4654|  14.3k|    return ctx.begin().batch_advance(std::distance(begin, it));
 4655|  26.3k|}
_ZN3scn2v46detail16chrono_scan_implIcNS0_10tm_with_tzENS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEENS0_13scan_expectedINT1_8iteratorEEENSt3__117basic_string_viewIT_NSB_11char_traitsISD_EEEERT0_RS8_:
 4644|  57.5k|{
 4645|  57.5k|    if (ctx.begin().stores_parent()) {
  ------------------
  |  Branch (4645:9): [True: 31.1k, False: 26.3k]
  ------------------
 4646|       |        // ctx.begin() stores parent (buffer) -> not contiguous
 4647|  31.1k|        return chrono_scan_inner_impl(fmt_str, t, ctx);
 4648|  31.1k|    }
 4649|       |
 4650|  26.3k|    auto contiguous_ctx = impl::basic_contiguous_scan_context<CharT>(
 4651|  26.3k|        ctx.begin().contiguous_segment(), ctx.args(), ctx.locale());
 4652|  26.3k|    auto begin = contiguous_ctx.begin();
 4653|  26.3k|    SCN_TRY(it, chrono_scan_inner_impl(fmt_str, t, contiguous_ctx));
  ------------------
  |  | 3958|  26.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  26.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  26.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  26.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 11.9k, False: 14.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  11.9k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  11.9k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  11.9k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  11.9k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  11.9k|    }                                                  \
  |  |  |  | 3957|  26.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  14.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4654|  14.3k|    return ctx.begin().batch_advance(std::distance(begin, it));
 4655|  26.3k|}
_ZN3scn2v46detail16chrono_scan_implIcNS0_19datetime_componentsENS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEENS0_13scan_expectedINT1_8iteratorEEENSt3__117basic_string_viewIT_NSB_11char_traitsISD_EEEERT0_RS8_:
 4644|  57.5k|{
 4645|  57.5k|    if (ctx.begin().stores_parent()) {
  ------------------
  |  Branch (4645:9): [True: 31.1k, False: 26.3k]
  ------------------
 4646|       |        // ctx.begin() stores parent (buffer) -> not contiguous
 4647|  31.1k|        return chrono_scan_inner_impl(fmt_str, t, ctx);
 4648|  31.1k|    }
 4649|       |
 4650|  26.3k|    auto contiguous_ctx = impl::basic_contiguous_scan_context<CharT>(
 4651|  26.3k|        ctx.begin().contiguous_segment(), ctx.args(), ctx.locale());
 4652|  26.3k|    auto begin = contiguous_ctx.begin();
 4653|  26.3k|    SCN_TRY(it, chrono_scan_inner_impl(fmt_str, t, contiguous_ctx));
  ------------------
  |  | 3958|  26.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  26.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  26.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  26.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 11.9k, False: 14.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  11.9k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  11.9k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  11.9k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  11.9k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  11.9k|    }                                                  \
  |  |  |  | 3957|  26.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  14.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4654|  14.3k|    return ctx.begin().batch_advance(std::distance(begin, it));
 4655|  26.3k|}
_ZN3scn2v46detail16chrono_scan_implIw2tmNS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEENS0_13scan_expectedINT1_8iteratorEEENSt3__117basic_string_viewIT_NSB_11char_traitsISD_EEEERT0_RS8_:
 4644|  62.2k|{
 4645|  62.2k|    if (ctx.begin().stores_parent()) {
  ------------------
  |  Branch (4645:9): [True: 31.1k, False: 31.1k]
  ------------------
 4646|       |        // ctx.begin() stores parent (buffer) -> not contiguous
 4647|  31.1k|        return chrono_scan_inner_impl(fmt_str, t, ctx);
 4648|  31.1k|    }
 4649|       |
 4650|  31.1k|    auto contiguous_ctx = impl::basic_contiguous_scan_context<CharT>(
 4651|  31.1k|        ctx.begin().contiguous_segment(), ctx.args(), ctx.locale());
 4652|  31.1k|    auto begin = contiguous_ctx.begin();
 4653|  31.1k|    SCN_TRY(it, chrono_scan_inner_impl(fmt_str, t, contiguous_ctx));
  ------------------
  |  | 3958|  31.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  31.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  31.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  31.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 23.9k, False: 7.13k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  23.9k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  23.9k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  23.9k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  23.9k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  23.9k|    }                                                  \
  |  |  |  | 3957|  31.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  7.13k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4654|  7.13k|    return ctx.begin().batch_advance(std::distance(begin, it));
 4655|  31.1k|}
_ZN3scn2v46detail16chrono_scan_implIwNS0_10tm_with_tzENS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEENS0_13scan_expectedINT1_8iteratorEEENSt3__117basic_string_viewIT_NSB_11char_traitsISD_EEEERT0_RS8_:
 4644|  62.2k|{
 4645|  62.2k|    if (ctx.begin().stores_parent()) {
  ------------------
  |  Branch (4645:9): [True: 31.1k, False: 31.1k]
  ------------------
 4646|       |        // ctx.begin() stores parent (buffer) -> not contiguous
 4647|  31.1k|        return chrono_scan_inner_impl(fmt_str, t, ctx);
 4648|  31.1k|    }
 4649|       |
 4650|  31.1k|    auto contiguous_ctx = impl::basic_contiguous_scan_context<CharT>(
 4651|  31.1k|        ctx.begin().contiguous_segment(), ctx.args(), ctx.locale());
 4652|  31.1k|    auto begin = contiguous_ctx.begin();
 4653|  31.1k|    SCN_TRY(it, chrono_scan_inner_impl(fmt_str, t, contiguous_ctx));
  ------------------
  |  | 3958|  31.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  31.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  31.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  31.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 23.9k, False: 7.13k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  23.9k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  23.9k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  23.9k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  23.9k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  23.9k|    }                                                  \
  |  |  |  | 3957|  31.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  7.13k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4654|  7.13k|    return ctx.begin().batch_advance(std::distance(begin, it));
 4655|  31.1k|}
_ZN3scn2v46detail16chrono_scan_implIwNS0_19datetime_componentsENS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEENS0_13scan_expectedINT1_8iteratorEEENSt3__117basic_string_viewIT_NSB_11char_traitsISD_EEEERT0_RS8_:
 4644|  62.2k|{
 4645|  62.2k|    if (ctx.begin().stores_parent()) {
  ------------------
  |  Branch (4645:9): [True: 31.1k, False: 31.1k]
  ------------------
 4646|       |        // ctx.begin() stores parent (buffer) -> not contiguous
 4647|  31.1k|        return chrono_scan_inner_impl(fmt_str, t, ctx);
 4648|  31.1k|    }
 4649|       |
 4650|  31.1k|    auto contiguous_ctx = impl::basic_contiguous_scan_context<CharT>(
 4651|  31.1k|        ctx.begin().contiguous_segment(), ctx.args(), ctx.locale());
 4652|  31.1k|    auto begin = contiguous_ctx.begin();
 4653|  31.1k|    SCN_TRY(it, chrono_scan_inner_impl(fmt_str, t, contiguous_ctx));
  ------------------
  |  | 3958|  31.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  31.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  31.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  31.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 23.9k, False: 7.13k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  23.9k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  23.9k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  23.9k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  23.9k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  23.9k|    }                                                  \
  |  |  |  | 3957|  31.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  7.13k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4654|  7.13k|    return ctx.begin().batch_advance(std::distance(begin, it));
 4655|  31.1k|}
_ZN3scn2v44impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
  214|   172k|{
  215|   172k|    return find_classic_impl(
  216|   172k|        source, [](char ch) { return !is_ascii_space(ch); },
  217|   172k|        [](char32_t cp) { return !detail::is_cp_space(cp); });
  218|   172k|}
_ZN3scn2v46detail12handle_errorENS0_10scan_errorE:
  328|  15.4k|{
  329|  15.4k|    SCN_UNLIKELY_ATTR
  330|  15.4k|    return e;
  331|  15.4k|}
_ZN3scn2v46detail10vscan_implENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEE:
 2920|  39.5k|{
 2921|  39.5k|    return vscan_internal(source, format, args);
 2922|  39.5k|}
_ZN3scn2v46detail10vscan_implERNS1_17basic_scan_bufferIcEENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEE:
 2926|  46.7k|{
 2927|  46.7k|    auto n = vscan_internal(source, format, args);
 2928|  46.7k|    return sync_after_vscan(source, n);
 2929|  46.7k|}
_ZN3scn2v46detail10vscan_implENSt3__117basic_string_viewIwNS2_11char_traitsIwEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEE:
 2934|  46.6k|{
 2935|  46.6k|    return vscan_internal(source, format, args);
 2936|  46.6k|}
_ZN3scn2v46detail10vscan_implERNS1_17basic_scan_bufferIwEENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEE:
 2940|  46.6k|{
 2941|  46.6k|    auto n = vscan_internal(source, format, args);
 2942|  46.6k|    return sync_after_vscan(source, n);
 2943|  46.6k|}
_ZN3scn2v46detail16vscan_value_implENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEENS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEE:
 3006|  2.57k|{
 3007|  2.57k|    return vscan_value_internal(source, arg);
 3008|  2.57k|}
_ZN3scn2v46detail16vscan_value_implERNS1_17basic_scan_bufferIcEENS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEE:
 3011|  2.57k|{
 3012|  2.57k|    auto n = vscan_value_internal(source, arg);
 3013|  2.57k|    return sync_after_vscan(source, n);
 3014|  2.57k|}
_ZN3scn2v46detail16vscan_value_implENSt3__117basic_string_viewIwNS2_11char_traitsIwEEEENS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEE:
 3019|  5.14k|{
 3020|  5.14k|    return vscan_value_internal(source, arg);
 3021|  5.14k|}
_ZN3scn2v46detail16vscan_value_implERNS1_17basic_scan_bufferIwEENS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEE:
 3025|  5.14k|{
 3026|  5.14k|    auto n = vscan_value_internal(source, arg);
 3027|  5.14k|    return sync_after_vscan(source, n);
 3028|  5.14k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_120has_nonascii_char_64INSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEEbT_:
  117|  84.1k|{
  118|  84.1k|    static_assert(sizeof(*source.data()) == 1);
  119|  84.1k|    SCN_EXPECT(source.size() <= 8);
  ------------------
  |  | 1104|  84.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  84.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  120|  84.1k|    uint64_t word{};
  121|  84.1k|    std::memcpy(&word, source.data(), source.size());
  122|       |
  123|  84.1k|    return has_byte_greater(word, 127) != 0;
  124|  84.1k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_117find_classic_implIZNS1_33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEE3$_0ZNS1_33find_classic_nonspace_narrow_fastES8_E3$_1EEPKcS8_T_T0_:
  130|   172k|{
  131|   172k|    auto it = source.begin();
  132|       |
  133|   178k|    while (it != source.end()) {
  ------------------
  |  Branch (133:12): [True: 84.1k, False: 94.3k]
  ------------------
  134|  84.1k|        auto sv =
  135|  84.1k|            detail::make_string_view_from_iterators<char>(it, source.end())
  136|  84.1k|                .substr(0, 8);
  137|       |
  138|  84.1k|        if (!has_nonascii_char_64(sv)) {
  ------------------
  |  Branch (138:13): [True: 71.8k, False: 12.3k]
  ------------------
  139|  71.8k|            auto tmp_it = std::find_if(sv.begin(), sv.end(), cu_cb);
  140|  71.8k|            it = detail::make_string_view_iterator(source, tmp_it);
  141|  71.8k|            if (tmp_it != sv.end()) {
  ------------------
  |  Branch (141:17): [True: 67.4k, False: 4.44k]
  ------------------
  142|  67.4k|                break;
  143|  67.4k|            }
  144|  4.44k|            continue;
  145|  71.8k|        }
  146|       |
  147|  18.4k|        for (size_t i = 0; i < sv.size(); ++i) {
  ------------------
  |  Branch (147:28): [True: 17.0k, False: 1.37k]
  ------------------
  148|  17.0k|            auto tmp =
  149|  17.0k|                detail::make_string_view_from_iterators<char>(it, source.end());
  150|  17.0k|            auto res = get_next_code_point(tmp);
  151|  17.0k|            if (cp_cb(res.value)) {
  ------------------
  |  Branch (151:17): [True: 10.9k, False: 6.13k]
  ------------------
  152|  10.9k|                return it;
  153|  10.9k|            }
  154|  6.13k|            i += ranges::distance(tmp.data(), detail::to_address(res.iterator));
  155|  6.13k|            it = detail::make_string_view_iterator(source, res.iterator);
  156|  6.13k|            SCN_ENSURE(it <= source.end());
  ------------------
  |  | 1105|  6.13k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1101|  6.13k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  157|  6.13k|        }
  158|  12.3k|    }
  159|       |
  160|   161k|    return detail::make_string_view_iterator(source, it);
  161|   172k|}
impl.cpp:_ZZN3scn2v44impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_0clEc:
  216|   155k|        source, [](char ch) { return !is_ascii_space(ch); },
impl.cpp:_ZZN3scn2v44impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_1clEDi:
  217|  17.0k|        [](char32_t cp) { return !detail::is_cp_space(cp); });
impl.cpp:_ZN3scn2v412_GLOBAL__N_114vscan_internalIcEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENSt3__117basic_string_viewIS7_NSA_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS5_16buffer_range_tagES7_EEEENS5_10locale_refE:
 2817|  93.5k|{
 2818|  93.5k|    const auto argcount = args.size();
 2819|  93.5k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2819:9): [True: 0, False: 93.5k]
  |  Branch (2819:60): [True: 0, False: 0]
  ------------------
 2820|      0|        auto arg = args.get(0);
 2821|      0|        return scan_simple_single_argument(buffer, SCN_MOVE(args), arg);
  ------------------
  |  | 1108|      0|    static_cast<    \
  |  | 1109|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2822|      0|    }
 2823|       |
 2824|  93.5k|    if (buffer.is_contiguous()) {
  ------------------
  |  Branch (2824:9): [True: 0, False: 93.5k]
  ------------------
 2825|      0|        auto handler = format_handler<true, CharT>{buffer.get_contiguous(),
 2826|      0|                                                   format, SCN_MOVE(args),
  ------------------
  |  | 1108|      0|    static_cast<    \
  |  | 1109|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2827|      0|                                                   SCN_MOVE(loc), argcount};
  ------------------
  |  | 1108|      0|    static_cast<    \
  |  | 1109|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2828|      0|        return vscan_parse_format_string(format, handler);
 2829|      0|    }
 2830|       |
 2831|  93.5k|    SCN_UNLIKELY_ATTR
 2832|  93.5k|    {
 2833|  93.5k|        auto handler = format_handler<false, CharT>{
 2834|  93.5k|            buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  | 1108|  93.5k|    static_cast<    \
  |  | 1109|  93.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                          buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  | 1108|  93.5k|    static_cast<    \
  |  | 1109|  93.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2835|  93.5k|        return vscan_parse_format_string(format, handler);
 2836|  93.5k|    }
 2837|  93.5k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_139is_simple_single_argument_format_stringIcEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 2365|   172k|{
 2366|   172k|    if (format.size() != 2) {
  ------------------
  |  Branch (2366:9): [True: 172k, False: 0]
  ------------------
 2367|   172k|        return false;
 2368|   172k|    }
 2369|      0|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (2369:12): [True: 0, False: 0]
  |  Branch (2369:39): [True: 0, False: 0]
  ------------------
 2370|   172k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_127scan_simple_single_argumentIcEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENS0_15basic_scan_argsINS0_18basic_scan_contextINS5_16buffer_range_tagES7_EEEENS0_14basic_scan_argISD_EENS5_10locale_refE:
 2398|  2.57k|{
 2399|  2.57k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  | 1039|  2.57k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 2.57k]
  |  |  ------------------
  ------------------
 2400|      0|        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 2401|      0|                                             "Argument #0 not found");
 2402|      0|    }
 2403|       |
 2404|  2.57k|    if (SCN_LIKELY(source.is_contiguous())) {
  ------------------
  |  | 1038|  2.57k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 0, False: 2.57k]
  |  |  ------------------
  ------------------
 2405|      0|        auto reader = impl::default_arg_reader<
 2406|      0|            impl::basic_contiguous_scan_context<CharT>>{source.get_contiguous(),
 2407|      0|                                                        SCN_MOVE(args), loc};
  ------------------
  |  | 1108|      0|    static_cast<    \
  |  | 1109|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2408|      0|        SCN_TRY(it, arg.visit(SCN_MOVE(reader)));
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2409|      0|        return ranges::distance(source.get_contiguous().begin(), it);
 2410|      0|    }
 2411|       |
 2412|  2.57k|    auto reader = impl::default_arg_reader<detail::default_context<CharT>>{
 2413|  2.57k|        source.get(), SCN_MOVE(args), loc};
  ------------------
  |  | 1108|  2.57k|    static_cast<    \
  |  | 1109|  2.57k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2414|  2.57k|    SCN_TRY(it, arg.visit(SCN_MOVE(reader)));
  ------------------
  |  | 3958|  2.57k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  2.57k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  2.57k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  2.57k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 2.57k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  2.57k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  2.57k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  2.57k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  2.57k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  2.57k|    }                                                  \
  |  |  |  | 3957|  2.57k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2415|      0|    return it.position();
 2416|  2.57k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcEC2INS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEOT_NSt3__117basic_string_viewIcNSE_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEENSL_10locale_refEm:
 2641|  79.1k|        : format_handler_base{argcount},
 2642|  79.1k|          parse_ctx{source_tag<Source&&>, format},
 2643|  79.1k|          ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  | 1110|  79.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  | 1108|  79.1k|    static_cast<    \
  |  | 1109|  79.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  | 1108|  79.1k|    static_cast<    \
  |  | 1109|  79.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2644|  79.1k|    {
 2645|  79.1k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_baseC2Em:
 2459|   359k|    format_handler_base(size_t argcount) : args_count(argcount)
 2460|   359k|    {
 2461|   359k|        if (SCN_UNLIKELY(args_count >= 64)) {
  ------------------
  |  | 1039|   359k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 359k]
  |  |  ------------------
  ------------------
 2462|      0|            visited_args_upper.resize((args_count - 64) / 8);
 2463|      0|        }
 2464|   359k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_126contiguous_context_wrapperIcEC2ENS0_6ranges6detail9subrange_8subrangeIPKcS9_EENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEENSD_10locale_refE:
 2592|  79.1k|        : contiguous_ctx(source, args, loc)
 2593|  79.1k|    {
 2594|  79.1k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_125vscan_parse_format_stringIcNS1_14format_handlerILb1EcEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2782|  79.1k|{
 2783|  79.1k|    const auto beg = handler.get_ctx().begin();
 2784|  79.1k|    detail::parse_format_string<false>(format, handler);
 2785|  79.1k|    if (auto err = handler.get_error(); SCN_UNLIKELY(!err)) {
  ------------------
  |  | 1039|  79.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 35.9k, False: 43.1k]
  |  |  ------------------
  ------------------
 2786|  35.9k|        return unexpected(err.error());
 2787|  35.9k|    }
 2788|  43.1k|    return ranges::distance(beg, handler.get_ctx().begin());
 2789|  79.1k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE7get_ctxEv:
 2766|   244k|    {
 2767|   244k|        return ctx.get();
 2768|   244k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_126contiguous_context_wrapperIcE3getEv:
 2597|   244k|    {
 2598|   244k|        return contiguous_ctx;
 2599|   244k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE15on_literal_textEPKcS5_:
 2648|   122k|    {
 2649|   122k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (2649:16): [True: 0, False: 122k]
  ------------------
 2650|      0|            auto it = get_ctx().begin();
 2651|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (2651:17): [True: 0, False: 0]
  ------------------
 2652|      0|                SCN_UNLIKELY_ATTR
 2653|      0|                return on_error(
 2654|      0|                    {scan_error::invalid_literal, "Unexpected end of source"});
 2655|      0|            }
 2656|       |
 2657|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 2658|      0|                    detail::make_string_view_from_pointers(begin, end));
 2659|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (2659:17): [True: 0, False: 0]
  ------------------
 2660|      0|                SCN_UNLIKELY_ATTR
 2661|      0|                return on_error({scan_error::invalid_format_string,
 2662|      0|                                 "Invalid encoding in format string"});
 2663|      0|            }
 2664|      0|            else if (is_space) {
  ------------------
  |  Branch (2664:22): [True: 0, False: 0]
  ------------------
 2665|       |                // Skip all whitespace in input
 2666|      0|                get_ctx().advance_to(
 2667|      0|                    impl::read_while_classic_space(get_ctx().range()));
 2668|       |                // And, skip all whitespace in the format string
 2669|      0|                auto begin_it = impl::read_while_classic_space(
 2670|      0|                    detail::make_string_view_from_pointers(
 2671|      0|                        detail::to_address(after_space_it),
 2672|      0|                        detail::to_address(end)));
 2673|       |                // (-1 because of the for loop ++begin)
 2674|      0|                begin = detail::to_address(begin_it) - 1;
 2675|      0|                continue;
 2676|      0|            }
 2677|       |
 2678|      0|            if (*it != *begin) {
  ------------------
  |  Branch (2678:17): [True: 0, False: 0]
  ------------------
 2679|      0|                SCN_UNLIKELY_ATTR
 2680|      0|                return on_error({scan_error::invalid_literal,
 2681|      0|                                 "Unexpected literal character in source"});
 2682|      0|            }
 2683|      0|            get_ctx().advance_to(ranges::next(it));
 2684|      0|        }
 2685|   122k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_base8on_errorENS0_10scan_errorE:
 2508|   215k|    {
 2509|   215k|        error = unexpected(err);
 2510|   215k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_17get_argINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEmNS1_14format_handlerILb1EcEEEEDaRT_T0_RT1_:
 2420|  79.1k|{
 2421|  79.1k|    auto arg = ctx.arg(id);
 2422|  79.1k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  | 1039|  79.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 79.1k]
  |  |  ------------------
  ------------------
 2423|      0|        handler.on_error("Failed to find argument with ID");
 2424|      0|    }
 2425|  79.1k|    return arg;
 2426|  79.1k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_base18set_arg_as_visitedEm:
 2534|   359k|    {
 2535|   359k|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  | 1039|   359k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 359k]
  |  |  ------------------
  ------------------
 2536|      0|            on_error({scan_error::invalid_format_string,
 2537|      0|                      "Argument ID out-of-range"});
 2538|      0|            return;
 2539|      0|        }
 2540|       |
 2541|   359k|        if (SCN_UNLIKELY(has_arg_been_visited(id))) {
  ------------------
  |  | 1039|   359k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 359k]
  |  |  ------------------
  ------------------
 2542|      0|            on_error({scan_error::invalid_format_string,
 2543|      0|                      "Argument with this ID has already been scanned"});
 2544|      0|        }
 2545|       |
 2546|   359k|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  | 1038|   359k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 359k, False: 0]
  |  |  ------------------
  ------------------
 2547|   359k|            visited_args_lower64 |= (1ull << id);
 2548|   359k|            return;
 2549|   359k|        }
 2550|       |
 2551|      0|        id -= 64;
 2552|      0|        visited_args_upper[id / 8] |= (1ull << (id % 8));
 2553|      0|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_base20has_arg_been_visitedEm:
 2518|   359k|    {
 2519|   359k|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  | 1039|   359k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 359k]
  |  |  ------------------
  ------------------
 2520|      0|            on_error({scan_error::invalid_format_string,
 2521|      0|                      "Argument ID out-of-range"});
 2522|      0|            return false;
 2523|      0|        }
 2524|       |
 2525|   359k|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  | 1038|   359k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 359k, False: 0]
  |  |  ------------------
  ------------------
 2526|   359k|            return (visited_args_lower64 >> id) & 1ull;
 2527|   359k|        }
 2528|       |
 2529|      0|        id -= 64;
 2530|      0|        return (visited_args_upper[id / 8] >> (id % 8)) & 1ull;
 2531|   359k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE9on_arg_idEv:
 2688|  79.1k|    {
 2689|  79.1k|        return parse_ctx.next_arg_id();
 2690|  79.1k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE15on_format_specsEmPKcS5_:
 2728|  79.1k|    {
 2729|  79.1k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 2730|  79.1k|        set_arg_as_visited(arg_id);
 2731|       |
 2732|  79.1k|        if (detail::get_arg_type(arg) == detail::arg_type::custom_type) {
  ------------------
  |  Branch (2732:13): [True: 79.1k, False: 0]
  ------------------
 2733|  79.1k|            parse_ctx.advance_to(begin);
 2734|  79.1k|            on_visit_scan_arg(
 2735|  79.1k|                impl::custom_reader<detail::default_context<char_type>>{
 2736|  79.1k|                    parse_ctx, get_custom_ctx()},
 2737|  79.1k|                arg);
 2738|  79.1k|            return parse_ctx.begin();
 2739|  79.1k|        }
 2740|       |
 2741|      0|        auto specs = detail::format_specs{};
 2742|      0|        detail::specs_checker<specs_handler<context_type>> handler{
 2743|      0|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 2744|      0|            detail::get_arg_type(arg)};
 2745|       |
 2746|      0|        begin = detail::parse_format_specs(begin, end, handler);
 2747|      0|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (2747:13): [True: 0, False: 0]
  |  Branch (2747:29): [True: 0, False: 0]
  ------------------
 2748|      0|            SCN_UNLIKELY_ATTR
 2749|      0|            on_error({scan_error::invalid_format_string,
 2750|      0|                      "Missing '}' in format string"});
 2751|      0|            return parse_ctx.begin();
 2752|      0|        }
 2753|      0|        if (SCN_UNLIKELY(!handler.get_error())) {
  ------------------
  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 2754|      0|            return parse_ctx.begin();
 2755|      0|        }
 2756|      0|        parse_ctx.advance_to(begin);
 2757|       |
 2758|      0|        on_visit_scan_arg(
 2759|      0|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2760|      0|                                           get_ctx().locale()},
 2761|      0|            arg);
 2762|      0|        return parse_ctx.begin();
 2763|      0|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE17on_visit_scan_argINS0_4impl13custom_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEEEEvOT_NS0_14basic_scan_argISA_EE:
 2699|  79.1k|    {
 2700|  79.1k|        if (!get_error() || !arg) {
  ------------------
  |  Branch (2700:13): [True: 0, False: 79.1k]
  |  Branch (2700:13): [True: 0, False: 79.1k]
  |  Branch (2700:29): [True: 0, False: 79.1k]
  ------------------
 2701|      0|            SCN_UNLIKELY_ATTR
 2702|      0|            return;
 2703|      0|        }
 2704|       |
 2705|  79.1k|        auto r = arg.visit(SCN_FWD(visitor));
  ------------------
  |  | 1110|  79.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2706|  79.1k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  | 1039|  79.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 35.9k, False: 43.1k]
  |  |  ------------------
  ------------------
 2707|  35.9k|            on_error(r.error());
 2708|  35.9k|        }
 2709|  43.1k|        else {
 2710|  43.1k|            get_ctx().advance_to(*r);
 2711|  43.1k|        }
 2712|  79.1k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE14get_custom_ctxEv:
 2770|  79.1k|    {
 2771|  79.1k|        return ctx.get_custom();
 2772|  79.1k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_126contiguous_context_wrapperIcE10get_customEv:
 2601|  79.1k|    {
 2602|  79.1k|        if (!buffer) {
  ------------------
  |  Branch (2602:13): [True: 79.1k, False: 0]
  ------------------
 2603|  79.1k|            buffer.emplace(detail::make_string_view_from_pointers(
 2604|  79.1k|                ranges::data(contiguous_ctx.underlying_range()),
 2605|  79.1k|                ranges::data(contiguous_ctx.underlying_range()) +
 2606|  79.1k|                    ranges::size(contiguous_ctx.underlying_range())));
 2607|  79.1k|        }
 2608|  79.1k|        auto it = buffer->get().begin();
 2609|  79.1k|        it.batch_advance_to(contiguous_ctx.begin_position());
 2610|  79.1k|        custom_ctx.emplace(it, contiguous_ctx.args(), contiguous_ctx.locale());
 2611|  79.1k|        return *custom_ctx;
 2612|  79.1k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_base20check_args_exhaustedEv:
 2467|   359k|    {
 2468|   359k|        {
 2469|   359k|            const auto args_count_lower64 = args_count >= 64 ? 64 : args_count;
  ------------------
  |  Branch (2469:45): [True: 0, False: 359k]
  ------------------
 2470|   359k|            const uint64_t mask = args_count_lower64 == 64
  ------------------
  |  Branch (2470:35): [True: 0, False: 359k]
  ------------------
 2471|   359k|                                      ? std::numeric_limits<uint64_t>::max()
 2472|   359k|                                      : (1ull << args_count_lower64) - 1;
 2473|       |
 2474|   359k|            if (visited_args_lower64 != mask) {
  ------------------
  |  Branch (2474:17): [True: 0, False: 359k]
  ------------------
 2475|      0|                return on_error({scan_error::invalid_format_string,
 2476|      0|                                 "Argument list not exhausted"});
 2477|      0|            }
 2478|   359k|        }
 2479|       |
 2480|   359k|        if (args_count < 64) {
  ------------------
  |  Branch (2480:13): [True: 359k, False: 0]
  ------------------
 2481|   359k|            return;
 2482|   359k|        }
 2483|       |
 2484|      0|        auto last_args_count = args_count - 64;
 2485|      0|        for (auto it = visited_args_upper.begin();
 2486|      0|             it != visited_args_upper.end() - 1; ++it) {
  ------------------
  |  Branch (2486:14): [True: 0, False: 0]
  ------------------
 2487|      0|            if (*it != std::numeric_limits<uint8_t>::max()) {
  ------------------
  |  Branch (2487:17): [True: 0, False: 0]
  ------------------
 2488|      0|                return on_error({scan_error::invalid_format_string,
 2489|      0|                                 "Argument list not exhausted"});
 2490|      0|            }
 2491|      0|            last_args_count -= 8;
 2492|      0|        }
 2493|       |
 2494|      0|        const auto mask = static_cast<uint8_t>(1u << last_args_count) - 1;
 2495|      0|        if (visited_args_upper.back() != mask) {
  ------------------
  |  Branch (2495:13): [True: 0, False: 0]
  ------------------
 2496|      0|            return on_error({scan_error::invalid_format_string,
 2497|      0|                             "Argument list not exhausted"});
 2498|      0|        }
 2499|      0|    }
impl.cpp:_ZNK3scn2v412_GLOBAL__N_119format_handler_base9get_errorEv:
 2513|  1.43M|    {
 2514|  1.43M|        return error;
 2515|  1.43M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EcEC2IRNS0_6detail17basic_scan_bufferIcEEEEOT_NSt3__117basic_string_viewIcNSB_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS5_16buffer_range_tagEcEEEENS5_10locale_refEm:
 2641|  93.5k|        : format_handler_base{argcount},
 2642|  93.5k|          parse_ctx{source_tag<Source&&>, format},
 2643|  93.5k|          ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  | 1110|  93.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  | 1108|  93.5k|    static_cast<    \
  |  | 1109|  93.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  | 1108|  93.5k|    static_cast<    \
  |  | 1109|  93.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2644|  93.5k|    {
 2645|  93.5k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_122simple_context_wrapperIcEC2ERNS0_6detail17basic_scan_bufferIcEENS0_15basic_scan_argsINS0_18basic_scan_contextINS4_16buffer_range_tagEcEEEENS4_10locale_refE:
 2568|  93.5k|        : ctx(source.get().begin(), SCN_MOVE(args), loc)
  ------------------
  |  | 1108|  93.5k|    static_cast<    \
  |  | 1109|  93.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2569|  93.5k|    {
 2570|  93.5k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_125vscan_parse_format_stringIcNS1_14format_handlerILb0EcEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2782|  93.5k|{
 2783|  93.5k|    const auto beg = handler.get_ctx().begin();
 2784|  93.5k|    detail::parse_format_string<false>(format, handler);
 2785|  93.5k|    if (auto err = handler.get_error(); SCN_UNLIKELY(!err)) {
  ------------------
  |  | 1039|  93.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 35.9k, False: 57.5k]
  |  |  ------------------
  ------------------
 2786|  35.9k|        return unexpected(err.error());
 2787|  35.9k|    }
 2788|  57.5k|    return ranges::distance(beg, handler.get_ctx().begin());
 2789|  93.5k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EcE7get_ctxEv:
 2766|   302k|    {
 2767|   302k|        return ctx.get();
 2768|   302k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_122simple_context_wrapperIcE3getEv:
 2573|   302k|    {
 2574|   302k|        return ctx;
 2575|   302k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EcE15on_literal_textEPKcS5_:
 2648|   151k|    {
 2649|   151k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (2649:16): [True: 0, False: 151k]
  ------------------
 2650|      0|            auto it = get_ctx().begin();
 2651|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (2651:17): [True: 0, False: 0]
  ------------------
 2652|      0|                SCN_UNLIKELY_ATTR
 2653|      0|                return on_error(
 2654|      0|                    {scan_error::invalid_literal, "Unexpected end of source"});
 2655|      0|            }
 2656|       |
 2657|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 2658|      0|                    detail::make_string_view_from_pointers(begin, end));
 2659|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (2659:17): [True: 0, False: 0]
  ------------------
 2660|      0|                SCN_UNLIKELY_ATTR
 2661|      0|                return on_error({scan_error::invalid_format_string,
 2662|      0|                                 "Invalid encoding in format string"});
 2663|      0|            }
 2664|      0|            else if (is_space) {
  ------------------
  |  Branch (2664:22): [True: 0, False: 0]
  ------------------
 2665|       |                // Skip all whitespace in input
 2666|      0|                get_ctx().advance_to(
 2667|      0|                    impl::read_while_classic_space(get_ctx().range()));
 2668|       |                // And, skip all whitespace in the format string
 2669|      0|                auto begin_it = impl::read_while_classic_space(
 2670|      0|                    detail::make_string_view_from_pointers(
 2671|      0|                        detail::to_address(after_space_it),
 2672|      0|                        detail::to_address(end)));
 2673|       |                // (-1 because of the for loop ++begin)
 2674|      0|                begin = detail::to_address(begin_it) - 1;
 2675|      0|                continue;
 2676|      0|            }
 2677|       |
 2678|      0|            if (*it != *begin) {
  ------------------
  |  Branch (2678:17): [True: 0, False: 0]
  ------------------
 2679|      0|                SCN_UNLIKELY_ATTR
 2680|      0|                return on_error({scan_error::invalid_literal,
 2681|      0|                                 "Unexpected literal character in source"});
 2682|      0|            }
 2683|      0|            get_ctx().advance_to(ranges::next(it));
 2684|      0|        }
 2685|   151k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_17get_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEmNS1_14format_handlerILb0EcEEEEDaRT_T0_RT1_:
 2420|  93.5k|{
 2421|  93.5k|    auto arg = ctx.arg(id);
 2422|  93.5k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  | 1039|  93.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 93.5k]
  |  |  ------------------
  ------------------
 2423|      0|        handler.on_error("Failed to find argument with ID");
 2424|      0|    }
 2425|  93.5k|    return arg;
 2426|  93.5k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EcE9on_arg_idEv:
 2688|  93.5k|    {
 2689|  93.5k|        return parse_ctx.next_arg_id();
 2690|  93.5k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EcE15on_format_specsEmPKcS5_:
 2728|  93.5k|    {
 2729|  93.5k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 2730|  93.5k|        set_arg_as_visited(arg_id);
 2731|       |
 2732|  93.5k|        if (detail::get_arg_type(arg) == detail::arg_type::custom_type) {
  ------------------
  |  Branch (2732:13): [True: 93.5k, False: 0]
  ------------------
 2733|  93.5k|            parse_ctx.advance_to(begin);
 2734|  93.5k|            on_visit_scan_arg(
 2735|  93.5k|                impl::custom_reader<detail::default_context<char_type>>{
 2736|  93.5k|                    parse_ctx, get_custom_ctx()},
 2737|  93.5k|                arg);
 2738|  93.5k|            return parse_ctx.begin();
 2739|  93.5k|        }
 2740|       |
 2741|      0|        auto specs = detail::format_specs{};
 2742|      0|        detail::specs_checker<specs_handler<context_type>> handler{
 2743|      0|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 2744|      0|            detail::get_arg_type(arg)};
 2745|       |
 2746|      0|        begin = detail::parse_format_specs(begin, end, handler);
 2747|      0|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (2747:13): [True: 0, False: 0]
  |  Branch (2747:29): [True: 0, False: 0]
  ------------------
 2748|      0|            SCN_UNLIKELY_ATTR
 2749|      0|            on_error({scan_error::invalid_format_string,
 2750|      0|                      "Missing '}' in format string"});
 2751|      0|            return parse_ctx.begin();
 2752|      0|        }
 2753|      0|        if (SCN_UNLIKELY(!handler.get_error())) {
  ------------------
  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 2754|      0|            return parse_ctx.begin();
 2755|      0|        }
 2756|      0|        parse_ctx.advance_to(begin);
 2757|       |
 2758|      0|        on_visit_scan_arg(
 2759|      0|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2760|      0|                                           get_ctx().locale()},
 2761|      0|            arg);
 2762|      0|        return parse_ctx.begin();
 2763|      0|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EcE17on_visit_scan_argINS0_4impl13custom_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEEEEvOT_NS0_14basic_scan_argISA_EE:
 2699|  93.5k|    {
 2700|  93.5k|        if (!get_error() || !arg) {
  ------------------
  |  Branch (2700:13): [True: 0, False: 93.5k]
  |  Branch (2700:13): [True: 0, False: 93.5k]
  |  Branch (2700:29): [True: 0, False: 93.5k]
  ------------------
 2701|      0|            SCN_UNLIKELY_ATTR
 2702|      0|            return;
 2703|      0|        }
 2704|       |
 2705|  93.5k|        auto r = arg.visit(SCN_FWD(visitor));
  ------------------
  |  | 1110|  93.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2706|  93.5k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  | 1039|  93.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 35.9k, False: 57.5k]
  |  |  ------------------
  ------------------
 2707|  35.9k|            on_error(r.error());
 2708|  35.9k|        }
 2709|  57.5k|        else {
 2710|  57.5k|            get_ctx().advance_to(*r);
 2711|  57.5k|        }
 2712|  93.5k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EcE14get_custom_ctxEv:
 2770|  93.5k|    {
 2771|  93.5k|        return ctx.get_custom();
 2772|  93.5k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_122simple_context_wrapperIcE10get_customEv:
 2577|  93.5k|    {
 2578|  93.5k|        return ctx;
 2579|  93.5k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114vscan_internalIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagES7_EEEENSD_10locale_refE:
 2797|  79.1k|{
 2798|  79.1k|    const auto argcount = args.size();
 2799|  79.1k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2799:9): [True: 0, False: 79.1k]
  |  Branch (2799:60): [True: 0, False: 0]
  ------------------
 2800|      0|        auto arg = args.get(0);
 2801|      0|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  | 1108|      0|    static_cast<    \
  |  | 1109|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2802|      0|    }
 2803|       |
 2804|  79.1k|    auto handler = format_handler<true, CharT>{
 2805|  79.1k|        ranges::subrange<const CharT*>{source.data(),
 2806|  79.1k|                                       source.data() + source.size()},
 2807|  79.1k|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  | 1108|  79.1k|    static_cast<    \
  |  | 1109|  79.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  | 1108|  79.1k|    static_cast<    \
  |  | 1109|  79.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2808|  79.1k|    return vscan_parse_format_string(format, handler);
 2809|  79.1k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_127scan_simple_single_argumentIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagES7_EEEENS0_14basic_scan_argISF_EENSD_10locale_refE:
 2378|  2.57k|{
 2379|  2.57k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  | 1039|  2.57k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 2.57k]
  |  |  ------------------
  ------------------
 2380|      0|        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 2381|      0|                                             "Argument #0 not found");
 2382|      0|    }
 2383|       |
 2384|  2.57k|    auto reader =
 2385|  2.57k|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
 2386|  2.57k|            ranges::subrange<const CharT*>{source.data(),
 2387|  2.57k|                                           source.data() + source.size()},
 2388|  2.57k|            SCN_MOVE(args), loc};
  ------------------
  |  | 1108|  2.57k|    static_cast<    \
  |  | 1109|  2.57k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2389|  2.57k|    SCN_TRY(it, arg.visit(SCN_MOVE(reader)));
  ------------------
  |  | 3958|  2.57k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  2.57k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  2.57k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  2.57k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 2.57k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  2.57k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  2.57k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  2.57k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  2.57k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  2.57k|    }                                                  \
  |  |  |  | 3957|  2.57k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2390|      0|    return ranges::distance(source.data(), it);
 2391|  2.57k|}
impl.cpp:_ZN3scn2v46detail12_GLOBAL__N_116sync_after_vscanINS1_17basic_scan_bufferIcEEEENS0_13scan_expectedIlEERT_S7_:
 2897|  96.1k|{
 2898|  96.1k|    if (SCN_LIKELY(result)) {
  ------------------
  |  | 1038|  96.1k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 57.5k, False: 38.5k]
  |  |  ------------------
  ------------------
 2899|  57.5k|        if (SCN_UNLIKELY(!source.sync(*result))) {
  ------------------
  |  | 1039|  57.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 57.5k]
  |  |  ------------------
  ------------------
 2900|      0|            return detail::unexpected_scan_error(
 2901|      0|                scan_error::invalid_source_state,
 2902|      0|                "Failed to sync with underlying source");
 2903|      0|        }
 2904|  57.5k|    }
 2905|  38.5k|    else {
 2906|  38.5k|        if (SCN_UNLIKELY(!source.sync_all())) {
  ------------------
  |  | 1039|  38.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 38.5k]
  |  |  ------------------
  ------------------
 2907|      0|            return detail::unexpected_scan_error(
 2908|      0|                scan_error::invalid_source_state,
 2909|      0|                "Failed to sync with underlying source");
 2910|      0|        }
 2911|  38.5k|    }
 2912|  96.1k|    return result;
 2913|  96.1k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114vscan_internalIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagES7_EEEENSD_10locale_refE:
 2797|  93.3k|{
 2798|  93.3k|    const auto argcount = args.size();
 2799|  93.3k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2799:9): [True: 0, False: 93.3k]
  |  Branch (2799:60): [True: 0, False: 0]
  ------------------
 2800|      0|        auto arg = args.get(0);
 2801|      0|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  | 1108|      0|    static_cast<    \
  |  | 1109|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2802|      0|    }
 2803|       |
 2804|  93.3k|    auto handler = format_handler<true, CharT>{
 2805|  93.3k|        ranges::subrange<const CharT*>{source.data(),
 2806|  93.3k|                                       source.data() + source.size()},
 2807|  93.3k|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  | 1108|  93.3k|    static_cast<    \
  |  | 1109|  93.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  | 1108|  93.3k|    static_cast<    \
  |  | 1109|  93.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2808|  93.3k|    return vscan_parse_format_string(format, handler);
 2809|  93.3k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_139is_simple_single_argument_format_stringIwEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 2365|   186k|{
 2366|   186k|    if (format.size() != 2) {
  ------------------
  |  Branch (2366:9): [True: 186k, False: 0]
  ------------------
 2367|   186k|        return false;
 2368|   186k|    }
 2369|      0|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (2369:12): [True: 0, False: 0]
  |  Branch (2369:39): [True: 0, False: 0]
  ------------------
 2370|   186k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_127scan_simple_single_argumentIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagES7_EEEENS0_14basic_scan_argISF_EENSD_10locale_refE:
 2378|  5.14k|{
 2379|  5.14k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  | 1039|  5.14k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 5.14k]
  |  |  ------------------
  ------------------
 2380|      0|        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 2381|      0|                                             "Argument #0 not found");
 2382|      0|    }
 2383|       |
 2384|  5.14k|    auto reader =
 2385|  5.14k|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
 2386|  5.14k|            ranges::subrange<const CharT*>{source.data(),
 2387|  5.14k|                                           source.data() + source.size()},
 2388|  5.14k|            SCN_MOVE(args), loc};
  ------------------
  |  | 1108|  5.14k|    static_cast<    \
  |  | 1109|  5.14k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2389|  5.14k|    SCN_TRY(it, arg.visit(SCN_MOVE(reader)));
  ------------------
  |  | 3958|  5.14k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  5.14k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  5.14k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  5.14k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 5.14k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  5.14k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  5.14k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  5.14k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  5.14k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  5.14k|    }                                                  \
  |  |  |  | 3957|  5.14k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2390|      0|    return ranges::distance(source.data(), it);
 2391|  5.14k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwEC2INS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEOT_NSt3__117basic_string_viewIwNSE_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEENSL_10locale_refEm:
 2641|  93.3k|        : format_handler_base{argcount},
 2642|  93.3k|          parse_ctx{source_tag<Source&&>, format},
 2643|  93.3k|          ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  | 1110|  93.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  | 1108|  93.3k|    static_cast<    \
  |  | 1109|  93.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  | 1108|  93.3k|    static_cast<    \
  |  | 1109|  93.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2644|  93.3k|    {
 2645|  93.3k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_126contiguous_context_wrapperIwEC2ENS0_6ranges6detail9subrange_8subrangeIPKwS9_EENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEENSD_10locale_refE:
 2592|  93.3k|        : contiguous_ctx(source, args, loc)
 2593|  93.3k|    {
 2594|  93.3k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_125vscan_parse_format_stringIwNS1_14format_handlerILb1EwEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2782|  93.3k|{
 2783|  93.3k|    const auto beg = handler.get_ctx().begin();
 2784|  93.3k|    detail::parse_format_string<false>(format, handler);
 2785|  93.3k|    if (auto err = handler.get_error(); SCN_UNLIKELY(!err)) {
  ------------------
  |  | 1039|  93.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 71.9k, False: 21.3k]
  |  |  ------------------
  ------------------
 2786|  71.9k|        return unexpected(err.error());
 2787|  71.9k|    }
 2788|  21.3k|    return ranges::distance(beg, handler.get_ctx().begin());
 2789|  93.3k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE7get_ctxEv:
 2766|   229k|    {
 2767|   229k|        return ctx.get();
 2768|   229k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_126contiguous_context_wrapperIwE3getEv:
 2597|   229k|    {
 2598|   229k|        return contiguous_ctx;
 2599|   229k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE15on_literal_textEPKwS5_:
 2648|   114k|    {
 2649|   114k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (2649:16): [True: 0, False: 114k]
  ------------------
 2650|      0|            auto it = get_ctx().begin();
 2651|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (2651:17): [True: 0, False: 0]
  ------------------
 2652|      0|                SCN_UNLIKELY_ATTR
 2653|      0|                return on_error(
 2654|      0|                    {scan_error::invalid_literal, "Unexpected end of source"});
 2655|      0|            }
 2656|       |
 2657|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 2658|      0|                    detail::make_string_view_from_pointers(begin, end));
 2659|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (2659:17): [True: 0, False: 0]
  ------------------
 2660|      0|                SCN_UNLIKELY_ATTR
 2661|      0|                return on_error({scan_error::invalid_format_string,
 2662|      0|                                 "Invalid encoding in format string"});
 2663|      0|            }
 2664|      0|            else if (is_space) {
  ------------------
  |  Branch (2664:22): [True: 0, False: 0]
  ------------------
 2665|       |                // Skip all whitespace in input
 2666|      0|                get_ctx().advance_to(
 2667|      0|                    impl::read_while_classic_space(get_ctx().range()));
 2668|       |                // And, skip all whitespace in the format string
 2669|      0|                auto begin_it = impl::read_while_classic_space(
 2670|      0|                    detail::make_string_view_from_pointers(
 2671|      0|                        detail::to_address(after_space_it),
 2672|      0|                        detail::to_address(end)));
 2673|       |                // (-1 because of the for loop ++begin)
 2674|      0|                begin = detail::to_address(begin_it) - 1;
 2675|      0|                continue;
 2676|      0|            }
 2677|       |
 2678|      0|            if (*it != *begin) {
  ------------------
  |  Branch (2678:17): [True: 0, False: 0]
  ------------------
 2679|      0|                SCN_UNLIKELY_ATTR
 2680|      0|                return on_error({scan_error::invalid_literal,
 2681|      0|                                 "Unexpected literal character in source"});
 2682|      0|            }
 2683|      0|            get_ctx().advance_to(ranges::next(it));
 2684|      0|        }
 2685|   114k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_17get_argINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEmNS1_14format_handlerILb1EwEEEEDaRT_T0_RT1_:
 2420|  93.3k|{
 2421|  93.3k|    auto arg = ctx.arg(id);
 2422|  93.3k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  | 1039|  93.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 93.3k]
  |  |  ------------------
  ------------------
 2423|      0|        handler.on_error("Failed to find argument with ID");
 2424|      0|    }
 2425|  93.3k|    return arg;
 2426|  93.3k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE9on_arg_idEv:
 2688|  93.3k|    {
 2689|  93.3k|        return parse_ctx.next_arg_id();
 2690|  93.3k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE15on_format_specsEmPKwS5_:
 2728|  93.3k|    {
 2729|  93.3k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 2730|  93.3k|        set_arg_as_visited(arg_id);
 2731|       |
 2732|  93.3k|        if (detail::get_arg_type(arg) == detail::arg_type::custom_type) {
  ------------------
  |  Branch (2732:13): [True: 93.3k, False: 0]
  ------------------
 2733|  93.3k|            parse_ctx.advance_to(begin);
 2734|  93.3k|            on_visit_scan_arg(
 2735|  93.3k|                impl::custom_reader<detail::default_context<char_type>>{
 2736|  93.3k|                    parse_ctx, get_custom_ctx()},
 2737|  93.3k|                arg);
 2738|  93.3k|            return parse_ctx.begin();
 2739|  93.3k|        }
 2740|       |
 2741|      0|        auto specs = detail::format_specs{};
 2742|      0|        detail::specs_checker<specs_handler<context_type>> handler{
 2743|      0|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 2744|      0|            detail::get_arg_type(arg)};
 2745|       |
 2746|      0|        begin = detail::parse_format_specs(begin, end, handler);
 2747|      0|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (2747:13): [True: 0, False: 0]
  |  Branch (2747:29): [True: 0, False: 0]
  ------------------
 2748|      0|            SCN_UNLIKELY_ATTR
 2749|      0|            on_error({scan_error::invalid_format_string,
 2750|      0|                      "Missing '}' in format string"});
 2751|      0|            return parse_ctx.begin();
 2752|      0|        }
 2753|      0|        if (SCN_UNLIKELY(!handler.get_error())) {
  ------------------
  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 2754|      0|            return parse_ctx.begin();
 2755|      0|        }
 2756|      0|        parse_ctx.advance_to(begin);
 2757|       |
 2758|      0|        on_visit_scan_arg(
 2759|      0|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2760|      0|                                           get_ctx().locale()},
 2761|      0|            arg);
 2762|      0|        return parse_ctx.begin();
 2763|      0|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE17on_visit_scan_argINS0_4impl13custom_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEEEEvOT_NS0_14basic_scan_argISA_EE:
 2699|  93.3k|    {
 2700|  93.3k|        if (!get_error() || !arg) {
  ------------------
  |  Branch (2700:13): [True: 0, False: 93.3k]
  |  Branch (2700:13): [True: 0, False: 93.3k]
  |  Branch (2700:29): [True: 0, False: 93.3k]
  ------------------
 2701|      0|            SCN_UNLIKELY_ATTR
 2702|      0|            return;
 2703|      0|        }
 2704|       |
 2705|  93.3k|        auto r = arg.visit(SCN_FWD(visitor));
  ------------------
  |  | 1110|  93.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2706|  93.3k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  | 1039|  93.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 71.9k, False: 21.3k]
  |  |  ------------------
  ------------------
 2707|  71.9k|            on_error(r.error());
 2708|  71.9k|        }
 2709|  21.3k|        else {
 2710|  21.3k|            get_ctx().advance_to(*r);
 2711|  21.3k|        }
 2712|  93.3k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE14get_custom_ctxEv:
 2770|  93.3k|    {
 2771|  93.3k|        return ctx.get_custom();
 2772|  93.3k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_126contiguous_context_wrapperIwE10get_customEv:
 2601|  93.3k|    {
 2602|  93.3k|        if (!buffer) {
  ------------------
  |  Branch (2602:13): [True: 93.3k, False: 0]
  ------------------
 2603|  93.3k|            buffer.emplace(detail::make_string_view_from_pointers(
 2604|  93.3k|                ranges::data(contiguous_ctx.underlying_range()),
 2605|  93.3k|                ranges::data(contiguous_ctx.underlying_range()) +
 2606|  93.3k|                    ranges::size(contiguous_ctx.underlying_range())));
 2607|  93.3k|        }
 2608|  93.3k|        auto it = buffer->get().begin();
 2609|  93.3k|        it.batch_advance_to(contiguous_ctx.begin_position());
 2610|  93.3k|        custom_ctx.emplace(it, contiguous_ctx.args(), contiguous_ctx.locale());
 2611|  93.3k|        return *custom_ctx;
 2612|  93.3k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114vscan_internalIwEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENSt3__117basic_string_viewIS7_NSA_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS5_16buffer_range_tagES7_EEEENS5_10locale_refE:
 2817|  93.3k|{
 2818|  93.3k|    const auto argcount = args.size();
 2819|  93.3k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2819:9): [True: 0, False: 93.3k]
  |  Branch (2819:60): [True: 0, False: 0]
  ------------------
 2820|      0|        auto arg = args.get(0);
 2821|      0|        return scan_simple_single_argument(buffer, SCN_MOVE(args), arg);
  ------------------
  |  | 1108|      0|    static_cast<    \
  |  | 1109|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2822|      0|    }
 2823|       |
 2824|  93.3k|    if (buffer.is_contiguous()) {
  ------------------
  |  Branch (2824:9): [True: 0, False: 93.3k]
  ------------------
 2825|      0|        auto handler = format_handler<true, CharT>{buffer.get_contiguous(),
 2826|      0|                                                   format, SCN_MOVE(args),
  ------------------
  |  | 1108|      0|    static_cast<    \
  |  | 1109|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2827|      0|                                                   SCN_MOVE(loc), argcount};
  ------------------
  |  | 1108|      0|    static_cast<    \
  |  | 1109|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2828|      0|        return vscan_parse_format_string(format, handler);
 2829|      0|    }
 2830|       |
 2831|  93.3k|    SCN_UNLIKELY_ATTR
 2832|  93.3k|    {
 2833|  93.3k|        auto handler = format_handler<false, CharT>{
 2834|  93.3k|            buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  | 1108|  93.3k|    static_cast<    \
  |  | 1109|  93.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                          buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  | 1108|  93.3k|    static_cast<    \
  |  | 1109|  93.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2835|  93.3k|        return vscan_parse_format_string(format, handler);
 2836|  93.3k|    }
 2837|  93.3k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_127scan_simple_single_argumentIwEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENS0_15basic_scan_argsINS0_18basic_scan_contextINS5_16buffer_range_tagES7_EEEENS0_14basic_scan_argISD_EENS5_10locale_refE:
 2398|  5.14k|{
 2399|  5.14k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  | 1039|  5.14k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 5.14k]
  |  |  ------------------
  ------------------
 2400|      0|        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 2401|      0|                                             "Argument #0 not found");
 2402|      0|    }
 2403|       |
 2404|  5.14k|    if (SCN_LIKELY(source.is_contiguous())) {
  ------------------
  |  | 1038|  5.14k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 0, False: 5.14k]
  |  |  ------------------
  ------------------
 2405|      0|        auto reader = impl::default_arg_reader<
 2406|      0|            impl::basic_contiguous_scan_context<CharT>>{source.get_contiguous(),
 2407|      0|                                                        SCN_MOVE(args), loc};
  ------------------
  |  | 1108|      0|    static_cast<    \
  |  | 1109|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2408|      0|        SCN_TRY(it, arg.visit(SCN_MOVE(reader)));
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2409|      0|        return ranges::distance(source.get_contiguous().begin(), it);
 2410|      0|    }
 2411|       |
 2412|  5.14k|    auto reader = impl::default_arg_reader<detail::default_context<CharT>>{
 2413|  5.14k|        source.get(), SCN_MOVE(args), loc};
  ------------------
  |  | 1108|  5.14k|    static_cast<    \
  |  | 1109|  5.14k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2414|  5.14k|    SCN_TRY(it, arg.visit(SCN_MOVE(reader)));
  ------------------
  |  | 3958|  5.14k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  5.14k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  5.14k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  5.14k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 5.14k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  5.14k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  5.14k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  5.14k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  5.14k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  5.14k|    }                                                  \
  |  |  |  | 3957|  5.14k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2415|      0|    return it.position();
 2416|  5.14k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EwEC2IRNS0_6detail17basic_scan_bufferIwEEEEOT_NSt3__117basic_string_viewIwNSB_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS5_16buffer_range_tagEwEEEENS5_10locale_refEm:
 2641|  93.3k|        : format_handler_base{argcount},
 2642|  93.3k|          parse_ctx{source_tag<Source&&>, format},
 2643|  93.3k|          ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  | 1110|  93.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  | 1108|  93.3k|    static_cast<    \
  |  | 1109|  93.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  | 1108|  93.3k|    static_cast<    \
  |  | 1109|  93.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2644|  93.3k|    {
 2645|  93.3k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_122simple_context_wrapperIwEC2ERNS0_6detail17basic_scan_bufferIwEENS0_15basic_scan_argsINS0_18basic_scan_contextINS4_16buffer_range_tagEwEEEENS4_10locale_refE:
 2568|  93.3k|        : ctx(source.get().begin(), SCN_MOVE(args), loc)
  ------------------
  |  | 1108|  93.3k|    static_cast<    \
  |  | 1109|  93.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2569|  93.3k|    {
 2570|  93.3k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_125vscan_parse_format_stringIwNS1_14format_handlerILb0EwEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2782|  93.3k|{
 2783|  93.3k|    const auto beg = handler.get_ctx().begin();
 2784|  93.3k|    detail::parse_format_string<false>(format, handler);
 2785|  93.3k|    if (auto err = handler.get_error(); SCN_UNLIKELY(!err)) {
  ------------------
  |  | 1039|  93.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 71.9k, False: 21.3k]
  |  |  ------------------
  ------------------
 2786|  71.9k|        return unexpected(err.error());
 2787|  71.9k|    }
 2788|  21.3k|    return ranges::distance(beg, handler.get_ctx().begin());
 2789|  93.3k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EwE7get_ctxEv:
 2766|   229k|    {
 2767|   229k|        return ctx.get();
 2768|   229k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_122simple_context_wrapperIwE3getEv:
 2573|   229k|    {
 2574|   229k|        return ctx;
 2575|   229k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EwE15on_literal_textEPKwS5_:
 2648|   114k|    {
 2649|   114k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (2649:16): [True: 0, False: 114k]
  ------------------
 2650|      0|            auto it = get_ctx().begin();
 2651|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (2651:17): [True: 0, False: 0]
  ------------------
 2652|      0|                SCN_UNLIKELY_ATTR
 2653|      0|                return on_error(
 2654|      0|                    {scan_error::invalid_literal, "Unexpected end of source"});
 2655|      0|            }
 2656|       |
 2657|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 2658|      0|                    detail::make_string_view_from_pointers(begin, end));
 2659|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (2659:17): [True: 0, False: 0]
  ------------------
 2660|      0|                SCN_UNLIKELY_ATTR
 2661|      0|                return on_error({scan_error::invalid_format_string,
 2662|      0|                                 "Invalid encoding in format string"});
 2663|      0|            }
 2664|      0|            else if (is_space) {
  ------------------
  |  Branch (2664:22): [True: 0, False: 0]
  ------------------
 2665|       |                // Skip all whitespace in input
 2666|      0|                get_ctx().advance_to(
 2667|      0|                    impl::read_while_classic_space(get_ctx().range()));
 2668|       |                // And, skip all whitespace in the format string
 2669|      0|                auto begin_it = impl::read_while_classic_space(
 2670|      0|                    detail::make_string_view_from_pointers(
 2671|      0|                        detail::to_address(after_space_it),
 2672|      0|                        detail::to_address(end)));
 2673|       |                // (-1 because of the for loop ++begin)
 2674|      0|                begin = detail::to_address(begin_it) - 1;
 2675|      0|                continue;
 2676|      0|            }
 2677|       |
 2678|      0|            if (*it != *begin) {
  ------------------
  |  Branch (2678:17): [True: 0, False: 0]
  ------------------
 2679|      0|                SCN_UNLIKELY_ATTR
 2680|      0|                return on_error({scan_error::invalid_literal,
 2681|      0|                                 "Unexpected literal character in source"});
 2682|      0|            }
 2683|      0|            get_ctx().advance_to(ranges::next(it));
 2684|      0|        }
 2685|   114k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_17get_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEmNS1_14format_handlerILb0EwEEEEDaRT_T0_RT1_:
 2420|  93.3k|{
 2421|  93.3k|    auto arg = ctx.arg(id);
 2422|  93.3k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  | 1039|  93.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 93.3k]
  |  |  ------------------
  ------------------
 2423|      0|        handler.on_error("Failed to find argument with ID");
 2424|      0|    }
 2425|  93.3k|    return arg;
 2426|  93.3k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EwE9on_arg_idEv:
 2688|  93.3k|    {
 2689|  93.3k|        return parse_ctx.next_arg_id();
 2690|  93.3k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EwE15on_format_specsEmPKwS5_:
 2728|  93.3k|    {
 2729|  93.3k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 2730|  93.3k|        set_arg_as_visited(arg_id);
 2731|       |
 2732|  93.3k|        if (detail::get_arg_type(arg) == detail::arg_type::custom_type) {
  ------------------
  |  Branch (2732:13): [True: 93.3k, False: 0]
  ------------------
 2733|  93.3k|            parse_ctx.advance_to(begin);
 2734|  93.3k|            on_visit_scan_arg(
 2735|  93.3k|                impl::custom_reader<detail::default_context<char_type>>{
 2736|  93.3k|                    parse_ctx, get_custom_ctx()},
 2737|  93.3k|                arg);
 2738|  93.3k|            return parse_ctx.begin();
 2739|  93.3k|        }
 2740|       |
 2741|      0|        auto specs = detail::format_specs{};
 2742|      0|        detail::specs_checker<specs_handler<context_type>> handler{
 2743|      0|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 2744|      0|            detail::get_arg_type(arg)};
 2745|       |
 2746|      0|        begin = detail::parse_format_specs(begin, end, handler);
 2747|      0|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (2747:13): [True: 0, False: 0]
  |  Branch (2747:29): [True: 0, False: 0]
  ------------------
 2748|      0|            SCN_UNLIKELY_ATTR
 2749|      0|            on_error({scan_error::invalid_format_string,
 2750|      0|                      "Missing '}' in format string"});
 2751|      0|            return parse_ctx.begin();
 2752|      0|        }
 2753|      0|        if (SCN_UNLIKELY(!handler.get_error())) {
  ------------------
  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 2754|      0|            return parse_ctx.begin();
 2755|      0|        }
 2756|      0|        parse_ctx.advance_to(begin);
 2757|       |
 2758|      0|        on_visit_scan_arg(
 2759|      0|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2760|      0|                                           get_ctx().locale()},
 2761|      0|            arg);
 2762|      0|        return parse_ctx.begin();
 2763|      0|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EwE17on_visit_scan_argINS0_4impl13custom_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEEEEvOT_NS0_14basic_scan_argISA_EE:
 2699|  93.3k|    {
 2700|  93.3k|        if (!get_error() || !arg) {
  ------------------
  |  Branch (2700:13): [True: 0, False: 93.3k]
  |  Branch (2700:13): [True: 0, False: 93.3k]
  |  Branch (2700:29): [True: 0, False: 93.3k]
  ------------------
 2701|      0|            SCN_UNLIKELY_ATTR
 2702|      0|            return;
 2703|      0|        }
 2704|       |
 2705|  93.3k|        auto r = arg.visit(SCN_FWD(visitor));
  ------------------
  |  | 1110|  93.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2706|  93.3k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  | 1039|  93.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 71.9k, False: 21.3k]
  |  |  ------------------
  ------------------
 2707|  71.9k|            on_error(r.error());
 2708|  71.9k|        }
 2709|  21.3k|        else {
 2710|  21.3k|            get_ctx().advance_to(*r);
 2711|  21.3k|        }
 2712|  93.3k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EwE14get_custom_ctxEv:
 2770|  93.3k|    {
 2771|  93.3k|        return ctx.get_custom();
 2772|  93.3k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_122simple_context_wrapperIwE10get_customEv:
 2577|  93.3k|    {
 2578|  93.3k|        return ctx;
 2579|  93.3k|    }
impl.cpp:_ZN3scn2v46detail12_GLOBAL__N_116sync_after_vscanINS1_17basic_scan_bufferIwEEEENS0_13scan_expectedIlEERT_S7_:
 2897|  98.5k|{
 2898|  98.5k|    if (SCN_LIKELY(result)) {
  ------------------
  |  | 1038|  98.5k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 21.3k, False: 77.1k]
  |  |  ------------------
  ------------------
 2899|  21.3k|        if (SCN_UNLIKELY(!source.sync(*result))) {
  ------------------
  |  | 1039|  21.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 21.3k]
  |  |  ------------------
  ------------------
 2900|      0|            return detail::unexpected_scan_error(
 2901|      0|                scan_error::invalid_source_state,
 2902|      0|                "Failed to sync with underlying source");
 2903|      0|        }
 2904|  21.3k|    }
 2905|  77.1k|    else {
 2906|  77.1k|        if (SCN_UNLIKELY(!source.sync_all())) {
  ------------------
  |  | 1039|  77.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 77.1k]
  |  |  ------------------
  ------------------
 2907|      0|            return detail::unexpected_scan_error(
 2908|      0|                scan_error::invalid_source_state,
 2909|      0|                "Failed to sync with underlying source");
 2910|      0|        }
 2911|  77.1k|    }
 2912|  98.5k|    return result;
 2913|  98.5k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_120vscan_value_internalIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEcEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagET0_EEEE:
 2843|  2.57k|{
 2844|  2.57k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  | 1110|  2.57k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2845|  2.57k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_120vscan_value_internalIRNS0_6detail17basic_scan_bufferIcEEcEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextINS3_16buffer_range_tagET0_EEEE:
 2843|  2.57k|{
 2844|  2.57k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  | 1110|  2.57k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2845|  2.57k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_120vscan_value_internalIRNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEwEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagET0_EEEE:
 2843|  5.14k|{
 2844|  5.14k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  | 1110|  5.14k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2845|  5.14k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_120vscan_value_internalIRNS0_6detail17basic_scan_bufferIwEEwEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextINS3_16buffer_range_tagET0_EEEE:
 2843|  5.14k|{
 2844|  5.14k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  | 1110|  5.14k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2845|  5.14k|}
_ZN3scn2v46detail22chrono_scan_inner_implIc2tmNS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEENS0_13scan_expectedINT1_8iteratorEEENSt3__117basic_string_viewIT_NSB_11char_traitsISD_EEEERT0_RS8_:
 4625|  31.1k|{
 4626|  31.1k|    {
 4627|  31.1k|        SCN_TRY(it,
  ------------------
  |  | 3958|  31.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  31.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  31.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  31.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 482, False: 30.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    482|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    482|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    482|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    482|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    482|    }                                                  \
  |  |  |  | 3957|  31.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  30.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4628|  30.7k|                detail::internal_skip_classic_whitespace(ctx.range(), false));
 4629|  30.7k|        ctx.advance_to(SCN_MOVE(it));
  ------------------
  |  | 1108|  30.7k|    static_cast<    \
  |  | 1109|  30.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4630|  30.7k|    }
 4631|       |
 4632|      0|    auto r = detail::tm_reader<T, typename Context::range_type, CharT>(
 4633|  30.7k|        ctx.range(), t, ctx.locale());
 4634|  30.7k|    detail::parse_chrono_format_specs(fmt.data(), fmt.data() + fmt.size(), r);
 4635|  30.7k|    if (auto e = r.get_error(); SCN_UNLIKELY(!e)) {
  ------------------
  |  | 1039|  30.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 11.5k, False: 19.1k]
  |  |  ------------------
  ------------------
 4636|  11.5k|        return unexpected(e.error());
 4637|  11.5k|    }
 4638|  19.1k|    return r.get_iterator();
 4639|  30.7k|}
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcEC2ESC_RS3_NS1_10locale_refE:
 3769|  30.7k|        : m_range(SCN_MOVE(r)),
  ------------------
  |  | 1108|  30.7k|    static_cast<    \
  |  | 1109|  30.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3770|  30.7k|          m_begin(ranges::begin(m_range)),
 3771|  30.7k|          m_tm(t),
 3772|  30.7k|          m_loc(loc)
 3773|  30.7k|    {
 3774|  30.7k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE8on_errorEPKc:
 4420|  10.6k|    {
 4421|  10.6k|        set_error({scan_error::invalid_format_string, msg});
 4422|  10.6k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE9set_errorENS0_10scan_errorE:
 4425|  45.7k|    {
 4426|  45.7k|        if (m_error.has_value()) {
  ------------------
  |  Branch (4426:13): [True: 11.5k, False: 34.2k]
  ------------------
 4427|  11.5k|            m_error = unexpected(e);
 4428|  11.5k|        }
 4429|  45.7k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE7on_textEPKcSF_:
 3777|  31.9k|    {
 3778|  52.9k|        while (beg != end) {
  ------------------
  |  Branch (3778:16): [True: 31.9k, False: 21.0k]
  ------------------
 3779|  31.9k|            if (m_begin == ranges::end(m_range)) {
  ------------------
  |  Branch (3779:17): [True: 228, False: 31.7k]
  ------------------
 3780|    228|                return set_error({scan_error::end_of_input, "EOF"});
 3781|    228|            }
 3782|  31.7k|            if (*beg != *m_begin) {
  ------------------
  |  Branch (3782:17): [True: 10.6k, False: 21.0k]
  ------------------
 3783|  10.6k|                return on_error("Invalid literal character");
 3784|  10.6k|            }
 3785|  21.0k|            ++beg;
 3786|  21.0k|            ++m_begin;
 3787|  21.0k|        }
 3788|  31.9k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE12on_full_yearENS1_14numeric_systemE:
 3807|  3.66k|    {
 3808|  3.66k|#if !SCN_DISABLE_LOCALE
 3809|  3.66k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3809:13): [True: 0, False: 3.66k]
  |  Branch (3809:31): [True: 0, False: 0]
  ------------------
 3810|      0|            if (auto t = read_localized("%EY", L"%EY")) {
  ------------------
  |  Branch (3810:22): [True: 0, False: 0]
  ------------------
 3811|      0|                setter::set_full_year(*this, m_tm, m_st, t->tm_year + 1900);
 3812|      0|            }
 3813|      0|            return;
 3814|      0|        }
 3815|  3.66k|#endif
 3816|       |
 3817|  3.66k|        int yr = read_classic_unsigned_integer(4, 4);
 3818|  3.66k|        setter::set_full_year(*this, m_tm, m_st, yr);
 3819|  3.66k|    }
_ZN3scn2v46detail15datetime_setterI2tmE13set_full_yearINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 3280|  3.66k|    {
 3281|  3.66k|        if (SCN_UNLIKELY(y < std::numeric_limits<int>::min() + 1900)) {
  ------------------
  |  | 1039|  3.66k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 3.66k]
  |  |  ------------------
  ------------------
 3282|      0|            return h.set_error({scan_error::invalid_scanned_value,
 3283|      0|                                "Invalid value for tm_year"});
 3284|      0|        }
 3285|  3.66k|        t.tm_year = y - 1900;
 3286|  3.66k|        st.set_full_year(h);
 3287|  3.66k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE29read_classic_unsigned_integerEii:
 4443|  54.7k|    {
 4444|  54.7k|        int digits_read = 0;
 4445|  54.7k|        int accumulator = 0;
 4446|  94.7k|        while (m_begin != m_range.end()) {
  ------------------
  |  Branch (4446:16): [True: 94.2k, False: 450]
  ------------------
 4447|  94.2k|            const auto ch = *m_begin;
 4448|  94.2k|            if (ch < CharT{'0'} || ch > CharT{'9'}) {
  ------------------
  |  Branch (4448:17): [True: 27.8k, False: 66.4k]
  |  Branch (4448:36): [True: 18.0k, False: 48.3k]
  ------------------
 4449|  45.8k|                break;
 4450|  45.8k|            }
 4451|  48.3k|            ++m_begin;
 4452|  48.3k|            ++digits_read;
 4453|  48.3k|            accumulator = accumulator * 10 + static_cast<int>(ch - CharT{'0'});
 4454|  48.3k|            if (digits_read >= max_digits) {
  ------------------
  |  Branch (4454:17): [True: 8.42k, False: 39.9k]
  ------------------
 4455|  8.42k|                break;
 4456|  8.42k|            }
 4457|  48.3k|        }
 4458|  54.7k|        if (digits_read < min_digits) {
  ------------------
  |  Branch (4458:13): [True: 17.0k, False: 37.6k]
  ------------------
 4459|  17.0k|            set_error(scan_error{scan_error::invalid_scanned_value,
 4460|  17.0k|                                 "Too few integer digits"});
 4461|  17.0k|            return -1;
 4462|  17.0k|        }
 4463|  37.6k|        return accumulator;
 4464|  54.7k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE13on_short_yearENS1_14numeric_systemE:
 3821|  5.75k|    {
 3822|  5.75k|#if !SCN_DISABLE_LOCALE
 3823|  5.75k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3823:13): [True: 0, False: 5.75k]
  |  Branch (3823:31): [True: 0, False: 0]
  ------------------
 3824|      0|            if (auto t = read_localized("%Ey", L"%Ey")) {
  ------------------
  |  Branch (3824:22): [True: 0, False: 0]
  ------------------
 3825|      0|                setter::set_short_year(*this, m_tm, m_st,
 3826|      0|                                       (t->tm_year + 1900) % 100);
 3827|      0|            }
 3828|      0|            return;
 3829|      0|        }
 3830|  5.75k|#endif
 3831|       |
 3832|  5.75k|        int yr = read_classic_unsigned_integer(2, 2);
 3833|  5.75k|        setter::set_short_year(*this, m_tm, m_st, yr);
 3834|  5.75k|    }
_ZN3scn2v46detail15datetime_setterI2tmE14set_short_yearINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 3297|  5.75k|    {
 3298|  5.75k|        if (SCN_UNLIKELY(y < 0 || y > 99)) {
  ------------------
  |  | 1039|  9.89k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 1.62k, False: 4.13k]
  |  |  |  Branch (1039:45): [True: 1.62k, False: 4.13k]
  |  |  |  Branch (1039:45): [True: 0, False: 4.13k]
  |  |  ------------------
  ------------------
 3299|  1.62k|            return h.set_error({scan_error::invalid_scanned_value,
 3300|  1.62k|                                "Invalid value for tm_year"});
 3301|  1.62k|        }
 3302|  4.13k|        st.short_year_value = y;
 3303|  4.13k|        st.set_short_year(h);
 3304|  4.13k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE13on_month_nameEv:
 3864|  4.46k|    {
 3865|  4.46k|#if !SCN_DISABLE_FAST_FLOAT
 3866|  4.46k|        if (m_st.localized) {
  ------------------
  |  Branch (3866:13): [True: 0, False: 4.46k]
  ------------------
 3867|      0|            if (auto t = read_localized("%b", L"%b")) {
  ------------------
  |  Branch (3867:22): [True: 0, False: 0]
  ------------------
 3868|      0|                setter::set_mon(*this, m_tm, m_st, t->tm_mon + 1);
 3869|      0|            }
 3870|      0|            return;
 3871|      0|        }
 3872|  4.46k|#endif
 3873|       |
 3874|  4.46k|        std::array<std::pair<std::string_view, int>, 12> long_mapping = {{
 3875|  4.46k|            {"January", 1},
 3876|  4.46k|            {"February", 2},
 3877|  4.46k|            {"March", 3},
 3878|  4.46k|            {"April", 4},
 3879|  4.46k|            {"May", 5},
 3880|  4.46k|            {"June", 6},
 3881|  4.46k|            {"July", 7},
 3882|  4.46k|            {"August", 8},
 3883|  4.46k|            {"September", 9},
 3884|  4.46k|            {"October", 10},
 3885|  4.46k|            {"November", 11},
 3886|  4.46k|            {"December", 12},
 3887|  4.46k|        }};
 3888|  4.46k|        if (auto m = try_one_of_str_nocase(long_mapping)) {
  ------------------
  |  Branch (3888:18): [True: 76, False: 4.39k]
  ------------------
 3889|     76|            return setter::set_mon(*this, m_tm, m_st, *m);
 3890|     76|        }
 3891|  4.39k|        std::array<std::pair<std::string_view, int>, 11> short_mapping = {{
 3892|  4.39k|            {"Jan", 1},
 3893|  4.39k|            {"Feb", 2},
 3894|  4.39k|            {"Mar", 3},
 3895|  4.39k|            {"Apr", 4},
 3896|  4.39k|            {"Jun", 6},
 3897|  4.39k|            {"Jul", 7},
 3898|  4.39k|            {"Aug", 8},
 3899|  4.39k|            {"Sep", 9},
 3900|  4.39k|            {"Oct", 10},
 3901|  4.39k|            {"Nov", 11},
 3902|  4.39k|            {"Dec", 12},
 3903|  4.39k|        }};
 3904|  4.39k|        if (auto m = try_one_of_str_nocase(short_mapping)) {
  ------------------
  |  Branch (3904:18): [True: 2.75k, False: 1.64k]
  ------------------
 3905|  2.75k|            return setter::set_mon(*this, m_tm, m_st, *m);
 3906|  2.75k|        }
 3907|  1.64k|        set_error({scan_error::invalid_scanned_value, "Invalid month name"});
 3908|  1.64k|    }
_ZN3scn2v46detail15datetime_setterI2tmE7set_monINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 3270|  10.6k|    {
 3271|  10.6k|        if (SCN_UNLIKELY(m < 1 || m > 12)) {
  ------------------
  |  | 1039|  18.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 2.78k, False: 7.87k]
  |  |  |  Branch (1039:45): [True: 2.66k, False: 8.00k]
  |  |  |  Branch (1039:45): [True: 124, False: 7.87k]
  |  |  ------------------
  ------------------
 3272|  2.78k|            return h.set_error({scan_error::invalid_scanned_value,
 3273|  2.78k|                                "Invalid value for tm_mon"});
 3274|  2.78k|        }
 3275|  7.87k|        t.tm_mon = m - 1;
 3276|  7.87k|        st.set_mon(h);
 3277|  7.87k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE21try_one_of_str_nocaseIiLm12EEENSt3__18optionalIT_EERNSF_5arrayINSF_4pairINSF_17basic_string_viewIcNSF_11char_traitsIcEEEESH_EEXT0_EEE:
 4481|  4.46k|    {
 4482|  4.46k|        auto start_it = m_begin;
 4483|  4.46k|        std::size_t options_available = N;
 4484|  4.46k|        std::size_t chars_consumed = 0;
 4485|  17.5k|        while (options_available >= 1 &&
  ------------------
  |  Branch (4485:16): [True: 13.2k, False: 4.32k]
  ------------------
 4486|  17.5k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (4486:16): [True: 13.1k, False: 76]
  ------------------
 4487|  13.1k|            std::size_t i = 0;
 4488|  13.1k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (4488:17): [True: 64, False: 13.1k]
  ------------------
 4489|     64|                options_available = 0;
 4490|     64|                break;
 4491|     64|            }
 4492|  13.1k|            const auto ch = *m_begin;
 4493|  13.1k|            ++m_begin;
 4494|  81.3k|            while (i < options_available) {
  ------------------
  |  Branch (4494:20): [True: 68.1k, False: 13.1k]
  ------------------
 4495|  68.1k|                const auto cmp = static_cast<unsigned>(
 4496|  68.1k|                    ch ^ options[i].first[chars_consumed]);
 4497|  68.1k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (4497:21): [True: 0, False: 68.1k]
  ------------------
 4498|  68.1k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (4498:22): [True: 56.3k, False: 11.8k]
  |  Branch (4498:34): [True: 53.4k, False: 2.91k]
  ------------------
 4499|  53.4k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 4500|  53.4k|                                options.end());
 4501|  53.4k|                    --options_available;
 4502|  53.4k|                    continue;
 4503|  53.4k|                }
 4504|  14.7k|                ++i;
 4505|  14.7k|            }
 4506|  13.1k|            ++chars_consumed;
 4507|  13.1k|        }
 4508|  4.46k|        if (options_available != 1) {
  ------------------
  |  Branch (4508:13): [True: 4.39k, False: 76]
  ------------------
 4509|  4.39k|            m_begin = start_it;
 4510|  4.39k|            return std::nullopt;
 4511|  4.39k|        }
 4512|     76|        return options.front().second;
 4513|  4.46k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE21try_one_of_str_nocaseIiLm11EEENSt3__18optionalIT_EERNSF_5arrayINSF_4pairINSF_17basic_string_viewIcNSF_11char_traitsIcEEEESH_EEXT0_EEE:
 4481|  4.39k|    {
 4482|  4.39k|        auto start_it = m_begin;
 4483|  4.39k|        std::size_t options_available = N;
 4484|  4.39k|        std::size_t chars_consumed = 0;
 4485|  14.5k|        while (options_available >= 1 &&
  ------------------
  |  Branch (4485:16): [True: 12.9k, False: 1.58k]
  ------------------
 4486|  14.5k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (4486:16): [True: 10.2k, False: 2.75k]
  ------------------
 4487|  10.2k|            std::size_t i = 0;
 4488|  10.2k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (4488:17): [True: 56, False: 10.1k]
  ------------------
 4489|     56|                options_available = 0;
 4490|     56|                break;
 4491|     56|            }
 4492|  10.1k|            const auto ch = *m_begin;
 4493|  10.1k|            ++m_begin;
 4494|  64.2k|            while (i < options_available) {
  ------------------
  |  Branch (4494:20): [True: 54.1k, False: 10.1k]
  ------------------
 4495|  54.1k|                const auto cmp = static_cast<unsigned>(
 4496|  54.1k|                    ch ^ options[i].first[chars_consumed]);
 4497|  54.1k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (4497:21): [True: 0, False: 54.1k]
  ------------------
 4498|  54.1k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (4498:22): [True: 48.3k, False: 5.80k]
  |  Branch (4498:34): [True: 45.4k, False: 2.83k]
  ------------------
 4499|  45.4k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 4500|  45.4k|                                options.end());
 4501|  45.4k|                    --options_available;
 4502|  45.4k|                    continue;
 4503|  45.4k|                }
 4504|  8.63k|                ++i;
 4505|  8.63k|            }
 4506|  10.1k|            ++chars_consumed;
 4507|  10.1k|        }
 4508|  4.39k|        if (options_available != 1) {
  ------------------
  |  Branch (4508:13): [True: 1.64k, False: 2.75k]
  ------------------
 4509|  1.64k|            m_begin = start_it;
 4510|  1.64k|            return std::nullopt;
 4511|  1.64k|        }
 4512|  2.75k|        return options.front().second;
 4513|  4.39k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE12on_dec_monthENS1_14numeric_systemE:
 3910|  7.83k|    {
 3911|  7.83k|#if !SCN_DISABLE_LOCALE
 3912|  7.83k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3912:13): [True: 0, False: 7.83k]
  |  Branch (3912:31): [True: 0, False: 0]
  ------------------
 3913|      0|            if (auto t = read_localized("%Om", L"%Om")) {
  ------------------
  |  Branch (3913:22): [True: 0, False: 0]
  ------------------
 3914|      0|                setter::set_mon(*this, m_tm, m_st, t->tm_mon + 1);
 3915|      0|            }
 3916|      0|            return;
 3917|      0|        }
 3918|  7.83k|#endif
 3919|       |
 3920|  7.83k|        int mon = read_classic_unsigned_integer(1, 2);
 3921|  7.83k|        setter::set_mon(*this, m_tm, m_st, mon);
 3922|  7.83k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE15on_day_of_monthENS1_14numeric_systemE:
 3942|  7.81k|    {
 3943|  7.81k|#if !SCN_DISABLE_LOCALE
 3944|  7.81k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3944:13): [True: 0, False: 7.81k]
  |  Branch (3944:31): [True: 0, False: 0]
  ------------------
 3945|      0|            if (auto t = read_localized("%Od", L"%Od")) {
  ------------------
  |  Branch (3945:22): [True: 0, False: 0]
  ------------------
 3946|      0|                setter::set_mday(*this, m_tm, m_st, t->tm_mday);
 3947|      0|            }
 3948|      0|            return;
 3949|      0|        }
 3950|  7.81k|#endif
 3951|       |
 3952|  7.81k|        int mday = read_classic_unsigned_integer(1, 2);
 3953|  7.81k|        setter::set_mday(*this, m_tm, m_st, mday);
 3954|  7.81k|    }
_ZN3scn2v46detail15datetime_setterI2tmE8set_mdayINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 3260|  7.81k|    {
 3261|  7.81k|        if (SCN_UNLIKELY(d < 1 || d > 31)) {
  ------------------
  |  | 1039|  12.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 3.25k, False: 4.55k]
  |  |  |  Branch (1039:45): [True: 3.17k, False: 4.63k]
  |  |  |  Branch (1039:45): [True: 82, False: 4.55k]
  |  |  ------------------
  ------------------
 3262|  3.25k|            return h.set_error({scan_error::invalid_scanned_value,
 3263|  3.25k|                                "Invalid value for tm_mday"});
 3264|  3.25k|        }
 3265|  4.55k|        t.tm_mday = d;
 3266|  4.55k|        st.set_mday(h);
 3267|  4.55k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE15on_weekday_nameEv:
 3957|  3.42k|    {
 3958|  3.42k|#if !SCN_DISABLE_LOCALE
 3959|  3.42k|        if (m_st.localized) {
  ------------------
  |  Branch (3959:13): [True: 0, False: 3.42k]
  ------------------
 3960|      0|            if (auto t = read_localized("%a", L"%a")) {
  ------------------
  |  Branch (3960:22): [True: 0, False: 0]
  ------------------
 3961|      0|                setter::set_wday(*this, m_tm, m_st, t->tm_wday);
 3962|      0|            }
 3963|      0|            return;
 3964|      0|        }
 3965|  3.42k|#endif
 3966|       |
 3967|  3.42k|        std::array<std::pair<std::string_view, int>, 7> long_mapping = {{
 3968|  3.42k|            {"Sunday", 0},
 3969|  3.42k|            {"Monday", 1},
 3970|  3.42k|            {"Tuesday", 2},
 3971|  3.42k|            {"Wednesday", 3},
 3972|  3.42k|            {"Thursday", 4},
 3973|  3.42k|            {"Friday", 5},
 3974|  3.42k|            {"Saturday", 6},
 3975|  3.42k|        }};
 3976|  3.42k|        if (auto d = try_one_of_str_nocase(long_mapping)) {
  ------------------
  |  Branch (3976:18): [True: 0, False: 3.42k]
  ------------------
 3977|      0|            return setter::set_wday(*this, m_tm, m_st, *d);
 3978|      0|        }
 3979|  3.42k|        std::array<std::pair<std::string_view, int>, 7> short_mapping = {{
 3980|  3.42k|            {"Sun", 0},
 3981|  3.42k|            {"Mon", 1},
 3982|  3.42k|            {"Tue", 2},
 3983|  3.42k|            {"Wed", 3},
 3984|  3.42k|            {"Thu", 4},
 3985|  3.42k|            {"Fri", 5},
 3986|  3.42k|            {"Sat", 6},
 3987|  3.42k|        }};
 3988|  3.42k|        if (auto d = try_one_of_str_nocase(short_mapping)) {
  ------------------
  |  Branch (3988:18): [True: 1.76k, False: 1.66k]
  ------------------
 3989|  1.76k|            return setter::set_wday(*this, m_tm, m_st, *d);
 3990|  1.76k|        }
 3991|  1.66k|        return set_error(
 3992|  1.66k|            {scan_error::invalid_scanned_value, "Invalid weekday name"});
 3993|  3.42k|    }
_ZN3scn2v46detail15datetime_setterI2tmE8set_wdayINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 3307|  1.76k|    {
 3308|  1.76k|        if (SCN_UNLIKELY(d < 0 || d > 6)) {
  ------------------
  |  | 1039|  3.53k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 1.76k]
  |  |  |  Branch (1039:45): [True: 0, False: 1.76k]
  |  |  |  Branch (1039:45): [True: 0, False: 1.76k]
  |  |  ------------------
  ------------------
 3309|      0|            return h.set_error({scan_error::invalid_scanned_value,
 3310|      0|                                "Invalid value for tm_wday"});
 3311|      0|        }
 3312|  1.76k|        t.tm_wday = d;
 3313|  1.76k|        st.set_wday(h);
 3314|  1.76k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE21try_one_of_str_nocaseIiLm7EEENSt3__18optionalIT_EERNSF_5arrayINSF_4pairINSF_17basic_string_viewIcNSF_11char_traitsIcEEEESH_EEXT0_EEE:
 4481|  6.85k|    {
 4482|  6.85k|        auto start_it = m_begin;
 4483|  6.85k|        std::size_t options_available = N;
 4484|  6.85k|        std::size_t chars_consumed = 0;
 4485|  23.1k|        while (options_available >= 1 &&
  ------------------
  |  Branch (4485:16): [True: 18.0k, False: 5.03k]
  ------------------
 4486|  23.1k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (4486:16): [True: 16.3k, False: 1.76k]
  ------------------
 4487|  16.3k|            std::size_t i = 0;
 4488|  16.3k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (4488:17): [True: 54, False: 16.2k]
  ------------------
 4489|     54|                options_available = 0;
 4490|     54|                break;
 4491|     54|            }
 4492|  16.2k|            const auto ch = *m_begin;
 4493|  16.2k|            ++m_begin;
 4494|  73.6k|            while (i < options_available) {
  ------------------
  |  Branch (4494:20): [True: 57.3k, False: 16.2k]
  ------------------
 4495|  57.3k|                const auto cmp = static_cast<unsigned>(
 4496|  57.3k|                    ch ^ options[i].first[chars_consumed]);
 4497|  57.3k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (4497:21): [True: 0, False: 57.3k]
  ------------------
 4498|  57.3k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (4498:22): [True: 46.2k, False: 11.1k]
  |  Branch (4498:34): [True: 46.1k, False: 80]
  ------------------
 4499|  46.1k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 4500|  46.1k|                                options.end());
 4501|  46.1k|                    --options_available;
 4502|  46.1k|                    continue;
 4503|  46.1k|                }
 4504|  11.2k|                ++i;
 4505|  11.2k|            }
 4506|  16.2k|            ++chars_consumed;
 4507|  16.2k|        }
 4508|  6.85k|        if (options_available != 1) {
  ------------------
  |  Branch (4508:13): [True: 5.08k, False: 1.76k]
  ------------------
 4509|  5.08k|            m_begin = start_it;
 4510|  5.08k|            return std::nullopt;
 4511|  5.08k|        }
 4512|  1.76k|        return options.front().second;
 4513|  6.85k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE10on_24_hourENS1_14numeric_systemE:
 4031|  13.4k|    {
 4032|  13.4k|#if !SCN_DISABLE_LOCALE
 4033|  13.4k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (4033:13): [True: 0, False: 13.4k]
  |  Branch (4033:31): [True: 0, False: 0]
  ------------------
 4034|      0|            if (auto t = read_localized("%OH", L"%OH")) {
  ------------------
  |  Branch (4034:22): [True: 0, False: 0]
  ------------------
 4035|      0|                setter::set_hour24(*this, m_tm, m_st, t->tm_hour);
 4036|      0|            }
 4037|      0|            return;
 4038|      0|        }
 4039|  13.4k|#endif
 4040|       |
 4041|  13.4k|        int hr = read_classic_unsigned_integer(1, 2);
 4042|  13.4k|        setter::set_hour24(*this, m_tm, m_st, hr);
 4043|  13.4k|    }
_ZN3scn2v46detail15datetime_setterI2tmE10set_hour24INS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 3240|  13.4k|    {
 3241|  13.4k|        if (SCN_UNLIKELY(h < 0 || h > 23)) {
  ------------------
  |  | 1039|  24.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 2.39k, False: 11.0k]
  |  |  |  Branch (1039:45): [True: 2.19k, False: 11.2k]
  |  |  |  Branch (1039:45): [True: 208, False: 11.0k]
  |  |  ------------------
  ------------------
 3242|  2.39k|            return hdl.set_error({scan_error::invalid_scanned_value,
 3243|  2.39k|                                  "Invalid value for tm_hour"});
 3244|  2.39k|        }
 3245|  11.0k|        t.tm_hour = h;
 3246|  11.0k|        st.set_hour24(hdl);
 3247|  11.0k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE9on_minuteENS1_14numeric_systemE:
 4059|  13.4k|    {
 4060|  13.4k|#if !SCN_DISABLE_LOCALE
 4061|  13.4k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (4061:13): [True: 0, False: 13.4k]
  |  Branch (4061:31): [True: 0, False: 0]
  ------------------
 4062|      0|            if (auto t = read_localized("%OM", L"%OM")) {
  ------------------
  |  Branch (4062:22): [True: 0, False: 0]
  ------------------
 4063|      0|                setter::set_min(*this, m_tm, m_st, t->tm_min);
 4064|      0|            }
 4065|      0|            return;
 4066|      0|        }
 4067|  13.4k|#endif
 4068|       |
 4069|  13.4k|        int min = read_classic_unsigned_integer(1, 2);
 4070|  13.4k|        setter::set_min(*this, m_tm, m_st, min);
 4071|  13.4k|    }
_ZN3scn2v46detail15datetime_setterI2tmE7set_minINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 3230|  13.4k|    {
 3231|  13.4k|        if (SCN_UNLIKELY(m < 0 || m > 59)) {
  ------------------
  |  | 1039|  24.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 2.72k, False: 10.6k]
  |  |  |  Branch (1039:45): [True: 2.70k, False: 10.7k]
  |  |  |  Branch (1039:45): [True: 26, False: 10.6k]
  |  |  ------------------
  ------------------
 3232|  2.72k|            return h.set_error({scan_error::invalid_scanned_value,
 3233|  2.72k|                                "Invalid value for tm_min"});
 3234|  2.72k|        }
 3235|  10.6k|        t.tm_min = m;
 3236|  10.6k|        st.set_min(h);
 3237|  10.6k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE9on_secondENS1_14numeric_systemE:
 4073|  2.84k|    {
 4074|  2.84k|#if !SCN_DISABLE_LOCALE
 4075|  2.84k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (4075:13): [True: 0, False: 2.84k]
  |  Branch (4075:31): [True: 0, False: 0]
  ------------------
 4076|      0|            if (auto t = read_localized("%OS", L"%OS")) {
  ------------------
  |  Branch (4076:22): [True: 0, False: 0]
  ------------------
 4077|      0|                setter::set_sec(*this, m_tm, m_st, t->tm_sec);
 4078|      0|            }
 4079|      0|            return;
 4080|      0|        }
 4081|  2.84k|#endif
 4082|       |
 4083|  2.84k|        int sec = read_classic_unsigned_integer(1, 2);
 4084|  2.84k|        setter::set_sec(*this, m_tm, m_st, sec);
 4085|  2.84k|    }
_ZN3scn2v46detail15datetime_setterI2tmE7set_secINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 3220|  2.84k|    {
 3221|  2.84k|        if (SCN_UNLIKELY(s < 0 || s > 60)) {
  ------------------
  |  | 1039|  4.07k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 1.62k, False: 1.22k]
  |  |  |  Branch (1039:45): [True: 1.61k, False: 1.22k]
  |  |  |  Branch (1039:45): [True: 4, False: 1.22k]
  |  |  ------------------
  ------------------
 3222|  1.62k|            return h.set_error({scan_error::invalid_scanned_value,
 3223|  1.62k|                                "Invalid value for tm_sec"});
 3224|  1.62k|        }
 3225|  1.22k|        t.tm_sec = s;
 3226|  1.22k|        st.set_sec(h);
 3227|  1.22k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE10on_us_dateEv:
 4315|  5.75k|    {
 4316|       |        // %m/%d/%y
 4317|  5.75k|        constexpr CharT slash = '/';
 4318|  5.75k|        on_dec_month();
 4319|  5.75k|        on_text(&slash, &slash + 1);
 4320|  5.75k|        on_day_of_month();
 4321|  5.75k|        on_text(&slash, &slash + 1);
 4322|  5.75k|        on_short_year();
 4323|  5.75k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE11on_iso_dateEv:
 4325|  1.99k|    {
 4326|       |        // %Y-%m-%d
 4327|  1.99k|        constexpr CharT dash = '-';
 4328|  1.99k|        on_full_year();
 4329|  1.99k|        on_text(&dash, &dash + 1);
 4330|  1.99k|        on_dec_month();
 4331|  1.99k|        on_text(&dash, &dash + 1);
 4332|  1.99k|        on_day_of_month();
 4333|  1.99k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE15on_24_hour_timeEv:
 4357|  10.5k|    {
 4358|       |        // %H:%M
 4359|  10.5k|        constexpr CharT colon = ':';
 4360|  10.5k|        on_24_hour();
 4361|  10.5k|        on_text(&colon, &colon + 1);
 4362|  10.5k|        on_minute();
 4363|  10.5k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE11on_iso_timeEv:
 4365|  2.84k|    {
 4366|       |        // %H:%M:%S
 4367|  2.84k|        constexpr CharT colon = ':';
 4368|  2.84k|        on_24_hour();
 4369|  2.84k|        on_text(&colon, &colon + 1);
 4370|  2.84k|        on_minute();
 4371|  2.84k|        on_text(&colon, &colon + 1);
 4372|  2.84k|        on_second();
 4373|  2.84k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE6verifyEv:
 4404|  19.1k|    {
 4405|  19.1k|        m_st.verify(*this);
 4406|  19.1k|        if (m_st.am_pm_set && m_st.hour12_set) {
  ------------------
  |  Branch (4406:13): [True: 0, False: 19.1k]
  |  Branch (4406:31): [True: 0, False: 0]
  ------------------
 4407|      0|            setter::handle_am_pm(m_tm, m_st);
 4408|      0|        }
 4409|  19.1k|        if (!m_st.full_year_set && (m_st.short_year_set || m_st.century_set)) {
  ------------------
  |  Branch (4409:13): [True: 18.8k, False: 340]
  |  Branch (4409:37): [True: 4.11k, False: 14.7k]
  |  Branch (4409:60): [True: 0, False: 14.7k]
  ------------------
 4410|  4.11k|            setter::handle_short_year_and_century(m_tm, m_st);
 4411|  4.11k|        }
 4412|  19.1k|    }
_ZN3scn2v46detail15datetime_setterI2tmE29handle_short_year_and_centuryERS3_RNS1_12setter_stateE:
 3358|  8.58k|    {
 3359|  8.58k|        st.handle_short_year_and_century(t.tm_year, 1900);
 3360|  8.58k|    }
_ZNK3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE9get_errorEv:
 4415|  61.6k|    {
 4416|  61.6k|        return m_error;
 4417|  61.6k|    }
_ZNK3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE12get_iteratorEv:
 4432|  19.1k|    {
 4433|  19.1k|        return m_begin;
 4434|  19.1k|    }
_ZN3scn2v46detail22chrono_scan_inner_implIc2tmNS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEEEENS0_13scan_expectedINT1_8iteratorEEENSt3__117basic_string_viewIT_NSH_11char_traitsISJ_EEEERT0_RSE_:
 4625|  26.3k|{
 4626|  26.3k|    {
 4627|  26.3k|        SCN_TRY(it,
  ------------------
  |  | 3958|  26.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  26.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  26.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  26.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 246, False: 26.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    246|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    246|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    246|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    246|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    246|    }                                                  \
  |  |  |  | 3957|  26.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  26.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4628|  26.1k|                detail::internal_skip_classic_whitespace(ctx.range(), false));
 4629|  26.1k|        ctx.advance_to(SCN_MOVE(it));
  ------------------
  |  | 1108|  26.1k|    static_cast<    \
  |  | 1109|  26.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4630|  26.1k|    }
 4631|       |
 4632|      0|    auto r = detail::tm_reader<T, typename Context::range_type, CharT>(
 4633|  26.1k|        ctx.range(), t, ctx.locale());
 4634|  26.1k|    detail::parse_chrono_format_specs(fmt.data(), fmt.data() + fmt.size(), r);
 4635|  26.1k|    if (auto e = r.get_error(); SCN_UNLIKELY(!e)) {
  ------------------
  |  | 1039|  26.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 11.7k, False: 14.3k]
  |  |  ------------------
  ------------------
 4636|  11.7k|        return unexpected(e.error());
 4637|  11.7k|    }
 4638|  14.3k|    return r.get_iterator();
 4639|  26.1k|}
_ZN3scn2v46detail32internal_skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEESB_b:
  249|  79.1k|{
  250|  79.1k|    return impl::skip_classic_whitespace(r, allow_exhaustion)
  251|  79.1k|        .transform_error(impl::make_eof_scan_error);
  252|  79.1k|}
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEC2ESA_RS3_NS1_10locale_refE:
 3769|  26.1k|        : m_range(SCN_MOVE(r)),
  ------------------
  |  | 1108|  26.1k|    static_cast<    \
  |  | 1109|  26.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3770|  26.1k|          m_begin(ranges::begin(m_range)),
 3771|  26.1k|          m_tm(t),
 3772|  26.1k|          m_loc(loc)
 3773|  26.1k|    {
 3774|  26.1k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE8on_errorES9_:
 4420|  11.0k|    {
 4421|  11.0k|        set_error({scan_error::invalid_format_string, msg});
 4422|  11.0k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE9set_errorENS0_10scan_errorE:
 4425|  47.5k|    {
 4426|  47.5k|        if (m_error.has_value()) {
  ------------------
  |  Branch (4426:13): [True: 11.7k, False: 35.7k]
  ------------------
 4427|  11.7k|            m_error = unexpected(e);
 4428|  11.7k|        }
 4429|  47.5k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE7on_textES9_S9_:
 3777|  23.4k|    {
 3778|  35.7k|        while (beg != end) {
  ------------------
  |  Branch (3778:16): [True: 23.4k, False: 12.2k]
  ------------------
 3779|  23.4k|            if (m_begin == ranges::end(m_range)) {
  ------------------
  |  Branch (3779:17): [True: 182, False: 23.2k]
  ------------------
 3780|    182|                return set_error({scan_error::end_of_input, "EOF"});
 3781|    182|            }
 3782|  23.2k|            if (*beg != *m_begin) {
  ------------------
  |  Branch (3782:17): [True: 11.0k, False: 12.2k]
  ------------------
 3783|  11.0k|                return on_error("Invalid literal character");
 3784|  11.0k|            }
 3785|  12.2k|            ++beg;
 3786|  12.2k|            ++m_begin;
 3787|  12.2k|        }
 3788|  23.4k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE12on_full_yearENS1_14numeric_systemE:
 3807|  3.71k|    {
 3808|  3.71k|#if !SCN_DISABLE_LOCALE
 3809|  3.71k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3809:13): [True: 0, False: 3.71k]
  |  Branch (3809:31): [True: 0, False: 0]
  ------------------
 3810|      0|            if (auto t = read_localized("%EY", L"%EY")) {
  ------------------
  |  Branch (3810:22): [True: 0, False: 0]
  ------------------
 3811|      0|                setter::set_full_year(*this, m_tm, m_st, t->tm_year + 1900);
 3812|      0|            }
 3813|      0|            return;
 3814|      0|        }
 3815|  3.71k|#endif
 3816|       |
 3817|  3.71k|        int yr = read_classic_unsigned_integer(4, 4);
 3818|  3.71k|        setter::set_full_year(*this, m_tm, m_st, yr);
 3819|  3.71k|    }
_ZN3scn2v46detail15datetime_setterI2tmE13set_full_yearINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 3280|  3.71k|    {
 3281|  3.71k|        if (SCN_UNLIKELY(y < std::numeric_limits<int>::min() + 1900)) {
  ------------------
  |  | 1039|  3.71k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 3.71k]
  |  |  ------------------
  ------------------
 3282|      0|            return h.set_error({scan_error::invalid_scanned_value,
 3283|      0|                                "Invalid value for tm_year"});
 3284|      0|        }
 3285|  3.71k|        t.tm_year = y - 1900;
 3286|  3.71k|        st.set_full_year(h);
 3287|  3.71k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE29read_classic_unsigned_integerEii:
 4443|  41.7k|    {
 4444|  41.7k|        int digits_read = 0;
 4445|  41.7k|        int accumulator = 0;
 4446|  67.6k|        while (m_begin != m_range.end()) {
  ------------------
  |  Branch (4446:16): [True: 67.2k, False: 372]
  ------------------
 4447|  67.2k|            const auto ch = *m_begin;
 4448|  67.2k|            if (ch < CharT{'0'} || ch > CharT{'9'}) {
  ------------------
  |  Branch (4448:17): [True: 20.3k, False: 46.8k]
  |  Branch (4448:36): [True: 16.7k, False: 30.0k]
  ------------------
 4449|  37.1k|                break;
 4450|  37.1k|            }
 4451|  30.0k|            ++m_begin;
 4452|  30.0k|            ++digits_read;
 4453|  30.0k|            accumulator = accumulator * 10 + static_cast<int>(ch - CharT{'0'});
 4454|  30.0k|            if (digits_read >= max_digits) {
  ------------------
  |  Branch (4454:17): [True: 4.16k, False: 25.8k]
  ------------------
 4455|  4.16k|                break;
 4456|  4.16k|            }
 4457|  30.0k|        }
 4458|  41.7k|        if (digits_read < min_digits) {
  ------------------
  |  Branch (4458:13): [True: 17.8k, False: 23.8k]
  ------------------
 4459|  17.8k|            set_error(scan_error{scan_error::invalid_scanned_value,
 4460|  17.8k|                                 "Too few integer digits"});
 4461|  17.8k|            return -1;
 4462|  17.8k|        }
 4463|  23.8k|        return accumulator;
 4464|  41.7k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE13on_short_yearENS1_14numeric_systemE:
 3821|  1.83k|    {
 3822|  1.83k|#if !SCN_DISABLE_LOCALE
 3823|  1.83k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3823:13): [True: 0, False: 1.83k]
  |  Branch (3823:31): [True: 0, False: 0]
  ------------------
 3824|      0|            if (auto t = read_localized("%Ey", L"%Ey")) {
  ------------------
  |  Branch (3824:22): [True: 0, False: 0]
  ------------------
 3825|      0|                setter::set_short_year(*this, m_tm, m_st,
 3826|      0|                                       (t->tm_year + 1900) % 100);
 3827|      0|            }
 3828|      0|            return;
 3829|      0|        }
 3830|  1.83k|#endif
 3831|       |
 3832|  1.83k|        int yr = read_classic_unsigned_integer(2, 2);
 3833|  1.83k|        setter::set_short_year(*this, m_tm, m_st, yr);
 3834|  1.83k|    }
_ZN3scn2v46detail15datetime_setterI2tmE14set_short_yearINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 3297|  1.83k|    {
 3298|  1.83k|        if (SCN_UNLIKELY(y < 0 || y > 99)) {
  ------------------
  |  | 1039|  1.99k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 1.66k, False: 162]
  |  |  |  Branch (1039:45): [True: 1.66k, False: 162]
  |  |  |  Branch (1039:45): [True: 0, False: 162]
  |  |  ------------------
  ------------------
 3299|  1.66k|            return h.set_error({scan_error::invalid_scanned_value,
 3300|  1.66k|                                "Invalid value for tm_year"});
 3301|  1.66k|        }
 3302|    162|        st.short_year_value = y;
 3303|    162|        st.set_short_year(h);
 3304|    162|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE13on_month_nameEv:
 3864|  4.49k|    {
 3865|  4.49k|#if !SCN_DISABLE_FAST_FLOAT
 3866|  4.49k|        if (m_st.localized) {
  ------------------
  |  Branch (3866:13): [True: 0, False: 4.49k]
  ------------------
 3867|      0|            if (auto t = read_localized("%b", L"%b")) {
  ------------------
  |  Branch (3867:22): [True: 0, False: 0]
  ------------------
 3868|      0|                setter::set_mon(*this, m_tm, m_st, t->tm_mon + 1);
 3869|      0|            }
 3870|      0|            return;
 3871|      0|        }
 3872|  4.49k|#endif
 3873|       |
 3874|  4.49k|        std::array<std::pair<std::string_view, int>, 12> long_mapping = {{
 3875|  4.49k|            {"January", 1},
 3876|  4.49k|            {"February", 2},
 3877|  4.49k|            {"March", 3},
 3878|  4.49k|            {"April", 4},
 3879|  4.49k|            {"May", 5},
 3880|  4.49k|            {"June", 6},
 3881|  4.49k|            {"July", 7},
 3882|  4.49k|            {"August", 8},
 3883|  4.49k|            {"September", 9},
 3884|  4.49k|            {"October", 10},
 3885|  4.49k|            {"November", 11},
 3886|  4.49k|            {"December", 12},
 3887|  4.49k|        }};
 3888|  4.49k|        if (auto m = try_one_of_str_nocase(long_mapping)) {
  ------------------
  |  Branch (3888:18): [True: 76, False: 4.41k]
  ------------------
 3889|     76|            return setter::set_mon(*this, m_tm, m_st, *m);
 3890|     76|        }
 3891|  4.41k|        std::array<std::pair<std::string_view, int>, 11> short_mapping = {{
 3892|  4.41k|            {"Jan", 1},
 3893|  4.41k|            {"Feb", 2},
 3894|  4.41k|            {"Mar", 3},
 3895|  4.41k|            {"Apr", 4},
 3896|  4.41k|            {"Jun", 6},
 3897|  4.41k|            {"Jul", 7},
 3898|  4.41k|            {"Aug", 8},
 3899|  4.41k|            {"Sep", 9},
 3900|  4.41k|            {"Oct", 10},
 3901|  4.41k|            {"Nov", 11},
 3902|  4.41k|            {"Dec", 12},
 3903|  4.41k|        }};
 3904|  4.41k|        if (auto m = try_one_of_str_nocase(short_mapping)) {
  ------------------
  |  Branch (3904:18): [True: 2.74k, False: 1.67k]
  ------------------
 3905|  2.74k|            return setter::set_mon(*this, m_tm, m_st, *m);
 3906|  2.74k|        }
 3907|  1.67k|        set_error({scan_error::invalid_scanned_value, "Invalid month name"});
 3908|  1.67k|    }
_ZN3scn2v46detail15datetime_setterI2tmE7set_monINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 3270|  6.75k|    {
 3271|  6.75k|        if (SCN_UNLIKELY(m < 1 || m > 12)) {
  ------------------
  |  | 1039|  10.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 2.89k, False: 3.85k]
  |  |  |  Branch (1039:45): [True: 2.79k, False: 3.96k]
  |  |  |  Branch (1039:45): [True: 104, False: 3.85k]
  |  |  ------------------
  ------------------
 3272|  2.89k|            return h.set_error({scan_error::invalid_scanned_value,
 3273|  2.89k|                                "Invalid value for tm_mon"});
 3274|  2.89k|        }
 3275|  3.85k|        t.tm_mon = m - 1;
 3276|  3.85k|        st.set_mon(h);
 3277|  3.85k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE21try_one_of_str_nocaseIiLm12EEENSt3__18optionalIT_EERNSD_5arrayINSD_4pairINSD_17basic_string_viewIcNSD_11char_traitsIcEEEESF_EEXT0_EEE:
 4481|  4.49k|    {
 4482|  4.49k|        auto start_it = m_begin;
 4483|  4.49k|        std::size_t options_available = N;
 4484|  4.49k|        std::size_t chars_consumed = 0;
 4485|  17.5k|        while (options_available >= 1 &&
  ------------------
  |  Branch (4485:16): [True: 13.2k, False: 4.35k]
  ------------------
 4486|  17.5k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (4486:16): [True: 13.1k, False: 76]
  ------------------
 4487|  13.1k|            std::size_t i = 0;
 4488|  13.1k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (4488:17): [True: 58, False: 13.1k]
  ------------------
 4489|     58|                options_available = 0;
 4490|     58|                break;
 4491|     58|            }
 4492|  13.1k|            const auto ch = *m_begin;
 4493|  13.1k|            ++m_begin;
 4494|  81.4k|            while (i < options_available) {
  ------------------
  |  Branch (4494:20): [True: 68.3k, False: 13.1k]
  ------------------
 4495|  68.3k|                const auto cmp = static_cast<unsigned>(
 4496|  68.3k|                    ch ^ options[i].first[chars_consumed]);
 4497|  68.3k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (4497:21): [True: 0, False: 68.3k]
  ------------------
 4498|  68.3k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (4498:22): [True: 56.5k, False: 11.7k]
  |  Branch (4498:34): [True: 53.7k, False: 2.87k]
  ------------------
 4499|  53.7k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 4500|  53.7k|                                options.end());
 4501|  53.7k|                    --options_available;
 4502|  53.7k|                    continue;
 4503|  53.7k|                }
 4504|  14.6k|                ++i;
 4505|  14.6k|            }
 4506|  13.1k|            ++chars_consumed;
 4507|  13.1k|        }
 4508|  4.49k|        if (options_available != 1) {
  ------------------
  |  Branch (4508:13): [True: 4.41k, False: 76]
  ------------------
 4509|  4.41k|            m_begin = start_it;
 4510|  4.41k|            return std::nullopt;
 4511|  4.41k|        }
 4512|     76|        return options.front().second;
 4513|  4.49k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE21try_one_of_str_nocaseIiLm11EEENSt3__18optionalIT_EERNSD_5arrayINSD_4pairINSD_17basic_string_viewIcNSD_11char_traitsIcEEEESF_EEXT0_EEE:
 4481|  4.41k|    {
 4482|  4.41k|        auto start_it = m_begin;
 4483|  4.41k|        std::size_t options_available = N;
 4484|  4.41k|        std::size_t chars_consumed = 0;
 4485|  14.5k|        while (options_available >= 1 &&
  ------------------
  |  Branch (4485:16): [True: 12.9k, False: 1.62k]
  ------------------
 4486|  14.5k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (4486:16): [True: 10.1k, False: 2.74k]
  ------------------
 4487|  10.1k|            std::size_t i = 0;
 4488|  10.1k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (4488:17): [True: 50, False: 10.1k]
  ------------------
 4489|     50|                options_available = 0;
 4490|     50|                break;
 4491|     50|            }
 4492|  10.1k|            const auto ch = *m_begin;
 4493|  10.1k|            ++m_begin;
 4494|  64.4k|            while (i < options_available) {
  ------------------
  |  Branch (4494:20): [True: 54.3k, False: 10.1k]
  ------------------
 4495|  54.3k|                const auto cmp = static_cast<unsigned>(
 4496|  54.3k|                    ch ^ options[i].first[chars_consumed]);
 4497|  54.3k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (4497:21): [True: 0, False: 54.3k]
  ------------------
 4498|  54.3k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (4498:22): [True: 48.5k, False: 5.76k]
  |  Branch (4498:34): [True: 45.7k, False: 2.79k]
  ------------------
 4499|  45.7k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 4500|  45.7k|                                options.end());
 4501|  45.7k|                    --options_available;
 4502|  45.7k|                    continue;
 4503|  45.7k|                }
 4504|  8.56k|                ++i;
 4505|  8.56k|            }
 4506|  10.1k|            ++chars_consumed;
 4507|  10.1k|        }
 4508|  4.41k|        if (options_available != 1) {
  ------------------
  |  Branch (4508:13): [True: 1.67k, False: 2.74k]
  ------------------
 4509|  1.67k|            m_begin = start_it;
 4510|  1.67k|            return std::nullopt;
 4511|  1.67k|        }
 4512|  2.74k|        return options.front().second;
 4513|  4.41k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE12on_dec_monthENS1_14numeric_systemE:
 3910|  3.93k|    {
 3911|  3.93k|#if !SCN_DISABLE_LOCALE
 3912|  3.93k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3912:13): [True: 0, False: 3.93k]
  |  Branch (3912:31): [True: 0, False: 0]
  ------------------
 3913|      0|            if (auto t = read_localized("%Om", L"%Om")) {
  ------------------
  |  Branch (3913:22): [True: 0, False: 0]
  ------------------
 3914|      0|                setter::set_mon(*this, m_tm, m_st, t->tm_mon + 1);
 3915|      0|            }
 3916|      0|            return;
 3917|      0|        }
 3918|  3.93k|#endif
 3919|       |
 3920|  3.93k|        int mon = read_classic_unsigned_integer(1, 2);
 3921|  3.93k|        setter::set_mon(*this, m_tm, m_st, mon);
 3922|  3.93k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE15on_day_of_monthENS1_14numeric_systemE:
 3942|  3.91k|    {
 3943|  3.91k|#if !SCN_DISABLE_LOCALE
 3944|  3.91k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3944:13): [True: 0, False: 3.91k]
  |  Branch (3944:31): [True: 0, False: 0]
  ------------------
 3945|      0|            if (auto t = read_localized("%Od", L"%Od")) {
  ------------------
  |  Branch (3945:22): [True: 0, False: 0]
  ------------------
 3946|      0|                setter::set_mday(*this, m_tm, m_st, t->tm_mday);
 3947|      0|            }
 3948|      0|            return;
 3949|      0|        }
 3950|  3.91k|#endif
 3951|       |
 3952|  3.91k|        int mday = read_classic_unsigned_integer(1, 2);
 3953|  3.91k|        setter::set_mday(*this, m_tm, m_st, mday);
 3954|  3.91k|    }
_ZN3scn2v46detail15datetime_setterI2tmE8set_mdayINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 3260|  3.91k|    {
 3261|  3.91k|        if (SCN_UNLIKELY(d < 1 || d > 31)) {
  ------------------
  |  | 1039|  4.56k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 3.33k, False: 578]
  |  |  |  Branch (1039:45): [True: 3.26k, False: 652]
  |  |  |  Branch (1039:45): [True: 74, False: 578]
  |  |  ------------------
  ------------------
 3262|  3.33k|            return h.set_error({scan_error::invalid_scanned_value,
 3263|  3.33k|                                "Invalid value for tm_mday"});
 3264|  3.33k|        }
 3265|    578|        t.tm_mday = d;
 3266|    578|        st.set_mday(h);
 3267|    578|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE15on_weekday_nameEv:
 3957|  3.38k|    {
 3958|  3.38k|#if !SCN_DISABLE_LOCALE
 3959|  3.38k|        if (m_st.localized) {
  ------------------
  |  Branch (3959:13): [True: 0, False: 3.38k]
  ------------------
 3960|      0|            if (auto t = read_localized("%a", L"%a")) {
  ------------------
  |  Branch (3960:22): [True: 0, False: 0]
  ------------------
 3961|      0|                setter::set_wday(*this, m_tm, m_st, t->tm_wday);
 3962|      0|            }
 3963|      0|            return;
 3964|      0|        }
 3965|  3.38k|#endif
 3966|       |
 3967|  3.38k|        std::array<std::pair<std::string_view, int>, 7> long_mapping = {{
 3968|  3.38k|            {"Sunday", 0},
 3969|  3.38k|            {"Monday", 1},
 3970|  3.38k|            {"Tuesday", 2},
 3971|  3.38k|            {"Wednesday", 3},
 3972|  3.38k|            {"Thursday", 4},
 3973|  3.38k|            {"Friday", 5},
 3974|  3.38k|            {"Saturday", 6},
 3975|  3.38k|        }};
 3976|  3.38k|        if (auto d = try_one_of_str_nocase(long_mapping)) {
  ------------------
  |  Branch (3976:18): [True: 0, False: 3.38k]
  ------------------
 3977|      0|            return setter::set_wday(*this, m_tm, m_st, *d);
 3978|      0|        }
 3979|  3.38k|        std::array<std::pair<std::string_view, int>, 7> short_mapping = {{
 3980|  3.38k|            {"Sun", 0},
 3981|  3.38k|            {"Mon", 1},
 3982|  3.38k|            {"Tue", 2},
 3983|  3.38k|            {"Wed", 3},
 3984|  3.38k|            {"Thu", 4},
 3985|  3.38k|            {"Fri", 5},
 3986|  3.38k|            {"Sat", 6},
 3987|  3.38k|        }};
 3988|  3.38k|        if (auto d = try_one_of_str_nocase(short_mapping)) {
  ------------------
  |  Branch (3988:18): [True: 1.69k, False: 1.68k]
  ------------------
 3989|  1.69k|            return setter::set_wday(*this, m_tm, m_st, *d);
 3990|  1.69k|        }
 3991|  1.68k|        return set_error(
 3992|  1.68k|            {scan_error::invalid_scanned_value, "Invalid weekday name"});
 3993|  3.38k|    }
_ZN3scn2v46detail15datetime_setterI2tmE8set_wdayINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 3307|  1.69k|    {
 3308|  1.69k|        if (SCN_UNLIKELY(d < 0 || d > 6)) {
  ------------------
  |  | 1039|  3.39k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 1.69k]
  |  |  |  Branch (1039:45): [True: 0, False: 1.69k]
  |  |  |  Branch (1039:45): [True: 0, False: 1.69k]
  |  |  ------------------
  ------------------
 3309|      0|            return h.set_error({scan_error::invalid_scanned_value,
 3310|      0|                                "Invalid value for tm_wday"});
 3311|      0|        }
 3312|  1.69k|        t.tm_wday = d;
 3313|  1.69k|        st.set_wday(h);
 3314|  1.69k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE21try_one_of_str_nocaseIiLm7EEENSt3__18optionalIT_EERNSD_5arrayINSD_4pairINSD_17basic_string_viewIcNSD_11char_traitsIcEEEESF_EEXT0_EEE:
 4481|  6.77k|    {
 4482|  6.77k|        auto start_it = m_begin;
 4483|  6.77k|        std::size_t options_available = N;
 4484|  6.77k|        std::size_t chars_consumed = 0;
 4485|  22.5k|        while (options_available >= 1 &&
  ------------------
  |  Branch (4485:16): [True: 17.5k, False: 5.03k]
  ------------------
 4486|  22.5k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (4486:16): [True: 15.8k, False: 1.69k]
  ------------------
 4487|  15.8k|            std::size_t i = 0;
 4488|  15.8k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (4488:17): [True: 38, False: 15.7k]
  ------------------
 4489|     38|                options_available = 0;
 4490|     38|                break;
 4491|     38|            }
 4492|  15.7k|            const auto ch = *m_begin;
 4493|  15.7k|            ++m_begin;
 4494|  72.2k|            while (i < options_available) {
  ------------------
  |  Branch (4494:20): [True: 56.4k, False: 15.7k]
  ------------------
 4495|  56.4k|                const auto cmp = static_cast<unsigned>(
 4496|  56.4k|                    ch ^ options[i].first[chars_consumed]);
 4497|  56.4k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (4497:21): [True: 0, False: 56.4k]
  ------------------
 4498|  56.4k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (4498:22): [True: 45.7k, False: 10.7k]
  |  Branch (4498:34): [True: 45.6k, False: 52]
  ------------------
 4499|  45.6k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 4500|  45.6k|                                options.end());
 4501|  45.6k|                    --options_available;
 4502|  45.6k|                    continue;
 4503|  45.6k|                }
 4504|  10.7k|                ++i;
 4505|  10.7k|            }
 4506|  15.7k|            ++chars_consumed;
 4507|  15.7k|        }
 4508|  6.77k|        if (options_available != 1) {
  ------------------
  |  Branch (4508:13): [True: 5.07k, False: 1.69k]
  ------------------
 4509|  5.07k|            m_begin = start_it;
 4510|  5.07k|            return std::nullopt;
 4511|  5.07k|        }
 4512|  1.69k|        return options.front().second;
 4513|  6.77k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE10on_24_hourENS1_14numeric_systemE:
 4031|  12.7k|    {
 4032|  12.7k|#if !SCN_DISABLE_LOCALE
 4033|  12.7k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (4033:13): [True: 0, False: 12.7k]
  |  Branch (4033:31): [True: 0, False: 0]
  ------------------
 4034|      0|            if (auto t = read_localized("%OH", L"%OH")) {
  ------------------
  |  Branch (4034:22): [True: 0, False: 0]
  ------------------
 4035|      0|                setter::set_hour24(*this, m_tm, m_st, t->tm_hour);
 4036|      0|            }
 4037|      0|            return;
 4038|      0|        }
 4039|  12.7k|#endif
 4040|       |
 4041|  12.7k|        int hr = read_classic_unsigned_integer(1, 2);
 4042|  12.7k|        setter::set_hour24(*this, m_tm, m_st, hr);
 4043|  12.7k|    }
_ZN3scn2v46detail15datetime_setterI2tmE10set_hour24INS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 3240|  12.7k|    {
 3241|  12.7k|        if (SCN_UNLIKELY(h < 0 || h > 23)) {
  ------------------
  |  | 1039|  23.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 2.66k, False: 10.0k]
  |  |  |  Branch (1039:45): [True: 2.47k, False: 10.2k]
  |  |  |  Branch (1039:45): [True: 186, False: 10.0k]
  |  |  ------------------
  ------------------
 3242|  2.66k|            return hdl.set_error({scan_error::invalid_scanned_value,
 3243|  2.66k|                                  "Invalid value for tm_hour"});
 3244|  2.66k|        }
 3245|  10.0k|        t.tm_hour = h;
 3246|  10.0k|        st.set_hour24(hdl);
 3247|  10.0k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE9on_minuteENS1_14numeric_systemE:
 4059|  12.7k|    {
 4060|  12.7k|#if !SCN_DISABLE_LOCALE
 4061|  12.7k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (4061:13): [True: 0, False: 12.7k]
  |  Branch (4061:31): [True: 0, False: 0]
  ------------------
 4062|      0|            if (auto t = read_localized("%OM", L"%OM")) {
  ------------------
  |  Branch (4062:22): [True: 0, False: 0]
  ------------------
 4063|      0|                setter::set_min(*this, m_tm, m_st, t->tm_min);
 4064|      0|            }
 4065|      0|            return;
 4066|      0|        }
 4067|  12.7k|#endif
 4068|       |
 4069|  12.7k|        int min = read_classic_unsigned_integer(1, 2);
 4070|  12.7k|        setter::set_min(*this, m_tm, m_st, min);
 4071|  12.7k|    }
_ZN3scn2v46detail15datetime_setterI2tmE7set_minINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 3230|  12.7k|    {
 3231|  12.7k|        if (SCN_UNLIKELY(m < 0 || m > 59)) {
  ------------------
  |  | 1039|  22.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 2.83k, False: 9.87k]
  |  |  |  Branch (1039:45): [True: 2.81k, False: 9.88k]
  |  |  |  Branch (1039:45): [True: 18, False: 9.87k]
  |  |  ------------------
  ------------------
 3232|  2.83k|            return h.set_error({scan_error::invalid_scanned_value,
 3233|  2.83k|                                "Invalid value for tm_min"});
 3234|  2.83k|        }
 3235|  9.87k|        t.tm_min = m;
 3236|  9.87k|        st.set_min(h);
 3237|  9.87k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE9on_secondENS1_14numeric_systemE:
 4073|  2.86k|    {
 4074|  2.86k|#if !SCN_DISABLE_LOCALE
 4075|  2.86k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (4075:13): [True: 0, False: 2.86k]
  |  Branch (4075:31): [True: 0, False: 0]
  ------------------
 4076|      0|            if (auto t = read_localized("%OS", L"%OS")) {
  ------------------
  |  Branch (4076:22): [True: 0, False: 0]
  ------------------
 4077|      0|                setter::set_sec(*this, m_tm, m_st, t->tm_sec);
 4078|      0|            }
 4079|      0|            return;
 4080|      0|        }
 4081|  2.86k|#endif
 4082|       |
 4083|  2.86k|        int sec = read_classic_unsigned_integer(1, 2);
 4084|  2.86k|        setter::set_sec(*this, m_tm, m_st, sec);
 4085|  2.86k|    }
_ZN3scn2v46detail15datetime_setterI2tmE7set_secINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 3220|  2.86k|    {
 3221|  2.86k|        if (SCN_UNLIKELY(s < 0 || s > 60)) {
  ------------------
  |  | 1039|  4.07k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 1.65k, False: 1.20k]
  |  |  |  Branch (1039:45): [True: 1.65k, False: 1.21k]
  |  |  |  Branch (1039:45): [True: 2, False: 1.20k]
  |  |  ------------------
  ------------------
 3222|  1.65k|            return h.set_error({scan_error::invalid_scanned_value,
 3223|  1.65k|                                "Invalid value for tm_sec"});
 3224|  1.65k|        }
 3225|  1.20k|        t.tm_sec = s;
 3226|  1.20k|        st.set_sec(h);
 3227|  1.20k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE10on_us_dateEv:
 4315|  1.83k|    {
 4316|       |        // %m/%d/%y
 4317|  1.83k|        constexpr CharT slash = '/';
 4318|  1.83k|        on_dec_month();
 4319|  1.83k|        on_text(&slash, &slash + 1);
 4320|  1.83k|        on_day_of_month();
 4321|  1.83k|        on_text(&slash, &slash + 1);
 4322|  1.83k|        on_short_year();
 4323|  1.83k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE11on_iso_dateEv:
 4325|  2.02k|    {
 4326|       |        // %Y-%m-%d
 4327|  2.02k|        constexpr CharT dash = '-';
 4328|  2.02k|        on_full_year();
 4329|  2.02k|        on_text(&dash, &dash + 1);
 4330|  2.02k|        on_dec_month();
 4331|  2.02k|        on_text(&dash, &dash + 1);
 4332|  2.02k|        on_day_of_month();
 4333|  2.02k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE15on_24_hour_timeEv:
 4357|  9.83k|    {
 4358|       |        // %H:%M
 4359|  9.83k|        constexpr CharT colon = ':';
 4360|  9.83k|        on_24_hour();
 4361|  9.83k|        on_text(&colon, &colon + 1);
 4362|  9.83k|        on_minute();
 4363|  9.83k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE11on_iso_timeEv:
 4365|  2.86k|    {
 4366|       |        // %H:%M:%S
 4367|  2.86k|        constexpr CharT colon = ':';
 4368|  2.86k|        on_24_hour();
 4369|  2.86k|        on_text(&colon, &colon + 1);
 4370|  2.86k|        on_minute();
 4371|  2.86k|        on_text(&colon, &colon + 1);
 4372|  2.86k|        on_second();
 4373|  2.86k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE6verifyEv:
 4404|  14.3k|    {
 4405|  14.3k|        m_st.verify(*this);
 4406|  14.3k|        if (m_st.am_pm_set && m_st.hour12_set) {
  ------------------
  |  Branch (4406:13): [True: 0, False: 14.3k]
  |  Branch (4406:31): [True: 0, False: 0]
  ------------------
 4407|      0|            setter::handle_am_pm(m_tm, m_st);
 4408|      0|        }
 4409|  14.3k|        if (!m_st.full_year_set && (m_st.short_year_set || m_st.century_set)) {
  ------------------
  |  Branch (4409:13): [True: 14.0k, False: 340]
  |  Branch (4409:37): [True: 152, False: 13.8k]
  |  Branch (4409:60): [True: 0, False: 13.8k]
  ------------------
 4410|    152|            setter::handle_short_year_and_century(m_tm, m_st);
 4411|    152|        }
 4412|  14.3k|    }
_ZNK3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE9get_errorEv:
 4415|  52.4k|    {
 4416|  52.4k|        return m_error;
 4417|  52.4k|    }
_ZNK3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE12get_iteratorEv:
 4432|  14.3k|    {
 4433|  14.3k|        return m_begin;
 4434|  14.3k|    }
_ZN3scn2v46detail22chrono_scan_inner_implIcNS0_10tm_with_tzENS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEENS0_13scan_expectedINT1_8iteratorEEENSt3__117basic_string_viewIT_NSB_11char_traitsISD_EEEERT0_RS8_:
 4625|  31.1k|{
 4626|  31.1k|    {
 4627|  31.1k|        SCN_TRY(it,
  ------------------
  |  | 3958|  31.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  31.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  31.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  31.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 482, False: 30.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    482|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    482|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    482|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    482|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    482|    }                                                  \
  |  |  |  | 3957|  31.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  30.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4628|  30.7k|                detail::internal_skip_classic_whitespace(ctx.range(), false));
 4629|  30.7k|        ctx.advance_to(SCN_MOVE(it));
  ------------------
  |  | 1108|  30.7k|    static_cast<    \
  |  | 1109|  30.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4630|  30.7k|    }
 4631|       |
 4632|      0|    auto r = detail::tm_reader<T, typename Context::range_type, CharT>(
 4633|  30.7k|        ctx.range(), t, ctx.locale());
 4634|  30.7k|    detail::parse_chrono_format_specs(fmt.data(), fmt.data() + fmt.size(), r);
 4635|  30.7k|    if (auto e = r.get_error(); SCN_UNLIKELY(!e)) {
  ------------------
  |  | 1039|  30.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 11.5k, False: 19.1k]
  |  |  ------------------
  ------------------
 4636|  11.5k|        return unexpected(e.error());
 4637|  11.5k|    }
 4638|  19.1k|    return r.get_iterator();
 4639|  30.7k|}
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcEC2ESC_RS3_NS1_10locale_refE:
 3769|  30.7k|        : m_range(SCN_MOVE(r)),
  ------------------
  |  | 1108|  30.7k|    static_cast<    \
  |  | 1109|  30.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3770|  30.7k|          m_begin(ranges::begin(m_range)),
 3771|  30.7k|          m_tm(t),
 3772|  30.7k|          m_loc(loc)
 3773|  30.7k|    {
 3774|  30.7k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE8on_errorEPKc:
 4420|  10.6k|    {
 4421|  10.6k|        set_error({scan_error::invalid_format_string, msg});
 4422|  10.6k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE9set_errorENS0_10scan_errorE:
 4425|  45.7k|    {
 4426|  45.7k|        if (m_error.has_value()) {
  ------------------
  |  Branch (4426:13): [True: 11.5k, False: 34.2k]
  ------------------
 4427|  11.5k|            m_error = unexpected(e);
 4428|  11.5k|        }
 4429|  45.7k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE7on_textEPKcSF_:
 3777|  31.9k|    {
 3778|  52.9k|        while (beg != end) {
  ------------------
  |  Branch (3778:16): [True: 31.9k, False: 21.0k]
  ------------------
 3779|  31.9k|            if (m_begin == ranges::end(m_range)) {
  ------------------
  |  Branch (3779:17): [True: 228, False: 31.7k]
  ------------------
 3780|    228|                return set_error({scan_error::end_of_input, "EOF"});
 3781|    228|            }
 3782|  31.7k|            if (*beg != *m_begin) {
  ------------------
  |  Branch (3782:17): [True: 10.6k, False: 21.0k]
  ------------------
 3783|  10.6k|                return on_error("Invalid literal character");
 3784|  10.6k|            }
 3785|  21.0k|            ++beg;
 3786|  21.0k|            ++m_begin;
 3787|  21.0k|        }
 3788|  31.9k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE12on_full_yearENS1_14numeric_systemE:
 3807|  3.66k|    {
 3808|  3.66k|#if !SCN_DISABLE_LOCALE
 3809|  3.66k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3809:13): [True: 0, False: 3.66k]
  |  Branch (3809:31): [True: 0, False: 0]
  ------------------
 3810|      0|            if (auto t = read_localized("%EY", L"%EY")) {
  ------------------
  |  Branch (3810:22): [True: 0, False: 0]
  ------------------
 3811|      0|                setter::set_full_year(*this, m_tm, m_st, t->tm_year + 1900);
 3812|      0|            }
 3813|      0|            return;
 3814|      0|        }
 3815|  3.66k|#endif
 3816|       |
 3817|  3.66k|        int yr = read_classic_unsigned_integer(4, 4);
 3818|  3.66k|        setter::set_full_year(*this, m_tm, m_st, yr);
 3819|  3.66k|    }
_ZN3scn2v46detail15datetime_setterI2tmE13set_full_yearINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 3280|  3.66k|    {
 3281|  3.66k|        if (SCN_UNLIKELY(y < std::numeric_limits<int>::min() + 1900)) {
  ------------------
  |  | 1039|  3.66k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 3.66k]
  |  |  ------------------
  ------------------
 3282|      0|            return h.set_error({scan_error::invalid_scanned_value,
 3283|      0|                                "Invalid value for tm_year"});
 3284|      0|        }
 3285|  3.66k|        t.tm_year = y - 1900;
 3286|  3.66k|        st.set_full_year(h);
 3287|  3.66k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE29read_classic_unsigned_integerEii:
 4443|  54.7k|    {
 4444|  54.7k|        int digits_read = 0;
 4445|  54.7k|        int accumulator = 0;
 4446|  94.7k|        while (m_begin != m_range.end()) {
  ------------------
  |  Branch (4446:16): [True: 94.2k, False: 450]
  ------------------
 4447|  94.2k|            const auto ch = *m_begin;
 4448|  94.2k|            if (ch < CharT{'0'} || ch > CharT{'9'}) {
  ------------------
  |  Branch (4448:17): [True: 27.8k, False: 66.4k]
  |  Branch (4448:36): [True: 18.0k, False: 48.3k]
  ------------------
 4449|  45.8k|                break;
 4450|  45.8k|            }
 4451|  48.3k|            ++m_begin;
 4452|  48.3k|            ++digits_read;
 4453|  48.3k|            accumulator = accumulator * 10 + static_cast<int>(ch - CharT{'0'});
 4454|  48.3k|            if (digits_read >= max_digits) {
  ------------------
  |  Branch (4454:17): [True: 8.42k, False: 39.9k]
  ------------------
 4455|  8.42k|                break;
 4456|  8.42k|            }
 4457|  48.3k|        }
 4458|  54.7k|        if (digits_read < min_digits) {
  ------------------
  |  Branch (4458:13): [True: 17.0k, False: 37.6k]
  ------------------
 4459|  17.0k|            set_error(scan_error{scan_error::invalid_scanned_value,
 4460|  17.0k|                                 "Too few integer digits"});
 4461|  17.0k|            return -1;
 4462|  17.0k|        }
 4463|  37.6k|        return accumulator;
 4464|  54.7k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE13on_short_yearENS1_14numeric_systemE:
 3821|  5.75k|    {
 3822|  5.75k|#if !SCN_DISABLE_LOCALE
 3823|  5.75k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3823:13): [True: 0, False: 5.75k]
  |  Branch (3823:31): [True: 0, False: 0]
  ------------------
 3824|      0|            if (auto t = read_localized("%Ey", L"%Ey")) {
  ------------------
  |  Branch (3824:22): [True: 0, False: 0]
  ------------------
 3825|      0|                setter::set_short_year(*this, m_tm, m_st,
 3826|      0|                                       (t->tm_year + 1900) % 100);
 3827|      0|            }
 3828|      0|            return;
 3829|      0|        }
 3830|  5.75k|#endif
 3831|       |
 3832|  5.75k|        int yr = read_classic_unsigned_integer(2, 2);
 3833|  5.75k|        setter::set_short_year(*this, m_tm, m_st, yr);
 3834|  5.75k|    }
_ZN3scn2v46detail15datetime_setterI2tmE14set_short_yearINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 3297|  5.75k|    {
 3298|  5.75k|        if (SCN_UNLIKELY(y < 0 || y > 99)) {
  ------------------
  |  | 1039|  9.89k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 1.62k, False: 4.13k]
  |  |  |  Branch (1039:45): [True: 1.62k, False: 4.13k]
  |  |  |  Branch (1039:45): [True: 0, False: 4.13k]
  |  |  ------------------
  ------------------
 3299|  1.62k|            return h.set_error({scan_error::invalid_scanned_value,
 3300|  1.62k|                                "Invalid value for tm_year"});
 3301|  1.62k|        }
 3302|  4.13k|        st.short_year_value = y;
 3303|  4.13k|        st.set_short_year(h);
 3304|  4.13k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE13on_month_nameEv:
 3864|  4.46k|    {
 3865|  4.46k|#if !SCN_DISABLE_FAST_FLOAT
 3866|  4.46k|        if (m_st.localized) {
  ------------------
  |  Branch (3866:13): [True: 0, False: 4.46k]
  ------------------
 3867|      0|            if (auto t = read_localized("%b", L"%b")) {
  ------------------
  |  Branch (3867:22): [True: 0, False: 0]
  ------------------
 3868|      0|                setter::set_mon(*this, m_tm, m_st, t->tm_mon + 1);
 3869|      0|            }
 3870|      0|            return;
 3871|      0|        }
 3872|  4.46k|#endif
 3873|       |
 3874|  4.46k|        std::array<std::pair<std::string_view, int>, 12> long_mapping = {{
 3875|  4.46k|            {"January", 1},
 3876|  4.46k|            {"February", 2},
 3877|  4.46k|            {"March", 3},
 3878|  4.46k|            {"April", 4},
 3879|  4.46k|            {"May", 5},
 3880|  4.46k|            {"June", 6},
 3881|  4.46k|            {"July", 7},
 3882|  4.46k|            {"August", 8},
 3883|  4.46k|            {"September", 9},
 3884|  4.46k|            {"October", 10},
 3885|  4.46k|            {"November", 11},
 3886|  4.46k|            {"December", 12},
 3887|  4.46k|        }};
 3888|  4.46k|        if (auto m = try_one_of_str_nocase(long_mapping)) {
  ------------------
  |  Branch (3888:18): [True: 76, False: 4.39k]
  ------------------
 3889|     76|            return setter::set_mon(*this, m_tm, m_st, *m);
 3890|     76|        }
 3891|  4.39k|        std::array<std::pair<std::string_view, int>, 11> short_mapping = {{
 3892|  4.39k|            {"Jan", 1},
 3893|  4.39k|            {"Feb", 2},
 3894|  4.39k|            {"Mar", 3},
 3895|  4.39k|            {"Apr", 4},
 3896|  4.39k|            {"Jun", 6},
 3897|  4.39k|            {"Jul", 7},
 3898|  4.39k|            {"Aug", 8},
 3899|  4.39k|            {"Sep", 9},
 3900|  4.39k|            {"Oct", 10},
 3901|  4.39k|            {"Nov", 11},
 3902|  4.39k|            {"Dec", 12},
 3903|  4.39k|        }};
 3904|  4.39k|        if (auto m = try_one_of_str_nocase(short_mapping)) {
  ------------------
  |  Branch (3904:18): [True: 2.75k, False: 1.64k]
  ------------------
 3905|  2.75k|            return setter::set_mon(*this, m_tm, m_st, *m);
 3906|  2.75k|        }
 3907|  1.64k|        set_error({scan_error::invalid_scanned_value, "Invalid month name"});
 3908|  1.64k|    }
_ZN3scn2v46detail15datetime_setterI2tmE7set_monINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 3270|  10.6k|    {
 3271|  10.6k|        if (SCN_UNLIKELY(m < 1 || m > 12)) {
  ------------------
  |  | 1039|  18.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 2.78k, False: 7.87k]
  |  |  |  Branch (1039:45): [True: 2.66k, False: 8.00k]
  |  |  |  Branch (1039:45): [True: 124, False: 7.87k]
  |  |  ------------------
  ------------------
 3272|  2.78k|            return h.set_error({scan_error::invalid_scanned_value,
 3273|  2.78k|                                "Invalid value for tm_mon"});
 3274|  2.78k|        }
 3275|  7.87k|        t.tm_mon = m - 1;
 3276|  7.87k|        st.set_mon(h);
 3277|  7.87k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE21try_one_of_str_nocaseIiLm12EEENSt3__18optionalIT_EERNSF_5arrayINSF_4pairINSF_17basic_string_viewIcNSF_11char_traitsIcEEEESH_EEXT0_EEE:
 4481|  4.46k|    {
 4482|  4.46k|        auto start_it = m_begin;
 4483|  4.46k|        std::size_t options_available = N;
 4484|  4.46k|        std::size_t chars_consumed = 0;
 4485|  17.5k|        while (options_available >= 1 &&
  ------------------
  |  Branch (4485:16): [True: 13.2k, False: 4.32k]
  ------------------
 4486|  17.5k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (4486:16): [True: 13.1k, False: 76]
  ------------------
 4487|  13.1k|            std::size_t i = 0;
 4488|  13.1k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (4488:17): [True: 64, False: 13.1k]
  ------------------
 4489|     64|                options_available = 0;
 4490|     64|                break;
 4491|     64|            }
 4492|  13.1k|            const auto ch = *m_begin;
 4493|  13.1k|            ++m_begin;
 4494|  81.3k|            while (i < options_available) {
  ------------------
  |  Branch (4494:20): [True: 68.1k, False: 13.1k]
  ------------------
 4495|  68.1k|                const auto cmp = static_cast<unsigned>(
 4496|  68.1k|                    ch ^ options[i].first[chars_consumed]);
 4497|  68.1k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (4497:21): [True: 0, False: 68.1k]
  ------------------
 4498|  68.1k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (4498:22): [True: 56.3k, False: 11.8k]
  |  Branch (4498:34): [True: 53.4k, False: 2.91k]
  ------------------
 4499|  53.4k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 4500|  53.4k|                                options.end());
 4501|  53.4k|                    --options_available;
 4502|  53.4k|                    continue;
 4503|  53.4k|                }
 4504|  14.7k|                ++i;
 4505|  14.7k|            }
 4506|  13.1k|            ++chars_consumed;
 4507|  13.1k|        }
 4508|  4.46k|        if (options_available != 1) {
  ------------------
  |  Branch (4508:13): [True: 4.39k, False: 76]
  ------------------
 4509|  4.39k|            m_begin = start_it;
 4510|  4.39k|            return std::nullopt;
 4511|  4.39k|        }
 4512|     76|        return options.front().second;
 4513|  4.46k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE21try_one_of_str_nocaseIiLm11EEENSt3__18optionalIT_EERNSF_5arrayINSF_4pairINSF_17basic_string_viewIcNSF_11char_traitsIcEEEESH_EEXT0_EEE:
 4481|  4.39k|    {
 4482|  4.39k|        auto start_it = m_begin;
 4483|  4.39k|        std::size_t options_available = N;
 4484|  4.39k|        std::size_t chars_consumed = 0;
 4485|  14.5k|        while (options_available >= 1 &&
  ------------------
  |  Branch (4485:16): [True: 12.9k, False: 1.58k]
  ------------------
 4486|  14.5k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (4486:16): [True: 10.2k, False: 2.75k]
  ------------------
 4487|  10.2k|            std::size_t i = 0;
 4488|  10.2k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (4488:17): [True: 56, False: 10.1k]
  ------------------
 4489|     56|                options_available = 0;
 4490|     56|                break;
 4491|     56|            }
 4492|  10.1k|            const auto ch = *m_begin;
 4493|  10.1k|            ++m_begin;
 4494|  64.2k|            while (i < options_available) {
  ------------------
  |  Branch (4494:20): [True: 54.1k, False: 10.1k]
  ------------------
 4495|  54.1k|                const auto cmp = static_cast<unsigned>(
 4496|  54.1k|                    ch ^ options[i].first[chars_consumed]);
 4497|  54.1k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (4497:21): [True: 0, False: 54.1k]
  ------------------
 4498|  54.1k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (4498:22): [True: 48.3k, False: 5.80k]
  |  Branch (4498:34): [True: 45.4k, False: 2.83k]
  ------------------
 4499|  45.4k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 4500|  45.4k|                                options.end());
 4501|  45.4k|                    --options_available;
 4502|  45.4k|                    continue;
 4503|  45.4k|                }
 4504|  8.63k|                ++i;
 4505|  8.63k|            }
 4506|  10.1k|            ++chars_consumed;
 4507|  10.1k|        }
 4508|  4.39k|        if (options_available != 1) {
  ------------------
  |  Branch (4508:13): [True: 1.64k, False: 2.75k]
  ------------------
 4509|  1.64k|            m_begin = start_it;
 4510|  1.64k|            return std::nullopt;
 4511|  1.64k|        }
 4512|  2.75k|        return options.front().second;
 4513|  4.39k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE12on_dec_monthENS1_14numeric_systemE:
 3910|  7.83k|    {
 3911|  7.83k|#if !SCN_DISABLE_LOCALE
 3912|  7.83k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3912:13): [True: 0, False: 7.83k]
  |  Branch (3912:31): [True: 0, False: 0]
  ------------------
 3913|      0|            if (auto t = read_localized("%Om", L"%Om")) {
  ------------------
  |  Branch (3913:22): [True: 0, False: 0]
  ------------------
 3914|      0|                setter::set_mon(*this, m_tm, m_st, t->tm_mon + 1);
 3915|      0|            }
 3916|      0|            return;
 3917|      0|        }
 3918|  7.83k|#endif
 3919|       |
 3920|  7.83k|        int mon = read_classic_unsigned_integer(1, 2);
 3921|  7.83k|        setter::set_mon(*this, m_tm, m_st, mon);
 3922|  7.83k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE15on_day_of_monthENS1_14numeric_systemE:
 3942|  7.81k|    {
 3943|  7.81k|#if !SCN_DISABLE_LOCALE
 3944|  7.81k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3944:13): [True: 0, False: 7.81k]
  |  Branch (3944:31): [True: 0, False: 0]
  ------------------
 3945|      0|            if (auto t = read_localized("%Od", L"%Od")) {
  ------------------
  |  Branch (3945:22): [True: 0, False: 0]
  ------------------
 3946|      0|                setter::set_mday(*this, m_tm, m_st, t->tm_mday);
 3947|      0|            }
 3948|      0|            return;
 3949|      0|        }
 3950|  7.81k|#endif
 3951|       |
 3952|  7.81k|        int mday = read_classic_unsigned_integer(1, 2);
 3953|  7.81k|        setter::set_mday(*this, m_tm, m_st, mday);
 3954|  7.81k|    }
_ZN3scn2v46detail15datetime_setterI2tmE8set_mdayINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 3260|  7.81k|    {
 3261|  7.81k|        if (SCN_UNLIKELY(d < 1 || d > 31)) {
  ------------------
  |  | 1039|  12.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 3.25k, False: 4.55k]
  |  |  |  Branch (1039:45): [True: 3.17k, False: 4.63k]
  |  |  |  Branch (1039:45): [True: 82, False: 4.55k]
  |  |  ------------------
  ------------------
 3262|  3.25k|            return h.set_error({scan_error::invalid_scanned_value,
 3263|  3.25k|                                "Invalid value for tm_mday"});
 3264|  3.25k|        }
 3265|  4.55k|        t.tm_mday = d;
 3266|  4.55k|        st.set_mday(h);
 3267|  4.55k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE15on_weekday_nameEv:
 3957|  3.42k|    {
 3958|  3.42k|#if !SCN_DISABLE_LOCALE
 3959|  3.42k|        if (m_st.localized) {
  ------------------
  |  Branch (3959:13): [True: 0, False: 3.42k]
  ------------------
 3960|      0|            if (auto t = read_localized("%a", L"%a")) {
  ------------------
  |  Branch (3960:22): [True: 0, False: 0]
  ------------------
 3961|      0|                setter::set_wday(*this, m_tm, m_st, t->tm_wday);
 3962|      0|            }
 3963|      0|            return;
 3964|      0|        }
 3965|  3.42k|#endif
 3966|       |
 3967|  3.42k|        std::array<std::pair<std::string_view, int>, 7> long_mapping = {{
 3968|  3.42k|            {"Sunday", 0},
 3969|  3.42k|            {"Monday", 1},
 3970|  3.42k|            {"Tuesday", 2},
 3971|  3.42k|            {"Wednesday", 3},
 3972|  3.42k|            {"Thursday", 4},
 3973|  3.42k|            {"Friday", 5},
 3974|  3.42k|            {"Saturday", 6},
 3975|  3.42k|        }};
 3976|  3.42k|        if (auto d = try_one_of_str_nocase(long_mapping)) {
  ------------------
  |  Branch (3976:18): [True: 0, False: 3.42k]
  ------------------
 3977|      0|            return setter::set_wday(*this, m_tm, m_st, *d);
 3978|      0|        }
 3979|  3.42k|        std::array<std::pair<std::string_view, int>, 7> short_mapping = {{
 3980|  3.42k|            {"Sun", 0},
 3981|  3.42k|            {"Mon", 1},
 3982|  3.42k|            {"Tue", 2},
 3983|  3.42k|            {"Wed", 3},
 3984|  3.42k|            {"Thu", 4},
 3985|  3.42k|            {"Fri", 5},
 3986|  3.42k|            {"Sat", 6},
 3987|  3.42k|        }};
 3988|  3.42k|        if (auto d = try_one_of_str_nocase(short_mapping)) {
  ------------------
  |  Branch (3988:18): [True: 1.76k, False: 1.66k]
  ------------------
 3989|  1.76k|            return setter::set_wday(*this, m_tm, m_st, *d);
 3990|  1.76k|        }
 3991|  1.66k|        return set_error(
 3992|  1.66k|            {scan_error::invalid_scanned_value, "Invalid weekday name"});
 3993|  3.42k|    }
_ZN3scn2v46detail15datetime_setterI2tmE8set_wdayINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 3307|  1.76k|    {
 3308|  1.76k|        if (SCN_UNLIKELY(d < 0 || d > 6)) {
  ------------------
  |  | 1039|  3.53k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 1.76k]
  |  |  |  Branch (1039:45): [True: 0, False: 1.76k]
  |  |  |  Branch (1039:45): [True: 0, False: 1.76k]
  |  |  ------------------
  ------------------
 3309|      0|            return h.set_error({scan_error::invalid_scanned_value,
 3310|      0|                                "Invalid value for tm_wday"});
 3311|      0|        }
 3312|  1.76k|        t.tm_wday = d;
 3313|  1.76k|        st.set_wday(h);
 3314|  1.76k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE21try_one_of_str_nocaseIiLm7EEENSt3__18optionalIT_EERNSF_5arrayINSF_4pairINSF_17basic_string_viewIcNSF_11char_traitsIcEEEESH_EEXT0_EEE:
 4481|  6.85k|    {
 4482|  6.85k|        auto start_it = m_begin;
 4483|  6.85k|        std::size_t options_available = N;
 4484|  6.85k|        std::size_t chars_consumed = 0;
 4485|  23.1k|        while (options_available >= 1 &&
  ------------------
  |  Branch (4485:16): [True: 18.0k, False: 5.03k]
  ------------------
 4486|  23.1k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (4486:16): [True: 16.3k, False: 1.76k]
  ------------------
 4487|  16.3k|            std::size_t i = 0;
 4488|  16.3k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (4488:17): [True: 54, False: 16.2k]
  ------------------
 4489|     54|                options_available = 0;
 4490|     54|                break;
 4491|     54|            }
 4492|  16.2k|            const auto ch = *m_begin;
 4493|  16.2k|            ++m_begin;
 4494|  73.6k|            while (i < options_available) {
  ------------------
  |  Branch (4494:20): [True: 57.3k, False: 16.2k]
  ------------------
 4495|  57.3k|                const auto cmp = static_cast<unsigned>(
 4496|  57.3k|                    ch ^ options[i].first[chars_consumed]);
 4497|  57.3k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (4497:21): [True: 0, False: 57.3k]
  ------------------
 4498|  57.3k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (4498:22): [True: 46.2k, False: 11.1k]
  |  Branch (4498:34): [True: 46.1k, False: 80]
  ------------------
 4499|  46.1k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 4500|  46.1k|                                options.end());
 4501|  46.1k|                    --options_available;
 4502|  46.1k|                    continue;
 4503|  46.1k|                }
 4504|  11.2k|                ++i;
 4505|  11.2k|            }
 4506|  16.2k|            ++chars_consumed;
 4507|  16.2k|        }
 4508|  6.85k|        if (options_available != 1) {
  ------------------
  |  Branch (4508:13): [True: 5.08k, False: 1.76k]
  ------------------
 4509|  5.08k|            m_begin = start_it;
 4510|  5.08k|            return std::nullopt;
 4511|  5.08k|        }
 4512|  1.76k|        return options.front().second;
 4513|  6.85k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE10on_24_hourENS1_14numeric_systemE:
 4031|  13.4k|    {
 4032|  13.4k|#if !SCN_DISABLE_LOCALE
 4033|  13.4k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (4033:13): [True: 0, False: 13.4k]
  |  Branch (4033:31): [True: 0, False: 0]
  ------------------
 4034|      0|            if (auto t = read_localized("%OH", L"%OH")) {
  ------------------
  |  Branch (4034:22): [True: 0, False: 0]
  ------------------
 4035|      0|                setter::set_hour24(*this, m_tm, m_st, t->tm_hour);
 4036|      0|            }
 4037|      0|            return;
 4038|      0|        }
 4039|  13.4k|#endif
 4040|       |
 4041|  13.4k|        int hr = read_classic_unsigned_integer(1, 2);
 4042|  13.4k|        setter::set_hour24(*this, m_tm, m_st, hr);
 4043|  13.4k|    }
_ZN3scn2v46detail15datetime_setterI2tmE10set_hour24INS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 3240|  13.4k|    {
 3241|  13.4k|        if (SCN_UNLIKELY(h < 0 || h > 23)) {
  ------------------
  |  | 1039|  24.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 2.39k, False: 11.0k]
  |  |  |  Branch (1039:45): [True: 2.19k, False: 11.2k]
  |  |  |  Branch (1039:45): [True: 208, False: 11.0k]
  |  |  ------------------
  ------------------
 3242|  2.39k|            return hdl.set_error({scan_error::invalid_scanned_value,
 3243|  2.39k|                                  "Invalid value for tm_hour"});
 3244|  2.39k|        }
 3245|  11.0k|        t.tm_hour = h;
 3246|  11.0k|        st.set_hour24(hdl);
 3247|  11.0k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE9on_minuteENS1_14numeric_systemE:
 4059|  13.4k|    {
 4060|  13.4k|#if !SCN_DISABLE_LOCALE
 4061|  13.4k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (4061:13): [True: 0, False: 13.4k]
  |  Branch (4061:31): [True: 0, False: 0]
  ------------------
 4062|      0|            if (auto t = read_localized("%OM", L"%OM")) {
  ------------------
  |  Branch (4062:22): [True: 0, False: 0]
  ------------------
 4063|      0|                setter::set_min(*this, m_tm, m_st, t->tm_min);
 4064|      0|            }
 4065|      0|            return;
 4066|      0|        }
 4067|  13.4k|#endif
 4068|       |
 4069|  13.4k|        int min = read_classic_unsigned_integer(1, 2);
 4070|  13.4k|        setter::set_min(*this, m_tm, m_st, min);
 4071|  13.4k|    }
_ZN3scn2v46detail15datetime_setterI2tmE7set_minINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 3230|  13.4k|    {
 3231|  13.4k|        if (SCN_UNLIKELY(m < 0 || m > 59)) {
  ------------------
  |  | 1039|  24.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 2.72k, False: 10.6k]
  |  |  |  Branch (1039:45): [True: 2.70k, False: 10.7k]
  |  |  |  Branch (1039:45): [True: 26, False: 10.6k]
  |  |  ------------------
  ------------------
 3232|  2.72k|            return h.set_error({scan_error::invalid_scanned_value,
 3233|  2.72k|                                "Invalid value for tm_min"});
 3234|  2.72k|        }
 3235|  10.6k|        t.tm_min = m;
 3236|  10.6k|        st.set_min(h);
 3237|  10.6k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE9on_secondENS1_14numeric_systemE:
 4073|  2.84k|    {
 4074|  2.84k|#if !SCN_DISABLE_LOCALE
 4075|  2.84k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (4075:13): [True: 0, False: 2.84k]
  |  Branch (4075:31): [True: 0, False: 0]
  ------------------
 4076|      0|            if (auto t = read_localized("%OS", L"%OS")) {
  ------------------
  |  Branch (4076:22): [True: 0, False: 0]
  ------------------
 4077|      0|                setter::set_sec(*this, m_tm, m_st, t->tm_sec);
 4078|      0|            }
 4079|      0|            return;
 4080|      0|        }
 4081|  2.84k|#endif
 4082|       |
 4083|  2.84k|        int sec = read_classic_unsigned_integer(1, 2);
 4084|  2.84k|        setter::set_sec(*this, m_tm, m_st, sec);
 4085|  2.84k|    }
_ZN3scn2v46detail15datetime_setterI2tmE7set_secINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 3220|  2.84k|    {
 3221|  2.84k|        if (SCN_UNLIKELY(s < 0 || s > 60)) {
  ------------------
  |  | 1039|  4.07k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 1.62k, False: 1.22k]
  |  |  |  Branch (1039:45): [True: 1.61k, False: 1.22k]
  |  |  |  Branch (1039:45): [True: 4, False: 1.22k]
  |  |  ------------------
  ------------------
 3222|  1.62k|            return h.set_error({scan_error::invalid_scanned_value,
 3223|  1.62k|                                "Invalid value for tm_sec"});
 3224|  1.62k|        }
 3225|  1.22k|        t.tm_sec = s;
 3226|  1.22k|        st.set_sec(h);
 3227|  1.22k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE10on_us_dateEv:
 4315|  5.75k|    {
 4316|       |        // %m/%d/%y
 4317|  5.75k|        constexpr CharT slash = '/';
 4318|  5.75k|        on_dec_month();
 4319|  5.75k|        on_text(&slash, &slash + 1);
 4320|  5.75k|        on_day_of_month();
 4321|  5.75k|        on_text(&slash, &slash + 1);
 4322|  5.75k|        on_short_year();
 4323|  5.75k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE11on_iso_dateEv:
 4325|  1.99k|    {
 4326|       |        // %Y-%m-%d
 4327|  1.99k|        constexpr CharT dash = '-';
 4328|  1.99k|        on_full_year();
 4329|  1.99k|        on_text(&dash, &dash + 1);
 4330|  1.99k|        on_dec_month();
 4331|  1.99k|        on_text(&dash, &dash + 1);
 4332|  1.99k|        on_day_of_month();
 4333|  1.99k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE15on_24_hour_timeEv:
 4357|  10.5k|    {
 4358|       |        // %H:%M
 4359|  10.5k|        constexpr CharT colon = ':';
 4360|  10.5k|        on_24_hour();
 4361|  10.5k|        on_text(&colon, &colon + 1);
 4362|  10.5k|        on_minute();
 4363|  10.5k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE11on_iso_timeEv:
 4365|  2.84k|    {
 4366|       |        // %H:%M:%S
 4367|  2.84k|        constexpr CharT colon = ':';
 4368|  2.84k|        on_24_hour();
 4369|  2.84k|        on_text(&colon, &colon + 1);
 4370|  2.84k|        on_minute();
 4371|  2.84k|        on_text(&colon, &colon + 1);
 4372|  2.84k|        on_second();
 4373|  2.84k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE6verifyEv:
 4404|  19.1k|    {
 4405|  19.1k|        m_st.verify(*this);
 4406|  19.1k|        if (m_st.am_pm_set && m_st.hour12_set) {
  ------------------
  |  Branch (4406:13): [True: 0, False: 19.1k]
  |  Branch (4406:31): [True: 0, False: 0]
  ------------------
 4407|      0|            setter::handle_am_pm(m_tm, m_st);
 4408|      0|        }
 4409|  19.1k|        if (!m_st.full_year_set && (m_st.short_year_set || m_st.century_set)) {
  ------------------
  |  Branch (4409:13): [True: 18.8k, False: 340]
  |  Branch (4409:37): [True: 4.11k, False: 14.7k]
  |  Branch (4409:60): [True: 0, False: 14.7k]
  ------------------
 4410|  4.11k|            setter::handle_short_year_and_century(m_tm, m_st);
 4411|  4.11k|        }
 4412|  19.1k|    }
_ZNK3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE9get_errorEv:
 4415|  61.6k|    {
 4416|  61.6k|        return m_error;
 4417|  61.6k|    }
_ZNK3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE12get_iteratorEv:
 4432|  19.1k|    {
 4433|  19.1k|        return m_begin;
 4434|  19.1k|    }
_ZN3scn2v46detail22chrono_scan_inner_implIcNS0_10tm_with_tzENS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEEEENS0_13scan_expectedINT1_8iteratorEEENSt3__117basic_string_viewIT_NSH_11char_traitsISJ_EEEERT0_RSE_:
 4625|  26.3k|{
 4626|  26.3k|    {
 4627|  26.3k|        SCN_TRY(it,
  ------------------
  |  | 3958|  26.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  26.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  26.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  26.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 246, False: 26.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    246|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    246|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    246|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    246|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    246|    }                                                  \
  |  |  |  | 3957|  26.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  26.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4628|  26.1k|                detail::internal_skip_classic_whitespace(ctx.range(), false));
 4629|  26.1k|        ctx.advance_to(SCN_MOVE(it));
  ------------------
  |  | 1108|  26.1k|    static_cast<    \
  |  | 1109|  26.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4630|  26.1k|    }
 4631|       |
 4632|      0|    auto r = detail::tm_reader<T, typename Context::range_type, CharT>(
 4633|  26.1k|        ctx.range(), t, ctx.locale());
 4634|  26.1k|    detail::parse_chrono_format_specs(fmt.data(), fmt.data() + fmt.size(), r);
 4635|  26.1k|    if (auto e = r.get_error(); SCN_UNLIKELY(!e)) {
  ------------------
  |  | 1039|  26.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 11.7k, False: 14.3k]
  |  |  ------------------
  ------------------
 4636|  11.7k|        return unexpected(e.error());
 4637|  11.7k|    }
 4638|  14.3k|    return r.get_iterator();
 4639|  26.1k|}
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEC2ESA_RS3_NS1_10locale_refE:
 3769|  26.1k|        : m_range(SCN_MOVE(r)),
  ------------------
  |  | 1108|  26.1k|    static_cast<    \
  |  | 1109|  26.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3770|  26.1k|          m_begin(ranges::begin(m_range)),
 3771|  26.1k|          m_tm(t),
 3772|  26.1k|          m_loc(loc)
 3773|  26.1k|    {
 3774|  26.1k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE8on_errorES9_:
 4420|  11.0k|    {
 4421|  11.0k|        set_error({scan_error::invalid_format_string, msg});
 4422|  11.0k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE9set_errorENS0_10scan_errorE:
 4425|  47.5k|    {
 4426|  47.5k|        if (m_error.has_value()) {
  ------------------
  |  Branch (4426:13): [True: 11.7k, False: 35.7k]
  ------------------
 4427|  11.7k|            m_error = unexpected(e);
 4428|  11.7k|        }
 4429|  47.5k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE7on_textES9_S9_:
 3777|  23.4k|    {
 3778|  35.7k|        while (beg != end) {
  ------------------
  |  Branch (3778:16): [True: 23.4k, False: 12.2k]
  ------------------
 3779|  23.4k|            if (m_begin == ranges::end(m_range)) {
  ------------------
  |  Branch (3779:17): [True: 182, False: 23.2k]
  ------------------
 3780|    182|                return set_error({scan_error::end_of_input, "EOF"});
 3781|    182|            }
 3782|  23.2k|            if (*beg != *m_begin) {
  ------------------
  |  Branch (3782:17): [True: 11.0k, False: 12.2k]
  ------------------
 3783|  11.0k|                return on_error("Invalid literal character");
 3784|  11.0k|            }
 3785|  12.2k|            ++beg;
 3786|  12.2k|            ++m_begin;
 3787|  12.2k|        }
 3788|  23.4k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE12on_full_yearENS1_14numeric_systemE:
 3807|  3.71k|    {
 3808|  3.71k|#if !SCN_DISABLE_LOCALE
 3809|  3.71k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3809:13): [True: 0, False: 3.71k]
  |  Branch (3809:31): [True: 0, False: 0]
  ------------------
 3810|      0|            if (auto t = read_localized("%EY", L"%EY")) {
  ------------------
  |  Branch (3810:22): [True: 0, False: 0]
  ------------------
 3811|      0|                setter::set_full_year(*this, m_tm, m_st, t->tm_year + 1900);
 3812|      0|            }
 3813|      0|            return;
 3814|      0|        }
 3815|  3.71k|#endif
 3816|       |
 3817|  3.71k|        int yr = read_classic_unsigned_integer(4, 4);
 3818|  3.71k|        setter::set_full_year(*this, m_tm, m_st, yr);
 3819|  3.71k|    }
_ZN3scn2v46detail15datetime_setterI2tmE13set_full_yearINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcSD_EEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 3280|  3.71k|    {
 3281|  3.71k|        if (SCN_UNLIKELY(y < std::numeric_limits<int>::min() + 1900)) {
  ------------------
  |  | 1039|  3.71k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 3.71k]
  |  |  ------------------
  ------------------
 3282|      0|            return h.set_error({scan_error::invalid_scanned_value,
 3283|      0|                                "Invalid value for tm_year"});
 3284|      0|        }
 3285|  3.71k|        t.tm_year = y - 1900;
 3286|  3.71k|        st.set_full_year(h);
 3287|  3.71k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE29read_classic_unsigned_integerEii:
 4443|  41.7k|    {
 4444|  41.7k|        int digits_read = 0;
 4445|  41.7k|        int accumulator = 0;
 4446|  67.6k|        while (m_begin != m_range.end()) {
  ------------------
  |  Branch (4446:16): [True: 67.2k, False: 372]
  ------------------
 4447|  67.2k|            const auto ch = *m_begin;
 4448|  67.2k|            if (ch < CharT{'0'} || ch > CharT{'9'}) {
  ------------------
  |  Branch (4448:17): [True: 20.3k, False: 46.8k]
  |  Branch (4448:36): [True: 16.7k, False: 30.0k]
  ------------------
 4449|  37.1k|                break;
 4450|  37.1k|            }
 4451|  30.0k|            ++m_begin;
 4452|  30.0k|            ++digits_read;
 4453|  30.0k|            accumulator = accumulator * 10 + static_cast<int>(ch - CharT{'0'});
 4454|  30.0k|            if (digits_read >= max_digits) {
  ------------------
  |  Branch (4454:17): [True: 4.16k, False: 25.8k]
  ------------------
 4455|  4.16k|                break;
 4456|  4.16k|            }
 4457|  30.0k|        }
 4458|  41.7k|        if (digits_read < min_digits) {
  ------------------
  |  Branch (4458:13): [True: 17.8k, False: 23.8k]
  ------------------
 4459|  17.8k|            set_error(scan_error{scan_error::invalid_scanned_value,
 4460|  17.8k|                                 "Too few integer digits"});
 4461|  17.8k|            return -1;
 4462|  17.8k|        }
 4463|  23.8k|        return accumulator;
 4464|  41.7k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE13on_short_yearENS1_14numeric_systemE:
 3821|  1.83k|    {
 3822|  1.83k|#if !SCN_DISABLE_LOCALE
 3823|  1.83k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3823:13): [True: 0, False: 1.83k]
  |  Branch (3823:31): [True: 0, False: 0]
  ------------------
 3824|      0|            if (auto t = read_localized("%Ey", L"%Ey")) {
  ------------------
  |  Branch (3824:22): [True: 0, False: 0]
  ------------------
 3825|      0|                setter::set_short_year(*this, m_tm, m_st,
 3826|      0|                                       (t->tm_year + 1900) % 100);
 3827|      0|            }
 3828|      0|            return;
 3829|      0|        }
 3830|  1.83k|#endif
 3831|       |
 3832|  1.83k|        int yr = read_classic_unsigned_integer(2, 2);
 3833|  1.83k|        setter::set_short_year(*this, m_tm, m_st, yr);
 3834|  1.83k|    }
_ZN3scn2v46detail15datetime_setterI2tmE14set_short_yearINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcSD_EEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 3297|  1.83k|    {
 3298|  1.83k|        if (SCN_UNLIKELY(y < 0 || y > 99)) {
  ------------------
  |  | 1039|  1.99k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 1.66k, False: 162]
  |  |  |  Branch (1039:45): [True: 1.66k, False: 162]
  |  |  |  Branch (1039:45): [True: 0, False: 162]
  |  |  ------------------
  ------------------
 3299|  1.66k|            return h.set_error({scan_error::invalid_scanned_value,
 3300|  1.66k|                                "Invalid value for tm_year"});
 3301|  1.66k|        }
 3302|    162|        st.short_year_value = y;
 3303|    162|        st.set_short_year(h);
 3304|    162|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE13on_month_nameEv:
 3864|  4.49k|    {
 3865|  4.49k|#if !SCN_DISABLE_FAST_FLOAT
 3866|  4.49k|        if (m_st.localized) {
  ------------------
  |  Branch (3866:13): [True: 0, False: 4.49k]
  ------------------
 3867|      0|            if (auto t = read_localized("%b", L"%b")) {
  ------------------
  |  Branch (3867:22): [True: 0, False: 0]
  ------------------
 3868|      0|                setter::set_mon(*this, m_tm, m_st, t->tm_mon + 1);
 3869|      0|            }
 3870|      0|            return;
 3871|      0|        }
 3872|  4.49k|#endif
 3873|       |
 3874|  4.49k|        std::array<std::pair<std::string_view, int>, 12> long_mapping = {{
 3875|  4.49k|            {"January", 1},
 3876|  4.49k|            {"February", 2},
 3877|  4.49k|            {"March", 3},
 3878|  4.49k|            {"April", 4},
 3879|  4.49k|            {"May", 5},
 3880|  4.49k|            {"June", 6},
 3881|  4.49k|            {"July", 7},
 3882|  4.49k|            {"August", 8},
 3883|  4.49k|            {"September", 9},
 3884|  4.49k|            {"October", 10},
 3885|  4.49k|            {"November", 11},
 3886|  4.49k|            {"December", 12},
 3887|  4.49k|        }};
 3888|  4.49k|        if (auto m = try_one_of_str_nocase(long_mapping)) {
  ------------------
  |  Branch (3888:18): [True: 76, False: 4.41k]
  ------------------
 3889|     76|            return setter::set_mon(*this, m_tm, m_st, *m);
 3890|     76|        }
 3891|  4.41k|        std::array<std::pair<std::string_view, int>, 11> short_mapping = {{
 3892|  4.41k|            {"Jan", 1},
 3893|  4.41k|            {"Feb", 2},
 3894|  4.41k|            {"Mar", 3},
 3895|  4.41k|            {"Apr", 4},
 3896|  4.41k|            {"Jun", 6},
 3897|  4.41k|            {"Jul", 7},
 3898|  4.41k|            {"Aug", 8},
 3899|  4.41k|            {"Sep", 9},
 3900|  4.41k|            {"Oct", 10},
 3901|  4.41k|            {"Nov", 11},
 3902|  4.41k|            {"Dec", 12},
 3903|  4.41k|        }};
 3904|  4.41k|        if (auto m = try_one_of_str_nocase(short_mapping)) {
  ------------------
  |  Branch (3904:18): [True: 2.74k, False: 1.67k]
  ------------------
 3905|  2.74k|            return setter::set_mon(*this, m_tm, m_st, *m);
 3906|  2.74k|        }
 3907|  1.67k|        set_error({scan_error::invalid_scanned_value, "Invalid month name"});
 3908|  1.67k|    }
_ZN3scn2v46detail15datetime_setterI2tmE7set_monINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcSD_EEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 3270|  6.75k|    {
 3271|  6.75k|        if (SCN_UNLIKELY(m < 1 || m > 12)) {
  ------------------
  |  | 1039|  10.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 2.89k, False: 3.85k]
  |  |  |  Branch (1039:45): [True: 2.79k, False: 3.96k]
  |  |  |  Branch (1039:45): [True: 104, False: 3.85k]
  |  |  ------------------
  ------------------
 3272|  2.89k|            return h.set_error({scan_error::invalid_scanned_value,
 3273|  2.89k|                                "Invalid value for tm_mon"});
 3274|  2.89k|        }
 3275|  3.85k|        t.tm_mon = m - 1;
 3276|  3.85k|        st.set_mon(h);
 3277|  3.85k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE21try_one_of_str_nocaseIiLm12EEENSt3__18optionalIT_EERNSD_5arrayINSD_4pairINSD_17basic_string_viewIcNSD_11char_traitsIcEEEESF_EEXT0_EEE:
 4481|  4.49k|    {
 4482|  4.49k|        auto start_it = m_begin;
 4483|  4.49k|        std::size_t options_available = N;
 4484|  4.49k|        std::size_t chars_consumed = 0;
 4485|  17.5k|        while (options_available >= 1 &&
  ------------------
  |  Branch (4485:16): [True: 13.2k, False: 4.35k]
  ------------------
 4486|  17.5k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (4486:16): [True: 13.1k, False: 76]
  ------------------
 4487|  13.1k|            std::size_t i = 0;
 4488|  13.1k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (4488:17): [True: 58, False: 13.1k]
  ------------------
 4489|     58|                options_available = 0;
 4490|     58|                break;
 4491|     58|            }
 4492|  13.1k|            const auto ch = *m_begin;
 4493|  13.1k|            ++m_begin;
 4494|  81.4k|            while (i < options_available) {
  ------------------
  |  Branch (4494:20): [True: 68.3k, False: 13.1k]
  ------------------
 4495|  68.3k|                const auto cmp = static_cast<unsigned>(
 4496|  68.3k|                    ch ^ options[i].first[chars_consumed]);
 4497|  68.3k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (4497:21): [True: 0, False: 68.3k]
  ------------------
 4498|  68.3k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (4498:22): [True: 56.5k, False: 11.7k]
  |  Branch (4498:34): [True: 53.7k, False: 2.87k]
  ------------------
 4499|  53.7k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 4500|  53.7k|                                options.end());
 4501|  53.7k|                    --options_available;
 4502|  53.7k|                    continue;
 4503|  53.7k|                }
 4504|  14.6k|                ++i;
 4505|  14.6k|            }
 4506|  13.1k|            ++chars_consumed;
 4507|  13.1k|        }
 4508|  4.49k|        if (options_available != 1) {
  ------------------
  |  Branch (4508:13): [True: 4.41k, False: 76]
  ------------------
 4509|  4.41k|            m_begin = start_it;
 4510|  4.41k|            return std::nullopt;
 4511|  4.41k|        }
 4512|     76|        return options.front().second;
 4513|  4.49k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE21try_one_of_str_nocaseIiLm11EEENSt3__18optionalIT_EERNSD_5arrayINSD_4pairINSD_17basic_string_viewIcNSD_11char_traitsIcEEEESF_EEXT0_EEE:
 4481|  4.41k|    {
 4482|  4.41k|        auto start_it = m_begin;
 4483|  4.41k|        std::size_t options_available = N;
 4484|  4.41k|        std::size_t chars_consumed = 0;
 4485|  14.5k|        while (options_available >= 1 &&
  ------------------
  |  Branch (4485:16): [True: 12.9k, False: 1.62k]
  ------------------
 4486|  14.5k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (4486:16): [True: 10.1k, False: 2.74k]
  ------------------
 4487|  10.1k|            std::size_t i = 0;
 4488|  10.1k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (4488:17): [True: 50, False: 10.1k]
  ------------------
 4489|     50|                options_available = 0;
 4490|     50|                break;
 4491|     50|            }
 4492|  10.1k|            const auto ch = *m_begin;
 4493|  10.1k|            ++m_begin;
 4494|  64.4k|            while (i < options_available) {
  ------------------
  |  Branch (4494:20): [True: 54.3k, False: 10.1k]
  ------------------
 4495|  54.3k|                const auto cmp = static_cast<unsigned>(
 4496|  54.3k|                    ch ^ options[i].first[chars_consumed]);
 4497|  54.3k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (4497:21): [True: 0, False: 54.3k]
  ------------------
 4498|  54.3k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (4498:22): [True: 48.5k, False: 5.76k]
  |  Branch (4498:34): [True: 45.7k, False: 2.79k]
  ------------------
 4499|  45.7k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 4500|  45.7k|                                options.end());
 4501|  45.7k|                    --options_available;
 4502|  45.7k|                    continue;
 4503|  45.7k|                }
 4504|  8.56k|                ++i;
 4505|  8.56k|            }
 4506|  10.1k|            ++chars_consumed;
 4507|  10.1k|        }
 4508|  4.41k|        if (options_available != 1) {
  ------------------
  |  Branch (4508:13): [True: 1.67k, False: 2.74k]
  ------------------
 4509|  1.67k|            m_begin = start_it;
 4510|  1.67k|            return std::nullopt;
 4511|  1.67k|        }
 4512|  2.74k|        return options.front().second;
 4513|  4.41k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE12on_dec_monthENS1_14numeric_systemE:
 3910|  3.93k|    {
 3911|  3.93k|#if !SCN_DISABLE_LOCALE
 3912|  3.93k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3912:13): [True: 0, False: 3.93k]
  |  Branch (3912:31): [True: 0, False: 0]
  ------------------
 3913|      0|            if (auto t = read_localized("%Om", L"%Om")) {
  ------------------
  |  Branch (3913:22): [True: 0, False: 0]
  ------------------
 3914|      0|                setter::set_mon(*this, m_tm, m_st, t->tm_mon + 1);
 3915|      0|            }
 3916|      0|            return;
 3917|      0|        }
 3918|  3.93k|#endif
 3919|       |
 3920|  3.93k|        int mon = read_classic_unsigned_integer(1, 2);
 3921|  3.93k|        setter::set_mon(*this, m_tm, m_st, mon);
 3922|  3.93k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE15on_day_of_monthENS1_14numeric_systemE:
 3942|  3.91k|    {
 3943|  3.91k|#if !SCN_DISABLE_LOCALE
 3944|  3.91k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3944:13): [True: 0, False: 3.91k]
  |  Branch (3944:31): [True: 0, False: 0]
  ------------------
 3945|      0|            if (auto t = read_localized("%Od", L"%Od")) {
  ------------------
  |  Branch (3945:22): [True: 0, False: 0]
  ------------------
 3946|      0|                setter::set_mday(*this, m_tm, m_st, t->tm_mday);
 3947|      0|            }
 3948|      0|            return;
 3949|      0|        }
 3950|  3.91k|#endif
 3951|       |
 3952|  3.91k|        int mday = read_classic_unsigned_integer(1, 2);
 3953|  3.91k|        setter::set_mday(*this, m_tm, m_st, mday);
 3954|  3.91k|    }
_ZN3scn2v46detail15datetime_setterI2tmE8set_mdayINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcSD_EEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 3260|  3.91k|    {
 3261|  3.91k|        if (SCN_UNLIKELY(d < 1 || d > 31)) {
  ------------------
  |  | 1039|  4.56k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 3.33k, False: 578]
  |  |  |  Branch (1039:45): [True: 3.26k, False: 652]
  |  |  |  Branch (1039:45): [True: 74, False: 578]
  |  |  ------------------
  ------------------
 3262|  3.33k|            return h.set_error({scan_error::invalid_scanned_value,
 3263|  3.33k|                                "Invalid value for tm_mday"});
 3264|  3.33k|        }
 3265|    578|        t.tm_mday = d;
 3266|    578|        st.set_mday(h);
 3267|    578|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE15on_weekday_nameEv:
 3957|  3.38k|    {
 3958|  3.38k|#if !SCN_DISABLE_LOCALE
 3959|  3.38k|        if (m_st.localized) {
  ------------------
  |  Branch (3959:13): [True: 0, False: 3.38k]
  ------------------
 3960|      0|            if (auto t = read_localized("%a", L"%a")) {
  ------------------
  |  Branch (3960:22): [True: 0, False: 0]
  ------------------
 3961|      0|                setter::set_wday(*this, m_tm, m_st, t->tm_wday);
 3962|      0|            }
 3963|      0|            return;
 3964|      0|        }
 3965|  3.38k|#endif
 3966|       |
 3967|  3.38k|        std::array<std::pair<std::string_view, int>, 7> long_mapping = {{
 3968|  3.38k|            {"Sunday", 0},
 3969|  3.38k|            {"Monday", 1},
 3970|  3.38k|            {"Tuesday", 2},
 3971|  3.38k|            {"Wednesday", 3},
 3972|  3.38k|            {"Thursday", 4},
 3973|  3.38k|            {"Friday", 5},
 3974|  3.38k|            {"Saturday", 6},
 3975|  3.38k|        }};
 3976|  3.38k|        if (auto d = try_one_of_str_nocase(long_mapping)) {
  ------------------
  |  Branch (3976:18): [True: 0, False: 3.38k]
  ------------------
 3977|      0|            return setter::set_wday(*this, m_tm, m_st, *d);
 3978|      0|        }
 3979|  3.38k|        std::array<std::pair<std::string_view, int>, 7> short_mapping = {{
 3980|  3.38k|            {"Sun", 0},
 3981|  3.38k|            {"Mon", 1},
 3982|  3.38k|            {"Tue", 2},
 3983|  3.38k|            {"Wed", 3},
 3984|  3.38k|            {"Thu", 4},
 3985|  3.38k|            {"Fri", 5},
 3986|  3.38k|            {"Sat", 6},
 3987|  3.38k|        }};
 3988|  3.38k|        if (auto d = try_one_of_str_nocase(short_mapping)) {
  ------------------
  |  Branch (3988:18): [True: 1.69k, False: 1.68k]
  ------------------
 3989|  1.69k|            return setter::set_wday(*this, m_tm, m_st, *d);
 3990|  1.69k|        }
 3991|  1.68k|        return set_error(
 3992|  1.68k|            {scan_error::invalid_scanned_value, "Invalid weekday name"});
 3993|  3.38k|    }
_ZN3scn2v46detail15datetime_setterI2tmE8set_wdayINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcSD_EEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 3307|  1.69k|    {
 3308|  1.69k|        if (SCN_UNLIKELY(d < 0 || d > 6)) {
  ------------------
  |  | 1039|  3.39k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 1.69k]
  |  |  |  Branch (1039:45): [True: 0, False: 1.69k]
  |  |  |  Branch (1039:45): [True: 0, False: 1.69k]
  |  |  ------------------
  ------------------
 3309|      0|            return h.set_error({scan_error::invalid_scanned_value,
 3310|      0|                                "Invalid value for tm_wday"});
 3311|      0|        }
 3312|  1.69k|        t.tm_wday = d;
 3313|  1.69k|        st.set_wday(h);
 3314|  1.69k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE21try_one_of_str_nocaseIiLm7EEENSt3__18optionalIT_EERNSD_5arrayINSD_4pairINSD_17basic_string_viewIcNSD_11char_traitsIcEEEESF_EEXT0_EEE:
 4481|  6.77k|    {
 4482|  6.77k|        auto start_it = m_begin;
 4483|  6.77k|        std::size_t options_available = N;
 4484|  6.77k|        std::size_t chars_consumed = 0;
 4485|  22.5k|        while (options_available >= 1 &&
  ------------------
  |  Branch (4485:16): [True: 17.5k, False: 5.03k]
  ------------------
 4486|  22.5k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (4486:16): [True: 15.8k, False: 1.69k]
  ------------------
 4487|  15.8k|            std::size_t i = 0;
 4488|  15.8k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (4488:17): [True: 38, False: 15.7k]
  ------------------
 4489|     38|                options_available = 0;
 4490|     38|                break;
 4491|     38|            }
 4492|  15.7k|            const auto ch = *m_begin;
 4493|  15.7k|            ++m_begin;
 4494|  72.2k|            while (i < options_available) {
  ------------------
  |  Branch (4494:20): [True: 56.4k, False: 15.7k]
  ------------------
 4495|  56.4k|                const auto cmp = static_cast<unsigned>(
 4496|  56.4k|                    ch ^ options[i].first[chars_consumed]);
 4497|  56.4k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (4497:21): [True: 0, False: 56.4k]
  ------------------
 4498|  56.4k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (4498:22): [True: 45.7k, False: 10.7k]
  |  Branch (4498:34): [True: 45.6k, False: 52]
  ------------------
 4499|  45.6k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 4500|  45.6k|                                options.end());
 4501|  45.6k|                    --options_available;
 4502|  45.6k|                    continue;
 4503|  45.6k|                }
 4504|  10.7k|                ++i;
 4505|  10.7k|            }
 4506|  15.7k|            ++chars_consumed;
 4507|  15.7k|        }
 4508|  6.77k|        if (options_available != 1) {
  ------------------
  |  Branch (4508:13): [True: 5.07k, False: 1.69k]
  ------------------
 4509|  5.07k|            m_begin = start_it;
 4510|  5.07k|            return std::nullopt;
 4511|  5.07k|        }
 4512|  1.69k|        return options.front().second;
 4513|  6.77k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE10on_24_hourENS1_14numeric_systemE:
 4031|  12.7k|    {
 4032|  12.7k|#if !SCN_DISABLE_LOCALE
 4033|  12.7k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (4033:13): [True: 0, False: 12.7k]
  |  Branch (4033:31): [True: 0, False: 0]
  ------------------
 4034|      0|            if (auto t = read_localized("%OH", L"%OH")) {
  ------------------
  |  Branch (4034:22): [True: 0, False: 0]
  ------------------
 4035|      0|                setter::set_hour24(*this, m_tm, m_st, t->tm_hour);
 4036|      0|            }
 4037|      0|            return;
 4038|      0|        }
 4039|  12.7k|#endif
 4040|       |
 4041|  12.7k|        int hr = read_classic_unsigned_integer(1, 2);
 4042|  12.7k|        setter::set_hour24(*this, m_tm, m_st, hr);
 4043|  12.7k|    }
_ZN3scn2v46detail15datetime_setterI2tmE10set_hour24INS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcSD_EEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 3240|  12.7k|    {
 3241|  12.7k|        if (SCN_UNLIKELY(h < 0 || h > 23)) {
  ------------------
  |  | 1039|  23.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 2.66k, False: 10.0k]
  |  |  |  Branch (1039:45): [True: 2.47k, False: 10.2k]
  |  |  |  Branch (1039:45): [True: 186, False: 10.0k]
  |  |  ------------------
  ------------------
 3242|  2.66k|            return hdl.set_error({scan_error::invalid_scanned_value,
 3243|  2.66k|                                  "Invalid value for tm_hour"});
 3244|  2.66k|        }
 3245|  10.0k|        t.tm_hour = h;
 3246|  10.0k|        st.set_hour24(hdl);
 3247|  10.0k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE9on_minuteENS1_14numeric_systemE:
 4059|  12.7k|    {
 4060|  12.7k|#if !SCN_DISABLE_LOCALE
 4061|  12.7k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (4061:13): [True: 0, False: 12.7k]
  |  Branch (4061:31): [True: 0, False: 0]
  ------------------
 4062|      0|            if (auto t = read_localized("%OM", L"%OM")) {
  ------------------
  |  Branch (4062:22): [True: 0, False: 0]
  ------------------
 4063|      0|                setter::set_min(*this, m_tm, m_st, t->tm_min);
 4064|      0|            }
 4065|      0|            return;
 4066|      0|        }
 4067|  12.7k|#endif
 4068|       |
 4069|  12.7k|        int min = read_classic_unsigned_integer(1, 2);
 4070|  12.7k|        setter::set_min(*this, m_tm, m_st, min);
 4071|  12.7k|    }
_ZN3scn2v46detail15datetime_setterI2tmE7set_minINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcSD_EEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 3230|  12.7k|    {
 3231|  12.7k|        if (SCN_UNLIKELY(m < 0 || m > 59)) {
  ------------------
  |  | 1039|  22.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 2.83k, False: 9.87k]
  |  |  |  Branch (1039:45): [True: 2.81k, False: 9.88k]
  |  |  |  Branch (1039:45): [True: 18, False: 9.87k]
  |  |  ------------------
  ------------------
 3232|  2.83k|            return h.set_error({scan_error::invalid_scanned_value,
 3233|  2.83k|                                "Invalid value for tm_min"});
 3234|  2.83k|        }
 3235|  9.87k|        t.tm_min = m;
 3236|  9.87k|        st.set_min(h);
 3237|  9.87k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE9on_secondENS1_14numeric_systemE:
 4073|  2.86k|    {
 4074|  2.86k|#if !SCN_DISABLE_LOCALE
 4075|  2.86k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (4075:13): [True: 0, False: 2.86k]
  |  Branch (4075:31): [True: 0, False: 0]
  ------------------
 4076|      0|            if (auto t = read_localized("%OS", L"%OS")) {
  ------------------
  |  Branch (4076:22): [True: 0, False: 0]
  ------------------
 4077|      0|                setter::set_sec(*this, m_tm, m_st, t->tm_sec);
 4078|      0|            }
 4079|      0|            return;
 4080|      0|        }
 4081|  2.86k|#endif
 4082|       |
 4083|  2.86k|        int sec = read_classic_unsigned_integer(1, 2);
 4084|  2.86k|        setter::set_sec(*this, m_tm, m_st, sec);
 4085|  2.86k|    }
_ZN3scn2v46detail15datetime_setterI2tmE7set_secINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcSD_EEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 3220|  2.86k|    {
 3221|  2.86k|        if (SCN_UNLIKELY(s < 0 || s > 60)) {
  ------------------
  |  | 1039|  4.07k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 1.65k, False: 1.20k]
  |  |  |  Branch (1039:45): [True: 1.65k, False: 1.21k]
  |  |  |  Branch (1039:45): [True: 2, False: 1.20k]
  |  |  ------------------
  ------------------
 3222|  1.65k|            return h.set_error({scan_error::invalid_scanned_value,
 3223|  1.65k|                                "Invalid value for tm_sec"});
 3224|  1.65k|        }
 3225|  1.20k|        t.tm_sec = s;
 3226|  1.20k|        st.set_sec(h);
 3227|  1.20k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE10on_us_dateEv:
 4315|  1.83k|    {
 4316|       |        // %m/%d/%y
 4317|  1.83k|        constexpr CharT slash = '/';
 4318|  1.83k|        on_dec_month();
 4319|  1.83k|        on_text(&slash, &slash + 1);
 4320|  1.83k|        on_day_of_month();
 4321|  1.83k|        on_text(&slash, &slash + 1);
 4322|  1.83k|        on_short_year();
 4323|  1.83k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE11on_iso_dateEv:
 4325|  2.02k|    {
 4326|       |        // %Y-%m-%d
 4327|  2.02k|        constexpr CharT dash = '-';
 4328|  2.02k|        on_full_year();
 4329|  2.02k|        on_text(&dash, &dash + 1);
 4330|  2.02k|        on_dec_month();
 4331|  2.02k|        on_text(&dash, &dash + 1);
 4332|  2.02k|        on_day_of_month();
 4333|  2.02k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE15on_24_hour_timeEv:
 4357|  9.83k|    {
 4358|       |        // %H:%M
 4359|  9.83k|        constexpr CharT colon = ':';
 4360|  9.83k|        on_24_hour();
 4361|  9.83k|        on_text(&colon, &colon + 1);
 4362|  9.83k|        on_minute();
 4363|  9.83k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE11on_iso_timeEv:
 4365|  2.86k|    {
 4366|       |        // %H:%M:%S
 4367|  2.86k|        constexpr CharT colon = ':';
 4368|  2.86k|        on_24_hour();
 4369|  2.86k|        on_text(&colon, &colon + 1);
 4370|  2.86k|        on_minute();
 4371|  2.86k|        on_text(&colon, &colon + 1);
 4372|  2.86k|        on_second();
 4373|  2.86k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE6verifyEv:
 4404|  14.3k|    {
 4405|  14.3k|        m_st.verify(*this);
 4406|  14.3k|        if (m_st.am_pm_set && m_st.hour12_set) {
  ------------------
  |  Branch (4406:13): [True: 0, False: 14.3k]
  |  Branch (4406:31): [True: 0, False: 0]
  ------------------
 4407|      0|            setter::handle_am_pm(m_tm, m_st);
 4408|      0|        }
 4409|  14.3k|        if (!m_st.full_year_set && (m_st.short_year_set || m_st.century_set)) {
  ------------------
  |  Branch (4409:13): [True: 14.0k, False: 340]
  |  Branch (4409:37): [True: 152, False: 13.8k]
  |  Branch (4409:60): [True: 0, False: 13.8k]
  ------------------
 4410|    152|            setter::handle_short_year_and_century(m_tm, m_st);
 4411|    152|        }
 4412|  14.3k|    }
_ZNK3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE9get_errorEv:
 4415|  52.4k|    {
 4416|  52.4k|        return m_error;
 4417|  52.4k|    }
_ZNK3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE12get_iteratorEv:
 4432|  14.3k|    {
 4433|  14.3k|        return m_begin;
 4434|  14.3k|    }
_ZN3scn2v46detail22chrono_scan_inner_implIcNS0_19datetime_componentsENS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEENS0_13scan_expectedINT1_8iteratorEEENSt3__117basic_string_viewIT_NSB_11char_traitsISD_EEEERT0_RS8_:
 4625|  31.1k|{
 4626|  31.1k|    {
 4627|  31.1k|        SCN_TRY(it,
  ------------------
  |  | 3958|  31.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  31.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  31.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  31.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 482, False: 30.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    482|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    482|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    482|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    482|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    482|    }                                                  \
  |  |  |  | 3957|  31.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  30.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4628|  30.7k|                detail::internal_skip_classic_whitespace(ctx.range(), false));
 4629|  30.7k|        ctx.advance_to(SCN_MOVE(it));
  ------------------
  |  | 1108|  30.7k|    static_cast<    \
  |  | 1109|  30.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4630|  30.7k|    }
 4631|       |
 4632|      0|    auto r = detail::tm_reader<T, typename Context::range_type, CharT>(
 4633|  30.7k|        ctx.range(), t, ctx.locale());
 4634|  30.7k|    detail::parse_chrono_format_specs(fmt.data(), fmt.data() + fmt.size(), r);
 4635|  30.7k|    if (auto e = r.get_error(); SCN_UNLIKELY(!e)) {
  ------------------
  |  | 1039|  30.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 11.5k, False: 19.1k]
  |  |  ------------------
  ------------------
 4636|  11.5k|        return unexpected(e.error());
 4637|  11.5k|    }
 4638|  19.1k|    return r.get_iterator();
 4639|  30.7k|}
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcEC2ESC_RS3_NS1_10locale_refE:
 3769|  30.7k|        : m_range(SCN_MOVE(r)),
  ------------------
  |  | 1108|  30.7k|    static_cast<    \
  |  | 1109|  30.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3770|  30.7k|          m_begin(ranges::begin(m_range)),
 3771|  30.7k|          m_tm(t),
 3772|  30.7k|          m_loc(loc)
 3773|  30.7k|    {
 3774|  30.7k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE8on_errorEPKc:
 4420|  10.6k|    {
 4421|  10.6k|        set_error({scan_error::invalid_format_string, msg});
 4422|  10.6k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE9set_errorENS0_10scan_errorE:
 4425|  44.1k|    {
 4426|  44.1k|        if (m_error.has_value()) {
  ------------------
  |  Branch (4426:13): [True: 11.5k, False: 32.5k]
  ------------------
 4427|  11.5k|            m_error = unexpected(e);
 4428|  11.5k|        }
 4429|  44.1k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE7on_textEPKcSF_:
 3777|  31.9k|    {
 3778|  52.9k|        while (beg != end) {
  ------------------
  |  Branch (3778:16): [True: 31.9k, False: 21.0k]
  ------------------
 3779|  31.9k|            if (m_begin == ranges::end(m_range)) {
  ------------------
  |  Branch (3779:17): [True: 228, False: 31.7k]
  ------------------
 3780|    228|                return set_error({scan_error::end_of_input, "EOF"});
 3781|    228|            }
 3782|  31.7k|            if (*beg != *m_begin) {
  ------------------
  |  Branch (3782:17): [True: 10.6k, False: 21.0k]
  ------------------
 3783|  10.6k|                return on_error("Invalid literal character");
 3784|  10.6k|            }
 3785|  21.0k|            ++beg;
 3786|  21.0k|            ++m_begin;
 3787|  21.0k|        }
 3788|  31.9k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE12on_full_yearENS1_14numeric_systemE:
 3807|  3.66k|    {
 3808|  3.66k|#if !SCN_DISABLE_LOCALE
 3809|  3.66k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3809:13): [True: 0, False: 3.66k]
  |  Branch (3809:31): [True: 0, False: 0]
  ------------------
 3810|      0|            if (auto t = read_localized("%EY", L"%EY")) {
  ------------------
  |  Branch (3810:22): [True: 0, False: 0]
  ------------------
 3811|      0|                setter::set_full_year(*this, m_tm, m_st, t->tm_year + 1900);
 3812|      0|            }
 3813|      0|            return;
 3814|      0|        }
 3815|  3.66k|#endif
 3816|       |
 3817|  3.66k|        int yr = read_classic_unsigned_integer(4, 4);
 3818|  3.66k|        setter::set_full_year(*this, m_tm, m_st, yr);
 3819|  3.66k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE13set_full_yearINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 3458|  3.66k|    {
 3459|  3.66k|        t.year = y;
 3460|  3.66k|        st.set_full_year(h);
 3461|  3.66k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE29read_classic_unsigned_integerEii:
 4443|  54.7k|    {
 4444|  54.7k|        int digits_read = 0;
 4445|  54.7k|        int accumulator = 0;
 4446|  94.7k|        while (m_begin != m_range.end()) {
  ------------------
  |  Branch (4446:16): [True: 94.2k, False: 450]
  ------------------
 4447|  94.2k|            const auto ch = *m_begin;
 4448|  94.2k|            if (ch < CharT{'0'} || ch > CharT{'9'}) {
  ------------------
  |  Branch (4448:17): [True: 27.8k, False: 66.4k]
  |  Branch (4448:36): [True: 18.0k, False: 48.3k]
  ------------------
 4449|  45.8k|                break;
 4450|  45.8k|            }
 4451|  48.3k|            ++m_begin;
 4452|  48.3k|            ++digits_read;
 4453|  48.3k|            accumulator = accumulator * 10 + static_cast<int>(ch - CharT{'0'});
 4454|  48.3k|            if (digits_read >= max_digits) {
  ------------------
  |  Branch (4454:17): [True: 8.42k, False: 39.9k]
  ------------------
 4455|  8.42k|                break;
 4456|  8.42k|            }
 4457|  48.3k|        }
 4458|  54.7k|        if (digits_read < min_digits) {
  ------------------
  |  Branch (4458:13): [True: 17.0k, False: 37.6k]
  ------------------
 4459|  17.0k|            set_error(scan_error{scan_error::invalid_scanned_value,
 4460|  17.0k|                                 "Too few integer digits"});
 4461|  17.0k|            return -1;
 4462|  17.0k|        }
 4463|  37.6k|        return accumulator;
 4464|  54.7k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE13on_short_yearENS1_14numeric_systemE:
 3821|  5.75k|    {
 3822|  5.75k|#if !SCN_DISABLE_LOCALE
 3823|  5.75k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3823:13): [True: 0, False: 5.75k]
  |  Branch (3823:31): [True: 0, False: 0]
  ------------------
 3824|      0|            if (auto t = read_localized("%Ey", L"%Ey")) {
  ------------------
  |  Branch (3824:22): [True: 0, False: 0]
  ------------------
 3825|      0|                setter::set_short_year(*this, m_tm, m_st,
 3826|      0|                                       (t->tm_year + 1900) % 100);
 3827|      0|            }
 3828|      0|            return;
 3829|      0|        }
 3830|  5.75k|#endif
 3831|       |
 3832|  5.75k|        int yr = read_classic_unsigned_integer(2, 2);
 3833|  5.75k|        setter::set_short_year(*this, m_tm, m_st, yr);
 3834|  5.75k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE14set_short_yearINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 3481|  5.75k|    {
 3482|  5.75k|        if (!t.year) {
  ------------------
  |  Branch (3482:13): [True: 5.75k, False: 0]
  ------------------
 3483|  5.75k|            t.year = y;
 3484|  5.75k|        }
 3485|      0|        else {
 3486|      0|            t.year = *t.year + y;
 3487|      0|        }
 3488|  5.75k|        st.set_short_year(h);
 3489|  5.75k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE13on_month_nameEv:
 3864|  4.46k|    {
 3865|  4.46k|#if !SCN_DISABLE_FAST_FLOAT
 3866|  4.46k|        if (m_st.localized) {
  ------------------
  |  Branch (3866:13): [True: 0, False: 4.46k]
  ------------------
 3867|      0|            if (auto t = read_localized("%b", L"%b")) {
  ------------------
  |  Branch (3867:22): [True: 0, False: 0]
  ------------------
 3868|      0|                setter::set_mon(*this, m_tm, m_st, t->tm_mon + 1);
 3869|      0|            }
 3870|      0|            return;
 3871|      0|        }
 3872|  4.46k|#endif
 3873|       |
 3874|  4.46k|        std::array<std::pair<std::string_view, int>, 12> long_mapping = {{
 3875|  4.46k|            {"January", 1},
 3876|  4.46k|            {"February", 2},
 3877|  4.46k|            {"March", 3},
 3878|  4.46k|            {"April", 4},
 3879|  4.46k|            {"May", 5},
 3880|  4.46k|            {"June", 6},
 3881|  4.46k|            {"July", 7},
 3882|  4.46k|            {"August", 8},
 3883|  4.46k|            {"September", 9},
 3884|  4.46k|            {"October", 10},
 3885|  4.46k|            {"November", 11},
 3886|  4.46k|            {"December", 12},
 3887|  4.46k|        }};
 3888|  4.46k|        if (auto m = try_one_of_str_nocase(long_mapping)) {
  ------------------
  |  Branch (3888:18): [True: 76, False: 4.39k]
  ------------------
 3889|     76|            return setter::set_mon(*this, m_tm, m_st, *m);
 3890|     76|        }
 3891|  4.39k|        std::array<std::pair<std::string_view, int>, 11> short_mapping = {{
 3892|  4.39k|            {"Jan", 1},
 3893|  4.39k|            {"Feb", 2},
 3894|  4.39k|            {"Mar", 3},
 3895|  4.39k|            {"Apr", 4},
 3896|  4.39k|            {"Jun", 6},
 3897|  4.39k|            {"Jul", 7},
 3898|  4.39k|            {"Aug", 8},
 3899|  4.39k|            {"Sep", 9},
 3900|  4.39k|            {"Oct", 10},
 3901|  4.39k|            {"Nov", 11},
 3902|  4.39k|            {"Dec", 12},
 3903|  4.39k|        }};
 3904|  4.39k|        if (auto m = try_one_of_str_nocase(short_mapping)) {
  ------------------
  |  Branch (3904:18): [True: 2.75k, False: 1.64k]
  ------------------
 3905|  2.75k|            return setter::set_mon(*this, m_tm, m_st, *m);
 3906|  2.75k|        }
 3907|  1.64k|        set_error({scan_error::invalid_scanned_value, "Invalid month name"});
 3908|  1.64k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE7set_monINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 3445|  10.6k|    {
 3446|  10.6k|        if (SCN_UNLIKELY(m < 1 || m > 12)) {
  ------------------
  |  | 1039|  18.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 2.78k, False: 7.87k]
  |  |  |  Branch (1039:45): [True: 2.66k, False: 8.00k]
  |  |  |  Branch (1039:45): [True: 124, False: 7.87k]
  |  |  ------------------
  ------------------
 3447|  2.78k|            return h.set_error(
 3448|  2.78k|                {scan_error::invalid_scanned_value, "Invalid value for mon"});
 3449|  2.78k|        }
 3450|  7.87k|        t.mon = month{static_cast<unsigned>(m)};
 3451|  7.87k|        st.set_mon(h);
 3452|  7.87k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE21try_one_of_str_nocaseIiLm12EEENSt3__18optionalIT_EERNSF_5arrayINSF_4pairINSF_17basic_string_viewIcNSF_11char_traitsIcEEEESH_EEXT0_EEE:
 4481|  4.46k|    {
 4482|  4.46k|        auto start_it = m_begin;
 4483|  4.46k|        std::size_t options_available = N;
 4484|  4.46k|        std::size_t chars_consumed = 0;
 4485|  17.5k|        while (options_available >= 1 &&
  ------------------
  |  Branch (4485:16): [True: 13.2k, False: 4.32k]
  ------------------
 4486|  17.5k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (4486:16): [True: 13.1k, False: 76]
  ------------------
 4487|  13.1k|            std::size_t i = 0;
 4488|  13.1k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (4488:17): [True: 64, False: 13.1k]
  ------------------
 4489|     64|                options_available = 0;
 4490|     64|                break;
 4491|     64|            }
 4492|  13.1k|            const auto ch = *m_begin;
 4493|  13.1k|            ++m_begin;
 4494|  81.3k|            while (i < options_available) {
  ------------------
  |  Branch (4494:20): [True: 68.1k, False: 13.1k]
  ------------------
 4495|  68.1k|                const auto cmp = static_cast<unsigned>(
 4496|  68.1k|                    ch ^ options[i].first[chars_consumed]);
 4497|  68.1k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (4497:21): [True: 0, False: 68.1k]
  ------------------
 4498|  68.1k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (4498:22): [True: 56.3k, False: 11.8k]
  |  Branch (4498:34): [True: 53.4k, False: 2.91k]
  ------------------
 4499|  53.4k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 4500|  53.4k|                                options.end());
 4501|  53.4k|                    --options_available;
 4502|  53.4k|                    continue;
 4503|  53.4k|                }
 4504|  14.7k|                ++i;
 4505|  14.7k|            }
 4506|  13.1k|            ++chars_consumed;
 4507|  13.1k|        }
 4508|  4.46k|        if (options_available != 1) {
  ------------------
  |  Branch (4508:13): [True: 4.39k, False: 76]
  ------------------
 4509|  4.39k|            m_begin = start_it;
 4510|  4.39k|            return std::nullopt;
 4511|  4.39k|        }
 4512|     76|        return options.front().second;
 4513|  4.46k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE21try_one_of_str_nocaseIiLm11EEENSt3__18optionalIT_EERNSF_5arrayINSF_4pairINSF_17basic_string_viewIcNSF_11char_traitsIcEEEESH_EEXT0_EEE:
 4481|  4.39k|    {
 4482|  4.39k|        auto start_it = m_begin;
 4483|  4.39k|        std::size_t options_available = N;
 4484|  4.39k|        std::size_t chars_consumed = 0;
 4485|  14.5k|        while (options_available >= 1 &&
  ------------------
  |  Branch (4485:16): [True: 12.9k, False: 1.58k]
  ------------------
 4486|  14.5k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (4486:16): [True: 10.2k, False: 2.75k]
  ------------------
 4487|  10.2k|            std::size_t i = 0;
 4488|  10.2k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (4488:17): [True: 56, False: 10.1k]
  ------------------
 4489|     56|                options_available = 0;
 4490|     56|                break;
 4491|     56|            }
 4492|  10.1k|            const auto ch = *m_begin;
 4493|  10.1k|            ++m_begin;
 4494|  64.2k|            while (i < options_available) {
  ------------------
  |  Branch (4494:20): [True: 54.1k, False: 10.1k]
  ------------------
 4495|  54.1k|                const auto cmp = static_cast<unsigned>(
 4496|  54.1k|                    ch ^ options[i].first[chars_consumed]);
 4497|  54.1k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (4497:21): [True: 0, False: 54.1k]
  ------------------
 4498|  54.1k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (4498:22): [True: 48.3k, False: 5.80k]
  |  Branch (4498:34): [True: 45.4k, False: 2.83k]
  ------------------
 4499|  45.4k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 4500|  45.4k|                                options.end());
 4501|  45.4k|                    --options_available;
 4502|  45.4k|                    continue;
 4503|  45.4k|                }
 4504|  8.63k|                ++i;
 4505|  8.63k|            }
 4506|  10.1k|            ++chars_consumed;
 4507|  10.1k|        }
 4508|  4.39k|        if (options_available != 1) {
  ------------------
  |  Branch (4508:13): [True: 1.64k, False: 2.75k]
  ------------------
 4509|  1.64k|            m_begin = start_it;
 4510|  1.64k|            return std::nullopt;
 4511|  1.64k|        }
 4512|  2.75k|        return options.front().second;
 4513|  4.39k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE12on_dec_monthENS1_14numeric_systemE:
 3910|  7.83k|    {
 3911|  7.83k|#if !SCN_DISABLE_LOCALE
 3912|  7.83k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3912:13): [True: 0, False: 7.83k]
  |  Branch (3912:31): [True: 0, False: 0]
  ------------------
 3913|      0|            if (auto t = read_localized("%Om", L"%Om")) {
  ------------------
  |  Branch (3913:22): [True: 0, False: 0]
  ------------------
 3914|      0|                setter::set_mon(*this, m_tm, m_st, t->tm_mon + 1);
 3915|      0|            }
 3916|      0|            return;
 3917|      0|        }
 3918|  7.83k|#endif
 3919|       |
 3920|  7.83k|        int mon = read_classic_unsigned_integer(1, 2);
 3921|  7.83k|        setter::set_mon(*this, m_tm, m_st, mon);
 3922|  7.83k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE15on_day_of_monthENS1_14numeric_systemE:
 3942|  7.81k|    {
 3943|  7.81k|#if !SCN_DISABLE_LOCALE
 3944|  7.81k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3944:13): [True: 0, False: 7.81k]
  |  Branch (3944:31): [True: 0, False: 0]
  ------------------
 3945|      0|            if (auto t = read_localized("%Od", L"%Od")) {
  ------------------
  |  Branch (3945:22): [True: 0, False: 0]
  ------------------
 3946|      0|                setter::set_mday(*this, m_tm, m_st, t->tm_mday);
 3947|      0|            }
 3948|      0|            return;
 3949|      0|        }
 3950|  7.81k|#endif
 3951|       |
 3952|  7.81k|        int mday = read_classic_unsigned_integer(1, 2);
 3953|  7.81k|        setter::set_mday(*this, m_tm, m_st, mday);
 3954|  7.81k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE8set_mdayINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 3432|  7.81k|    {
 3433|  7.81k|        if (SCN_UNLIKELY(d < 1 || d > 31)) {
  ------------------
  |  | 1039|  12.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 3.25k, False: 4.55k]
  |  |  |  Branch (1039:45): [True: 3.17k, False: 4.63k]
  |  |  |  Branch (1039:45): [True: 82, False: 4.55k]
  |  |  ------------------
  ------------------
 3434|  3.25k|            return h.set_error(
 3435|  3.25k|                {scan_error::invalid_scanned_value, "Invalid value for mday"});
 3436|  3.25k|        }
 3437|  4.55k|        t.mday = d;
 3438|  4.55k|        st.set_mday(h);
 3439|  4.55k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE15on_weekday_nameEv:
 3957|  3.42k|    {
 3958|  3.42k|#if !SCN_DISABLE_LOCALE
 3959|  3.42k|        if (m_st.localized) {
  ------------------
  |  Branch (3959:13): [True: 0, False: 3.42k]
  ------------------
 3960|      0|            if (auto t = read_localized("%a", L"%a")) {
  ------------------
  |  Branch (3960:22): [True: 0, False: 0]
  ------------------
 3961|      0|                setter::set_wday(*this, m_tm, m_st, t->tm_wday);
 3962|      0|            }
 3963|      0|            return;
 3964|      0|        }
 3965|  3.42k|#endif
 3966|       |
 3967|  3.42k|        std::array<std::pair<std::string_view, int>, 7> long_mapping = {{
 3968|  3.42k|            {"Sunday", 0},
 3969|  3.42k|            {"Monday", 1},
 3970|  3.42k|            {"Tuesday", 2},
 3971|  3.42k|            {"Wednesday", 3},
 3972|  3.42k|            {"Thursday", 4},
 3973|  3.42k|            {"Friday", 5},
 3974|  3.42k|            {"Saturday", 6},
 3975|  3.42k|        }};
 3976|  3.42k|        if (auto d = try_one_of_str_nocase(long_mapping)) {
  ------------------
  |  Branch (3976:18): [True: 0, False: 3.42k]
  ------------------
 3977|      0|            return setter::set_wday(*this, m_tm, m_st, *d);
 3978|      0|        }
 3979|  3.42k|        std::array<std::pair<std::string_view, int>, 7> short_mapping = {{
 3980|  3.42k|            {"Sun", 0},
 3981|  3.42k|            {"Mon", 1},
 3982|  3.42k|            {"Tue", 2},
 3983|  3.42k|            {"Wed", 3},
 3984|  3.42k|            {"Thu", 4},
 3985|  3.42k|            {"Fri", 5},
 3986|  3.42k|            {"Sat", 6},
 3987|  3.42k|        }};
 3988|  3.42k|        if (auto d = try_one_of_str_nocase(short_mapping)) {
  ------------------
  |  Branch (3988:18): [True: 1.76k, False: 1.66k]
  ------------------
 3989|  1.76k|            return setter::set_wday(*this, m_tm, m_st, *d);
 3990|  1.76k|        }
 3991|  1.66k|        return set_error(
 3992|  1.66k|            {scan_error::invalid_scanned_value, "Invalid weekday name"});
 3993|  3.42k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE8set_wdayINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 3495|  1.76k|    {
 3496|  1.76k|        if (SCN_UNLIKELY(d < 0 || d > 6)) {
  ------------------
  |  | 1039|  3.53k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 1.76k]
  |  |  |  Branch (1039:45): [True: 0, False: 1.76k]
  |  |  |  Branch (1039:45): [True: 0, False: 1.76k]
  |  |  ------------------
  ------------------
 3497|      0|            return h.set_error(
 3498|      0|                {scan_error::invalid_scanned_value, "Invalid value for wday"});
 3499|      0|        }
 3500|  1.76k|        t.wday = weekday{static_cast<unsigned>(d)};
 3501|  1.76k|        st.set_wday(h);
 3502|  1.76k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE21try_one_of_str_nocaseIiLm7EEENSt3__18optionalIT_EERNSF_5arrayINSF_4pairINSF_17basic_string_viewIcNSF_11char_traitsIcEEEESH_EEXT0_EEE:
 4481|  6.85k|    {
 4482|  6.85k|        auto start_it = m_begin;
 4483|  6.85k|        std::size_t options_available = N;
 4484|  6.85k|        std::size_t chars_consumed = 0;
 4485|  23.1k|        while (options_available >= 1 &&
  ------------------
  |  Branch (4485:16): [True: 18.0k, False: 5.03k]
  ------------------
 4486|  23.1k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (4486:16): [True: 16.3k, False: 1.76k]
  ------------------
 4487|  16.3k|            std::size_t i = 0;
 4488|  16.3k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (4488:17): [True: 54, False: 16.2k]
  ------------------
 4489|     54|                options_available = 0;
 4490|     54|                break;
 4491|     54|            }
 4492|  16.2k|            const auto ch = *m_begin;
 4493|  16.2k|            ++m_begin;
 4494|  73.6k|            while (i < options_available) {
  ------------------
  |  Branch (4494:20): [True: 57.3k, False: 16.2k]
  ------------------
 4495|  57.3k|                const auto cmp = static_cast<unsigned>(
 4496|  57.3k|                    ch ^ options[i].first[chars_consumed]);
 4497|  57.3k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (4497:21): [True: 0, False: 57.3k]
  ------------------
 4498|  57.3k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (4498:22): [True: 46.2k, False: 11.1k]
  |  Branch (4498:34): [True: 46.1k, False: 80]
  ------------------
 4499|  46.1k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 4500|  46.1k|                                options.end());
 4501|  46.1k|                    --options_available;
 4502|  46.1k|                    continue;
 4503|  46.1k|                }
 4504|  11.2k|                ++i;
 4505|  11.2k|            }
 4506|  16.2k|            ++chars_consumed;
 4507|  16.2k|        }
 4508|  6.85k|        if (options_available != 1) {
  ------------------
  |  Branch (4508:13): [True: 5.08k, False: 1.76k]
  ------------------
 4509|  5.08k|            m_begin = start_it;
 4510|  5.08k|            return std::nullopt;
 4511|  5.08k|        }
 4512|  1.76k|        return options.front().second;
 4513|  6.85k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE10on_24_hourENS1_14numeric_systemE:
 4031|  13.4k|    {
 4032|  13.4k|#if !SCN_DISABLE_LOCALE
 4033|  13.4k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (4033:13): [True: 0, False: 13.4k]
  |  Branch (4033:31): [True: 0, False: 0]
  ------------------
 4034|      0|            if (auto t = read_localized("%OH", L"%OH")) {
  ------------------
  |  Branch (4034:22): [True: 0, False: 0]
  ------------------
 4035|      0|                setter::set_hour24(*this, m_tm, m_st, t->tm_hour);
 4036|      0|            }
 4037|      0|            return;
 4038|      0|        }
 4039|  13.4k|#endif
 4040|       |
 4041|  13.4k|        int hr = read_classic_unsigned_integer(1, 2);
 4042|  13.4k|        setter::set_hour24(*this, m_tm, m_st, hr);
 4043|  13.4k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE10set_hour24INS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 3406|  13.4k|    {
 3407|  13.4k|        if (SCN_UNLIKELY(h < 0 || h > 23)) {
  ------------------
  |  | 1039|  24.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 2.39k, False: 11.0k]
  |  |  |  Branch (1039:45): [True: 2.19k, False: 11.2k]
  |  |  |  Branch (1039:45): [True: 208, False: 11.0k]
  |  |  ------------------
  ------------------
 3408|  2.39k|            return hdl.set_error(
 3409|  2.39k|                {scan_error::invalid_scanned_value, "Invalid value for hours"});
 3410|  2.39k|        }
 3411|  11.0k|        t.hour = h;
 3412|  11.0k|        st.set_hour24(hdl);
 3413|  11.0k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE9on_minuteENS1_14numeric_systemE:
 4059|  13.4k|    {
 4060|  13.4k|#if !SCN_DISABLE_LOCALE
 4061|  13.4k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (4061:13): [True: 0, False: 13.4k]
  |  Branch (4061:31): [True: 0, False: 0]
  ------------------
 4062|      0|            if (auto t = read_localized("%OM", L"%OM")) {
  ------------------
  |  Branch (4062:22): [True: 0, False: 0]
  ------------------
 4063|      0|                setter::set_min(*this, m_tm, m_st, t->tm_min);
 4064|      0|            }
 4065|      0|            return;
 4066|      0|        }
 4067|  13.4k|#endif
 4068|       |
 4069|  13.4k|        int min = read_classic_unsigned_integer(1, 2);
 4070|  13.4k|        setter::set_min(*this, m_tm, m_st, min);
 4071|  13.4k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE7set_minINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 3393|  13.4k|    {
 3394|  13.4k|        if (SCN_UNLIKELY(m < 0 || m > 59)) {
  ------------------
  |  | 1039|  24.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 2.72k, False: 10.6k]
  |  |  |  Branch (1039:45): [True: 2.70k, False: 10.7k]
  |  |  |  Branch (1039:45): [True: 26, False: 10.6k]
  |  |  ------------------
  ------------------
 3395|  2.72k|            return h.set_error({scan_error::invalid_scanned_value,
 3396|  2.72k|                                "Invalid value for minutes"});
 3397|  2.72k|        }
 3398|  10.6k|        t.min = m;
 3399|  10.6k|        st.set_min(h);
 3400|  10.6k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE9on_secondENS1_14numeric_systemE:
 4073|  2.84k|    {
 4074|  2.84k|#if !SCN_DISABLE_LOCALE
 4075|  2.84k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (4075:13): [True: 0, False: 2.84k]
  |  Branch (4075:31): [True: 0, False: 0]
  ------------------
 4076|      0|            if (auto t = read_localized("%OS", L"%OS")) {
  ------------------
  |  Branch (4076:22): [True: 0, False: 0]
  ------------------
 4077|      0|                setter::set_sec(*this, m_tm, m_st, t->tm_sec);
 4078|      0|            }
 4079|      0|            return;
 4080|      0|        }
 4081|  2.84k|#endif
 4082|       |
 4083|  2.84k|        int sec = read_classic_unsigned_integer(1, 2);
 4084|  2.84k|        setter::set_sec(*this, m_tm, m_st, sec);
 4085|  2.84k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE7set_secINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 3380|  2.84k|    {
 3381|  2.84k|        if (SCN_UNLIKELY(s < 0 || s > 60)) {
  ------------------
  |  | 1039|  4.07k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 1.62k, False: 1.22k]
  |  |  |  Branch (1039:45): [True: 1.61k, False: 1.22k]
  |  |  |  Branch (1039:45): [True: 4, False: 1.22k]
  |  |  ------------------
  ------------------
 3382|  1.62k|            return h.set_error({scan_error::invalid_scanned_value,
 3383|  1.62k|                                "Invalid value for seconds"});
 3384|  1.62k|        }
 3385|  1.22k|        t.sec = s;
 3386|  1.22k|        st.set_sec(h);
 3387|  1.22k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE10on_us_dateEv:
 4315|  5.75k|    {
 4316|       |        // %m/%d/%y
 4317|  5.75k|        constexpr CharT slash = '/';
 4318|  5.75k|        on_dec_month();
 4319|  5.75k|        on_text(&slash, &slash + 1);
 4320|  5.75k|        on_day_of_month();
 4321|  5.75k|        on_text(&slash, &slash + 1);
 4322|  5.75k|        on_short_year();
 4323|  5.75k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE11on_iso_dateEv:
 4325|  1.99k|    {
 4326|       |        // %Y-%m-%d
 4327|  1.99k|        constexpr CharT dash = '-';
 4328|  1.99k|        on_full_year();
 4329|  1.99k|        on_text(&dash, &dash + 1);
 4330|  1.99k|        on_dec_month();
 4331|  1.99k|        on_text(&dash, &dash + 1);
 4332|  1.99k|        on_day_of_month();
 4333|  1.99k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE15on_24_hour_timeEv:
 4357|  10.5k|    {
 4358|       |        // %H:%M
 4359|  10.5k|        constexpr CharT colon = ':';
 4360|  10.5k|        on_24_hour();
 4361|  10.5k|        on_text(&colon, &colon + 1);
 4362|  10.5k|        on_minute();
 4363|  10.5k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE11on_iso_timeEv:
 4365|  2.84k|    {
 4366|       |        // %H:%M:%S
 4367|  2.84k|        constexpr CharT colon = ':';
 4368|  2.84k|        on_24_hour();
 4369|  2.84k|        on_text(&colon, &colon + 1);
 4370|  2.84k|        on_minute();
 4371|  2.84k|        on_text(&colon, &colon + 1);
 4372|  2.84k|        on_second();
 4373|  2.84k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE6verifyEv:
 4404|  19.1k|    {
 4405|  19.1k|        m_st.verify(*this);
 4406|  19.1k|        if (m_st.am_pm_set && m_st.hour12_set) {
  ------------------
  |  Branch (4406:13): [True: 0, False: 19.1k]
  |  Branch (4406:31): [True: 0, False: 0]
  ------------------
 4407|      0|            setter::handle_am_pm(m_tm, m_st);
 4408|      0|        }
 4409|  19.1k|        if (!m_st.full_year_set && (m_st.short_year_set || m_st.century_set)) {
  ------------------
  |  Branch (4409:13): [True: 18.8k, False: 340]
  |  Branch (4409:37): [True: 4.11k, False: 14.7k]
  |  Branch (4409:60): [True: 0, False: 14.7k]
  ------------------
 4410|  4.11k|            setter::handle_short_year_and_century(m_tm, m_st);
 4411|  4.11k|        }
 4412|  19.1k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE29handle_short_year_and_centuryERS3_RNS1_12setter_stateE:
 3545|  4.29k|    {
 3546|  4.29k|        assert(t.year);
 3547|  4.29k|        st.handle_short_year_and_century(*t.year, 0);
 3548|  4.29k|    }
_ZNK3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE9get_errorEv:
 4415|  61.6k|    {
 4416|  61.6k|        return m_error;
 4417|  61.6k|    }
_ZNK3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tEEEcE12get_iteratorEv:
 4432|  19.1k|    {
 4433|  19.1k|        return m_begin;
 4434|  19.1k|    }
_ZN3scn2v46detail22chrono_scan_inner_implIcNS0_19datetime_componentsENS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEEEENS0_13scan_expectedINT1_8iteratorEEENSt3__117basic_string_viewIT_NSH_11char_traitsISJ_EEEERT0_RSE_:
 4625|  26.3k|{
 4626|  26.3k|    {
 4627|  26.3k|        SCN_TRY(it,
  ------------------
  |  | 3958|  26.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  26.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  26.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  26.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 246, False: 26.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    246|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    246|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    246|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    246|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    246|    }                                                  \
  |  |  |  | 3957|  26.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  26.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4628|  26.1k|                detail::internal_skip_classic_whitespace(ctx.range(), false));
 4629|  26.1k|        ctx.advance_to(SCN_MOVE(it));
  ------------------
  |  | 1108|  26.1k|    static_cast<    \
  |  | 1109|  26.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4630|  26.1k|    }
 4631|       |
 4632|      0|    auto r = detail::tm_reader<T, typename Context::range_type, CharT>(
 4633|  26.1k|        ctx.range(), t, ctx.locale());
 4634|  26.1k|    detail::parse_chrono_format_specs(fmt.data(), fmt.data() + fmt.size(), r);
 4635|  26.1k|    if (auto e = r.get_error(); SCN_UNLIKELY(!e)) {
  ------------------
  |  | 1039|  26.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 11.7k, False: 14.3k]
  |  |  ------------------
  ------------------
 4636|  11.7k|        return unexpected(e.error());
 4637|  11.7k|    }
 4638|  14.3k|    return r.get_iterator();
 4639|  26.1k|}
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEC2ESA_RS3_NS1_10locale_refE:
 3769|  26.1k|        : m_range(SCN_MOVE(r)),
  ------------------
  |  | 1108|  26.1k|    static_cast<    \
  |  | 1109|  26.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3770|  26.1k|          m_begin(ranges::begin(m_range)),
 3771|  26.1k|          m_tm(t),
 3772|  26.1k|          m_loc(loc)
 3773|  26.1k|    {
 3774|  26.1k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE8on_errorES9_:
 4420|  11.0k|    {
 4421|  11.0k|        set_error({scan_error::invalid_format_string, msg});
 4422|  11.0k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE9set_errorENS0_10scan_errorE:
 4425|  45.8k|    {
 4426|  45.8k|        if (m_error.has_value()) {
  ------------------
  |  Branch (4426:13): [True: 11.7k, False: 34.0k]
  ------------------
 4427|  11.7k|            m_error = unexpected(e);
 4428|  11.7k|        }
 4429|  45.8k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE7on_textES9_S9_:
 3777|  23.4k|    {
 3778|  35.7k|        while (beg != end) {
  ------------------
  |  Branch (3778:16): [True: 23.4k, False: 12.2k]
  ------------------
 3779|  23.4k|            if (m_begin == ranges::end(m_range)) {
  ------------------
  |  Branch (3779:17): [True: 182, False: 23.2k]
  ------------------
 3780|    182|                return set_error({scan_error::end_of_input, "EOF"});
 3781|    182|            }
 3782|  23.2k|            if (*beg != *m_begin) {
  ------------------
  |  Branch (3782:17): [True: 11.0k, False: 12.2k]
  ------------------
 3783|  11.0k|                return on_error("Invalid literal character");
 3784|  11.0k|            }
 3785|  12.2k|            ++beg;
 3786|  12.2k|            ++m_begin;
 3787|  12.2k|        }
 3788|  23.4k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE12on_full_yearENS1_14numeric_systemE:
 3807|  3.71k|    {
 3808|  3.71k|#if !SCN_DISABLE_LOCALE
 3809|  3.71k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3809:13): [True: 0, False: 3.71k]
  |  Branch (3809:31): [True: 0, False: 0]
  ------------------
 3810|      0|            if (auto t = read_localized("%EY", L"%EY")) {
  ------------------
  |  Branch (3810:22): [True: 0, False: 0]
  ------------------
 3811|      0|                setter::set_full_year(*this, m_tm, m_st, t->tm_year + 1900);
 3812|      0|            }
 3813|      0|            return;
 3814|      0|        }
 3815|  3.71k|#endif
 3816|       |
 3817|  3.71k|        int yr = read_classic_unsigned_integer(4, 4);
 3818|  3.71k|        setter::set_full_year(*this, m_tm, m_st, yr);
 3819|  3.71k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE13set_full_yearINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 3458|  3.71k|    {
 3459|  3.71k|        t.year = y;
 3460|  3.71k|        st.set_full_year(h);
 3461|  3.71k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE29read_classic_unsigned_integerEii:
 4443|  41.7k|    {
 4444|  41.7k|        int digits_read = 0;
 4445|  41.7k|        int accumulator = 0;
 4446|  67.6k|        while (m_begin != m_range.end()) {
  ------------------
  |  Branch (4446:16): [True: 67.2k, False: 372]
  ------------------
 4447|  67.2k|            const auto ch = *m_begin;
 4448|  67.2k|            if (ch < CharT{'0'} || ch > CharT{'9'}) {
  ------------------
  |  Branch (4448:17): [True: 20.3k, False: 46.8k]
  |  Branch (4448:36): [True: 16.7k, False: 30.0k]
  ------------------
 4449|  37.1k|                break;
 4450|  37.1k|            }
 4451|  30.0k|            ++m_begin;
 4452|  30.0k|            ++digits_read;
 4453|  30.0k|            accumulator = accumulator * 10 + static_cast<int>(ch - CharT{'0'});
 4454|  30.0k|            if (digits_read >= max_digits) {
  ------------------
  |  Branch (4454:17): [True: 4.16k, False: 25.8k]
  ------------------
 4455|  4.16k|                break;
 4456|  4.16k|            }
 4457|  30.0k|        }
 4458|  41.7k|        if (digits_read < min_digits) {
  ------------------
  |  Branch (4458:13): [True: 17.8k, False: 23.8k]
  ------------------
 4459|  17.8k|            set_error(scan_error{scan_error::invalid_scanned_value,
 4460|  17.8k|                                 "Too few integer digits"});
 4461|  17.8k|            return -1;
 4462|  17.8k|        }
 4463|  23.8k|        return accumulator;
 4464|  41.7k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE13on_short_yearENS1_14numeric_systemE:
 3821|  1.83k|    {
 3822|  1.83k|#if !SCN_DISABLE_LOCALE
 3823|  1.83k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3823:13): [True: 0, False: 1.83k]
  |  Branch (3823:31): [True: 0, False: 0]
  ------------------
 3824|      0|            if (auto t = read_localized("%Ey", L"%Ey")) {
  ------------------
  |  Branch (3824:22): [True: 0, False: 0]
  ------------------
 3825|      0|                setter::set_short_year(*this, m_tm, m_st,
 3826|      0|                                       (t->tm_year + 1900) % 100);
 3827|      0|            }
 3828|      0|            return;
 3829|      0|        }
 3830|  1.83k|#endif
 3831|       |
 3832|  1.83k|        int yr = read_classic_unsigned_integer(2, 2);
 3833|  1.83k|        setter::set_short_year(*this, m_tm, m_st, yr);
 3834|  1.83k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE14set_short_yearINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 3481|  1.83k|    {
 3482|  1.83k|        if (!t.year) {
  ------------------
  |  Branch (3482:13): [True: 1.83k, False: 0]
  ------------------
 3483|  1.83k|            t.year = y;
 3484|  1.83k|        }
 3485|      0|        else {
 3486|      0|            t.year = *t.year + y;
 3487|      0|        }
 3488|  1.83k|        st.set_short_year(h);
 3489|  1.83k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE13on_month_nameEv:
 3864|  4.49k|    {
 3865|  4.49k|#if !SCN_DISABLE_FAST_FLOAT
 3866|  4.49k|        if (m_st.localized) {
  ------------------
  |  Branch (3866:13): [True: 0, False: 4.49k]
  ------------------
 3867|      0|            if (auto t = read_localized("%b", L"%b")) {
  ------------------
  |  Branch (3867:22): [True: 0, False: 0]
  ------------------
 3868|      0|                setter::set_mon(*this, m_tm, m_st, t->tm_mon + 1);
 3869|      0|            }
 3870|      0|            return;
 3871|      0|        }
 3872|  4.49k|#endif
 3873|       |
 3874|  4.49k|        std::array<std::pair<std::string_view, int>, 12> long_mapping = {{
 3875|  4.49k|            {"January", 1},
 3876|  4.49k|            {"February", 2},
 3877|  4.49k|            {"March", 3},
 3878|  4.49k|            {"April", 4},
 3879|  4.49k|            {"May", 5},
 3880|  4.49k|            {"June", 6},
 3881|  4.49k|            {"July", 7},
 3882|  4.49k|            {"August", 8},
 3883|  4.49k|            {"September", 9},
 3884|  4.49k|            {"October", 10},
 3885|  4.49k|            {"November", 11},
 3886|  4.49k|            {"December", 12},
 3887|  4.49k|        }};
 3888|  4.49k|        if (auto m = try_one_of_str_nocase(long_mapping)) {
  ------------------
  |  Branch (3888:18): [True: 76, False: 4.41k]
  ------------------
 3889|     76|            return setter::set_mon(*this, m_tm, m_st, *m);
 3890|     76|        }
 3891|  4.41k|        std::array<std::pair<std::string_view, int>, 11> short_mapping = {{
 3892|  4.41k|            {"Jan", 1},
 3893|  4.41k|            {"Feb", 2},
 3894|  4.41k|            {"Mar", 3},
 3895|  4.41k|            {"Apr", 4},
 3896|  4.41k|            {"Jun", 6},
 3897|  4.41k|            {"Jul", 7},
 3898|  4.41k|            {"Aug", 8},
 3899|  4.41k|            {"Sep", 9},
 3900|  4.41k|            {"Oct", 10},
 3901|  4.41k|            {"Nov", 11},
 3902|  4.41k|            {"Dec", 12},
 3903|  4.41k|        }};
 3904|  4.41k|        if (auto m = try_one_of_str_nocase(short_mapping)) {
  ------------------
  |  Branch (3904:18): [True: 2.74k, False: 1.67k]
  ------------------
 3905|  2.74k|            return setter::set_mon(*this, m_tm, m_st, *m);
 3906|  2.74k|        }
 3907|  1.67k|        set_error({scan_error::invalid_scanned_value, "Invalid month name"});
 3908|  1.67k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE7set_monINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 3445|  6.75k|    {
 3446|  6.75k|        if (SCN_UNLIKELY(m < 1 || m > 12)) {
  ------------------
  |  | 1039|  10.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 2.89k, False: 3.85k]
  |  |  |  Branch (1039:45): [True: 2.79k, False: 3.96k]
  |  |  |  Branch (1039:45): [True: 104, False: 3.85k]
  |  |  ------------------
  ------------------
 3447|  2.89k|            return h.set_error(
 3448|  2.89k|                {scan_error::invalid_scanned_value, "Invalid value for mon"});
 3449|  2.89k|        }
 3450|  3.85k|        t.mon = month{static_cast<unsigned>(m)};
 3451|  3.85k|        st.set_mon(h);
 3452|  3.85k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE21try_one_of_str_nocaseIiLm12EEENSt3__18optionalIT_EERNSD_5arrayINSD_4pairINSD_17basic_string_viewIcNSD_11char_traitsIcEEEESF_EEXT0_EEE:
 4481|  4.49k|    {
 4482|  4.49k|        auto start_it = m_begin;
 4483|  4.49k|        std::size_t options_available = N;
 4484|  4.49k|        std::size_t chars_consumed = 0;
 4485|  17.5k|        while (options_available >= 1 &&
  ------------------
  |  Branch (4485:16): [True: 13.2k, False: 4.35k]
  ------------------
 4486|  17.5k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (4486:16): [True: 13.1k, False: 76]
  ------------------
 4487|  13.1k|            std::size_t i = 0;
 4488|  13.1k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (4488:17): [True: 58, False: 13.1k]
  ------------------
 4489|     58|                options_available = 0;
 4490|     58|                break;
 4491|     58|            }
 4492|  13.1k|            const auto ch = *m_begin;
 4493|  13.1k|            ++m_begin;
 4494|  81.4k|            while (i < options_available) {
  ------------------
  |  Branch (4494:20): [True: 68.3k, False: 13.1k]
  ------------------
 4495|  68.3k|                const auto cmp = static_cast<unsigned>(
 4496|  68.3k|                    ch ^ options[i].first[chars_consumed]);
 4497|  68.3k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (4497:21): [True: 0, False: 68.3k]
  ------------------
 4498|  68.3k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (4498:22): [True: 56.5k, False: 11.7k]
  |  Branch (4498:34): [True: 53.7k, False: 2.87k]
  ------------------
 4499|  53.7k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 4500|  53.7k|                                options.end());
 4501|  53.7k|                    --options_available;
 4502|  53.7k|                    continue;
 4503|  53.7k|                }
 4504|  14.6k|                ++i;
 4505|  14.6k|            }
 4506|  13.1k|            ++chars_consumed;
 4507|  13.1k|        }
 4508|  4.49k|        if (options_available != 1) {
  ------------------
  |  Branch (4508:13): [True: 4.41k, False: 76]
  ------------------
 4509|  4.41k|            m_begin = start_it;
 4510|  4.41k|            return std::nullopt;
 4511|  4.41k|        }
 4512|     76|        return options.front().second;
 4513|  4.49k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE21try_one_of_str_nocaseIiLm11EEENSt3__18optionalIT_EERNSD_5arrayINSD_4pairINSD_17basic_string_viewIcNSD_11char_traitsIcEEEESF_EEXT0_EEE:
 4481|  4.41k|    {
 4482|  4.41k|        auto start_it = m_begin;
 4483|  4.41k|        std::size_t options_available = N;
 4484|  4.41k|        std::size_t chars_consumed = 0;
 4485|  14.5k|        while (options_available >= 1 &&
  ------------------
  |  Branch (4485:16): [True: 12.9k, False: 1.62k]
  ------------------
 4486|  14.5k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (4486:16): [True: 10.1k, False: 2.74k]
  ------------------
 4487|  10.1k|            std::size_t i = 0;
 4488|  10.1k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (4488:17): [True: 50, False: 10.1k]
  ------------------
 4489|     50|                options_available = 0;
 4490|     50|                break;
 4491|     50|            }
 4492|  10.1k|            const auto ch = *m_begin;
 4493|  10.1k|            ++m_begin;
 4494|  64.4k|            while (i < options_available) {
  ------------------
  |  Branch (4494:20): [True: 54.3k, False: 10.1k]
  ------------------
 4495|  54.3k|                const auto cmp = static_cast<unsigned>(
 4496|  54.3k|                    ch ^ options[i].first[chars_consumed]);
 4497|  54.3k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (4497:21): [True: 0, False: 54.3k]
  ------------------
 4498|  54.3k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (4498:22): [True: 48.5k, False: 5.76k]
  |  Branch (4498:34): [True: 45.7k, False: 2.79k]
  ------------------
 4499|  45.7k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 4500|  45.7k|                                options.end());
 4501|  45.7k|                    --options_available;
 4502|  45.7k|                    continue;
 4503|  45.7k|                }
 4504|  8.56k|                ++i;
 4505|  8.56k|            }
 4506|  10.1k|            ++chars_consumed;
 4507|  10.1k|        }
 4508|  4.41k|        if (options_available != 1) {
  ------------------
  |  Branch (4508:13): [True: 1.67k, False: 2.74k]
  ------------------
 4509|  1.67k|            m_begin = start_it;
 4510|  1.67k|            return std::nullopt;
 4511|  1.67k|        }
 4512|  2.74k|        return options.front().second;
 4513|  4.41k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE12on_dec_monthENS1_14numeric_systemE:
 3910|  3.93k|    {
 3911|  3.93k|#if !SCN_DISABLE_LOCALE
 3912|  3.93k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3912:13): [True: 0, False: 3.93k]
  |  Branch (3912:31): [True: 0, False: 0]
  ------------------
 3913|      0|            if (auto t = read_localized("%Om", L"%Om")) {
  ------------------
  |  Branch (3913:22): [True: 0, False: 0]
  ------------------
 3914|      0|                setter::set_mon(*this, m_tm, m_st, t->tm_mon + 1);
 3915|      0|            }
 3916|      0|            return;
 3917|      0|        }
 3918|  3.93k|#endif
 3919|       |
 3920|  3.93k|        int mon = read_classic_unsigned_integer(1, 2);
 3921|  3.93k|        setter::set_mon(*this, m_tm, m_st, mon);
 3922|  3.93k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE15on_day_of_monthENS1_14numeric_systemE:
 3942|  3.91k|    {
 3943|  3.91k|#if !SCN_DISABLE_LOCALE
 3944|  3.91k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3944:13): [True: 0, False: 3.91k]
  |  Branch (3944:31): [True: 0, False: 0]
  ------------------
 3945|      0|            if (auto t = read_localized("%Od", L"%Od")) {
  ------------------
  |  Branch (3945:22): [True: 0, False: 0]
  ------------------
 3946|      0|                setter::set_mday(*this, m_tm, m_st, t->tm_mday);
 3947|      0|            }
 3948|      0|            return;
 3949|      0|        }
 3950|  3.91k|#endif
 3951|       |
 3952|  3.91k|        int mday = read_classic_unsigned_integer(1, 2);
 3953|  3.91k|        setter::set_mday(*this, m_tm, m_st, mday);
 3954|  3.91k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE8set_mdayINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 3432|  3.91k|    {
 3433|  3.91k|        if (SCN_UNLIKELY(d < 1 || d > 31)) {
  ------------------
  |  | 1039|  4.56k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 3.33k, False: 578]
  |  |  |  Branch (1039:45): [True: 3.26k, False: 652]
  |  |  |  Branch (1039:45): [True: 74, False: 578]
  |  |  ------------------
  ------------------
 3434|  3.33k|            return h.set_error(
 3435|  3.33k|                {scan_error::invalid_scanned_value, "Invalid value for mday"});
 3436|  3.33k|        }
 3437|    578|        t.mday = d;
 3438|    578|        st.set_mday(h);
 3439|    578|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE15on_weekday_nameEv:
 3957|  3.38k|    {
 3958|  3.38k|#if !SCN_DISABLE_LOCALE
 3959|  3.38k|        if (m_st.localized) {
  ------------------
  |  Branch (3959:13): [True: 0, False: 3.38k]
  ------------------
 3960|      0|            if (auto t = read_localized("%a", L"%a")) {
  ------------------
  |  Branch (3960:22): [True: 0, False: 0]
  ------------------
 3961|      0|                setter::set_wday(*this, m_tm, m_st, t->tm_wday);
 3962|      0|            }
 3963|      0|            return;
 3964|      0|        }
 3965|  3.38k|#endif
 3966|       |
 3967|  3.38k|        std::array<std::pair<std::string_view, int>, 7> long_mapping = {{
 3968|  3.38k|            {"Sunday", 0},
 3969|  3.38k|            {"Monday", 1},
 3970|  3.38k|            {"Tuesday", 2},
 3971|  3.38k|            {"Wednesday", 3},
 3972|  3.38k|            {"Thursday", 4},
 3973|  3.38k|            {"Friday", 5},
 3974|  3.38k|            {"Saturday", 6},
 3975|  3.38k|        }};
 3976|  3.38k|        if (auto d = try_one_of_str_nocase(long_mapping)) {
  ------------------
  |  Branch (3976:18): [True: 0, False: 3.38k]
  ------------------
 3977|      0|            return setter::set_wday(*this, m_tm, m_st, *d);
 3978|      0|        }
 3979|  3.38k|        std::array<std::pair<std::string_view, int>, 7> short_mapping = {{
 3980|  3.38k|            {"Sun", 0},
 3981|  3.38k|            {"Mon", 1},
 3982|  3.38k|            {"Tue", 2},
 3983|  3.38k|            {"Wed", 3},
 3984|  3.38k|            {"Thu", 4},
 3985|  3.38k|            {"Fri", 5},
 3986|  3.38k|            {"Sat", 6},
 3987|  3.38k|        }};
 3988|  3.38k|        if (auto d = try_one_of_str_nocase(short_mapping)) {
  ------------------
  |  Branch (3988:18): [True: 1.69k, False: 1.68k]
  ------------------
 3989|  1.69k|            return setter::set_wday(*this, m_tm, m_st, *d);
 3990|  1.69k|        }
 3991|  1.68k|        return set_error(
 3992|  1.68k|            {scan_error::invalid_scanned_value, "Invalid weekday name"});
 3993|  3.38k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE8set_wdayINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 3495|  1.69k|    {
 3496|  1.69k|        if (SCN_UNLIKELY(d < 0 || d > 6)) {
  ------------------
  |  | 1039|  3.39k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 1.69k]
  |  |  |  Branch (1039:45): [True: 0, False: 1.69k]
  |  |  |  Branch (1039:45): [True: 0, False: 1.69k]
  |  |  ------------------
  ------------------
 3497|      0|            return h.set_error(
 3498|      0|                {scan_error::invalid_scanned_value, "Invalid value for wday"});
 3499|      0|        }
 3500|  1.69k|        t.wday = weekday{static_cast<unsigned>(d)};
 3501|  1.69k|        st.set_wday(h);
 3502|  1.69k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE21try_one_of_str_nocaseIiLm7EEENSt3__18optionalIT_EERNSD_5arrayINSD_4pairINSD_17basic_string_viewIcNSD_11char_traitsIcEEEESF_EEXT0_EEE:
 4481|  6.77k|    {
 4482|  6.77k|        auto start_it = m_begin;
 4483|  6.77k|        std::size_t options_available = N;
 4484|  6.77k|        std::size_t chars_consumed = 0;
 4485|  22.5k|        while (options_available >= 1 &&
  ------------------
  |  Branch (4485:16): [True: 17.5k, False: 5.03k]
  ------------------
 4486|  22.5k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (4486:16): [True: 15.8k, False: 1.69k]
  ------------------
 4487|  15.8k|            std::size_t i = 0;
 4488|  15.8k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (4488:17): [True: 38, False: 15.7k]
  ------------------
 4489|     38|                options_available = 0;
 4490|     38|                break;
 4491|     38|            }
 4492|  15.7k|            const auto ch = *m_begin;
 4493|  15.7k|            ++m_begin;
 4494|  72.2k|            while (i < options_available) {
  ------------------
  |  Branch (4494:20): [True: 56.4k, False: 15.7k]
  ------------------
 4495|  56.4k|                const auto cmp = static_cast<unsigned>(
 4496|  56.4k|                    ch ^ options[i].first[chars_consumed]);
 4497|  56.4k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (4497:21): [True: 0, False: 56.4k]
  ------------------
 4498|  56.4k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (4498:22): [True: 45.7k, False: 10.7k]
  |  Branch (4498:34): [True: 45.6k, False: 52]
  ------------------
 4499|  45.6k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 4500|  45.6k|                                options.end());
 4501|  45.6k|                    --options_available;
 4502|  45.6k|                    continue;
 4503|  45.6k|                }
 4504|  10.7k|                ++i;
 4505|  10.7k|            }
 4506|  15.7k|            ++chars_consumed;
 4507|  15.7k|        }
 4508|  6.77k|        if (options_available != 1) {
  ------------------
  |  Branch (4508:13): [True: 5.07k, False: 1.69k]
  ------------------
 4509|  5.07k|            m_begin = start_it;
 4510|  5.07k|            return std::nullopt;
 4511|  5.07k|        }
 4512|  1.69k|        return options.front().second;
 4513|  6.77k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE10on_24_hourENS1_14numeric_systemE:
 4031|  12.7k|    {
 4032|  12.7k|#if !SCN_DISABLE_LOCALE
 4033|  12.7k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (4033:13): [True: 0, False: 12.7k]
  |  Branch (4033:31): [True: 0, False: 0]
  ------------------
 4034|      0|            if (auto t = read_localized("%OH", L"%OH")) {
  ------------------
  |  Branch (4034:22): [True: 0, False: 0]
  ------------------
 4035|      0|                setter::set_hour24(*this, m_tm, m_st, t->tm_hour);
 4036|      0|            }
 4037|      0|            return;
 4038|      0|        }
 4039|  12.7k|#endif
 4040|       |
 4041|  12.7k|        int hr = read_classic_unsigned_integer(1, 2);
 4042|  12.7k|        setter::set_hour24(*this, m_tm, m_st, hr);
 4043|  12.7k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE10set_hour24INS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 3406|  12.7k|    {
 3407|  12.7k|        if (SCN_UNLIKELY(h < 0 || h > 23)) {
  ------------------
  |  | 1039|  23.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 2.66k, False: 10.0k]
  |  |  |  Branch (1039:45): [True: 2.47k, False: 10.2k]
  |  |  |  Branch (1039:45): [True: 186, False: 10.0k]
  |  |  ------------------
  ------------------
 3408|  2.66k|            return hdl.set_error(
 3409|  2.66k|                {scan_error::invalid_scanned_value, "Invalid value for hours"});
 3410|  2.66k|        }
 3411|  10.0k|        t.hour = h;
 3412|  10.0k|        st.set_hour24(hdl);
 3413|  10.0k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE9on_minuteENS1_14numeric_systemE:
 4059|  12.7k|    {
 4060|  12.7k|#if !SCN_DISABLE_LOCALE
 4061|  12.7k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (4061:13): [True: 0, False: 12.7k]
  |  Branch (4061:31): [True: 0, False: 0]
  ------------------
 4062|      0|            if (auto t = read_localized("%OM", L"%OM")) {
  ------------------
  |  Branch (4062:22): [True: 0, False: 0]
  ------------------
 4063|      0|                setter::set_min(*this, m_tm, m_st, t->tm_min);
 4064|      0|            }
 4065|      0|            return;
 4066|      0|        }
 4067|  12.7k|#endif
 4068|       |
 4069|  12.7k|        int min = read_classic_unsigned_integer(1, 2);
 4070|  12.7k|        setter::set_min(*this, m_tm, m_st, min);
 4071|  12.7k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE7set_minINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 3393|  12.7k|    {
 3394|  12.7k|        if (SCN_UNLIKELY(m < 0 || m > 59)) {
  ------------------
  |  | 1039|  22.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 2.83k, False: 9.87k]
  |  |  |  Branch (1039:45): [True: 2.81k, False: 9.88k]
  |  |  |  Branch (1039:45): [True: 18, False: 9.87k]
  |  |  ------------------
  ------------------
 3395|  2.83k|            return h.set_error({scan_error::invalid_scanned_value,
 3396|  2.83k|                                "Invalid value for minutes"});
 3397|  2.83k|        }
 3398|  9.87k|        t.min = m;
 3399|  9.87k|        st.set_min(h);
 3400|  9.87k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE9on_secondENS1_14numeric_systemE:
 4073|  2.86k|    {
 4074|  2.86k|#if !SCN_DISABLE_LOCALE
 4075|  2.86k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (4075:13): [True: 0, False: 2.86k]
  |  Branch (4075:31): [True: 0, False: 0]
  ------------------
 4076|      0|            if (auto t = read_localized("%OS", L"%OS")) {
  ------------------
  |  Branch (4076:22): [True: 0, False: 0]
  ------------------
 4077|      0|                setter::set_sec(*this, m_tm, m_st, t->tm_sec);
 4078|      0|            }
 4079|      0|            return;
 4080|      0|        }
 4081|  2.86k|#endif
 4082|       |
 4083|  2.86k|        int sec = read_classic_unsigned_integer(1, 2);
 4084|  2.86k|        setter::set_sec(*this, m_tm, m_st, sec);
 4085|  2.86k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE7set_secINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEvRT_RS3_RNS1_12setter_stateEi:
 3380|  2.86k|    {
 3381|  2.86k|        if (SCN_UNLIKELY(s < 0 || s > 60)) {
  ------------------
  |  | 1039|  4.07k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 1.65k, False: 1.20k]
  |  |  |  Branch (1039:45): [True: 1.65k, False: 1.21k]
  |  |  |  Branch (1039:45): [True: 2, False: 1.20k]
  |  |  ------------------
  ------------------
 3382|  1.65k|            return h.set_error({scan_error::invalid_scanned_value,
 3383|  1.65k|                                "Invalid value for seconds"});
 3384|  1.65k|        }
 3385|  1.20k|        t.sec = s;
 3386|  1.20k|        st.set_sec(h);
 3387|  1.20k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE10on_us_dateEv:
 4315|  1.83k|    {
 4316|       |        // %m/%d/%y
 4317|  1.83k|        constexpr CharT slash = '/';
 4318|  1.83k|        on_dec_month();
 4319|  1.83k|        on_text(&slash, &slash + 1);
 4320|  1.83k|        on_day_of_month();
 4321|  1.83k|        on_text(&slash, &slash + 1);
 4322|  1.83k|        on_short_year();
 4323|  1.83k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE11on_iso_dateEv:
 4325|  2.02k|    {
 4326|       |        // %Y-%m-%d
 4327|  2.02k|        constexpr CharT dash = '-';
 4328|  2.02k|        on_full_year();
 4329|  2.02k|        on_text(&dash, &dash + 1);
 4330|  2.02k|        on_dec_month();
 4331|  2.02k|        on_text(&dash, &dash + 1);
 4332|  2.02k|        on_day_of_month();
 4333|  2.02k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE15on_24_hour_timeEv:
 4357|  9.83k|    {
 4358|       |        // %H:%M
 4359|  9.83k|        constexpr CharT colon = ':';
 4360|  9.83k|        on_24_hour();
 4361|  9.83k|        on_text(&colon, &colon + 1);
 4362|  9.83k|        on_minute();
 4363|  9.83k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE11on_iso_timeEv:
 4365|  2.86k|    {
 4366|       |        // %H:%M:%S
 4367|  2.86k|        constexpr CharT colon = ':';
 4368|  2.86k|        on_24_hour();
 4369|  2.86k|        on_text(&colon, &colon + 1);
 4370|  2.86k|        on_minute();
 4371|  2.86k|        on_text(&colon, &colon + 1);
 4372|  2.86k|        on_second();
 4373|  2.86k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE6verifyEv:
 4404|  14.3k|    {
 4405|  14.3k|        m_st.verify(*this);
 4406|  14.3k|        if (m_st.am_pm_set && m_st.hour12_set) {
  ------------------
  |  Branch (4406:13): [True: 0, False: 14.3k]
  |  Branch (4406:31): [True: 0, False: 0]
  ------------------
 4407|      0|            setter::handle_am_pm(m_tm, m_st);
 4408|      0|        }
 4409|  14.3k|        if (!m_st.full_year_set && (m_st.short_year_set || m_st.century_set)) {
  ------------------
  |  Branch (4409:13): [True: 14.0k, False: 340]
  |  Branch (4409:37): [True: 152, False: 13.8k]
  |  Branch (4409:60): [True: 0, False: 13.8k]
  ------------------
 4410|    152|            setter::handle_short_year_and_century(m_tm, m_st);
 4411|    152|        }
 4412|  14.3k|    }
_ZNK3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE9get_errorEv:
 4415|  52.4k|    {
 4416|  52.4k|        return m_error;
 4417|  52.4k|    }
_ZNK3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcE12get_iteratorEv:
 4432|  14.3k|    {
 4433|  14.3k|        return m_begin;
 4434|  14.3k|    }
_ZN3scn2v46detail22chrono_scan_inner_implIw2tmNS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEENS0_13scan_expectedINT1_8iteratorEEENSt3__117basic_string_viewIT_NSB_11char_traitsISD_EEEERT0_RS8_:
 4625|  31.1k|{
 4626|  31.1k|    {
 4627|  31.1k|        SCN_TRY(it,
  ------------------
  |  | 3958|  31.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  31.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  31.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  31.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 362, False: 30.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    362|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    362|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    362|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    362|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    362|    }                                                  \
  |  |  |  | 3957|  31.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  30.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4628|  30.7k|                detail::internal_skip_classic_whitespace(ctx.range(), false));
 4629|  30.7k|        ctx.advance_to(SCN_MOVE(it));
  ------------------
  |  | 1108|  30.7k|    static_cast<    \
  |  | 1109|  30.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4630|  30.7k|    }
 4631|       |
 4632|      0|    auto r = detail::tm_reader<T, typename Context::range_type, CharT>(
 4633|  30.7k|        ctx.range(), t, ctx.locale());
 4634|  30.7k|    detail::parse_chrono_format_specs(fmt.data(), fmt.data() + fmt.size(), r);
 4635|  30.7k|    if (auto e = r.get_error(); SCN_UNLIKELY(!e)) {
  ------------------
  |  | 1039|  30.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 23.6k, False: 7.13k]
  |  |  ------------------
  ------------------
 4636|  23.6k|        return unexpected(e.error());
 4637|  23.6k|    }
 4638|  7.13k|    return r.get_iterator();
 4639|  30.7k|}
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwEC2ESC_RS3_NS1_10locale_refE:
 3769|  30.7k|        : m_range(SCN_MOVE(r)),
  ------------------
  |  | 1108|  30.7k|    static_cast<    \
  |  | 1109|  30.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3770|  30.7k|          m_begin(ranges::begin(m_range)),
 3771|  30.7k|          m_tm(t),
 3772|  30.7k|          m_loc(loc)
 3773|  30.7k|    {
 3774|  30.7k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE8on_errorEPKc:
 4420|  23.0k|    {
 4421|  23.0k|        set_error({scan_error::invalid_format_string, msg});
 4422|  23.0k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE9set_errorENS0_10scan_errorE:
 4425|   101k|    {
 4426|   101k|        if (m_error.has_value()) {
  ------------------
  |  Branch (4426:13): [True: 23.6k, False: 78.1k]
  ------------------
 4427|  23.6k|            m_error = unexpected(e);
 4428|  23.6k|        }
 4429|   101k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE7on_textEPKwSF_:
 3777|  30.3k|    {
 3778|  37.5k|        while (beg != end) {
  ------------------
  |  Branch (3778:16): [True: 30.3k, False: 7.18k]
  ------------------
 3779|  30.3k|            if (m_begin == ranges::end(m_range)) {
  ------------------
  |  Branch (3779:17): [True: 118, False: 30.2k]
  ------------------
 3780|    118|                return set_error({scan_error::end_of_input, "EOF"});
 3781|    118|            }
 3782|  30.2k|            if (*beg != *m_begin) {
  ------------------
  |  Branch (3782:17): [True: 23.0k, False: 7.18k]
  ------------------
 3783|  23.0k|                return on_error("Invalid literal character");
 3784|  23.0k|            }
 3785|  7.18k|            ++beg;
 3786|  7.18k|            ++m_begin;
 3787|  7.18k|        }
 3788|  30.3k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE12on_full_yearENS1_14numeric_systemE:
 3807|  6.78k|    {
 3808|  6.78k|#if !SCN_DISABLE_LOCALE
 3809|  6.78k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3809:13): [True: 0, False: 6.78k]
  |  Branch (3809:31): [True: 0, False: 0]
  ------------------
 3810|      0|            if (auto t = read_localized("%EY", L"%EY")) {
  ------------------
  |  Branch (3810:22): [True: 0, False: 0]
  ------------------
 3811|      0|                setter::set_full_year(*this, m_tm, m_st, t->tm_year + 1900);
 3812|      0|            }
 3813|      0|            return;
 3814|      0|        }
 3815|  6.78k|#endif
 3816|       |
 3817|  6.78k|        int yr = read_classic_unsigned_integer(4, 4);
 3818|  6.78k|        setter::set_full_year(*this, m_tm, m_st, yr);
 3819|  6.78k|    }
_ZN3scn2v46detail15datetime_setterI2tmE13set_full_yearINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 3280|  6.78k|    {
 3281|  6.78k|        if (SCN_UNLIKELY(y < std::numeric_limits<int>::min() + 1900)) {
  ------------------
  |  | 1039|  6.78k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 6.78k]
  |  |  ------------------
  ------------------
 3282|      0|            return h.set_error({scan_error::invalid_scanned_value,
 3283|      0|                                "Invalid value for tm_year"});
 3284|      0|        }
 3285|  6.78k|        t.tm_year = y - 1900;
 3286|  6.78k|        st.set_full_year(h);
 3287|  6.78k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE29read_classic_unsigned_integerEii:
 4443|  53.7k|    {
 4444|  53.7k|        int digits_read = 0;
 4445|  53.7k|        int accumulator = 0;
 4446|  69.1k|        while (m_begin != m_range.end()) {
  ------------------
  |  Branch (4446:16): [True: 68.8k, False: 260]
  ------------------
 4447|  68.8k|            const auto ch = *m_begin;
 4448|  68.8k|            if (ch < CharT{'0'} || ch > CharT{'9'}) {
  ------------------
  |  Branch (4448:17): [True: 29.9k, False: 38.8k]
  |  Branch (4448:36): [True: 21.0k, False: 17.8k]
  ------------------
 4449|  51.0k|                break;
 4450|  51.0k|            }
 4451|  17.8k|            ++m_begin;
 4452|  17.8k|            ++digits_read;
 4453|  17.8k|            accumulator = accumulator * 10 + static_cast<int>(ch - CharT{'0'});
 4454|  17.8k|            if (digits_read >= max_digits) {
  ------------------
  |  Branch (4454:17): [True: 2.44k, False: 15.3k]
  ------------------
 4455|  2.44k|                break;
 4456|  2.44k|            }
 4457|  17.8k|        }
 4458|  53.7k|        if (digits_read < min_digits) {
  ------------------
  |  Branch (4458:13): [True: 39.1k, False: 14.5k]
  ------------------
 4459|  39.1k|            set_error(scan_error{scan_error::invalid_scanned_value,
 4460|  39.1k|                                 "Too few integer digits"});
 4461|  39.1k|            return -1;
 4462|  39.1k|        }
 4463|  14.5k|        return accumulator;
 4464|  53.7k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE13on_short_yearENS1_14numeric_systemE:
 3821|  3.39k|    {
 3822|  3.39k|#if !SCN_DISABLE_LOCALE
 3823|  3.39k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3823:13): [True: 0, False: 3.39k]
  |  Branch (3823:31): [True: 0, False: 0]
  ------------------
 3824|      0|            if (auto t = read_localized("%Ey", L"%Ey")) {
  ------------------
  |  Branch (3824:22): [True: 0, False: 0]
  ------------------
 3825|      0|                setter::set_short_year(*this, m_tm, m_st,
 3826|      0|                                       (t->tm_year + 1900) % 100);
 3827|      0|            }
 3828|      0|            return;
 3829|      0|        }
 3830|  3.39k|#endif
 3831|       |
 3832|  3.39k|        int yr = read_classic_unsigned_integer(2, 2);
 3833|  3.39k|        setter::set_short_year(*this, m_tm, m_st, yr);
 3834|  3.39k|    }
_ZN3scn2v46detail15datetime_setterI2tmE14set_short_yearINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 3297|  3.39k|    {
 3298|  3.39k|        if (SCN_UNLIKELY(y < 0 || y > 99)) {
  ------------------
  |  | 1039|  3.41k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 3.37k, False: 18]
  |  |  |  Branch (1039:45): [True: 3.37k, False: 18]
  |  |  |  Branch (1039:45): [True: 0, False: 18]
  |  |  ------------------
  ------------------
 3299|  3.37k|            return h.set_error({scan_error::invalid_scanned_value,
 3300|  3.37k|                                "Invalid value for tm_year"});
 3301|  3.37k|        }
 3302|     18|        st.short_year_value = y;
 3303|     18|        st.set_short_year(h);
 3304|     18|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE13on_month_nameEv:
 3864|  4.03k|    {
 3865|  4.03k|#if !SCN_DISABLE_FAST_FLOAT
 3866|  4.03k|        if (m_st.localized) {
  ------------------
  |  Branch (3866:13): [True: 0, False: 4.03k]
  ------------------
 3867|      0|            if (auto t = read_localized("%b", L"%b")) {
  ------------------
  |  Branch (3867:22): [True: 0, False: 0]
  ------------------
 3868|      0|                setter::set_mon(*this, m_tm, m_st, t->tm_mon + 1);
 3869|      0|            }
 3870|      0|            return;
 3871|      0|        }
 3872|  4.03k|#endif
 3873|       |
 3874|  4.03k|        std::array<std::pair<std::string_view, int>, 12> long_mapping = {{
 3875|  4.03k|            {"January", 1},
 3876|  4.03k|            {"February", 2},
 3877|  4.03k|            {"March", 3},
 3878|  4.03k|            {"April", 4},
 3879|  4.03k|            {"May", 5},
 3880|  4.03k|            {"June", 6},
 3881|  4.03k|            {"July", 7},
 3882|  4.03k|            {"August", 8},
 3883|  4.03k|            {"September", 9},
 3884|  4.03k|            {"October", 10},
 3885|  4.03k|            {"November", 11},
 3886|  4.03k|            {"December", 12},
 3887|  4.03k|        }};
 3888|  4.03k|        if (auto m = try_one_of_str_nocase(long_mapping)) {
  ------------------
  |  Branch (3888:18): [True: 22, False: 4.01k]
  ------------------
 3889|     22|            return setter::set_mon(*this, m_tm, m_st, *m);
 3890|     22|        }
 3891|  4.01k|        std::array<std::pair<std::string_view, int>, 11> short_mapping = {{
 3892|  4.01k|            {"Jan", 1},
 3893|  4.01k|            {"Feb", 2},
 3894|  4.01k|            {"Mar", 3},
 3895|  4.01k|            {"Apr", 4},
 3896|  4.01k|            {"Jun", 6},
 3897|  4.01k|            {"Jul", 7},
 3898|  4.01k|            {"Aug", 8},
 3899|  4.01k|            {"Sep", 9},
 3900|  4.01k|            {"Oct", 10},
 3901|  4.01k|            {"Nov", 11},
 3902|  4.01k|            {"Dec", 12},
 3903|  4.01k|        }};
 3904|  4.01k|        if (auto m = try_one_of_str_nocase(short_mapping)) {
  ------------------
  |  Branch (3904:18): [True: 648, False: 3.36k]
  ------------------
 3905|    648|            return setter::set_mon(*this, m_tm, m_st, *m);
 3906|    648|        }
 3907|  3.36k|        set_error({scan_error::invalid_scanned_value, "Invalid month name"});
 3908|  3.36k|    }
_ZN3scn2v46detail15datetime_setterI2tmE7set_monINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 3270|  7.49k|    {
 3271|  7.49k|        if (SCN_UNLIKELY(m < 1 || m > 12)) {
  ------------------
  |  | 1039|  8.58k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 6.46k, False: 1.03k]
  |  |  |  Branch (1039:45): [True: 6.41k, False: 1.08k]
  |  |  |  Branch (1039:45): [True: 54, False: 1.03k]
  |  |  ------------------
  ------------------
 3272|  6.46k|            return h.set_error({scan_error::invalid_scanned_value,
 3273|  6.46k|                                "Invalid value for tm_mon"});
 3274|  6.46k|        }
 3275|  1.03k|        t.tm_mon = m - 1;
 3276|  1.03k|        st.set_mon(h);
 3277|  1.03k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE21try_one_of_str_nocaseIiLm12EEENSt3__18optionalIT_EERNSF_5arrayINSF_4pairINSF_17basic_string_viewIcNSF_11char_traitsIcEEEESH_EEXT0_EEE:
 4481|  4.03k|    {
 4482|  4.03k|        auto start_it = m_begin;
 4483|  4.03k|        std::size_t options_available = N;
 4484|  4.03k|        std::size_t chars_consumed = 0;
 4485|  10.1k|        while (options_available >= 1 &&
  ------------------
  |  Branch (4485:16): [True: 6.14k, False: 3.97k]
  ------------------
 4486|  10.1k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (4486:16): [True: 6.11k, False: 22]
  ------------------
 4487|  6.11k|            std::size_t i = 0;
 4488|  6.11k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (4488:17): [True: 42, False: 6.07k]
  ------------------
 4489|     42|                options_available = 0;
 4490|     42|                break;
 4491|     42|            }
 4492|  6.07k|            const auto ch = *m_begin;
 4493|  6.07k|            ++m_begin;
 4494|  57.9k|            while (i < options_available) {
  ------------------
  |  Branch (4494:20): [True: 51.8k, False: 6.07k]
  ------------------
 4495|  51.8k|                const auto cmp = static_cast<unsigned>(
 4496|  51.8k|                    ch ^ options[i].first[chars_consumed]);
 4497|  51.8k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (4497:21): [True: 0, False: 51.8k]
  ------------------
 4498|  51.8k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (4498:22): [True: 49.1k, False: 2.73k]
  |  Branch (4498:34): [True: 48.3k, False: 782]
  ------------------
 4499|  48.3k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 4500|  48.3k|                                options.end());
 4501|  48.3k|                    --options_available;
 4502|  48.3k|                    continue;
 4503|  48.3k|                }
 4504|  3.51k|                ++i;
 4505|  3.51k|            }
 4506|  6.07k|            ++chars_consumed;
 4507|  6.07k|        }
 4508|  4.03k|        if (options_available != 1) {
  ------------------
  |  Branch (4508:13): [True: 4.01k, False: 22]
  ------------------
 4509|  4.01k|            m_begin = start_it;
 4510|  4.01k|            return std::nullopt;
 4511|  4.01k|        }
 4512|     22|        return options.front().second;
 4513|  4.03k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE21try_one_of_str_nocaseIiLm11EEENSt3__18optionalIT_EERNSF_5arrayINSF_4pairINSF_17basic_string_viewIcNSF_11char_traitsIcEEEESH_EEXT0_EEE:
 4481|  4.01k|    {
 4482|  4.01k|        auto start_it = m_begin;
 4483|  4.01k|        std::size_t options_available = N;
 4484|  4.01k|        std::size_t chars_consumed = 0;
 4485|  9.39k|        while (options_available >= 1 &&
  ------------------
  |  Branch (4485:16): [True: 6.05k, False: 3.33k]
  ------------------
 4486|  9.39k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (4486:16): [True: 5.40k, False: 648]
  ------------------
 4487|  5.40k|            std::size_t i = 0;
 4488|  5.40k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (4488:17): [True: 30, False: 5.37k]
  ------------------
 4489|     30|                options_available = 0;
 4490|     30|                break;
 4491|     30|            }
 4492|  5.37k|            const auto ch = *m_begin;
 4493|  5.37k|            ++m_begin;
 4494|  50.9k|            while (i < options_available) {
  ------------------
  |  Branch (4494:20): [True: 45.5k, False: 5.37k]
  ------------------
 4495|  45.5k|                const auto cmp = static_cast<unsigned>(
 4496|  45.5k|                    ch ^ options[i].first[chars_consumed]);
 4497|  45.5k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (4497:21): [True: 0, False: 45.5k]
  ------------------
 4498|  45.5k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (4498:22): [True: 44.2k, False: 1.34k]
  |  Branch (4498:34): [True: 43.4k, False: 730]
  ------------------
 4499|  43.4k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 4500|  43.4k|                                options.end());
 4501|  43.4k|                    --options_available;
 4502|  43.4k|                    continue;
 4503|  43.4k|                }
 4504|  2.07k|                ++i;
 4505|  2.07k|            }
 4506|  5.37k|            ++chars_consumed;
 4507|  5.37k|        }
 4508|  4.01k|        if (options_available != 1) {
  ------------------
  |  Branch (4508:13): [True: 3.36k, False: 648]
  ------------------
 4509|  3.36k|            m_begin = start_it;
 4510|  3.36k|            return std::nullopt;
 4511|  3.36k|        }
 4512|    648|        return options.front().second;
 4513|  4.01k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE12on_dec_monthENS1_14numeric_systemE:
 3910|  6.82k|    {
 3911|  6.82k|#if !SCN_DISABLE_LOCALE
 3912|  6.82k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3912:13): [True: 0, False: 6.82k]
  |  Branch (3912:31): [True: 0, False: 0]
  ------------------
 3913|      0|            if (auto t = read_localized("%Om", L"%Om")) {
  ------------------
  |  Branch (3913:22): [True: 0, False: 0]
  ------------------
 3914|      0|                setter::set_mon(*this, m_tm, m_st, t->tm_mon + 1);
 3915|      0|            }
 3916|      0|            return;
 3917|      0|        }
 3918|  6.82k|#endif
 3919|       |
 3920|  6.82k|        int mon = read_classic_unsigned_integer(1, 2);
 3921|  6.82k|        setter::set_mon(*this, m_tm, m_st, mon);
 3922|  6.82k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE15on_day_of_monthENS1_14numeric_systemE:
 3942|  6.80k|    {
 3943|  6.80k|#if !SCN_DISABLE_LOCALE
 3944|  6.80k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3944:13): [True: 0, False: 6.80k]
  |  Branch (3944:31): [True: 0, False: 0]
  ------------------
 3945|      0|            if (auto t = read_localized("%Od", L"%Od")) {
  ------------------
  |  Branch (3945:22): [True: 0, False: 0]
  ------------------
 3946|      0|                setter::set_mday(*this, m_tm, m_st, t->tm_mday);
 3947|      0|            }
 3948|      0|            return;
 3949|      0|        }
 3950|  6.80k|#endif
 3951|       |
 3952|  6.80k|        int mday = read_classic_unsigned_integer(1, 2);
 3953|  6.80k|        setter::set_mday(*this, m_tm, m_st, mday);
 3954|  6.80k|    }
_ZN3scn2v46detail15datetime_setterI2tmE8set_mdayINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 3260|  6.80k|    {
 3261|  6.80k|        if (SCN_UNLIKELY(d < 1 || d > 31)) {
  ------------------
  |  | 1039|  6.89k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 6.72k, False: 80]
  |  |  |  Branch (1039:45): [True: 6.71k, False: 90]
  |  |  |  Branch (1039:45): [True: 10, False: 80]
  |  |  ------------------
  ------------------
 3262|  6.72k|            return h.set_error({scan_error::invalid_scanned_value,
 3263|  6.72k|                                "Invalid value for tm_mday"});
 3264|  6.72k|        }
 3265|     80|        t.tm_mday = d;
 3266|     80|        st.set_mday(h);
 3267|     80|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE15on_weekday_nameEv:
 3957|  3.38k|    {
 3958|  3.38k|#if !SCN_DISABLE_LOCALE
 3959|  3.38k|        if (m_st.localized) {
  ------------------
  |  Branch (3959:13): [True: 0, False: 3.38k]
  ------------------
 3960|      0|            if (auto t = read_localized("%a", L"%a")) {
  ------------------
  |  Branch (3960:22): [True: 0, False: 0]
  ------------------
 3961|      0|                setter::set_wday(*this, m_tm, m_st, t->tm_wday);
 3962|      0|            }
 3963|      0|            return;
 3964|      0|        }
 3965|  3.38k|#endif
 3966|       |
 3967|  3.38k|        std::array<std::pair<std::string_view, int>, 7> long_mapping = {{
 3968|  3.38k|            {"Sunday", 0},
 3969|  3.38k|            {"Monday", 1},
 3970|  3.38k|            {"Tuesday", 2},
 3971|  3.38k|            {"Wednesday", 3},
 3972|  3.38k|            {"Thursday", 4},
 3973|  3.38k|            {"Friday", 5},
 3974|  3.38k|            {"Saturday", 6},
 3975|  3.38k|        }};
 3976|  3.38k|        if (auto d = try_one_of_str_nocase(long_mapping)) {
  ------------------
  |  Branch (3976:18): [True: 0, False: 3.38k]
  ------------------
 3977|      0|            return setter::set_wday(*this, m_tm, m_st, *d);
 3978|      0|        }
 3979|  3.38k|        std::array<std::pair<std::string_view, int>, 7> short_mapping = {{
 3980|  3.38k|            {"Sun", 0},
 3981|  3.38k|            {"Mon", 1},
 3982|  3.38k|            {"Tue", 2},
 3983|  3.38k|            {"Wed", 3},
 3984|  3.38k|            {"Thu", 4},
 3985|  3.38k|            {"Fri", 5},
 3986|  3.38k|            {"Sat", 6},
 3987|  3.38k|        }};
 3988|  3.38k|        if (auto d = try_one_of_str_nocase(short_mapping)) {
  ------------------
  |  Branch (3988:18): [True: 0, False: 3.38k]
  ------------------
 3989|      0|            return setter::set_wday(*this, m_tm, m_st, *d);
 3990|      0|        }
 3991|  3.38k|        return set_error(
 3992|  3.38k|            {scan_error::invalid_scanned_value, "Invalid weekday name"});
 3993|  3.38k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE21try_one_of_str_nocaseIiLm7EEENSt3__18optionalIT_EERNSF_5arrayINSF_4pairINSF_17basic_string_viewIcNSF_11char_traitsIcEEEESH_EEXT0_EEE:
 4481|  6.77k|    {
 4482|  6.77k|        auto start_it = m_begin;
 4483|  6.77k|        std::size_t options_available = N;
 4484|  6.77k|        std::size_t chars_consumed = 0;
 4485|  13.7k|        while (options_available >= 1 &&
  ------------------
  |  Branch (4485:16): [True: 6.96k, False: 6.75k]
  ------------------
 4486|  13.7k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (4486:16): [True: 6.96k, False: 0]
  ------------------
 4487|  6.96k|            std::size_t i = 0;
 4488|  6.96k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (4488:17): [True: 20, False: 6.94k]
  ------------------
 4489|     20|                options_available = 0;
 4490|     20|                break;
 4491|     20|            }
 4492|  6.94k|            const auto ch = *m_begin;
 4493|  6.94k|            ++m_begin;
 4494|  54.5k|            while (i < options_available) {
  ------------------
  |  Branch (4494:20): [True: 47.5k, False: 6.94k]
  ------------------
 4495|  47.5k|                const auto cmp = static_cast<unsigned>(
 4496|  47.5k|                    ch ^ options[i].first[chars_consumed]);
 4497|  47.5k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (4497:21): [True: 0, False: 47.5k]
  ------------------
 4498|  47.5k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (4498:22): [True: 47.3k, False: 196]
  |  Branch (4498:34): [True: 47.3k, False: 16]
  ------------------
 4499|  47.3k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 4500|  47.3k|                                options.end());
 4501|  47.3k|                    --options_available;
 4502|  47.3k|                    continue;
 4503|  47.3k|                }
 4504|    212|                ++i;
 4505|    212|            }
 4506|  6.94k|            ++chars_consumed;
 4507|  6.94k|        }
 4508|  6.77k|        if (options_available != 1) {
  ------------------
  |  Branch (4508:13): [True: 6.77k, False: 0]
  ------------------
 4509|  6.77k|            m_begin = start_it;
 4510|  6.77k|            return std::nullopt;
 4511|  6.77k|        }
 4512|      0|        return options.front().second;
 4513|  6.77k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE10on_24_hourENS1_14numeric_systemE:
 4031|  13.1k|    {
 4032|  13.1k|#if !SCN_DISABLE_LOCALE
 4033|  13.1k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (4033:13): [True: 0, False: 13.1k]
  |  Branch (4033:31): [True: 0, False: 0]
  ------------------
 4034|      0|            if (auto t = read_localized("%OH", L"%OH")) {
  ------------------
  |  Branch (4034:22): [True: 0, False: 0]
  ------------------
 4035|      0|                setter::set_hour24(*this, m_tm, m_st, t->tm_hour);
 4036|      0|            }
 4037|      0|            return;
 4038|      0|        }
 4039|  13.1k|#endif
 4040|       |
 4041|  13.1k|        int hr = read_classic_unsigned_integer(1, 2);
 4042|  13.1k|        setter::set_hour24(*this, m_tm, m_st, hr);
 4043|  13.1k|    }
_ZN3scn2v46detail15datetime_setterI2tmE10set_hour24INS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 3240|  13.1k|    {
 3241|  13.1k|        if (SCN_UNLIKELY(h < 0 || h > 23)) {
  ------------------
  |  | 1039|  20.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 6.34k, False: 6.83k]
  |  |  |  Branch (1039:45): [True: 6.26k, False: 6.91k]
  |  |  |  Branch (1039:45): [True: 82, False: 6.83k]
  |  |  ------------------
  ------------------
 3242|  6.34k|            return hdl.set_error({scan_error::invalid_scanned_value,
 3243|  6.34k|                                  "Invalid value for tm_hour"});
 3244|  6.34k|        }
 3245|  6.83k|        t.tm_hour = h;
 3246|  6.83k|        st.set_hour24(hdl);
 3247|  6.83k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE9on_minuteENS1_14numeric_systemE:
 4059|  13.1k|    {
 4060|  13.1k|#if !SCN_DISABLE_LOCALE
 4061|  13.1k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (4061:13): [True: 0, False: 13.1k]
  |  Branch (4061:31): [True: 0, False: 0]
  ------------------
 4062|      0|            if (auto t = read_localized("%OM", L"%OM")) {
  ------------------
  |  Branch (4062:22): [True: 0, False: 0]
  ------------------
 4063|      0|                setter::set_min(*this, m_tm, m_st, t->tm_min);
 4064|      0|            }
 4065|      0|            return;
 4066|      0|        }
 4067|  13.1k|#endif
 4068|       |
 4069|  13.1k|        int min = read_classic_unsigned_integer(1, 2);
 4070|  13.1k|        setter::set_min(*this, m_tm, m_st, min);
 4071|  13.1k|    }
_ZN3scn2v46detail15datetime_setterI2tmE7set_minINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 3230|  13.1k|    {
 3231|  13.1k|        if (SCN_UNLIKELY(m < 0 || m > 59)) {
  ------------------
  |  | 1039|  19.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 6.37k, False: 6.79k]
  |  |  |  Branch (1039:45): [True: 6.36k, False: 6.80k]
  |  |  |  Branch (1039:45): [True: 12, False: 6.79k]
  |  |  ------------------
  ------------------
 3232|  6.37k|            return h.set_error({scan_error::invalid_scanned_value,
 3233|  6.37k|                                "Invalid value for tm_min"});
 3234|  6.37k|        }
 3235|  6.79k|        t.tm_min = m;
 3236|  6.79k|        st.set_min(h);
 3237|  6.79k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE9on_secondENS1_14numeric_systemE:
 4073|  3.58k|    {
 4074|  3.58k|#if !SCN_DISABLE_LOCALE
 4075|  3.58k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (4075:13): [True: 0, False: 3.58k]
  |  Branch (4075:31): [True: 0, False: 0]
  ------------------
 4076|      0|            if (auto t = read_localized("%OS", L"%OS")) {
  ------------------
  |  Branch (4076:22): [True: 0, False: 0]
  ------------------
 4077|      0|                setter::set_sec(*this, m_tm, m_st, t->tm_sec);
 4078|      0|            }
 4079|      0|            return;
 4080|      0|        }
 4081|  3.58k|#endif
 4082|       |
 4083|  3.58k|        int sec = read_classic_unsigned_integer(1, 2);
 4084|  3.58k|        setter::set_sec(*this, m_tm, m_st, sec);
 4085|  3.58k|    }
_ZN3scn2v46detail15datetime_setterI2tmE7set_secINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 3220|  3.58k|    {
 3221|  3.58k|        if (SCN_UNLIKELY(s < 0 || s > 60)) {
  ------------------
  |  | 1039|  3.81k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 3.35k, False: 226]
  |  |  |  Branch (1039:45): [True: 3.35k, False: 228]
  |  |  |  Branch (1039:45): [True: 2, False: 226]
  |  |  ------------------
  ------------------
 3222|  3.35k|            return h.set_error({scan_error::invalid_scanned_value,
 3223|  3.35k|                                "Invalid value for tm_sec"});
 3224|  3.35k|        }
 3225|    226|        t.tm_sec = s;
 3226|    226|        st.set_sec(h);
 3227|    226|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE10on_us_dateEv:
 4315|  3.39k|    {
 4316|       |        // %m/%d/%y
 4317|  3.39k|        constexpr CharT slash = '/';
 4318|  3.39k|        on_dec_month();
 4319|  3.39k|        on_text(&slash, &slash + 1);
 4320|  3.39k|        on_day_of_month();
 4321|  3.39k|        on_text(&slash, &slash + 1);
 4322|  3.39k|        on_short_year();
 4323|  3.39k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE11on_iso_dateEv:
 4325|  3.39k|    {
 4326|       |        // %Y-%m-%d
 4327|  3.39k|        constexpr CharT dash = '-';
 4328|  3.39k|        on_full_year();
 4329|  3.39k|        on_text(&dash, &dash + 1);
 4330|  3.39k|        on_dec_month();
 4331|  3.39k|        on_text(&dash, &dash + 1);
 4332|  3.39k|        on_day_of_month();
 4333|  3.39k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE15on_24_hour_timeEv:
 4357|  9.58k|    {
 4358|       |        // %H:%M
 4359|  9.58k|        constexpr CharT colon = ':';
 4360|  9.58k|        on_24_hour();
 4361|  9.58k|        on_text(&colon, &colon + 1);
 4362|  9.58k|        on_minute();
 4363|  9.58k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE11on_iso_timeEv:
 4365|  3.58k|    {
 4366|       |        // %H:%M:%S
 4367|  3.58k|        constexpr CharT colon = ':';
 4368|  3.58k|        on_24_hour();
 4369|  3.58k|        on_text(&colon, &colon + 1);
 4370|  3.58k|        on_minute();
 4371|  3.58k|        on_text(&colon, &colon + 1);
 4372|  3.58k|        on_second();
 4373|  3.58k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE6verifyEv:
 4404|  7.13k|    {
 4405|  7.13k|        m_st.verify(*this);
 4406|  7.13k|        if (m_st.am_pm_set && m_st.hour12_set) {
  ------------------
  |  Branch (4406:13): [True: 0, False: 7.13k]
  |  Branch (4406:31): [True: 0, False: 0]
  ------------------
 4407|      0|            setter::handle_am_pm(m_tm, m_st);
 4408|      0|        }
 4409|  7.13k|        if (!m_st.full_year_set && (m_st.short_year_set || m_st.century_set)) {
  ------------------
  |  Branch (4409:13): [True: 7.12k, False: 12]
  |  Branch (4409:37): [True: 10, False: 7.11k]
  |  Branch (4409:60): [True: 0, False: 7.11k]
  ------------------
 4410|     10|            setter::handle_short_year_and_century(m_tm, m_st);
 4411|     10|        }
 4412|  7.13k|    }
_ZNK3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE9get_errorEv:
 4415|  61.6k|    {
 4416|  61.6k|        return m_error;
 4417|  61.6k|    }
_ZNK3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE12get_iteratorEv:
 4432|  7.13k|    {
 4433|  7.13k|        return m_begin;
 4434|  7.13k|    }
_ZN3scn2v46detail22chrono_scan_inner_implIw2tmNS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEEEENS0_13scan_expectedINT1_8iteratorEEENSt3__117basic_string_viewIT_NSH_11char_traitsISJ_EEEERT0_RSE_:
 4625|  31.1k|{
 4626|  31.1k|    {
 4627|  31.1k|        SCN_TRY(it,
  ------------------
  |  | 3958|  31.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  31.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  31.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  31.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 362, False: 30.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    362|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    362|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    362|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    362|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    362|    }                                                  \
  |  |  |  | 3957|  31.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  30.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4628|  30.7k|                detail::internal_skip_classic_whitespace(ctx.range(), false));
 4629|  30.7k|        ctx.advance_to(SCN_MOVE(it));
  ------------------
  |  | 1108|  30.7k|    static_cast<    \
  |  | 1109|  30.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4630|  30.7k|    }
 4631|       |
 4632|      0|    auto r = detail::tm_reader<T, typename Context::range_type, CharT>(
 4633|  30.7k|        ctx.range(), t, ctx.locale());
 4634|  30.7k|    detail::parse_chrono_format_specs(fmt.data(), fmt.data() + fmt.size(), r);
 4635|  30.7k|    if (auto e = r.get_error(); SCN_UNLIKELY(!e)) {
  ------------------
  |  | 1039|  30.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 23.6k, False: 7.13k]
  |  |  ------------------
  ------------------
 4636|  23.6k|        return unexpected(e.error());
 4637|  23.6k|    }
 4638|  7.13k|    return r.get_iterator();
 4639|  30.7k|}
_ZN3scn2v46detail32internal_skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEESB_b:
  249|  93.3k|{
  250|  93.3k|    return impl::skip_classic_whitespace(r, allow_exhaustion)
  251|  93.3k|        .transform_error(impl::make_eof_scan_error);
  252|  93.3k|}
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEC2ESA_RS3_NS1_10locale_refE:
 3769|  30.7k|        : m_range(SCN_MOVE(r)),
  ------------------
  |  | 1108|  30.7k|    static_cast<    \
  |  | 1109|  30.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3770|  30.7k|          m_begin(ranges::begin(m_range)),
 3771|  30.7k|          m_tm(t),
 3772|  30.7k|          m_loc(loc)
 3773|  30.7k|    {
 3774|  30.7k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE8on_errorEPKc:
 4420|  23.0k|    {
 4421|  23.0k|        set_error({scan_error::invalid_format_string, msg});
 4422|  23.0k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE9set_errorENS0_10scan_errorE:
 4425|   101k|    {
 4426|   101k|        if (m_error.has_value()) {
  ------------------
  |  Branch (4426:13): [True: 23.6k, False: 78.1k]
  ------------------
 4427|  23.6k|            m_error = unexpected(e);
 4428|  23.6k|        }
 4429|   101k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE7on_textES9_S9_:
 3777|  30.3k|    {
 3778|  37.5k|        while (beg != end) {
  ------------------
  |  Branch (3778:16): [True: 30.3k, False: 7.18k]
  ------------------
 3779|  30.3k|            if (m_begin == ranges::end(m_range)) {
  ------------------
  |  Branch (3779:17): [True: 118, False: 30.2k]
  ------------------
 3780|    118|                return set_error({scan_error::end_of_input, "EOF"});
 3781|    118|            }
 3782|  30.2k|            if (*beg != *m_begin) {
  ------------------
  |  Branch (3782:17): [True: 23.0k, False: 7.18k]
  ------------------
 3783|  23.0k|                return on_error("Invalid literal character");
 3784|  23.0k|            }
 3785|  7.18k|            ++beg;
 3786|  7.18k|            ++m_begin;
 3787|  7.18k|        }
 3788|  30.3k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE12on_full_yearENS1_14numeric_systemE:
 3807|  6.78k|    {
 3808|  6.78k|#if !SCN_DISABLE_LOCALE
 3809|  6.78k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3809:13): [True: 0, False: 6.78k]
  |  Branch (3809:31): [True: 0, False: 0]
  ------------------
 3810|      0|            if (auto t = read_localized("%EY", L"%EY")) {
  ------------------
  |  Branch (3810:22): [True: 0, False: 0]
  ------------------
 3811|      0|                setter::set_full_year(*this, m_tm, m_st, t->tm_year + 1900);
 3812|      0|            }
 3813|      0|            return;
 3814|      0|        }
 3815|  6.78k|#endif
 3816|       |
 3817|  6.78k|        int yr = read_classic_unsigned_integer(4, 4);
 3818|  6.78k|        setter::set_full_year(*this, m_tm, m_st, yr);
 3819|  6.78k|    }
_ZN3scn2v46detail15datetime_setterI2tmE13set_full_yearINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 3280|  6.78k|    {
 3281|  6.78k|        if (SCN_UNLIKELY(y < std::numeric_limits<int>::min() + 1900)) {
  ------------------
  |  | 1039|  6.78k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 6.78k]
  |  |  ------------------
  ------------------
 3282|      0|            return h.set_error({scan_error::invalid_scanned_value,
 3283|      0|                                "Invalid value for tm_year"});
 3284|      0|        }
 3285|  6.78k|        t.tm_year = y - 1900;
 3286|  6.78k|        st.set_full_year(h);
 3287|  6.78k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE29read_classic_unsigned_integerEii:
 4443|  53.7k|    {
 4444|  53.7k|        int digits_read = 0;
 4445|  53.7k|        int accumulator = 0;
 4446|  69.1k|        while (m_begin != m_range.end()) {
  ------------------
  |  Branch (4446:16): [True: 68.8k, False: 260]
  ------------------
 4447|  68.8k|            const auto ch = *m_begin;
 4448|  68.8k|            if (ch < CharT{'0'} || ch > CharT{'9'}) {
  ------------------
  |  Branch (4448:17): [True: 29.9k, False: 38.8k]
  |  Branch (4448:36): [True: 21.0k, False: 17.8k]
  ------------------
 4449|  51.0k|                break;
 4450|  51.0k|            }
 4451|  17.8k|            ++m_begin;
 4452|  17.8k|            ++digits_read;
 4453|  17.8k|            accumulator = accumulator * 10 + static_cast<int>(ch - CharT{'0'});
 4454|  17.8k|            if (digits_read >= max_digits) {
  ------------------
  |  Branch (4454:17): [True: 2.44k, False: 15.3k]
  ------------------
 4455|  2.44k|                break;
 4456|  2.44k|            }
 4457|  17.8k|        }
 4458|  53.7k|        if (digits_read < min_digits) {
  ------------------
  |  Branch (4458:13): [True: 39.1k, False: 14.5k]
  ------------------
 4459|  39.1k|            set_error(scan_error{scan_error::invalid_scanned_value,
 4460|  39.1k|                                 "Too few integer digits"});
 4461|  39.1k|            return -1;
 4462|  39.1k|        }
 4463|  14.5k|        return accumulator;
 4464|  53.7k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE13on_short_yearENS1_14numeric_systemE:
 3821|  3.39k|    {
 3822|  3.39k|#if !SCN_DISABLE_LOCALE
 3823|  3.39k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3823:13): [True: 0, False: 3.39k]
  |  Branch (3823:31): [True: 0, False: 0]
  ------------------
 3824|      0|            if (auto t = read_localized("%Ey", L"%Ey")) {
  ------------------
  |  Branch (3824:22): [True: 0, False: 0]
  ------------------
 3825|      0|                setter::set_short_year(*this, m_tm, m_st,
 3826|      0|                                       (t->tm_year + 1900) % 100);
 3827|      0|            }
 3828|      0|            return;
 3829|      0|        }
 3830|  3.39k|#endif
 3831|       |
 3832|  3.39k|        int yr = read_classic_unsigned_integer(2, 2);
 3833|  3.39k|        setter::set_short_year(*this, m_tm, m_st, yr);
 3834|  3.39k|    }
_ZN3scn2v46detail15datetime_setterI2tmE14set_short_yearINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 3297|  3.39k|    {
 3298|  3.39k|        if (SCN_UNLIKELY(y < 0 || y > 99)) {
  ------------------
  |  | 1039|  3.41k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 3.37k, False: 18]
  |  |  |  Branch (1039:45): [True: 3.37k, False: 18]
  |  |  |  Branch (1039:45): [True: 0, False: 18]
  |  |  ------------------
  ------------------
 3299|  3.37k|            return h.set_error({scan_error::invalid_scanned_value,
 3300|  3.37k|                                "Invalid value for tm_year"});
 3301|  3.37k|        }
 3302|     18|        st.short_year_value = y;
 3303|     18|        st.set_short_year(h);
 3304|     18|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE13on_month_nameEv:
 3864|  4.03k|    {
 3865|  4.03k|#if !SCN_DISABLE_FAST_FLOAT
 3866|  4.03k|        if (m_st.localized) {
  ------------------
  |  Branch (3866:13): [True: 0, False: 4.03k]
  ------------------
 3867|      0|            if (auto t = read_localized("%b", L"%b")) {
  ------------------
  |  Branch (3867:22): [True: 0, False: 0]
  ------------------
 3868|      0|                setter::set_mon(*this, m_tm, m_st, t->tm_mon + 1);
 3869|      0|            }
 3870|      0|            return;
 3871|      0|        }
 3872|  4.03k|#endif
 3873|       |
 3874|  4.03k|        std::array<std::pair<std::string_view, int>, 12> long_mapping = {{
 3875|  4.03k|            {"January", 1},
 3876|  4.03k|            {"February", 2},
 3877|  4.03k|            {"March", 3},
 3878|  4.03k|            {"April", 4},
 3879|  4.03k|            {"May", 5},
 3880|  4.03k|            {"June", 6},
 3881|  4.03k|            {"July", 7},
 3882|  4.03k|            {"August", 8},
 3883|  4.03k|            {"September", 9},
 3884|  4.03k|            {"October", 10},
 3885|  4.03k|            {"November", 11},
 3886|  4.03k|            {"December", 12},
 3887|  4.03k|        }};
 3888|  4.03k|        if (auto m = try_one_of_str_nocase(long_mapping)) {
  ------------------
  |  Branch (3888:18): [True: 22, False: 4.01k]
  ------------------
 3889|     22|            return setter::set_mon(*this, m_tm, m_st, *m);
 3890|     22|        }
 3891|  4.01k|        std::array<std::pair<std::string_view, int>, 11> short_mapping = {{
 3892|  4.01k|            {"Jan", 1},
 3893|  4.01k|            {"Feb", 2},
 3894|  4.01k|            {"Mar", 3},
 3895|  4.01k|            {"Apr", 4},
 3896|  4.01k|            {"Jun", 6},
 3897|  4.01k|            {"Jul", 7},
 3898|  4.01k|            {"Aug", 8},
 3899|  4.01k|            {"Sep", 9},
 3900|  4.01k|            {"Oct", 10},
 3901|  4.01k|            {"Nov", 11},
 3902|  4.01k|            {"Dec", 12},
 3903|  4.01k|        }};
 3904|  4.01k|        if (auto m = try_one_of_str_nocase(short_mapping)) {
  ------------------
  |  Branch (3904:18): [True: 648, False: 3.36k]
  ------------------
 3905|    648|            return setter::set_mon(*this, m_tm, m_st, *m);
 3906|    648|        }
 3907|  3.36k|        set_error({scan_error::invalid_scanned_value, "Invalid month name"});
 3908|  3.36k|    }
_ZN3scn2v46detail15datetime_setterI2tmE7set_monINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 3270|  7.49k|    {
 3271|  7.49k|        if (SCN_UNLIKELY(m < 1 || m > 12)) {
  ------------------
  |  | 1039|  8.58k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 6.46k, False: 1.03k]
  |  |  |  Branch (1039:45): [True: 6.41k, False: 1.08k]
  |  |  |  Branch (1039:45): [True: 54, False: 1.03k]
  |  |  ------------------
  ------------------
 3272|  6.46k|            return h.set_error({scan_error::invalid_scanned_value,
 3273|  6.46k|                                "Invalid value for tm_mon"});
 3274|  6.46k|        }
 3275|  1.03k|        t.tm_mon = m - 1;
 3276|  1.03k|        st.set_mon(h);
 3277|  1.03k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE21try_one_of_str_nocaseIiLm12EEENSt3__18optionalIT_EERNSD_5arrayINSD_4pairINSD_17basic_string_viewIcNSD_11char_traitsIcEEEESF_EEXT0_EEE:
 4481|  4.03k|    {
 4482|  4.03k|        auto start_it = m_begin;
 4483|  4.03k|        std::size_t options_available = N;
 4484|  4.03k|        std::size_t chars_consumed = 0;
 4485|  10.1k|        while (options_available >= 1 &&
  ------------------
  |  Branch (4485:16): [True: 6.14k, False: 3.97k]
  ------------------
 4486|  10.1k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (4486:16): [True: 6.11k, False: 22]
  ------------------
 4487|  6.11k|            std::size_t i = 0;
 4488|  6.11k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (4488:17): [True: 42, False: 6.07k]
  ------------------
 4489|     42|                options_available = 0;
 4490|     42|                break;
 4491|     42|            }
 4492|  6.07k|            const auto ch = *m_begin;
 4493|  6.07k|            ++m_begin;
 4494|  57.9k|            while (i < options_available) {
  ------------------
  |  Branch (4494:20): [True: 51.8k, False: 6.07k]
  ------------------
 4495|  51.8k|                const auto cmp = static_cast<unsigned>(
 4496|  51.8k|                    ch ^ options[i].first[chars_consumed]);
 4497|  51.8k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (4497:21): [True: 0, False: 51.8k]
  ------------------
 4498|  51.8k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (4498:22): [True: 49.1k, False: 2.73k]
  |  Branch (4498:34): [True: 48.3k, False: 782]
  ------------------
 4499|  48.3k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 4500|  48.3k|                                options.end());
 4501|  48.3k|                    --options_available;
 4502|  48.3k|                    continue;
 4503|  48.3k|                }
 4504|  3.51k|                ++i;
 4505|  3.51k|            }
 4506|  6.07k|            ++chars_consumed;
 4507|  6.07k|        }
 4508|  4.03k|        if (options_available != 1) {
  ------------------
  |  Branch (4508:13): [True: 4.01k, False: 22]
  ------------------
 4509|  4.01k|            m_begin = start_it;
 4510|  4.01k|            return std::nullopt;
 4511|  4.01k|        }
 4512|     22|        return options.front().second;
 4513|  4.03k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE21try_one_of_str_nocaseIiLm11EEENSt3__18optionalIT_EERNSD_5arrayINSD_4pairINSD_17basic_string_viewIcNSD_11char_traitsIcEEEESF_EEXT0_EEE:
 4481|  4.01k|    {
 4482|  4.01k|        auto start_it = m_begin;
 4483|  4.01k|        std::size_t options_available = N;
 4484|  4.01k|        std::size_t chars_consumed = 0;
 4485|  9.39k|        while (options_available >= 1 &&
  ------------------
  |  Branch (4485:16): [True: 6.05k, False: 3.33k]
  ------------------
 4486|  9.39k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (4486:16): [True: 5.40k, False: 648]
  ------------------
 4487|  5.40k|            std::size_t i = 0;
 4488|  5.40k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (4488:17): [True: 30, False: 5.37k]
  ------------------
 4489|     30|                options_available = 0;
 4490|     30|                break;
 4491|     30|            }
 4492|  5.37k|            const auto ch = *m_begin;
 4493|  5.37k|            ++m_begin;
 4494|  50.9k|            while (i < options_available) {
  ------------------
  |  Branch (4494:20): [True: 45.5k, False: 5.37k]
  ------------------
 4495|  45.5k|                const auto cmp = static_cast<unsigned>(
 4496|  45.5k|                    ch ^ options[i].first[chars_consumed]);
 4497|  45.5k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (4497:21): [True: 0, False: 45.5k]
  ------------------
 4498|  45.5k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (4498:22): [True: 44.2k, False: 1.34k]
  |  Branch (4498:34): [True: 43.4k, False: 730]
  ------------------
 4499|  43.4k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 4500|  43.4k|                                options.end());
 4501|  43.4k|                    --options_available;
 4502|  43.4k|                    continue;
 4503|  43.4k|                }
 4504|  2.07k|                ++i;
 4505|  2.07k|            }
 4506|  5.37k|            ++chars_consumed;
 4507|  5.37k|        }
 4508|  4.01k|        if (options_available != 1) {
  ------------------
  |  Branch (4508:13): [True: 3.36k, False: 648]
  ------------------
 4509|  3.36k|            m_begin = start_it;
 4510|  3.36k|            return std::nullopt;
 4511|  3.36k|        }
 4512|    648|        return options.front().second;
 4513|  4.01k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE12on_dec_monthENS1_14numeric_systemE:
 3910|  6.82k|    {
 3911|  6.82k|#if !SCN_DISABLE_LOCALE
 3912|  6.82k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3912:13): [True: 0, False: 6.82k]
  |  Branch (3912:31): [True: 0, False: 0]
  ------------------
 3913|      0|            if (auto t = read_localized("%Om", L"%Om")) {
  ------------------
  |  Branch (3913:22): [True: 0, False: 0]
  ------------------
 3914|      0|                setter::set_mon(*this, m_tm, m_st, t->tm_mon + 1);
 3915|      0|            }
 3916|      0|            return;
 3917|      0|        }
 3918|  6.82k|#endif
 3919|       |
 3920|  6.82k|        int mon = read_classic_unsigned_integer(1, 2);
 3921|  6.82k|        setter::set_mon(*this, m_tm, m_st, mon);
 3922|  6.82k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE15on_day_of_monthENS1_14numeric_systemE:
 3942|  6.80k|    {
 3943|  6.80k|#if !SCN_DISABLE_LOCALE
 3944|  6.80k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3944:13): [True: 0, False: 6.80k]
  |  Branch (3944:31): [True: 0, False: 0]
  ------------------
 3945|      0|            if (auto t = read_localized("%Od", L"%Od")) {
  ------------------
  |  Branch (3945:22): [True: 0, False: 0]
  ------------------
 3946|      0|                setter::set_mday(*this, m_tm, m_st, t->tm_mday);
 3947|      0|            }
 3948|      0|            return;
 3949|      0|        }
 3950|  6.80k|#endif
 3951|       |
 3952|  6.80k|        int mday = read_classic_unsigned_integer(1, 2);
 3953|  6.80k|        setter::set_mday(*this, m_tm, m_st, mday);
 3954|  6.80k|    }
_ZN3scn2v46detail15datetime_setterI2tmE8set_mdayINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 3260|  6.80k|    {
 3261|  6.80k|        if (SCN_UNLIKELY(d < 1 || d > 31)) {
  ------------------
  |  | 1039|  6.89k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 6.72k, False: 80]
  |  |  |  Branch (1039:45): [True: 6.71k, False: 90]
  |  |  |  Branch (1039:45): [True: 10, False: 80]
  |  |  ------------------
  ------------------
 3262|  6.72k|            return h.set_error({scan_error::invalid_scanned_value,
 3263|  6.72k|                                "Invalid value for tm_mday"});
 3264|  6.72k|        }
 3265|     80|        t.tm_mday = d;
 3266|     80|        st.set_mday(h);
 3267|     80|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE15on_weekday_nameEv:
 3957|  3.38k|    {
 3958|  3.38k|#if !SCN_DISABLE_LOCALE
 3959|  3.38k|        if (m_st.localized) {
  ------------------
  |  Branch (3959:13): [True: 0, False: 3.38k]
  ------------------
 3960|      0|            if (auto t = read_localized("%a", L"%a")) {
  ------------------
  |  Branch (3960:22): [True: 0, False: 0]
  ------------------
 3961|      0|                setter::set_wday(*this, m_tm, m_st, t->tm_wday);
 3962|      0|            }
 3963|      0|            return;
 3964|      0|        }
 3965|  3.38k|#endif
 3966|       |
 3967|  3.38k|        std::array<std::pair<std::string_view, int>, 7> long_mapping = {{
 3968|  3.38k|            {"Sunday", 0},
 3969|  3.38k|            {"Monday", 1},
 3970|  3.38k|            {"Tuesday", 2},
 3971|  3.38k|            {"Wednesday", 3},
 3972|  3.38k|            {"Thursday", 4},
 3973|  3.38k|            {"Friday", 5},
 3974|  3.38k|            {"Saturday", 6},
 3975|  3.38k|        }};
 3976|  3.38k|        if (auto d = try_one_of_str_nocase(long_mapping)) {
  ------------------
  |  Branch (3976:18): [True: 0, False: 3.38k]
  ------------------
 3977|      0|            return setter::set_wday(*this, m_tm, m_st, *d);
 3978|      0|        }
 3979|  3.38k|        std::array<std::pair<std::string_view, int>, 7> short_mapping = {{
 3980|  3.38k|            {"Sun", 0},
 3981|  3.38k|            {"Mon", 1},
 3982|  3.38k|            {"Tue", 2},
 3983|  3.38k|            {"Wed", 3},
 3984|  3.38k|            {"Thu", 4},
 3985|  3.38k|            {"Fri", 5},
 3986|  3.38k|            {"Sat", 6},
 3987|  3.38k|        }};
 3988|  3.38k|        if (auto d = try_one_of_str_nocase(short_mapping)) {
  ------------------
  |  Branch (3988:18): [True: 0, False: 3.38k]
  ------------------
 3989|      0|            return setter::set_wday(*this, m_tm, m_st, *d);
 3990|      0|        }
 3991|  3.38k|        return set_error(
 3992|  3.38k|            {scan_error::invalid_scanned_value, "Invalid weekday name"});
 3993|  3.38k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE21try_one_of_str_nocaseIiLm7EEENSt3__18optionalIT_EERNSD_5arrayINSD_4pairINSD_17basic_string_viewIcNSD_11char_traitsIcEEEESF_EEXT0_EEE:
 4481|  6.77k|    {
 4482|  6.77k|        auto start_it = m_begin;
 4483|  6.77k|        std::size_t options_available = N;
 4484|  6.77k|        std::size_t chars_consumed = 0;
 4485|  13.7k|        while (options_available >= 1 &&
  ------------------
  |  Branch (4485:16): [True: 6.96k, False: 6.75k]
  ------------------
 4486|  13.7k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (4486:16): [True: 6.96k, False: 0]
  ------------------
 4487|  6.96k|            std::size_t i = 0;
 4488|  6.96k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (4488:17): [True: 20, False: 6.94k]
  ------------------
 4489|     20|                options_available = 0;
 4490|     20|                break;
 4491|     20|            }
 4492|  6.94k|            const auto ch = *m_begin;
 4493|  6.94k|            ++m_begin;
 4494|  54.5k|            while (i < options_available) {
  ------------------
  |  Branch (4494:20): [True: 47.5k, False: 6.94k]
  ------------------
 4495|  47.5k|                const auto cmp = static_cast<unsigned>(
 4496|  47.5k|                    ch ^ options[i].first[chars_consumed]);
 4497|  47.5k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (4497:21): [True: 0, False: 47.5k]
  ------------------
 4498|  47.5k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (4498:22): [True: 47.3k, False: 196]
  |  Branch (4498:34): [True: 47.3k, False: 16]
  ------------------
 4499|  47.3k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 4500|  47.3k|                                options.end());
 4501|  47.3k|                    --options_available;
 4502|  47.3k|                    continue;
 4503|  47.3k|                }
 4504|    212|                ++i;
 4505|    212|            }
 4506|  6.94k|            ++chars_consumed;
 4507|  6.94k|        }
 4508|  6.77k|        if (options_available != 1) {
  ------------------
  |  Branch (4508:13): [True: 6.77k, False: 0]
  ------------------
 4509|  6.77k|            m_begin = start_it;
 4510|  6.77k|            return std::nullopt;
 4511|  6.77k|        }
 4512|      0|        return options.front().second;
 4513|  6.77k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE10on_24_hourENS1_14numeric_systemE:
 4031|  13.1k|    {
 4032|  13.1k|#if !SCN_DISABLE_LOCALE
 4033|  13.1k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (4033:13): [True: 0, False: 13.1k]
  |  Branch (4033:31): [True: 0, False: 0]
  ------------------
 4034|      0|            if (auto t = read_localized("%OH", L"%OH")) {
  ------------------
  |  Branch (4034:22): [True: 0, False: 0]
  ------------------
 4035|      0|                setter::set_hour24(*this, m_tm, m_st, t->tm_hour);
 4036|      0|            }
 4037|      0|            return;
 4038|      0|        }
 4039|  13.1k|#endif
 4040|       |
 4041|  13.1k|        int hr = read_classic_unsigned_integer(1, 2);
 4042|  13.1k|        setter::set_hour24(*this, m_tm, m_st, hr);
 4043|  13.1k|    }
_ZN3scn2v46detail15datetime_setterI2tmE10set_hour24INS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 3240|  13.1k|    {
 3241|  13.1k|        if (SCN_UNLIKELY(h < 0 || h > 23)) {
  ------------------
  |  | 1039|  20.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 6.34k, False: 6.83k]
  |  |  |  Branch (1039:45): [True: 6.26k, False: 6.91k]
  |  |  |  Branch (1039:45): [True: 82, False: 6.83k]
  |  |  ------------------
  ------------------
 3242|  6.34k|            return hdl.set_error({scan_error::invalid_scanned_value,
 3243|  6.34k|                                  "Invalid value for tm_hour"});
 3244|  6.34k|        }
 3245|  6.83k|        t.tm_hour = h;
 3246|  6.83k|        st.set_hour24(hdl);
 3247|  6.83k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE9on_minuteENS1_14numeric_systemE:
 4059|  13.1k|    {
 4060|  13.1k|#if !SCN_DISABLE_LOCALE
 4061|  13.1k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (4061:13): [True: 0, False: 13.1k]
  |  Branch (4061:31): [True: 0, False: 0]
  ------------------
 4062|      0|            if (auto t = read_localized("%OM", L"%OM")) {
  ------------------
  |  Branch (4062:22): [True: 0, False: 0]
  ------------------
 4063|      0|                setter::set_min(*this, m_tm, m_st, t->tm_min);
 4064|      0|            }
 4065|      0|            return;
 4066|      0|        }
 4067|  13.1k|#endif
 4068|       |
 4069|  13.1k|        int min = read_classic_unsigned_integer(1, 2);
 4070|  13.1k|        setter::set_min(*this, m_tm, m_st, min);
 4071|  13.1k|    }
_ZN3scn2v46detail15datetime_setterI2tmE7set_minINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 3230|  13.1k|    {
 3231|  13.1k|        if (SCN_UNLIKELY(m < 0 || m > 59)) {
  ------------------
  |  | 1039|  19.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 6.37k, False: 6.79k]
  |  |  |  Branch (1039:45): [True: 6.36k, False: 6.80k]
  |  |  |  Branch (1039:45): [True: 12, False: 6.79k]
  |  |  ------------------
  ------------------
 3232|  6.37k|            return h.set_error({scan_error::invalid_scanned_value,
 3233|  6.37k|                                "Invalid value for tm_min"});
 3234|  6.37k|        }
 3235|  6.79k|        t.tm_min = m;
 3236|  6.79k|        st.set_min(h);
 3237|  6.79k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE9on_secondENS1_14numeric_systemE:
 4073|  3.58k|    {
 4074|  3.58k|#if !SCN_DISABLE_LOCALE
 4075|  3.58k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (4075:13): [True: 0, False: 3.58k]
  |  Branch (4075:31): [True: 0, False: 0]
  ------------------
 4076|      0|            if (auto t = read_localized("%OS", L"%OS")) {
  ------------------
  |  Branch (4076:22): [True: 0, False: 0]
  ------------------
 4077|      0|                setter::set_sec(*this, m_tm, m_st, t->tm_sec);
 4078|      0|            }
 4079|      0|            return;
 4080|      0|        }
 4081|  3.58k|#endif
 4082|       |
 4083|  3.58k|        int sec = read_classic_unsigned_integer(1, 2);
 4084|  3.58k|        setter::set_sec(*this, m_tm, m_st, sec);
 4085|  3.58k|    }
_ZN3scn2v46detail15datetime_setterI2tmE7set_secINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 3220|  3.58k|    {
 3221|  3.58k|        if (SCN_UNLIKELY(s < 0 || s > 60)) {
  ------------------
  |  | 1039|  3.81k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 3.35k, False: 226]
  |  |  |  Branch (1039:45): [True: 3.35k, False: 228]
  |  |  |  Branch (1039:45): [True: 2, False: 226]
  |  |  ------------------
  ------------------
 3222|  3.35k|            return h.set_error({scan_error::invalid_scanned_value,
 3223|  3.35k|                                "Invalid value for tm_sec"});
 3224|  3.35k|        }
 3225|    226|        t.tm_sec = s;
 3226|    226|        st.set_sec(h);
 3227|    226|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE10on_us_dateEv:
 4315|  3.39k|    {
 4316|       |        // %m/%d/%y
 4317|  3.39k|        constexpr CharT slash = '/';
 4318|  3.39k|        on_dec_month();
 4319|  3.39k|        on_text(&slash, &slash + 1);
 4320|  3.39k|        on_day_of_month();
 4321|  3.39k|        on_text(&slash, &slash + 1);
 4322|  3.39k|        on_short_year();
 4323|  3.39k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE11on_iso_dateEv:
 4325|  3.39k|    {
 4326|       |        // %Y-%m-%d
 4327|  3.39k|        constexpr CharT dash = '-';
 4328|  3.39k|        on_full_year();
 4329|  3.39k|        on_text(&dash, &dash + 1);
 4330|  3.39k|        on_dec_month();
 4331|  3.39k|        on_text(&dash, &dash + 1);
 4332|  3.39k|        on_day_of_month();
 4333|  3.39k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE15on_24_hour_timeEv:
 4357|  9.58k|    {
 4358|       |        // %H:%M
 4359|  9.58k|        constexpr CharT colon = ':';
 4360|  9.58k|        on_24_hour();
 4361|  9.58k|        on_text(&colon, &colon + 1);
 4362|  9.58k|        on_minute();
 4363|  9.58k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE11on_iso_timeEv:
 4365|  3.58k|    {
 4366|       |        // %H:%M:%S
 4367|  3.58k|        constexpr CharT colon = ':';
 4368|  3.58k|        on_24_hour();
 4369|  3.58k|        on_text(&colon, &colon + 1);
 4370|  3.58k|        on_minute();
 4371|  3.58k|        on_text(&colon, &colon + 1);
 4372|  3.58k|        on_second();
 4373|  3.58k|    }
_ZN3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE6verifyEv:
 4404|  7.13k|    {
 4405|  7.13k|        m_st.verify(*this);
 4406|  7.13k|        if (m_st.am_pm_set && m_st.hour12_set) {
  ------------------
  |  Branch (4406:13): [True: 0, False: 7.13k]
  |  Branch (4406:31): [True: 0, False: 0]
  ------------------
 4407|      0|            setter::handle_am_pm(m_tm, m_st);
 4408|      0|        }
 4409|  7.13k|        if (!m_st.full_year_set && (m_st.short_year_set || m_st.century_set)) {
  ------------------
  |  Branch (4409:13): [True: 7.12k, False: 12]
  |  Branch (4409:37): [True: 10, False: 7.11k]
  |  Branch (4409:60): [True: 0, False: 7.11k]
  ------------------
 4410|     10|            setter::handle_short_year_and_century(m_tm, m_st);
 4411|     10|        }
 4412|  7.13k|    }
_ZNK3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE9get_errorEv:
 4415|  61.6k|    {
 4416|  61.6k|        return m_error;
 4417|  61.6k|    }
_ZNK3scn2v46detail9tm_readerI2tmNS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE12get_iteratorEv:
 4432|  7.13k|    {
 4433|  7.13k|        return m_begin;
 4434|  7.13k|    }
_ZN3scn2v46detail22chrono_scan_inner_implIwNS0_10tm_with_tzENS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEENS0_13scan_expectedINT1_8iteratorEEENSt3__117basic_string_viewIT_NSB_11char_traitsISD_EEEERT0_RS8_:
 4625|  31.1k|{
 4626|  31.1k|    {
 4627|  31.1k|        SCN_TRY(it,
  ------------------
  |  | 3958|  31.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  31.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  31.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  31.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 362, False: 30.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    362|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    362|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    362|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    362|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    362|    }                                                  \
  |  |  |  | 3957|  31.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  30.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4628|  30.7k|                detail::internal_skip_classic_whitespace(ctx.range(), false));
 4629|  30.7k|        ctx.advance_to(SCN_MOVE(it));
  ------------------
  |  | 1108|  30.7k|    static_cast<    \
  |  | 1109|  30.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4630|  30.7k|    }
 4631|       |
 4632|      0|    auto r = detail::tm_reader<T, typename Context::range_type, CharT>(
 4633|  30.7k|        ctx.range(), t, ctx.locale());
 4634|  30.7k|    detail::parse_chrono_format_specs(fmt.data(), fmt.data() + fmt.size(), r);
 4635|  30.7k|    if (auto e = r.get_error(); SCN_UNLIKELY(!e)) {
  ------------------
  |  | 1039|  30.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 23.6k, False: 7.13k]
  |  |  ------------------
  ------------------
 4636|  23.6k|        return unexpected(e.error());
 4637|  23.6k|    }
 4638|  7.13k|    return r.get_iterator();
 4639|  30.7k|}
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwEC2ESC_RS3_NS1_10locale_refE:
 3769|  30.7k|        : m_range(SCN_MOVE(r)),
  ------------------
  |  | 1108|  30.7k|    static_cast<    \
  |  | 1109|  30.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3770|  30.7k|          m_begin(ranges::begin(m_range)),
 3771|  30.7k|          m_tm(t),
 3772|  30.7k|          m_loc(loc)
 3773|  30.7k|    {
 3774|  30.7k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE8on_errorEPKc:
 4420|  23.0k|    {
 4421|  23.0k|        set_error({scan_error::invalid_format_string, msg});
 4422|  23.0k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE9set_errorENS0_10scan_errorE:
 4425|   101k|    {
 4426|   101k|        if (m_error.has_value()) {
  ------------------
  |  Branch (4426:13): [True: 23.6k, False: 78.1k]
  ------------------
 4427|  23.6k|            m_error = unexpected(e);
 4428|  23.6k|        }
 4429|   101k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE7on_textEPKwSF_:
 3777|  30.3k|    {
 3778|  37.5k|        while (beg != end) {
  ------------------
  |  Branch (3778:16): [True: 30.3k, False: 7.18k]
  ------------------
 3779|  30.3k|            if (m_begin == ranges::end(m_range)) {
  ------------------
  |  Branch (3779:17): [True: 118, False: 30.2k]
  ------------------
 3780|    118|                return set_error({scan_error::end_of_input, "EOF"});
 3781|    118|            }
 3782|  30.2k|            if (*beg != *m_begin) {
  ------------------
  |  Branch (3782:17): [True: 23.0k, False: 7.18k]
  ------------------
 3783|  23.0k|                return on_error("Invalid literal character");
 3784|  23.0k|            }
 3785|  7.18k|            ++beg;
 3786|  7.18k|            ++m_begin;
 3787|  7.18k|        }
 3788|  30.3k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE12on_full_yearENS1_14numeric_systemE:
 3807|  6.78k|    {
 3808|  6.78k|#if !SCN_DISABLE_LOCALE
 3809|  6.78k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3809:13): [True: 0, False: 6.78k]
  |  Branch (3809:31): [True: 0, False: 0]
  ------------------
 3810|      0|            if (auto t = read_localized("%EY", L"%EY")) {
  ------------------
  |  Branch (3810:22): [True: 0, False: 0]
  ------------------
 3811|      0|                setter::set_full_year(*this, m_tm, m_st, t->tm_year + 1900);
 3812|      0|            }
 3813|      0|            return;
 3814|      0|        }
 3815|  6.78k|#endif
 3816|       |
 3817|  6.78k|        int yr = read_classic_unsigned_integer(4, 4);
 3818|  6.78k|        setter::set_full_year(*this, m_tm, m_st, yr);
 3819|  6.78k|    }
_ZN3scn2v46detail15datetime_setterI2tmE13set_full_yearINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 3280|  6.78k|    {
 3281|  6.78k|        if (SCN_UNLIKELY(y < std::numeric_limits<int>::min() + 1900)) {
  ------------------
  |  | 1039|  6.78k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 6.78k]
  |  |  ------------------
  ------------------
 3282|      0|            return h.set_error({scan_error::invalid_scanned_value,
 3283|      0|                                "Invalid value for tm_year"});
 3284|      0|        }
 3285|  6.78k|        t.tm_year = y - 1900;
 3286|  6.78k|        st.set_full_year(h);
 3287|  6.78k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE29read_classic_unsigned_integerEii:
 4443|  53.7k|    {
 4444|  53.7k|        int digits_read = 0;
 4445|  53.7k|        int accumulator = 0;
 4446|  69.1k|        while (m_begin != m_range.end()) {
  ------------------
  |  Branch (4446:16): [True: 68.8k, False: 260]
  ------------------
 4447|  68.8k|            const auto ch = *m_begin;
 4448|  68.8k|            if (ch < CharT{'0'} || ch > CharT{'9'}) {
  ------------------
  |  Branch (4448:17): [True: 29.9k, False: 38.8k]
  |  Branch (4448:36): [True: 21.0k, False: 17.8k]
  ------------------
 4449|  51.0k|                break;
 4450|  51.0k|            }
 4451|  17.8k|            ++m_begin;
 4452|  17.8k|            ++digits_read;
 4453|  17.8k|            accumulator = accumulator * 10 + static_cast<int>(ch - CharT{'0'});
 4454|  17.8k|            if (digits_read >= max_digits) {
  ------------------
  |  Branch (4454:17): [True: 2.44k, False: 15.3k]
  ------------------
 4455|  2.44k|                break;
 4456|  2.44k|            }
 4457|  17.8k|        }
 4458|  53.7k|        if (digits_read < min_digits) {
  ------------------
  |  Branch (4458:13): [True: 39.1k, False: 14.5k]
  ------------------
 4459|  39.1k|            set_error(scan_error{scan_error::invalid_scanned_value,
 4460|  39.1k|                                 "Too few integer digits"});
 4461|  39.1k|            return -1;
 4462|  39.1k|        }
 4463|  14.5k|        return accumulator;
 4464|  53.7k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE13on_short_yearENS1_14numeric_systemE:
 3821|  3.39k|    {
 3822|  3.39k|#if !SCN_DISABLE_LOCALE
 3823|  3.39k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3823:13): [True: 0, False: 3.39k]
  |  Branch (3823:31): [True: 0, False: 0]
  ------------------
 3824|      0|            if (auto t = read_localized("%Ey", L"%Ey")) {
  ------------------
  |  Branch (3824:22): [True: 0, False: 0]
  ------------------
 3825|      0|                setter::set_short_year(*this, m_tm, m_st,
 3826|      0|                                       (t->tm_year + 1900) % 100);
 3827|      0|            }
 3828|      0|            return;
 3829|      0|        }
 3830|  3.39k|#endif
 3831|       |
 3832|  3.39k|        int yr = read_classic_unsigned_integer(2, 2);
 3833|  3.39k|        setter::set_short_year(*this, m_tm, m_st, yr);
 3834|  3.39k|    }
_ZN3scn2v46detail15datetime_setterI2tmE14set_short_yearINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 3297|  3.39k|    {
 3298|  3.39k|        if (SCN_UNLIKELY(y < 0 || y > 99)) {
  ------------------
  |  | 1039|  3.41k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 3.37k, False: 18]
  |  |  |  Branch (1039:45): [True: 3.37k, False: 18]
  |  |  |  Branch (1039:45): [True: 0, False: 18]
  |  |  ------------------
  ------------------
 3299|  3.37k|            return h.set_error({scan_error::invalid_scanned_value,
 3300|  3.37k|                                "Invalid value for tm_year"});
 3301|  3.37k|        }
 3302|     18|        st.short_year_value = y;
 3303|     18|        st.set_short_year(h);
 3304|     18|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE13on_month_nameEv:
 3864|  4.03k|    {
 3865|  4.03k|#if !SCN_DISABLE_FAST_FLOAT
 3866|  4.03k|        if (m_st.localized) {
  ------------------
  |  Branch (3866:13): [True: 0, False: 4.03k]
  ------------------
 3867|      0|            if (auto t = read_localized("%b", L"%b")) {
  ------------------
  |  Branch (3867:22): [True: 0, False: 0]
  ------------------
 3868|      0|                setter::set_mon(*this, m_tm, m_st, t->tm_mon + 1);
 3869|      0|            }
 3870|      0|            return;
 3871|      0|        }
 3872|  4.03k|#endif
 3873|       |
 3874|  4.03k|        std::array<std::pair<std::string_view, int>, 12> long_mapping = {{
 3875|  4.03k|            {"January", 1},
 3876|  4.03k|            {"February", 2},
 3877|  4.03k|            {"March", 3},
 3878|  4.03k|            {"April", 4},
 3879|  4.03k|            {"May", 5},
 3880|  4.03k|            {"June", 6},
 3881|  4.03k|            {"July", 7},
 3882|  4.03k|            {"August", 8},
 3883|  4.03k|            {"September", 9},
 3884|  4.03k|            {"October", 10},
 3885|  4.03k|            {"November", 11},
 3886|  4.03k|            {"December", 12},
 3887|  4.03k|        }};
 3888|  4.03k|        if (auto m = try_one_of_str_nocase(long_mapping)) {
  ------------------
  |  Branch (3888:18): [True: 22, False: 4.01k]
  ------------------
 3889|     22|            return setter::set_mon(*this, m_tm, m_st, *m);
 3890|     22|        }
 3891|  4.01k|        std::array<std::pair<std::string_view, int>, 11> short_mapping = {{
 3892|  4.01k|            {"Jan", 1},
 3893|  4.01k|            {"Feb", 2},
 3894|  4.01k|            {"Mar", 3},
 3895|  4.01k|            {"Apr", 4},
 3896|  4.01k|            {"Jun", 6},
 3897|  4.01k|            {"Jul", 7},
 3898|  4.01k|            {"Aug", 8},
 3899|  4.01k|            {"Sep", 9},
 3900|  4.01k|            {"Oct", 10},
 3901|  4.01k|            {"Nov", 11},
 3902|  4.01k|            {"Dec", 12},
 3903|  4.01k|        }};
 3904|  4.01k|        if (auto m = try_one_of_str_nocase(short_mapping)) {
  ------------------
  |  Branch (3904:18): [True: 648, False: 3.36k]
  ------------------
 3905|    648|            return setter::set_mon(*this, m_tm, m_st, *m);
 3906|    648|        }
 3907|  3.36k|        set_error({scan_error::invalid_scanned_value, "Invalid month name"});
 3908|  3.36k|    }
_ZN3scn2v46detail15datetime_setterI2tmE7set_monINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 3270|  7.49k|    {
 3271|  7.49k|        if (SCN_UNLIKELY(m < 1 || m > 12)) {
  ------------------
  |  | 1039|  8.58k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 6.46k, False: 1.03k]
  |  |  |  Branch (1039:45): [True: 6.41k, False: 1.08k]
  |  |  |  Branch (1039:45): [True: 54, False: 1.03k]
  |  |  ------------------
  ------------------
 3272|  6.46k|            return h.set_error({scan_error::invalid_scanned_value,
 3273|  6.46k|                                "Invalid value for tm_mon"});
 3274|  6.46k|        }
 3275|  1.03k|        t.tm_mon = m - 1;
 3276|  1.03k|        st.set_mon(h);
 3277|  1.03k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE21try_one_of_str_nocaseIiLm12EEENSt3__18optionalIT_EERNSF_5arrayINSF_4pairINSF_17basic_string_viewIcNSF_11char_traitsIcEEEESH_EEXT0_EEE:
 4481|  4.03k|    {
 4482|  4.03k|        auto start_it = m_begin;
 4483|  4.03k|        std::size_t options_available = N;
 4484|  4.03k|        std::size_t chars_consumed = 0;
 4485|  10.1k|        while (options_available >= 1 &&
  ------------------
  |  Branch (4485:16): [True: 6.14k, False: 3.97k]
  ------------------
 4486|  10.1k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (4486:16): [True: 6.11k, False: 22]
  ------------------
 4487|  6.11k|            std::size_t i = 0;
 4488|  6.11k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (4488:17): [True: 42, False: 6.07k]
  ------------------
 4489|     42|                options_available = 0;
 4490|     42|                break;
 4491|     42|            }
 4492|  6.07k|            const auto ch = *m_begin;
 4493|  6.07k|            ++m_begin;
 4494|  57.9k|            while (i < options_available) {
  ------------------
  |  Branch (4494:20): [True: 51.8k, False: 6.07k]
  ------------------
 4495|  51.8k|                const auto cmp = static_cast<unsigned>(
 4496|  51.8k|                    ch ^ options[i].first[chars_consumed]);
 4497|  51.8k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (4497:21): [True: 0, False: 51.8k]
  ------------------
 4498|  51.8k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (4498:22): [True: 49.1k, False: 2.73k]
  |  Branch (4498:34): [True: 48.3k, False: 782]
  ------------------
 4499|  48.3k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 4500|  48.3k|                                options.end());
 4501|  48.3k|                    --options_available;
 4502|  48.3k|                    continue;
 4503|  48.3k|                }
 4504|  3.51k|                ++i;
 4505|  3.51k|            }
 4506|  6.07k|            ++chars_consumed;
 4507|  6.07k|        }
 4508|  4.03k|        if (options_available != 1) {
  ------------------
  |  Branch (4508:13): [True: 4.01k, False: 22]
  ------------------
 4509|  4.01k|            m_begin = start_it;
 4510|  4.01k|            return std::nullopt;
 4511|  4.01k|        }
 4512|     22|        return options.front().second;
 4513|  4.03k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE21try_one_of_str_nocaseIiLm11EEENSt3__18optionalIT_EERNSF_5arrayINSF_4pairINSF_17basic_string_viewIcNSF_11char_traitsIcEEEESH_EEXT0_EEE:
 4481|  4.01k|    {
 4482|  4.01k|        auto start_it = m_begin;
 4483|  4.01k|        std::size_t options_available = N;
 4484|  4.01k|        std::size_t chars_consumed = 0;
 4485|  9.39k|        while (options_available >= 1 &&
  ------------------
  |  Branch (4485:16): [True: 6.05k, False: 3.33k]
  ------------------
 4486|  9.39k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (4486:16): [True: 5.40k, False: 648]
  ------------------
 4487|  5.40k|            std::size_t i = 0;
 4488|  5.40k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (4488:17): [True: 30, False: 5.37k]
  ------------------
 4489|     30|                options_available = 0;
 4490|     30|                break;
 4491|     30|            }
 4492|  5.37k|            const auto ch = *m_begin;
 4493|  5.37k|            ++m_begin;
 4494|  50.9k|            while (i < options_available) {
  ------------------
  |  Branch (4494:20): [True: 45.5k, False: 5.37k]
  ------------------
 4495|  45.5k|                const auto cmp = static_cast<unsigned>(
 4496|  45.5k|                    ch ^ options[i].first[chars_consumed]);
 4497|  45.5k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (4497:21): [True: 0, False: 45.5k]
  ------------------
 4498|  45.5k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (4498:22): [True: 44.2k, False: 1.34k]
  |  Branch (4498:34): [True: 43.4k, False: 730]
  ------------------
 4499|  43.4k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 4500|  43.4k|                                options.end());
 4501|  43.4k|                    --options_available;
 4502|  43.4k|                    continue;
 4503|  43.4k|                }
 4504|  2.07k|                ++i;
 4505|  2.07k|            }
 4506|  5.37k|            ++chars_consumed;
 4507|  5.37k|        }
 4508|  4.01k|        if (options_available != 1) {
  ------------------
  |  Branch (4508:13): [True: 3.36k, False: 648]
  ------------------
 4509|  3.36k|            m_begin = start_it;
 4510|  3.36k|            return std::nullopt;
 4511|  3.36k|        }
 4512|    648|        return options.front().second;
 4513|  4.01k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE12on_dec_monthENS1_14numeric_systemE:
 3910|  6.82k|    {
 3911|  6.82k|#if !SCN_DISABLE_LOCALE
 3912|  6.82k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3912:13): [True: 0, False: 6.82k]
  |  Branch (3912:31): [True: 0, False: 0]
  ------------------
 3913|      0|            if (auto t = read_localized("%Om", L"%Om")) {
  ------------------
  |  Branch (3913:22): [True: 0, False: 0]
  ------------------
 3914|      0|                setter::set_mon(*this, m_tm, m_st, t->tm_mon + 1);
 3915|      0|            }
 3916|      0|            return;
 3917|      0|        }
 3918|  6.82k|#endif
 3919|       |
 3920|  6.82k|        int mon = read_classic_unsigned_integer(1, 2);
 3921|  6.82k|        setter::set_mon(*this, m_tm, m_st, mon);
 3922|  6.82k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE15on_day_of_monthENS1_14numeric_systemE:
 3942|  6.80k|    {
 3943|  6.80k|#if !SCN_DISABLE_LOCALE
 3944|  6.80k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3944:13): [True: 0, False: 6.80k]
  |  Branch (3944:31): [True: 0, False: 0]
  ------------------
 3945|      0|            if (auto t = read_localized("%Od", L"%Od")) {
  ------------------
  |  Branch (3945:22): [True: 0, False: 0]
  ------------------
 3946|      0|                setter::set_mday(*this, m_tm, m_st, t->tm_mday);
 3947|      0|            }
 3948|      0|            return;
 3949|      0|        }
 3950|  6.80k|#endif
 3951|       |
 3952|  6.80k|        int mday = read_classic_unsigned_integer(1, 2);
 3953|  6.80k|        setter::set_mday(*this, m_tm, m_st, mday);
 3954|  6.80k|    }
_ZN3scn2v46detail15datetime_setterI2tmE8set_mdayINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 3260|  6.80k|    {
 3261|  6.80k|        if (SCN_UNLIKELY(d < 1 || d > 31)) {
  ------------------
  |  | 1039|  6.89k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 6.72k, False: 80]
  |  |  |  Branch (1039:45): [True: 6.71k, False: 90]
  |  |  |  Branch (1039:45): [True: 10, False: 80]
  |  |  ------------------
  ------------------
 3262|  6.72k|            return h.set_error({scan_error::invalid_scanned_value,
 3263|  6.72k|                                "Invalid value for tm_mday"});
 3264|  6.72k|        }
 3265|     80|        t.tm_mday = d;
 3266|     80|        st.set_mday(h);
 3267|     80|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE15on_weekday_nameEv:
 3957|  3.38k|    {
 3958|  3.38k|#if !SCN_DISABLE_LOCALE
 3959|  3.38k|        if (m_st.localized) {
  ------------------
  |  Branch (3959:13): [True: 0, False: 3.38k]
  ------------------
 3960|      0|            if (auto t = read_localized("%a", L"%a")) {
  ------------------
  |  Branch (3960:22): [True: 0, False: 0]
  ------------------
 3961|      0|                setter::set_wday(*this, m_tm, m_st, t->tm_wday);
 3962|      0|            }
 3963|      0|            return;
 3964|      0|        }
 3965|  3.38k|#endif
 3966|       |
 3967|  3.38k|        std::array<std::pair<std::string_view, int>, 7> long_mapping = {{
 3968|  3.38k|            {"Sunday", 0},
 3969|  3.38k|            {"Monday", 1},
 3970|  3.38k|            {"Tuesday", 2},
 3971|  3.38k|            {"Wednesday", 3},
 3972|  3.38k|            {"Thursday", 4},
 3973|  3.38k|            {"Friday", 5},
 3974|  3.38k|            {"Saturday", 6},
 3975|  3.38k|        }};
 3976|  3.38k|        if (auto d = try_one_of_str_nocase(long_mapping)) {
  ------------------
  |  Branch (3976:18): [True: 0, False: 3.38k]
  ------------------
 3977|      0|            return setter::set_wday(*this, m_tm, m_st, *d);
 3978|      0|        }
 3979|  3.38k|        std::array<std::pair<std::string_view, int>, 7> short_mapping = {{
 3980|  3.38k|            {"Sun", 0},
 3981|  3.38k|            {"Mon", 1},
 3982|  3.38k|            {"Tue", 2},
 3983|  3.38k|            {"Wed", 3},
 3984|  3.38k|            {"Thu", 4},
 3985|  3.38k|            {"Fri", 5},
 3986|  3.38k|            {"Sat", 6},
 3987|  3.38k|        }};
 3988|  3.38k|        if (auto d = try_one_of_str_nocase(short_mapping)) {
  ------------------
  |  Branch (3988:18): [True: 0, False: 3.38k]
  ------------------
 3989|      0|            return setter::set_wday(*this, m_tm, m_st, *d);
 3990|      0|        }
 3991|  3.38k|        return set_error(
 3992|  3.38k|            {scan_error::invalid_scanned_value, "Invalid weekday name"});
 3993|  3.38k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE21try_one_of_str_nocaseIiLm7EEENSt3__18optionalIT_EERNSF_5arrayINSF_4pairINSF_17basic_string_viewIcNSF_11char_traitsIcEEEESH_EEXT0_EEE:
 4481|  6.77k|    {
 4482|  6.77k|        auto start_it = m_begin;
 4483|  6.77k|        std::size_t options_available = N;
 4484|  6.77k|        std::size_t chars_consumed = 0;
 4485|  13.7k|        while (options_available >= 1 &&
  ------------------
  |  Branch (4485:16): [True: 6.96k, False: 6.75k]
  ------------------
 4486|  13.7k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (4486:16): [True: 6.96k, False: 0]
  ------------------
 4487|  6.96k|            std::size_t i = 0;
 4488|  6.96k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (4488:17): [True: 20, False: 6.94k]
  ------------------
 4489|     20|                options_available = 0;
 4490|     20|                break;
 4491|     20|            }
 4492|  6.94k|            const auto ch = *m_begin;
 4493|  6.94k|            ++m_begin;
 4494|  54.5k|            while (i < options_available) {
  ------------------
  |  Branch (4494:20): [True: 47.5k, False: 6.94k]
  ------------------
 4495|  47.5k|                const auto cmp = static_cast<unsigned>(
 4496|  47.5k|                    ch ^ options[i].first[chars_consumed]);
 4497|  47.5k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (4497:21): [True: 0, False: 47.5k]
  ------------------
 4498|  47.5k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (4498:22): [True: 47.3k, False: 196]
  |  Branch (4498:34): [True: 47.3k, False: 16]
  ------------------
 4499|  47.3k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 4500|  47.3k|                                options.end());
 4501|  47.3k|                    --options_available;
 4502|  47.3k|                    continue;
 4503|  47.3k|                }
 4504|    212|                ++i;
 4505|    212|            }
 4506|  6.94k|            ++chars_consumed;
 4507|  6.94k|        }
 4508|  6.77k|        if (options_available != 1) {
  ------------------
  |  Branch (4508:13): [True: 6.77k, False: 0]
  ------------------
 4509|  6.77k|            m_begin = start_it;
 4510|  6.77k|            return std::nullopt;
 4511|  6.77k|        }
 4512|      0|        return options.front().second;
 4513|  6.77k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE10on_24_hourENS1_14numeric_systemE:
 4031|  13.1k|    {
 4032|  13.1k|#if !SCN_DISABLE_LOCALE
 4033|  13.1k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (4033:13): [True: 0, False: 13.1k]
  |  Branch (4033:31): [True: 0, False: 0]
  ------------------
 4034|      0|            if (auto t = read_localized("%OH", L"%OH")) {
  ------------------
  |  Branch (4034:22): [True: 0, False: 0]
  ------------------
 4035|      0|                setter::set_hour24(*this, m_tm, m_st, t->tm_hour);
 4036|      0|            }
 4037|      0|            return;
 4038|      0|        }
 4039|  13.1k|#endif
 4040|       |
 4041|  13.1k|        int hr = read_classic_unsigned_integer(1, 2);
 4042|  13.1k|        setter::set_hour24(*this, m_tm, m_st, hr);
 4043|  13.1k|    }
_ZN3scn2v46detail15datetime_setterI2tmE10set_hour24INS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 3240|  13.1k|    {
 3241|  13.1k|        if (SCN_UNLIKELY(h < 0 || h > 23)) {
  ------------------
  |  | 1039|  20.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 6.34k, False: 6.83k]
  |  |  |  Branch (1039:45): [True: 6.26k, False: 6.91k]
  |  |  |  Branch (1039:45): [True: 82, False: 6.83k]
  |  |  ------------------
  ------------------
 3242|  6.34k|            return hdl.set_error({scan_error::invalid_scanned_value,
 3243|  6.34k|                                  "Invalid value for tm_hour"});
 3244|  6.34k|        }
 3245|  6.83k|        t.tm_hour = h;
 3246|  6.83k|        st.set_hour24(hdl);
 3247|  6.83k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE9on_minuteENS1_14numeric_systemE:
 4059|  13.1k|    {
 4060|  13.1k|#if !SCN_DISABLE_LOCALE
 4061|  13.1k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (4061:13): [True: 0, False: 13.1k]
  |  Branch (4061:31): [True: 0, False: 0]
  ------------------
 4062|      0|            if (auto t = read_localized("%OM", L"%OM")) {
  ------------------
  |  Branch (4062:22): [True: 0, False: 0]
  ------------------
 4063|      0|                setter::set_min(*this, m_tm, m_st, t->tm_min);
 4064|      0|            }
 4065|      0|            return;
 4066|      0|        }
 4067|  13.1k|#endif
 4068|       |
 4069|  13.1k|        int min = read_classic_unsigned_integer(1, 2);
 4070|  13.1k|        setter::set_min(*this, m_tm, m_st, min);
 4071|  13.1k|    }
_ZN3scn2v46detail15datetime_setterI2tmE7set_minINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 3230|  13.1k|    {
 3231|  13.1k|        if (SCN_UNLIKELY(m < 0 || m > 59)) {
  ------------------
  |  | 1039|  19.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 6.37k, False: 6.79k]
  |  |  |  Branch (1039:45): [True: 6.36k, False: 6.80k]
  |  |  |  Branch (1039:45): [True: 12, False: 6.79k]
  |  |  ------------------
  ------------------
 3232|  6.37k|            return h.set_error({scan_error::invalid_scanned_value,
 3233|  6.37k|                                "Invalid value for tm_min"});
 3234|  6.37k|        }
 3235|  6.79k|        t.tm_min = m;
 3236|  6.79k|        st.set_min(h);
 3237|  6.79k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE9on_secondENS1_14numeric_systemE:
 4073|  3.58k|    {
 4074|  3.58k|#if !SCN_DISABLE_LOCALE
 4075|  3.58k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (4075:13): [True: 0, False: 3.58k]
  |  Branch (4075:31): [True: 0, False: 0]
  ------------------
 4076|      0|            if (auto t = read_localized("%OS", L"%OS")) {
  ------------------
  |  Branch (4076:22): [True: 0, False: 0]
  ------------------
 4077|      0|                setter::set_sec(*this, m_tm, m_st, t->tm_sec);
 4078|      0|            }
 4079|      0|            return;
 4080|      0|        }
 4081|  3.58k|#endif
 4082|       |
 4083|  3.58k|        int sec = read_classic_unsigned_integer(1, 2);
 4084|  3.58k|        setter::set_sec(*this, m_tm, m_st, sec);
 4085|  3.58k|    }
_ZN3scn2v46detail15datetime_setterI2tmE7set_secINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 3220|  3.58k|    {
 3221|  3.58k|        if (SCN_UNLIKELY(s < 0 || s > 60)) {
  ------------------
  |  | 1039|  3.81k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 3.35k, False: 226]
  |  |  |  Branch (1039:45): [True: 3.35k, False: 228]
  |  |  |  Branch (1039:45): [True: 2, False: 226]
  |  |  ------------------
  ------------------
 3222|  3.35k|            return h.set_error({scan_error::invalid_scanned_value,
 3223|  3.35k|                                "Invalid value for tm_sec"});
 3224|  3.35k|        }
 3225|    226|        t.tm_sec = s;
 3226|    226|        st.set_sec(h);
 3227|    226|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE10on_us_dateEv:
 4315|  3.39k|    {
 4316|       |        // %m/%d/%y
 4317|  3.39k|        constexpr CharT slash = '/';
 4318|  3.39k|        on_dec_month();
 4319|  3.39k|        on_text(&slash, &slash + 1);
 4320|  3.39k|        on_day_of_month();
 4321|  3.39k|        on_text(&slash, &slash + 1);
 4322|  3.39k|        on_short_year();
 4323|  3.39k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE11on_iso_dateEv:
 4325|  3.39k|    {
 4326|       |        // %Y-%m-%d
 4327|  3.39k|        constexpr CharT dash = '-';
 4328|  3.39k|        on_full_year();
 4329|  3.39k|        on_text(&dash, &dash + 1);
 4330|  3.39k|        on_dec_month();
 4331|  3.39k|        on_text(&dash, &dash + 1);
 4332|  3.39k|        on_day_of_month();
 4333|  3.39k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE15on_24_hour_timeEv:
 4357|  9.58k|    {
 4358|       |        // %H:%M
 4359|  9.58k|        constexpr CharT colon = ':';
 4360|  9.58k|        on_24_hour();
 4361|  9.58k|        on_text(&colon, &colon + 1);
 4362|  9.58k|        on_minute();
 4363|  9.58k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE11on_iso_timeEv:
 4365|  3.58k|    {
 4366|       |        // %H:%M:%S
 4367|  3.58k|        constexpr CharT colon = ':';
 4368|  3.58k|        on_24_hour();
 4369|  3.58k|        on_text(&colon, &colon + 1);
 4370|  3.58k|        on_minute();
 4371|  3.58k|        on_text(&colon, &colon + 1);
 4372|  3.58k|        on_second();
 4373|  3.58k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE6verifyEv:
 4404|  7.13k|    {
 4405|  7.13k|        m_st.verify(*this);
 4406|  7.13k|        if (m_st.am_pm_set && m_st.hour12_set) {
  ------------------
  |  Branch (4406:13): [True: 0, False: 7.13k]
  |  Branch (4406:31): [True: 0, False: 0]
  ------------------
 4407|      0|            setter::handle_am_pm(m_tm, m_st);
 4408|      0|        }
 4409|  7.13k|        if (!m_st.full_year_set && (m_st.short_year_set || m_st.century_set)) {
  ------------------
  |  Branch (4409:13): [True: 7.12k, False: 12]
  |  Branch (4409:37): [True: 10, False: 7.11k]
  |  Branch (4409:60): [True: 0, False: 7.11k]
  ------------------
 4410|     10|            setter::handle_short_year_and_century(m_tm, m_st);
 4411|     10|        }
 4412|  7.13k|    }
_ZNK3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE9get_errorEv:
 4415|  61.6k|    {
 4416|  61.6k|        return m_error;
 4417|  61.6k|    }
_ZNK3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE12get_iteratorEv:
 4432|  7.13k|    {
 4433|  7.13k|        return m_begin;
 4434|  7.13k|    }
_ZN3scn2v46detail22chrono_scan_inner_implIwNS0_10tm_with_tzENS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEEEENS0_13scan_expectedINT1_8iteratorEEENSt3__117basic_string_viewIT_NSH_11char_traitsISJ_EEEERT0_RSE_:
 4625|  31.1k|{
 4626|  31.1k|    {
 4627|  31.1k|        SCN_TRY(it,
  ------------------
  |  | 3958|  31.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  31.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  31.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  31.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 362, False: 30.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    362|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    362|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    362|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    362|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    362|    }                                                  \
  |  |  |  | 3957|  31.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  30.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4628|  30.7k|                detail::internal_skip_classic_whitespace(ctx.range(), false));
 4629|  30.7k|        ctx.advance_to(SCN_MOVE(it));
  ------------------
  |  | 1108|  30.7k|    static_cast<    \
  |  | 1109|  30.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4630|  30.7k|    }
 4631|       |
 4632|      0|    auto r = detail::tm_reader<T, typename Context::range_type, CharT>(
 4633|  30.7k|        ctx.range(), t, ctx.locale());
 4634|  30.7k|    detail::parse_chrono_format_specs(fmt.data(), fmt.data() + fmt.size(), r);
 4635|  30.7k|    if (auto e = r.get_error(); SCN_UNLIKELY(!e)) {
  ------------------
  |  | 1039|  30.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 23.6k, False: 7.13k]
  |  |  ------------------
  ------------------
 4636|  23.6k|        return unexpected(e.error());
 4637|  23.6k|    }
 4638|  7.13k|    return r.get_iterator();
 4639|  30.7k|}
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEC2ESA_RS3_NS1_10locale_refE:
 3769|  30.7k|        : m_range(SCN_MOVE(r)),
  ------------------
  |  | 1108|  30.7k|    static_cast<    \
  |  | 1109|  30.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3770|  30.7k|          m_begin(ranges::begin(m_range)),
 3771|  30.7k|          m_tm(t),
 3772|  30.7k|          m_loc(loc)
 3773|  30.7k|    {
 3774|  30.7k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE8on_errorEPKc:
 4420|  23.0k|    {
 4421|  23.0k|        set_error({scan_error::invalid_format_string, msg});
 4422|  23.0k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE9set_errorENS0_10scan_errorE:
 4425|   101k|    {
 4426|   101k|        if (m_error.has_value()) {
  ------------------
  |  Branch (4426:13): [True: 23.6k, False: 78.1k]
  ------------------
 4427|  23.6k|            m_error = unexpected(e);
 4428|  23.6k|        }
 4429|   101k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE7on_textES9_S9_:
 3777|  30.3k|    {
 3778|  37.5k|        while (beg != end) {
  ------------------
  |  Branch (3778:16): [True: 30.3k, False: 7.18k]
  ------------------
 3779|  30.3k|            if (m_begin == ranges::end(m_range)) {
  ------------------
  |  Branch (3779:17): [True: 118, False: 30.2k]
  ------------------
 3780|    118|                return set_error({scan_error::end_of_input, "EOF"});
 3781|    118|            }
 3782|  30.2k|            if (*beg != *m_begin) {
  ------------------
  |  Branch (3782:17): [True: 23.0k, False: 7.18k]
  ------------------
 3783|  23.0k|                return on_error("Invalid literal character");
 3784|  23.0k|            }
 3785|  7.18k|            ++beg;
 3786|  7.18k|            ++m_begin;
 3787|  7.18k|        }
 3788|  30.3k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE12on_full_yearENS1_14numeric_systemE:
 3807|  6.78k|    {
 3808|  6.78k|#if !SCN_DISABLE_LOCALE
 3809|  6.78k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3809:13): [True: 0, False: 6.78k]
  |  Branch (3809:31): [True: 0, False: 0]
  ------------------
 3810|      0|            if (auto t = read_localized("%EY", L"%EY")) {
  ------------------
  |  Branch (3810:22): [True: 0, False: 0]
  ------------------
 3811|      0|                setter::set_full_year(*this, m_tm, m_st, t->tm_year + 1900);
 3812|      0|            }
 3813|      0|            return;
 3814|      0|        }
 3815|  6.78k|#endif
 3816|       |
 3817|  6.78k|        int yr = read_classic_unsigned_integer(4, 4);
 3818|  6.78k|        setter::set_full_year(*this, m_tm, m_st, yr);
 3819|  6.78k|    }
_ZN3scn2v46detail15datetime_setterI2tmE13set_full_yearINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwSD_EEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 3280|  6.78k|    {
 3281|  6.78k|        if (SCN_UNLIKELY(y < std::numeric_limits<int>::min() + 1900)) {
  ------------------
  |  | 1039|  6.78k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 6.78k]
  |  |  ------------------
  ------------------
 3282|      0|            return h.set_error({scan_error::invalid_scanned_value,
 3283|      0|                                "Invalid value for tm_year"});
 3284|      0|        }
 3285|  6.78k|        t.tm_year = y - 1900;
 3286|  6.78k|        st.set_full_year(h);
 3287|  6.78k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE29read_classic_unsigned_integerEii:
 4443|  53.7k|    {
 4444|  53.7k|        int digits_read = 0;
 4445|  53.7k|        int accumulator = 0;
 4446|  69.1k|        while (m_begin != m_range.end()) {
  ------------------
  |  Branch (4446:16): [True: 68.8k, False: 260]
  ------------------
 4447|  68.8k|            const auto ch = *m_begin;
 4448|  68.8k|            if (ch < CharT{'0'} || ch > CharT{'9'}) {
  ------------------
  |  Branch (4448:17): [True: 29.9k, False: 38.8k]
  |  Branch (4448:36): [True: 21.0k, False: 17.8k]
  ------------------
 4449|  51.0k|                break;
 4450|  51.0k|            }
 4451|  17.8k|            ++m_begin;
 4452|  17.8k|            ++digits_read;
 4453|  17.8k|            accumulator = accumulator * 10 + static_cast<int>(ch - CharT{'0'});
 4454|  17.8k|            if (digits_read >= max_digits) {
  ------------------
  |  Branch (4454:17): [True: 2.44k, False: 15.3k]
  ------------------
 4455|  2.44k|                break;
 4456|  2.44k|            }
 4457|  17.8k|        }
 4458|  53.7k|        if (digits_read < min_digits) {
  ------------------
  |  Branch (4458:13): [True: 39.1k, False: 14.5k]
  ------------------
 4459|  39.1k|            set_error(scan_error{scan_error::invalid_scanned_value,
 4460|  39.1k|                                 "Too few integer digits"});
 4461|  39.1k|            return -1;
 4462|  39.1k|        }
 4463|  14.5k|        return accumulator;
 4464|  53.7k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE13on_short_yearENS1_14numeric_systemE:
 3821|  3.39k|    {
 3822|  3.39k|#if !SCN_DISABLE_LOCALE
 3823|  3.39k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3823:13): [True: 0, False: 3.39k]
  |  Branch (3823:31): [True: 0, False: 0]
  ------------------
 3824|      0|            if (auto t = read_localized("%Ey", L"%Ey")) {
  ------------------
  |  Branch (3824:22): [True: 0, False: 0]
  ------------------
 3825|      0|                setter::set_short_year(*this, m_tm, m_st,
 3826|      0|                                       (t->tm_year + 1900) % 100);
 3827|      0|            }
 3828|      0|            return;
 3829|      0|        }
 3830|  3.39k|#endif
 3831|       |
 3832|  3.39k|        int yr = read_classic_unsigned_integer(2, 2);
 3833|  3.39k|        setter::set_short_year(*this, m_tm, m_st, yr);
 3834|  3.39k|    }
_ZN3scn2v46detail15datetime_setterI2tmE14set_short_yearINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwSD_EEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 3297|  3.39k|    {
 3298|  3.39k|        if (SCN_UNLIKELY(y < 0 || y > 99)) {
  ------------------
  |  | 1039|  3.41k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 3.37k, False: 18]
  |  |  |  Branch (1039:45): [True: 3.37k, False: 18]
  |  |  |  Branch (1039:45): [True: 0, False: 18]
  |  |  ------------------
  ------------------
 3299|  3.37k|            return h.set_error({scan_error::invalid_scanned_value,
 3300|  3.37k|                                "Invalid value for tm_year"});
 3301|  3.37k|        }
 3302|     18|        st.short_year_value = y;
 3303|     18|        st.set_short_year(h);
 3304|     18|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE13on_month_nameEv:
 3864|  4.03k|    {
 3865|  4.03k|#if !SCN_DISABLE_FAST_FLOAT
 3866|  4.03k|        if (m_st.localized) {
  ------------------
  |  Branch (3866:13): [True: 0, False: 4.03k]
  ------------------
 3867|      0|            if (auto t = read_localized("%b", L"%b")) {
  ------------------
  |  Branch (3867:22): [True: 0, False: 0]
  ------------------
 3868|      0|                setter::set_mon(*this, m_tm, m_st, t->tm_mon + 1);
 3869|      0|            }
 3870|      0|            return;
 3871|      0|        }
 3872|  4.03k|#endif
 3873|       |
 3874|  4.03k|        std::array<std::pair<std::string_view, int>, 12> long_mapping = {{
 3875|  4.03k|            {"January", 1},
 3876|  4.03k|            {"February", 2},
 3877|  4.03k|            {"March", 3},
 3878|  4.03k|            {"April", 4},
 3879|  4.03k|            {"May", 5},
 3880|  4.03k|            {"June", 6},
 3881|  4.03k|            {"July", 7},
 3882|  4.03k|            {"August", 8},
 3883|  4.03k|            {"September", 9},
 3884|  4.03k|            {"October", 10},
 3885|  4.03k|            {"November", 11},
 3886|  4.03k|            {"December", 12},
 3887|  4.03k|        }};
 3888|  4.03k|        if (auto m = try_one_of_str_nocase(long_mapping)) {
  ------------------
  |  Branch (3888:18): [True: 22, False: 4.01k]
  ------------------
 3889|     22|            return setter::set_mon(*this, m_tm, m_st, *m);
 3890|     22|        }
 3891|  4.01k|        std::array<std::pair<std::string_view, int>, 11> short_mapping = {{
 3892|  4.01k|            {"Jan", 1},
 3893|  4.01k|            {"Feb", 2},
 3894|  4.01k|            {"Mar", 3},
 3895|  4.01k|            {"Apr", 4},
 3896|  4.01k|            {"Jun", 6},
 3897|  4.01k|            {"Jul", 7},
 3898|  4.01k|            {"Aug", 8},
 3899|  4.01k|            {"Sep", 9},
 3900|  4.01k|            {"Oct", 10},
 3901|  4.01k|            {"Nov", 11},
 3902|  4.01k|            {"Dec", 12},
 3903|  4.01k|        }};
 3904|  4.01k|        if (auto m = try_one_of_str_nocase(short_mapping)) {
  ------------------
  |  Branch (3904:18): [True: 648, False: 3.36k]
  ------------------
 3905|    648|            return setter::set_mon(*this, m_tm, m_st, *m);
 3906|    648|        }
 3907|  3.36k|        set_error({scan_error::invalid_scanned_value, "Invalid month name"});
 3908|  3.36k|    }
_ZN3scn2v46detail15datetime_setterI2tmE7set_monINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwSD_EEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 3270|  7.49k|    {
 3271|  7.49k|        if (SCN_UNLIKELY(m < 1 || m > 12)) {
  ------------------
  |  | 1039|  8.58k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 6.46k, False: 1.03k]
  |  |  |  Branch (1039:45): [True: 6.41k, False: 1.08k]
  |  |  |  Branch (1039:45): [True: 54, False: 1.03k]
  |  |  ------------------
  ------------------
 3272|  6.46k|            return h.set_error({scan_error::invalid_scanned_value,
 3273|  6.46k|                                "Invalid value for tm_mon"});
 3274|  6.46k|        }
 3275|  1.03k|        t.tm_mon = m - 1;
 3276|  1.03k|        st.set_mon(h);
 3277|  1.03k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE21try_one_of_str_nocaseIiLm12EEENSt3__18optionalIT_EERNSD_5arrayINSD_4pairINSD_17basic_string_viewIcNSD_11char_traitsIcEEEESF_EEXT0_EEE:
 4481|  4.03k|    {
 4482|  4.03k|        auto start_it = m_begin;
 4483|  4.03k|        std::size_t options_available = N;
 4484|  4.03k|        std::size_t chars_consumed = 0;
 4485|  10.1k|        while (options_available >= 1 &&
  ------------------
  |  Branch (4485:16): [True: 6.14k, False: 3.97k]
  ------------------
 4486|  10.1k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (4486:16): [True: 6.11k, False: 22]
  ------------------
 4487|  6.11k|            std::size_t i = 0;
 4488|  6.11k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (4488:17): [True: 42, False: 6.07k]
  ------------------
 4489|     42|                options_available = 0;
 4490|     42|                break;
 4491|     42|            }
 4492|  6.07k|            const auto ch = *m_begin;
 4493|  6.07k|            ++m_begin;
 4494|  57.9k|            while (i < options_available) {
  ------------------
  |  Branch (4494:20): [True: 51.8k, False: 6.07k]
  ------------------
 4495|  51.8k|                const auto cmp = static_cast<unsigned>(
 4496|  51.8k|                    ch ^ options[i].first[chars_consumed]);
 4497|  51.8k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (4497:21): [True: 0, False: 51.8k]
  ------------------
 4498|  51.8k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (4498:22): [True: 49.1k, False: 2.73k]
  |  Branch (4498:34): [True: 48.3k, False: 782]
  ------------------
 4499|  48.3k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 4500|  48.3k|                                options.end());
 4501|  48.3k|                    --options_available;
 4502|  48.3k|                    continue;
 4503|  48.3k|                }
 4504|  3.51k|                ++i;
 4505|  3.51k|            }
 4506|  6.07k|            ++chars_consumed;
 4507|  6.07k|        }
 4508|  4.03k|        if (options_available != 1) {
  ------------------
  |  Branch (4508:13): [True: 4.01k, False: 22]
  ------------------
 4509|  4.01k|            m_begin = start_it;
 4510|  4.01k|            return std::nullopt;
 4511|  4.01k|        }
 4512|     22|        return options.front().second;
 4513|  4.03k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE21try_one_of_str_nocaseIiLm11EEENSt3__18optionalIT_EERNSD_5arrayINSD_4pairINSD_17basic_string_viewIcNSD_11char_traitsIcEEEESF_EEXT0_EEE:
 4481|  4.01k|    {
 4482|  4.01k|        auto start_it = m_begin;
 4483|  4.01k|        std::size_t options_available = N;
 4484|  4.01k|        std::size_t chars_consumed = 0;
 4485|  9.39k|        while (options_available >= 1 &&
  ------------------
  |  Branch (4485:16): [True: 6.05k, False: 3.33k]
  ------------------
 4486|  9.39k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (4486:16): [True: 5.40k, False: 648]
  ------------------
 4487|  5.40k|            std::size_t i = 0;
 4488|  5.40k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (4488:17): [True: 30, False: 5.37k]
  ------------------
 4489|     30|                options_available = 0;
 4490|     30|                break;
 4491|     30|            }
 4492|  5.37k|            const auto ch = *m_begin;
 4493|  5.37k|            ++m_begin;
 4494|  50.9k|            while (i < options_available) {
  ------------------
  |  Branch (4494:20): [True: 45.5k, False: 5.37k]
  ------------------
 4495|  45.5k|                const auto cmp = static_cast<unsigned>(
 4496|  45.5k|                    ch ^ options[i].first[chars_consumed]);
 4497|  45.5k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (4497:21): [True: 0, False: 45.5k]
  ------------------
 4498|  45.5k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (4498:22): [True: 44.2k, False: 1.34k]
  |  Branch (4498:34): [True: 43.4k, False: 730]
  ------------------
 4499|  43.4k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 4500|  43.4k|                                options.end());
 4501|  43.4k|                    --options_available;
 4502|  43.4k|                    continue;
 4503|  43.4k|                }
 4504|  2.07k|                ++i;
 4505|  2.07k|            }
 4506|  5.37k|            ++chars_consumed;
 4507|  5.37k|        }
 4508|  4.01k|        if (options_available != 1) {
  ------------------
  |  Branch (4508:13): [True: 3.36k, False: 648]
  ------------------
 4509|  3.36k|            m_begin = start_it;
 4510|  3.36k|            return std::nullopt;
 4511|  3.36k|        }
 4512|    648|        return options.front().second;
 4513|  4.01k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE12on_dec_monthENS1_14numeric_systemE:
 3910|  6.82k|    {
 3911|  6.82k|#if !SCN_DISABLE_LOCALE
 3912|  6.82k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3912:13): [True: 0, False: 6.82k]
  |  Branch (3912:31): [True: 0, False: 0]
  ------------------
 3913|      0|            if (auto t = read_localized("%Om", L"%Om")) {
  ------------------
  |  Branch (3913:22): [True: 0, False: 0]
  ------------------
 3914|      0|                setter::set_mon(*this, m_tm, m_st, t->tm_mon + 1);
 3915|      0|            }
 3916|      0|            return;
 3917|      0|        }
 3918|  6.82k|#endif
 3919|       |
 3920|  6.82k|        int mon = read_classic_unsigned_integer(1, 2);
 3921|  6.82k|        setter::set_mon(*this, m_tm, m_st, mon);
 3922|  6.82k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE15on_day_of_monthENS1_14numeric_systemE:
 3942|  6.80k|    {
 3943|  6.80k|#if !SCN_DISABLE_LOCALE
 3944|  6.80k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3944:13): [True: 0, False: 6.80k]
  |  Branch (3944:31): [True: 0, False: 0]
  ------------------
 3945|      0|            if (auto t = read_localized("%Od", L"%Od")) {
  ------------------
  |  Branch (3945:22): [True: 0, False: 0]
  ------------------
 3946|      0|                setter::set_mday(*this, m_tm, m_st, t->tm_mday);
 3947|      0|            }
 3948|      0|            return;
 3949|      0|        }
 3950|  6.80k|#endif
 3951|       |
 3952|  6.80k|        int mday = read_classic_unsigned_integer(1, 2);
 3953|  6.80k|        setter::set_mday(*this, m_tm, m_st, mday);
 3954|  6.80k|    }
_ZN3scn2v46detail15datetime_setterI2tmE8set_mdayINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwSD_EEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 3260|  6.80k|    {
 3261|  6.80k|        if (SCN_UNLIKELY(d < 1 || d > 31)) {
  ------------------
  |  | 1039|  6.89k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 6.72k, False: 80]
  |  |  |  Branch (1039:45): [True: 6.71k, False: 90]
  |  |  |  Branch (1039:45): [True: 10, False: 80]
  |  |  ------------------
  ------------------
 3262|  6.72k|            return h.set_error({scan_error::invalid_scanned_value,
 3263|  6.72k|                                "Invalid value for tm_mday"});
 3264|  6.72k|        }
 3265|     80|        t.tm_mday = d;
 3266|     80|        st.set_mday(h);
 3267|     80|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE15on_weekday_nameEv:
 3957|  3.38k|    {
 3958|  3.38k|#if !SCN_DISABLE_LOCALE
 3959|  3.38k|        if (m_st.localized) {
  ------------------
  |  Branch (3959:13): [True: 0, False: 3.38k]
  ------------------
 3960|      0|            if (auto t = read_localized("%a", L"%a")) {
  ------------------
  |  Branch (3960:22): [True: 0, False: 0]
  ------------------
 3961|      0|                setter::set_wday(*this, m_tm, m_st, t->tm_wday);
 3962|      0|            }
 3963|      0|            return;
 3964|      0|        }
 3965|  3.38k|#endif
 3966|       |
 3967|  3.38k|        std::array<std::pair<std::string_view, int>, 7> long_mapping = {{
 3968|  3.38k|            {"Sunday", 0},
 3969|  3.38k|            {"Monday", 1},
 3970|  3.38k|            {"Tuesday", 2},
 3971|  3.38k|            {"Wednesday", 3},
 3972|  3.38k|            {"Thursday", 4},
 3973|  3.38k|            {"Friday", 5},
 3974|  3.38k|            {"Saturday", 6},
 3975|  3.38k|        }};
 3976|  3.38k|        if (auto d = try_one_of_str_nocase(long_mapping)) {
  ------------------
  |  Branch (3976:18): [True: 0, False: 3.38k]
  ------------------
 3977|      0|            return setter::set_wday(*this, m_tm, m_st, *d);
 3978|      0|        }
 3979|  3.38k|        std::array<std::pair<std::string_view, int>, 7> short_mapping = {{
 3980|  3.38k|            {"Sun", 0},
 3981|  3.38k|            {"Mon", 1},
 3982|  3.38k|            {"Tue", 2},
 3983|  3.38k|            {"Wed", 3},
 3984|  3.38k|            {"Thu", 4},
 3985|  3.38k|            {"Fri", 5},
 3986|  3.38k|            {"Sat", 6},
 3987|  3.38k|        }};
 3988|  3.38k|        if (auto d = try_one_of_str_nocase(short_mapping)) {
  ------------------
  |  Branch (3988:18): [True: 0, False: 3.38k]
  ------------------
 3989|      0|            return setter::set_wday(*this, m_tm, m_st, *d);
 3990|      0|        }
 3991|  3.38k|        return set_error(
 3992|  3.38k|            {scan_error::invalid_scanned_value, "Invalid weekday name"});
 3993|  3.38k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE21try_one_of_str_nocaseIiLm7EEENSt3__18optionalIT_EERNSD_5arrayINSD_4pairINSD_17basic_string_viewIcNSD_11char_traitsIcEEEESF_EEXT0_EEE:
 4481|  6.77k|    {
 4482|  6.77k|        auto start_it = m_begin;
 4483|  6.77k|        std::size_t options_available = N;
 4484|  6.77k|        std::size_t chars_consumed = 0;
 4485|  13.7k|        while (options_available >= 1 &&
  ------------------
  |  Branch (4485:16): [True: 6.96k, False: 6.75k]
  ------------------
 4486|  13.7k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (4486:16): [True: 6.96k, False: 0]
  ------------------
 4487|  6.96k|            std::size_t i = 0;
 4488|  6.96k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (4488:17): [True: 20, False: 6.94k]
  ------------------
 4489|     20|                options_available = 0;
 4490|     20|                break;
 4491|     20|            }
 4492|  6.94k|            const auto ch = *m_begin;
 4493|  6.94k|            ++m_begin;
 4494|  54.5k|            while (i < options_available) {
  ------------------
  |  Branch (4494:20): [True: 47.5k, False: 6.94k]
  ------------------
 4495|  47.5k|                const auto cmp = static_cast<unsigned>(
 4496|  47.5k|                    ch ^ options[i].first[chars_consumed]);
 4497|  47.5k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (4497:21): [True: 0, False: 47.5k]
  ------------------
 4498|  47.5k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (4498:22): [True: 47.3k, False: 196]
  |  Branch (4498:34): [True: 47.3k, False: 16]
  ------------------
 4499|  47.3k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 4500|  47.3k|                                options.end());
 4501|  47.3k|                    --options_available;
 4502|  47.3k|                    continue;
 4503|  47.3k|                }
 4504|    212|                ++i;
 4505|    212|            }
 4506|  6.94k|            ++chars_consumed;
 4507|  6.94k|        }
 4508|  6.77k|        if (options_available != 1) {
  ------------------
  |  Branch (4508:13): [True: 6.77k, False: 0]
  ------------------
 4509|  6.77k|            m_begin = start_it;
 4510|  6.77k|            return std::nullopt;
 4511|  6.77k|        }
 4512|      0|        return options.front().second;
 4513|  6.77k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE10on_24_hourENS1_14numeric_systemE:
 4031|  13.1k|    {
 4032|  13.1k|#if !SCN_DISABLE_LOCALE
 4033|  13.1k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (4033:13): [True: 0, False: 13.1k]
  |  Branch (4033:31): [True: 0, False: 0]
  ------------------
 4034|      0|            if (auto t = read_localized("%OH", L"%OH")) {
  ------------------
  |  Branch (4034:22): [True: 0, False: 0]
  ------------------
 4035|      0|                setter::set_hour24(*this, m_tm, m_st, t->tm_hour);
 4036|      0|            }
 4037|      0|            return;
 4038|      0|        }
 4039|  13.1k|#endif
 4040|       |
 4041|  13.1k|        int hr = read_classic_unsigned_integer(1, 2);
 4042|  13.1k|        setter::set_hour24(*this, m_tm, m_st, hr);
 4043|  13.1k|    }
_ZN3scn2v46detail15datetime_setterI2tmE10set_hour24INS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwSD_EEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 3240|  13.1k|    {
 3241|  13.1k|        if (SCN_UNLIKELY(h < 0 || h > 23)) {
  ------------------
  |  | 1039|  20.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 6.34k, False: 6.83k]
  |  |  |  Branch (1039:45): [True: 6.26k, False: 6.91k]
  |  |  |  Branch (1039:45): [True: 82, False: 6.83k]
  |  |  ------------------
  ------------------
 3242|  6.34k|            return hdl.set_error({scan_error::invalid_scanned_value,
 3243|  6.34k|                                  "Invalid value for tm_hour"});
 3244|  6.34k|        }
 3245|  6.83k|        t.tm_hour = h;
 3246|  6.83k|        st.set_hour24(hdl);
 3247|  6.83k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE9on_minuteENS1_14numeric_systemE:
 4059|  13.1k|    {
 4060|  13.1k|#if !SCN_DISABLE_LOCALE
 4061|  13.1k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (4061:13): [True: 0, False: 13.1k]
  |  Branch (4061:31): [True: 0, False: 0]
  ------------------
 4062|      0|            if (auto t = read_localized("%OM", L"%OM")) {
  ------------------
  |  Branch (4062:22): [True: 0, False: 0]
  ------------------
 4063|      0|                setter::set_min(*this, m_tm, m_st, t->tm_min);
 4064|      0|            }
 4065|      0|            return;
 4066|      0|        }
 4067|  13.1k|#endif
 4068|       |
 4069|  13.1k|        int min = read_classic_unsigned_integer(1, 2);
 4070|  13.1k|        setter::set_min(*this, m_tm, m_st, min);
 4071|  13.1k|    }
_ZN3scn2v46detail15datetime_setterI2tmE7set_minINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwSD_EEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 3230|  13.1k|    {
 3231|  13.1k|        if (SCN_UNLIKELY(m < 0 || m > 59)) {
  ------------------
  |  | 1039|  19.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 6.37k, False: 6.79k]
  |  |  |  Branch (1039:45): [True: 6.36k, False: 6.80k]
  |  |  |  Branch (1039:45): [True: 12, False: 6.79k]
  |  |  ------------------
  ------------------
 3232|  6.37k|            return h.set_error({scan_error::invalid_scanned_value,
 3233|  6.37k|                                "Invalid value for tm_min"});
 3234|  6.37k|        }
 3235|  6.79k|        t.tm_min = m;
 3236|  6.79k|        st.set_min(h);
 3237|  6.79k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE9on_secondENS1_14numeric_systemE:
 4073|  3.58k|    {
 4074|  3.58k|#if !SCN_DISABLE_LOCALE
 4075|  3.58k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (4075:13): [True: 0, False: 3.58k]
  |  Branch (4075:31): [True: 0, False: 0]
  ------------------
 4076|      0|            if (auto t = read_localized("%OS", L"%OS")) {
  ------------------
  |  Branch (4076:22): [True: 0, False: 0]
  ------------------
 4077|      0|                setter::set_sec(*this, m_tm, m_st, t->tm_sec);
 4078|      0|            }
 4079|      0|            return;
 4080|      0|        }
 4081|  3.58k|#endif
 4082|       |
 4083|  3.58k|        int sec = read_classic_unsigned_integer(1, 2);
 4084|  3.58k|        setter::set_sec(*this, m_tm, m_st, sec);
 4085|  3.58k|    }
_ZN3scn2v46detail15datetime_setterI2tmE7set_secINS1_9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwSD_EEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 3220|  3.58k|    {
 3221|  3.58k|        if (SCN_UNLIKELY(s < 0 || s > 60)) {
  ------------------
  |  | 1039|  3.81k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 3.35k, False: 226]
  |  |  |  Branch (1039:45): [True: 3.35k, False: 228]
  |  |  |  Branch (1039:45): [True: 2, False: 226]
  |  |  ------------------
  ------------------
 3222|  3.35k|            return h.set_error({scan_error::invalid_scanned_value,
 3223|  3.35k|                                "Invalid value for tm_sec"});
 3224|  3.35k|        }
 3225|    226|        t.tm_sec = s;
 3226|    226|        st.set_sec(h);
 3227|    226|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE10on_us_dateEv:
 4315|  3.39k|    {
 4316|       |        // %m/%d/%y
 4317|  3.39k|        constexpr CharT slash = '/';
 4318|  3.39k|        on_dec_month();
 4319|  3.39k|        on_text(&slash, &slash + 1);
 4320|  3.39k|        on_day_of_month();
 4321|  3.39k|        on_text(&slash, &slash + 1);
 4322|  3.39k|        on_short_year();
 4323|  3.39k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE11on_iso_dateEv:
 4325|  3.39k|    {
 4326|       |        // %Y-%m-%d
 4327|  3.39k|        constexpr CharT dash = '-';
 4328|  3.39k|        on_full_year();
 4329|  3.39k|        on_text(&dash, &dash + 1);
 4330|  3.39k|        on_dec_month();
 4331|  3.39k|        on_text(&dash, &dash + 1);
 4332|  3.39k|        on_day_of_month();
 4333|  3.39k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE15on_24_hour_timeEv:
 4357|  9.58k|    {
 4358|       |        // %H:%M
 4359|  9.58k|        constexpr CharT colon = ':';
 4360|  9.58k|        on_24_hour();
 4361|  9.58k|        on_text(&colon, &colon + 1);
 4362|  9.58k|        on_minute();
 4363|  9.58k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE11on_iso_timeEv:
 4365|  3.58k|    {
 4366|       |        // %H:%M:%S
 4367|  3.58k|        constexpr CharT colon = ':';
 4368|  3.58k|        on_24_hour();
 4369|  3.58k|        on_text(&colon, &colon + 1);
 4370|  3.58k|        on_minute();
 4371|  3.58k|        on_text(&colon, &colon + 1);
 4372|  3.58k|        on_second();
 4373|  3.58k|    }
_ZN3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE6verifyEv:
 4404|  7.13k|    {
 4405|  7.13k|        m_st.verify(*this);
 4406|  7.13k|        if (m_st.am_pm_set && m_st.hour12_set) {
  ------------------
  |  Branch (4406:13): [True: 0, False: 7.13k]
  |  Branch (4406:31): [True: 0, False: 0]
  ------------------
 4407|      0|            setter::handle_am_pm(m_tm, m_st);
 4408|      0|        }
 4409|  7.13k|        if (!m_st.full_year_set && (m_st.short_year_set || m_st.century_set)) {
  ------------------
  |  Branch (4409:13): [True: 7.12k, False: 12]
  |  Branch (4409:37): [True: 10, False: 7.11k]
  |  Branch (4409:60): [True: 0, False: 7.11k]
  ------------------
 4410|     10|            setter::handle_short_year_and_century(m_tm, m_st);
 4411|     10|        }
 4412|  7.13k|    }
_ZNK3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE9get_errorEv:
 4415|  61.6k|    {
 4416|  61.6k|        return m_error;
 4417|  61.6k|    }
_ZNK3scn2v46detail9tm_readerINS0_10tm_with_tzENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE12get_iteratorEv:
 4432|  7.13k|    {
 4433|  7.13k|        return m_begin;
 4434|  7.13k|    }
_ZN3scn2v46detail22chrono_scan_inner_implIwNS0_19datetime_componentsENS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEENS0_13scan_expectedINT1_8iteratorEEENSt3__117basic_string_viewIT_NSB_11char_traitsISD_EEEERT0_RS8_:
 4625|  31.1k|{
 4626|  31.1k|    {
 4627|  31.1k|        SCN_TRY(it,
  ------------------
  |  | 3958|  31.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  31.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  31.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  31.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 362, False: 30.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    362|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    362|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    362|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    362|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    362|    }                                                  \
  |  |  |  | 3957|  31.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  30.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4628|  30.7k|                detail::internal_skip_classic_whitespace(ctx.range(), false));
 4629|  30.7k|        ctx.advance_to(SCN_MOVE(it));
  ------------------
  |  | 1108|  30.7k|    static_cast<    \
  |  | 1109|  30.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4630|  30.7k|    }
 4631|       |
 4632|      0|    auto r = detail::tm_reader<T, typename Context::range_type, CharT>(
 4633|  30.7k|        ctx.range(), t, ctx.locale());
 4634|  30.7k|    detail::parse_chrono_format_specs(fmt.data(), fmt.data() + fmt.size(), r);
 4635|  30.7k|    if (auto e = r.get_error(); SCN_UNLIKELY(!e)) {
  ------------------
  |  | 1039|  30.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 23.6k, False: 7.13k]
  |  |  ------------------
  ------------------
 4636|  23.6k|        return unexpected(e.error());
 4637|  23.6k|    }
 4638|  7.13k|    return r.get_iterator();
 4639|  30.7k|}
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwEC2ESC_RS3_NS1_10locale_refE:
 3769|  30.7k|        : m_range(SCN_MOVE(r)),
  ------------------
  |  | 1108|  30.7k|    static_cast<    \
  |  | 1109|  30.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3770|  30.7k|          m_begin(ranges::begin(m_range)),
 3771|  30.7k|          m_tm(t),
 3772|  30.7k|          m_loc(loc)
 3773|  30.7k|    {
 3774|  30.7k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE8on_errorEPKc:
 4420|  23.0k|    {
 4421|  23.0k|        set_error({scan_error::invalid_format_string, msg});
 4422|  23.0k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE9set_errorENS0_10scan_errorE:
 4425|  98.4k|    {
 4426|  98.4k|        if (m_error.has_value()) {
  ------------------
  |  Branch (4426:13): [True: 23.6k, False: 74.7k]
  ------------------
 4427|  23.6k|            m_error = unexpected(e);
 4428|  23.6k|        }
 4429|  98.4k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE7on_textEPKwSF_:
 3777|  30.3k|    {
 3778|  37.5k|        while (beg != end) {
  ------------------
  |  Branch (3778:16): [True: 30.3k, False: 7.18k]
  ------------------
 3779|  30.3k|            if (m_begin == ranges::end(m_range)) {
  ------------------
  |  Branch (3779:17): [True: 118, False: 30.2k]
  ------------------
 3780|    118|                return set_error({scan_error::end_of_input, "EOF"});
 3781|    118|            }
 3782|  30.2k|            if (*beg != *m_begin) {
  ------------------
  |  Branch (3782:17): [True: 23.0k, False: 7.18k]
  ------------------
 3783|  23.0k|                return on_error("Invalid literal character");
 3784|  23.0k|            }
 3785|  7.18k|            ++beg;
 3786|  7.18k|            ++m_begin;
 3787|  7.18k|        }
 3788|  30.3k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE12on_full_yearENS1_14numeric_systemE:
 3807|  6.78k|    {
 3808|  6.78k|#if !SCN_DISABLE_LOCALE
 3809|  6.78k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3809:13): [True: 0, False: 6.78k]
  |  Branch (3809:31): [True: 0, False: 0]
  ------------------
 3810|      0|            if (auto t = read_localized("%EY", L"%EY")) {
  ------------------
  |  Branch (3810:22): [True: 0, False: 0]
  ------------------
 3811|      0|                setter::set_full_year(*this, m_tm, m_st, t->tm_year + 1900);
 3812|      0|            }
 3813|      0|            return;
 3814|      0|        }
 3815|  6.78k|#endif
 3816|       |
 3817|  6.78k|        int yr = read_classic_unsigned_integer(4, 4);
 3818|  6.78k|        setter::set_full_year(*this, m_tm, m_st, yr);
 3819|  6.78k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE13set_full_yearINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 3458|  6.78k|    {
 3459|  6.78k|        t.year = y;
 3460|  6.78k|        st.set_full_year(h);
 3461|  6.78k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE29read_classic_unsigned_integerEii:
 4443|  53.7k|    {
 4444|  53.7k|        int digits_read = 0;
 4445|  53.7k|        int accumulator = 0;
 4446|  69.1k|        while (m_begin != m_range.end()) {
  ------------------
  |  Branch (4446:16): [True: 68.8k, False: 260]
  ------------------
 4447|  68.8k|            const auto ch = *m_begin;
 4448|  68.8k|            if (ch < CharT{'0'} || ch > CharT{'9'}) {
  ------------------
  |  Branch (4448:17): [True: 29.9k, False: 38.8k]
  |  Branch (4448:36): [True: 21.0k, False: 17.8k]
  ------------------
 4449|  51.0k|                break;
 4450|  51.0k|            }
 4451|  17.8k|            ++m_begin;
 4452|  17.8k|            ++digits_read;
 4453|  17.8k|            accumulator = accumulator * 10 + static_cast<int>(ch - CharT{'0'});
 4454|  17.8k|            if (digits_read >= max_digits) {
  ------------------
  |  Branch (4454:17): [True: 2.44k, False: 15.3k]
  ------------------
 4455|  2.44k|                break;
 4456|  2.44k|            }
 4457|  17.8k|        }
 4458|  53.7k|        if (digits_read < min_digits) {
  ------------------
  |  Branch (4458:13): [True: 39.1k, False: 14.5k]
  ------------------
 4459|  39.1k|            set_error(scan_error{scan_error::invalid_scanned_value,
 4460|  39.1k|                                 "Too few integer digits"});
 4461|  39.1k|            return -1;
 4462|  39.1k|        }
 4463|  14.5k|        return accumulator;
 4464|  53.7k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE13on_short_yearENS1_14numeric_systemE:
 3821|  3.39k|    {
 3822|  3.39k|#if !SCN_DISABLE_LOCALE
 3823|  3.39k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3823:13): [True: 0, False: 3.39k]
  |  Branch (3823:31): [True: 0, False: 0]
  ------------------
 3824|      0|            if (auto t = read_localized("%Ey", L"%Ey")) {
  ------------------
  |  Branch (3824:22): [True: 0, False: 0]
  ------------------
 3825|      0|                setter::set_short_year(*this, m_tm, m_st,
 3826|      0|                                       (t->tm_year + 1900) % 100);
 3827|      0|            }
 3828|      0|            return;
 3829|      0|        }
 3830|  3.39k|#endif
 3831|       |
 3832|  3.39k|        int yr = read_classic_unsigned_integer(2, 2);
 3833|  3.39k|        setter::set_short_year(*this, m_tm, m_st, yr);
 3834|  3.39k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE14set_short_yearINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 3481|  3.39k|    {
 3482|  3.39k|        if (!t.year) {
  ------------------
  |  Branch (3482:13): [True: 3.39k, False: 0]
  ------------------
 3483|  3.39k|            t.year = y;
 3484|  3.39k|        }
 3485|      0|        else {
 3486|      0|            t.year = *t.year + y;
 3487|      0|        }
 3488|  3.39k|        st.set_short_year(h);
 3489|  3.39k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE13on_month_nameEv:
 3864|  4.03k|    {
 3865|  4.03k|#if !SCN_DISABLE_FAST_FLOAT
 3866|  4.03k|        if (m_st.localized) {
  ------------------
  |  Branch (3866:13): [True: 0, False: 4.03k]
  ------------------
 3867|      0|            if (auto t = read_localized("%b", L"%b")) {
  ------------------
  |  Branch (3867:22): [True: 0, False: 0]
  ------------------
 3868|      0|                setter::set_mon(*this, m_tm, m_st, t->tm_mon + 1);
 3869|      0|            }
 3870|      0|            return;
 3871|      0|        }
 3872|  4.03k|#endif
 3873|       |
 3874|  4.03k|        std::array<std::pair<std::string_view, int>, 12> long_mapping = {{
 3875|  4.03k|            {"January", 1},
 3876|  4.03k|            {"February", 2},
 3877|  4.03k|            {"March", 3},
 3878|  4.03k|            {"April", 4},
 3879|  4.03k|            {"May", 5},
 3880|  4.03k|            {"June", 6},
 3881|  4.03k|            {"July", 7},
 3882|  4.03k|            {"August", 8},
 3883|  4.03k|            {"September", 9},
 3884|  4.03k|            {"October", 10},
 3885|  4.03k|            {"November", 11},
 3886|  4.03k|            {"December", 12},
 3887|  4.03k|        }};
 3888|  4.03k|        if (auto m = try_one_of_str_nocase(long_mapping)) {
  ------------------
  |  Branch (3888:18): [True: 22, False: 4.01k]
  ------------------
 3889|     22|            return setter::set_mon(*this, m_tm, m_st, *m);
 3890|     22|        }
 3891|  4.01k|        std::array<std::pair<std::string_view, int>, 11> short_mapping = {{
 3892|  4.01k|            {"Jan", 1},
 3893|  4.01k|            {"Feb", 2},
 3894|  4.01k|            {"Mar", 3},
 3895|  4.01k|            {"Apr", 4},
 3896|  4.01k|            {"Jun", 6},
 3897|  4.01k|            {"Jul", 7},
 3898|  4.01k|            {"Aug", 8},
 3899|  4.01k|            {"Sep", 9},
 3900|  4.01k|            {"Oct", 10},
 3901|  4.01k|            {"Nov", 11},
 3902|  4.01k|            {"Dec", 12},
 3903|  4.01k|        }};
 3904|  4.01k|        if (auto m = try_one_of_str_nocase(short_mapping)) {
  ------------------
  |  Branch (3904:18): [True: 648, False: 3.36k]
  ------------------
 3905|    648|            return setter::set_mon(*this, m_tm, m_st, *m);
 3906|    648|        }
 3907|  3.36k|        set_error({scan_error::invalid_scanned_value, "Invalid month name"});
 3908|  3.36k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE7set_monINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 3445|  7.49k|    {
 3446|  7.49k|        if (SCN_UNLIKELY(m < 1 || m > 12)) {
  ------------------
  |  | 1039|  8.58k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 6.46k, False: 1.03k]
  |  |  |  Branch (1039:45): [True: 6.41k, False: 1.08k]
  |  |  |  Branch (1039:45): [True: 54, False: 1.03k]
  |  |  ------------------
  ------------------
 3447|  6.46k|            return h.set_error(
 3448|  6.46k|                {scan_error::invalid_scanned_value, "Invalid value for mon"});
 3449|  6.46k|        }
 3450|  1.03k|        t.mon = month{static_cast<unsigned>(m)};
 3451|  1.03k|        st.set_mon(h);
 3452|  1.03k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE21try_one_of_str_nocaseIiLm12EEENSt3__18optionalIT_EERNSF_5arrayINSF_4pairINSF_17basic_string_viewIcNSF_11char_traitsIcEEEESH_EEXT0_EEE:
 4481|  4.03k|    {
 4482|  4.03k|        auto start_it = m_begin;
 4483|  4.03k|        std::size_t options_available = N;
 4484|  4.03k|        std::size_t chars_consumed = 0;
 4485|  10.1k|        while (options_available >= 1 &&
  ------------------
  |  Branch (4485:16): [True: 6.14k, False: 3.97k]
  ------------------
 4486|  10.1k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (4486:16): [True: 6.11k, False: 22]
  ------------------
 4487|  6.11k|            std::size_t i = 0;
 4488|  6.11k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (4488:17): [True: 42, False: 6.07k]
  ------------------
 4489|     42|                options_available = 0;
 4490|     42|                break;
 4491|     42|            }
 4492|  6.07k|            const auto ch = *m_begin;
 4493|  6.07k|            ++m_begin;
 4494|  57.9k|            while (i < options_available) {
  ------------------
  |  Branch (4494:20): [True: 51.8k, False: 6.07k]
  ------------------
 4495|  51.8k|                const auto cmp = static_cast<unsigned>(
 4496|  51.8k|                    ch ^ options[i].first[chars_consumed]);
 4497|  51.8k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (4497:21): [True: 0, False: 51.8k]
  ------------------
 4498|  51.8k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (4498:22): [True: 49.1k, False: 2.73k]
  |  Branch (4498:34): [True: 48.3k, False: 782]
  ------------------
 4499|  48.3k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 4500|  48.3k|                                options.end());
 4501|  48.3k|                    --options_available;
 4502|  48.3k|                    continue;
 4503|  48.3k|                }
 4504|  3.51k|                ++i;
 4505|  3.51k|            }
 4506|  6.07k|            ++chars_consumed;
 4507|  6.07k|        }
 4508|  4.03k|        if (options_available != 1) {
  ------------------
  |  Branch (4508:13): [True: 4.01k, False: 22]
  ------------------
 4509|  4.01k|            m_begin = start_it;
 4510|  4.01k|            return std::nullopt;
 4511|  4.01k|        }
 4512|     22|        return options.front().second;
 4513|  4.03k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE21try_one_of_str_nocaseIiLm11EEENSt3__18optionalIT_EERNSF_5arrayINSF_4pairINSF_17basic_string_viewIcNSF_11char_traitsIcEEEESH_EEXT0_EEE:
 4481|  4.01k|    {
 4482|  4.01k|        auto start_it = m_begin;
 4483|  4.01k|        std::size_t options_available = N;
 4484|  4.01k|        std::size_t chars_consumed = 0;
 4485|  9.39k|        while (options_available >= 1 &&
  ------------------
  |  Branch (4485:16): [True: 6.05k, False: 3.33k]
  ------------------
 4486|  9.39k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (4486:16): [True: 5.40k, False: 648]
  ------------------
 4487|  5.40k|            std::size_t i = 0;
 4488|  5.40k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (4488:17): [True: 30, False: 5.37k]
  ------------------
 4489|     30|                options_available = 0;
 4490|     30|                break;
 4491|     30|            }
 4492|  5.37k|            const auto ch = *m_begin;
 4493|  5.37k|            ++m_begin;
 4494|  50.9k|            while (i < options_available) {
  ------------------
  |  Branch (4494:20): [True: 45.5k, False: 5.37k]
  ------------------
 4495|  45.5k|                const auto cmp = static_cast<unsigned>(
 4496|  45.5k|                    ch ^ options[i].first[chars_consumed]);
 4497|  45.5k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (4497:21): [True: 0, False: 45.5k]
  ------------------
 4498|  45.5k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (4498:22): [True: 44.2k, False: 1.34k]
  |  Branch (4498:34): [True: 43.4k, False: 730]
  ------------------
 4499|  43.4k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 4500|  43.4k|                                options.end());
 4501|  43.4k|                    --options_available;
 4502|  43.4k|                    continue;
 4503|  43.4k|                }
 4504|  2.07k|                ++i;
 4505|  2.07k|            }
 4506|  5.37k|            ++chars_consumed;
 4507|  5.37k|        }
 4508|  4.01k|        if (options_available != 1) {
  ------------------
  |  Branch (4508:13): [True: 3.36k, False: 648]
  ------------------
 4509|  3.36k|            m_begin = start_it;
 4510|  3.36k|            return std::nullopt;
 4511|  3.36k|        }
 4512|    648|        return options.front().second;
 4513|  4.01k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE12on_dec_monthENS1_14numeric_systemE:
 3910|  6.82k|    {
 3911|  6.82k|#if !SCN_DISABLE_LOCALE
 3912|  6.82k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3912:13): [True: 0, False: 6.82k]
  |  Branch (3912:31): [True: 0, False: 0]
  ------------------
 3913|      0|            if (auto t = read_localized("%Om", L"%Om")) {
  ------------------
  |  Branch (3913:22): [True: 0, False: 0]
  ------------------
 3914|      0|                setter::set_mon(*this, m_tm, m_st, t->tm_mon + 1);
 3915|      0|            }
 3916|      0|            return;
 3917|      0|        }
 3918|  6.82k|#endif
 3919|       |
 3920|  6.82k|        int mon = read_classic_unsigned_integer(1, 2);
 3921|  6.82k|        setter::set_mon(*this, m_tm, m_st, mon);
 3922|  6.82k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE15on_day_of_monthENS1_14numeric_systemE:
 3942|  6.80k|    {
 3943|  6.80k|#if !SCN_DISABLE_LOCALE
 3944|  6.80k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3944:13): [True: 0, False: 6.80k]
  |  Branch (3944:31): [True: 0, False: 0]
  ------------------
 3945|      0|            if (auto t = read_localized("%Od", L"%Od")) {
  ------------------
  |  Branch (3945:22): [True: 0, False: 0]
  ------------------
 3946|      0|                setter::set_mday(*this, m_tm, m_st, t->tm_mday);
 3947|      0|            }
 3948|      0|            return;
 3949|      0|        }
 3950|  6.80k|#endif
 3951|       |
 3952|  6.80k|        int mday = read_classic_unsigned_integer(1, 2);
 3953|  6.80k|        setter::set_mday(*this, m_tm, m_st, mday);
 3954|  6.80k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE8set_mdayINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 3432|  6.80k|    {
 3433|  6.80k|        if (SCN_UNLIKELY(d < 1 || d > 31)) {
  ------------------
  |  | 1039|  6.89k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 6.72k, False: 80]
  |  |  |  Branch (1039:45): [True: 6.71k, False: 90]
  |  |  |  Branch (1039:45): [True: 10, False: 80]
  |  |  ------------------
  ------------------
 3434|  6.72k|            return h.set_error(
 3435|  6.72k|                {scan_error::invalid_scanned_value, "Invalid value for mday"});
 3436|  6.72k|        }
 3437|     80|        t.mday = d;
 3438|     80|        st.set_mday(h);
 3439|     80|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE15on_weekday_nameEv:
 3957|  3.38k|    {
 3958|  3.38k|#if !SCN_DISABLE_LOCALE
 3959|  3.38k|        if (m_st.localized) {
  ------------------
  |  Branch (3959:13): [True: 0, False: 3.38k]
  ------------------
 3960|      0|            if (auto t = read_localized("%a", L"%a")) {
  ------------------
  |  Branch (3960:22): [True: 0, False: 0]
  ------------------
 3961|      0|                setter::set_wday(*this, m_tm, m_st, t->tm_wday);
 3962|      0|            }
 3963|      0|            return;
 3964|      0|        }
 3965|  3.38k|#endif
 3966|       |
 3967|  3.38k|        std::array<std::pair<std::string_view, int>, 7> long_mapping = {{
 3968|  3.38k|            {"Sunday", 0},
 3969|  3.38k|            {"Monday", 1},
 3970|  3.38k|            {"Tuesday", 2},
 3971|  3.38k|            {"Wednesday", 3},
 3972|  3.38k|            {"Thursday", 4},
 3973|  3.38k|            {"Friday", 5},
 3974|  3.38k|            {"Saturday", 6},
 3975|  3.38k|        }};
 3976|  3.38k|        if (auto d = try_one_of_str_nocase(long_mapping)) {
  ------------------
  |  Branch (3976:18): [True: 0, False: 3.38k]
  ------------------
 3977|      0|            return setter::set_wday(*this, m_tm, m_st, *d);
 3978|      0|        }
 3979|  3.38k|        std::array<std::pair<std::string_view, int>, 7> short_mapping = {{
 3980|  3.38k|            {"Sun", 0},
 3981|  3.38k|            {"Mon", 1},
 3982|  3.38k|            {"Tue", 2},
 3983|  3.38k|            {"Wed", 3},
 3984|  3.38k|            {"Thu", 4},
 3985|  3.38k|            {"Fri", 5},
 3986|  3.38k|            {"Sat", 6},
 3987|  3.38k|        }};
 3988|  3.38k|        if (auto d = try_one_of_str_nocase(short_mapping)) {
  ------------------
  |  Branch (3988:18): [True: 0, False: 3.38k]
  ------------------
 3989|      0|            return setter::set_wday(*this, m_tm, m_st, *d);
 3990|      0|        }
 3991|  3.38k|        return set_error(
 3992|  3.38k|            {scan_error::invalid_scanned_value, "Invalid weekday name"});
 3993|  3.38k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE21try_one_of_str_nocaseIiLm7EEENSt3__18optionalIT_EERNSF_5arrayINSF_4pairINSF_17basic_string_viewIcNSF_11char_traitsIcEEEESH_EEXT0_EEE:
 4481|  6.77k|    {
 4482|  6.77k|        auto start_it = m_begin;
 4483|  6.77k|        std::size_t options_available = N;
 4484|  6.77k|        std::size_t chars_consumed = 0;
 4485|  13.7k|        while (options_available >= 1 &&
  ------------------
  |  Branch (4485:16): [True: 6.96k, False: 6.75k]
  ------------------
 4486|  13.7k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (4486:16): [True: 6.96k, False: 0]
  ------------------
 4487|  6.96k|            std::size_t i = 0;
 4488|  6.96k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (4488:17): [True: 20, False: 6.94k]
  ------------------
 4489|     20|                options_available = 0;
 4490|     20|                break;
 4491|     20|            }
 4492|  6.94k|            const auto ch = *m_begin;
 4493|  6.94k|            ++m_begin;
 4494|  54.5k|            while (i < options_available) {
  ------------------
  |  Branch (4494:20): [True: 47.5k, False: 6.94k]
  ------------------
 4495|  47.5k|                const auto cmp = static_cast<unsigned>(
 4496|  47.5k|                    ch ^ options[i].first[chars_consumed]);
 4497|  47.5k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (4497:21): [True: 0, False: 47.5k]
  ------------------
 4498|  47.5k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (4498:22): [True: 47.3k, False: 196]
  |  Branch (4498:34): [True: 47.3k, False: 16]
  ------------------
 4499|  47.3k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 4500|  47.3k|                                options.end());
 4501|  47.3k|                    --options_available;
 4502|  47.3k|                    continue;
 4503|  47.3k|                }
 4504|    212|                ++i;
 4505|    212|            }
 4506|  6.94k|            ++chars_consumed;
 4507|  6.94k|        }
 4508|  6.77k|        if (options_available != 1) {
  ------------------
  |  Branch (4508:13): [True: 6.77k, False: 0]
  ------------------
 4509|  6.77k|            m_begin = start_it;
 4510|  6.77k|            return std::nullopt;
 4511|  6.77k|        }
 4512|      0|        return options.front().second;
 4513|  6.77k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE10on_24_hourENS1_14numeric_systemE:
 4031|  13.1k|    {
 4032|  13.1k|#if !SCN_DISABLE_LOCALE
 4033|  13.1k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (4033:13): [True: 0, False: 13.1k]
  |  Branch (4033:31): [True: 0, False: 0]
  ------------------
 4034|      0|            if (auto t = read_localized("%OH", L"%OH")) {
  ------------------
  |  Branch (4034:22): [True: 0, False: 0]
  ------------------
 4035|      0|                setter::set_hour24(*this, m_tm, m_st, t->tm_hour);
 4036|      0|            }
 4037|      0|            return;
 4038|      0|        }
 4039|  13.1k|#endif
 4040|       |
 4041|  13.1k|        int hr = read_classic_unsigned_integer(1, 2);
 4042|  13.1k|        setter::set_hour24(*this, m_tm, m_st, hr);
 4043|  13.1k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE10set_hour24INS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 3406|  13.1k|    {
 3407|  13.1k|        if (SCN_UNLIKELY(h < 0 || h > 23)) {
  ------------------
  |  | 1039|  20.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 6.34k, False: 6.83k]
  |  |  |  Branch (1039:45): [True: 6.26k, False: 6.91k]
  |  |  |  Branch (1039:45): [True: 82, False: 6.83k]
  |  |  ------------------
  ------------------
 3408|  6.34k|            return hdl.set_error(
 3409|  6.34k|                {scan_error::invalid_scanned_value, "Invalid value for hours"});
 3410|  6.34k|        }
 3411|  6.83k|        t.hour = h;
 3412|  6.83k|        st.set_hour24(hdl);
 3413|  6.83k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE9on_minuteENS1_14numeric_systemE:
 4059|  13.1k|    {
 4060|  13.1k|#if !SCN_DISABLE_LOCALE
 4061|  13.1k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (4061:13): [True: 0, False: 13.1k]
  |  Branch (4061:31): [True: 0, False: 0]
  ------------------
 4062|      0|            if (auto t = read_localized("%OM", L"%OM")) {
  ------------------
  |  Branch (4062:22): [True: 0, False: 0]
  ------------------
 4063|      0|                setter::set_min(*this, m_tm, m_st, t->tm_min);
 4064|      0|            }
 4065|      0|            return;
 4066|      0|        }
 4067|  13.1k|#endif
 4068|       |
 4069|  13.1k|        int min = read_classic_unsigned_integer(1, 2);
 4070|  13.1k|        setter::set_min(*this, m_tm, m_st, min);
 4071|  13.1k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE7set_minINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 3393|  13.1k|    {
 3394|  13.1k|        if (SCN_UNLIKELY(m < 0 || m > 59)) {
  ------------------
  |  | 1039|  19.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 6.37k, False: 6.79k]
  |  |  |  Branch (1039:45): [True: 6.36k, False: 6.80k]
  |  |  |  Branch (1039:45): [True: 12, False: 6.79k]
  |  |  ------------------
  ------------------
 3395|  6.37k|            return h.set_error({scan_error::invalid_scanned_value,
 3396|  6.37k|                                "Invalid value for minutes"});
 3397|  6.37k|        }
 3398|  6.79k|        t.min = m;
 3399|  6.79k|        st.set_min(h);
 3400|  6.79k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE9on_secondENS1_14numeric_systemE:
 4073|  3.58k|    {
 4074|  3.58k|#if !SCN_DISABLE_LOCALE
 4075|  3.58k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (4075:13): [True: 0, False: 3.58k]
  |  Branch (4075:31): [True: 0, False: 0]
  ------------------
 4076|      0|            if (auto t = read_localized("%OS", L"%OS")) {
  ------------------
  |  Branch (4076:22): [True: 0, False: 0]
  ------------------
 4077|      0|                setter::set_sec(*this, m_tm, m_st, t->tm_sec);
 4078|      0|            }
 4079|      0|            return;
 4080|      0|        }
 4081|  3.58k|#endif
 4082|       |
 4083|  3.58k|        int sec = read_classic_unsigned_integer(1, 2);
 4084|  3.58k|        setter::set_sec(*this, m_tm, m_st, sec);
 4085|  3.58k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE7set_secINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 3380|  3.58k|    {
 3381|  3.58k|        if (SCN_UNLIKELY(s < 0 || s > 60)) {
  ------------------
  |  | 1039|  3.81k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 3.35k, False: 226]
  |  |  |  Branch (1039:45): [True: 3.35k, False: 228]
  |  |  |  Branch (1039:45): [True: 2, False: 226]
  |  |  ------------------
  ------------------
 3382|  3.35k|            return h.set_error({scan_error::invalid_scanned_value,
 3383|  3.35k|                                "Invalid value for seconds"});
 3384|  3.35k|        }
 3385|    226|        t.sec = s;
 3386|    226|        st.set_sec(h);
 3387|    226|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE10on_us_dateEv:
 4315|  3.39k|    {
 4316|       |        // %m/%d/%y
 4317|  3.39k|        constexpr CharT slash = '/';
 4318|  3.39k|        on_dec_month();
 4319|  3.39k|        on_text(&slash, &slash + 1);
 4320|  3.39k|        on_day_of_month();
 4321|  3.39k|        on_text(&slash, &slash + 1);
 4322|  3.39k|        on_short_year();
 4323|  3.39k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE11on_iso_dateEv:
 4325|  3.39k|    {
 4326|       |        // %Y-%m-%d
 4327|  3.39k|        constexpr CharT dash = '-';
 4328|  3.39k|        on_full_year();
 4329|  3.39k|        on_text(&dash, &dash + 1);
 4330|  3.39k|        on_dec_month();
 4331|  3.39k|        on_text(&dash, &dash + 1);
 4332|  3.39k|        on_day_of_month();
 4333|  3.39k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE15on_24_hour_timeEv:
 4357|  9.58k|    {
 4358|       |        // %H:%M
 4359|  9.58k|        constexpr CharT colon = ':';
 4360|  9.58k|        on_24_hour();
 4361|  9.58k|        on_text(&colon, &colon + 1);
 4362|  9.58k|        on_minute();
 4363|  9.58k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE11on_iso_timeEv:
 4365|  3.58k|    {
 4366|       |        // %H:%M:%S
 4367|  3.58k|        constexpr CharT colon = ':';
 4368|  3.58k|        on_24_hour();
 4369|  3.58k|        on_text(&colon, &colon + 1);
 4370|  3.58k|        on_minute();
 4371|  3.58k|        on_text(&colon, &colon + 1);
 4372|  3.58k|        on_second();
 4373|  3.58k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE6verifyEv:
 4404|  7.13k|    {
 4405|  7.13k|        m_st.verify(*this);
 4406|  7.13k|        if (m_st.am_pm_set && m_st.hour12_set) {
  ------------------
  |  Branch (4406:13): [True: 0, False: 7.13k]
  |  Branch (4406:31): [True: 0, False: 0]
  ------------------
 4407|      0|            setter::handle_am_pm(m_tm, m_st);
 4408|      0|        }
 4409|  7.13k|        if (!m_st.full_year_set && (m_st.short_year_set || m_st.century_set)) {
  ------------------
  |  Branch (4409:13): [True: 7.12k, False: 12]
  |  Branch (4409:37): [True: 10, False: 7.11k]
  |  Branch (4409:60): [True: 0, False: 7.11k]
  ------------------
 4410|     10|            setter::handle_short_year_and_century(m_tm, m_st);
 4411|     10|        }
 4412|  7.13k|    }
_ZNK3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE9get_errorEv:
 4415|  61.6k|    {
 4416|  61.6k|        return m_error;
 4417|  61.6k|    }
_ZNK3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeINS1_17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tEEEwE12get_iteratorEv:
 4432|  7.13k|    {
 4433|  7.13k|        return m_begin;
 4434|  7.13k|    }
_ZN3scn2v46detail22chrono_scan_inner_implIwNS0_19datetime_componentsENS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEEEENS0_13scan_expectedINT1_8iteratorEEENSt3__117basic_string_viewIT_NSH_11char_traitsISJ_EEEERT0_RSE_:
 4625|  31.1k|{
 4626|  31.1k|    {
 4627|  31.1k|        SCN_TRY(it,
  ------------------
  |  | 3958|  31.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  31.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  31.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  31.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 362, False: 30.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    362|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    362|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    362|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    362|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    362|    }                                                  \
  |  |  |  | 3957|  31.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  30.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4628|  30.7k|                detail::internal_skip_classic_whitespace(ctx.range(), false));
 4629|  30.7k|        ctx.advance_to(SCN_MOVE(it));
  ------------------
  |  | 1108|  30.7k|    static_cast<    \
  |  | 1109|  30.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4630|  30.7k|    }
 4631|       |
 4632|      0|    auto r = detail::tm_reader<T, typename Context::range_type, CharT>(
 4633|  30.7k|        ctx.range(), t, ctx.locale());
 4634|  30.7k|    detail::parse_chrono_format_specs(fmt.data(), fmt.data() + fmt.size(), r);
 4635|  30.7k|    if (auto e = r.get_error(); SCN_UNLIKELY(!e)) {
  ------------------
  |  | 1039|  30.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 23.6k, False: 7.13k]
  |  |  ------------------
  ------------------
 4636|  23.6k|        return unexpected(e.error());
 4637|  23.6k|    }
 4638|  7.13k|    return r.get_iterator();
 4639|  30.7k|}
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEC2ESA_RS3_NS1_10locale_refE:
 3769|  30.7k|        : m_range(SCN_MOVE(r)),
  ------------------
  |  | 1108|  30.7k|    static_cast<    \
  |  | 1109|  30.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3770|  30.7k|          m_begin(ranges::begin(m_range)),
 3771|  30.7k|          m_tm(t),
 3772|  30.7k|          m_loc(loc)
 3773|  30.7k|    {
 3774|  30.7k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE8on_errorEPKc:
 4420|  23.0k|    {
 4421|  23.0k|        set_error({scan_error::invalid_format_string, msg});
 4422|  23.0k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE9set_errorENS0_10scan_errorE:
 4425|  98.4k|    {
 4426|  98.4k|        if (m_error.has_value()) {
  ------------------
  |  Branch (4426:13): [True: 23.6k, False: 74.7k]
  ------------------
 4427|  23.6k|            m_error = unexpected(e);
 4428|  23.6k|        }
 4429|  98.4k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE7on_textES9_S9_:
 3777|  30.3k|    {
 3778|  37.5k|        while (beg != end) {
  ------------------
  |  Branch (3778:16): [True: 30.3k, False: 7.18k]
  ------------------
 3779|  30.3k|            if (m_begin == ranges::end(m_range)) {
  ------------------
  |  Branch (3779:17): [True: 118, False: 30.2k]
  ------------------
 3780|    118|                return set_error({scan_error::end_of_input, "EOF"});
 3781|    118|            }
 3782|  30.2k|            if (*beg != *m_begin) {
  ------------------
  |  Branch (3782:17): [True: 23.0k, False: 7.18k]
  ------------------
 3783|  23.0k|                return on_error("Invalid literal character");
 3784|  23.0k|            }
 3785|  7.18k|            ++beg;
 3786|  7.18k|            ++m_begin;
 3787|  7.18k|        }
 3788|  30.3k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE12on_full_yearENS1_14numeric_systemE:
 3807|  6.78k|    {
 3808|  6.78k|#if !SCN_DISABLE_LOCALE
 3809|  6.78k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3809:13): [True: 0, False: 6.78k]
  |  Branch (3809:31): [True: 0, False: 0]
  ------------------
 3810|      0|            if (auto t = read_localized("%EY", L"%EY")) {
  ------------------
  |  Branch (3810:22): [True: 0, False: 0]
  ------------------
 3811|      0|                setter::set_full_year(*this, m_tm, m_st, t->tm_year + 1900);
 3812|      0|            }
 3813|      0|            return;
 3814|      0|        }
 3815|  6.78k|#endif
 3816|       |
 3817|  6.78k|        int yr = read_classic_unsigned_integer(4, 4);
 3818|  6.78k|        setter::set_full_year(*this, m_tm, m_st, yr);
 3819|  6.78k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE13set_full_yearINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 3458|  6.78k|    {
 3459|  6.78k|        t.year = y;
 3460|  6.78k|        st.set_full_year(h);
 3461|  6.78k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE29read_classic_unsigned_integerEii:
 4443|  53.7k|    {
 4444|  53.7k|        int digits_read = 0;
 4445|  53.7k|        int accumulator = 0;
 4446|  69.1k|        while (m_begin != m_range.end()) {
  ------------------
  |  Branch (4446:16): [True: 68.8k, False: 260]
  ------------------
 4447|  68.8k|            const auto ch = *m_begin;
 4448|  68.8k|            if (ch < CharT{'0'} || ch > CharT{'9'}) {
  ------------------
  |  Branch (4448:17): [True: 29.9k, False: 38.8k]
  |  Branch (4448:36): [True: 21.0k, False: 17.8k]
  ------------------
 4449|  51.0k|                break;
 4450|  51.0k|            }
 4451|  17.8k|            ++m_begin;
 4452|  17.8k|            ++digits_read;
 4453|  17.8k|            accumulator = accumulator * 10 + static_cast<int>(ch - CharT{'0'});
 4454|  17.8k|            if (digits_read >= max_digits) {
  ------------------
  |  Branch (4454:17): [True: 2.44k, False: 15.3k]
  ------------------
 4455|  2.44k|                break;
 4456|  2.44k|            }
 4457|  17.8k|        }
 4458|  53.7k|        if (digits_read < min_digits) {
  ------------------
  |  Branch (4458:13): [True: 39.1k, False: 14.5k]
  ------------------
 4459|  39.1k|            set_error(scan_error{scan_error::invalid_scanned_value,
 4460|  39.1k|                                 "Too few integer digits"});
 4461|  39.1k|            return -1;
 4462|  39.1k|        }
 4463|  14.5k|        return accumulator;
 4464|  53.7k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE13on_short_yearENS1_14numeric_systemE:
 3821|  3.39k|    {
 3822|  3.39k|#if !SCN_DISABLE_LOCALE
 3823|  3.39k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3823:13): [True: 0, False: 3.39k]
  |  Branch (3823:31): [True: 0, False: 0]
  ------------------
 3824|      0|            if (auto t = read_localized("%Ey", L"%Ey")) {
  ------------------
  |  Branch (3824:22): [True: 0, False: 0]
  ------------------
 3825|      0|                setter::set_short_year(*this, m_tm, m_st,
 3826|      0|                                       (t->tm_year + 1900) % 100);
 3827|      0|            }
 3828|      0|            return;
 3829|      0|        }
 3830|  3.39k|#endif
 3831|       |
 3832|  3.39k|        int yr = read_classic_unsigned_integer(2, 2);
 3833|  3.39k|        setter::set_short_year(*this, m_tm, m_st, yr);
 3834|  3.39k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE14set_short_yearINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 3481|  3.39k|    {
 3482|  3.39k|        if (!t.year) {
  ------------------
  |  Branch (3482:13): [True: 3.39k, False: 0]
  ------------------
 3483|  3.39k|            t.year = y;
 3484|  3.39k|        }
 3485|      0|        else {
 3486|      0|            t.year = *t.year + y;
 3487|      0|        }
 3488|  3.39k|        st.set_short_year(h);
 3489|  3.39k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE13on_month_nameEv:
 3864|  4.03k|    {
 3865|  4.03k|#if !SCN_DISABLE_FAST_FLOAT
 3866|  4.03k|        if (m_st.localized) {
  ------------------
  |  Branch (3866:13): [True: 0, False: 4.03k]
  ------------------
 3867|      0|            if (auto t = read_localized("%b", L"%b")) {
  ------------------
  |  Branch (3867:22): [True: 0, False: 0]
  ------------------
 3868|      0|                setter::set_mon(*this, m_tm, m_st, t->tm_mon + 1);
 3869|      0|            }
 3870|      0|            return;
 3871|      0|        }
 3872|  4.03k|#endif
 3873|       |
 3874|  4.03k|        std::array<std::pair<std::string_view, int>, 12> long_mapping = {{
 3875|  4.03k|            {"January", 1},
 3876|  4.03k|            {"February", 2},
 3877|  4.03k|            {"March", 3},
 3878|  4.03k|            {"April", 4},
 3879|  4.03k|            {"May", 5},
 3880|  4.03k|            {"June", 6},
 3881|  4.03k|            {"July", 7},
 3882|  4.03k|            {"August", 8},
 3883|  4.03k|            {"September", 9},
 3884|  4.03k|            {"October", 10},
 3885|  4.03k|            {"November", 11},
 3886|  4.03k|            {"December", 12},
 3887|  4.03k|        }};
 3888|  4.03k|        if (auto m = try_one_of_str_nocase(long_mapping)) {
  ------------------
  |  Branch (3888:18): [True: 22, False: 4.01k]
  ------------------
 3889|     22|            return setter::set_mon(*this, m_tm, m_st, *m);
 3890|     22|        }
 3891|  4.01k|        std::array<std::pair<std::string_view, int>, 11> short_mapping = {{
 3892|  4.01k|            {"Jan", 1},
 3893|  4.01k|            {"Feb", 2},
 3894|  4.01k|            {"Mar", 3},
 3895|  4.01k|            {"Apr", 4},
 3896|  4.01k|            {"Jun", 6},
 3897|  4.01k|            {"Jul", 7},
 3898|  4.01k|            {"Aug", 8},
 3899|  4.01k|            {"Sep", 9},
 3900|  4.01k|            {"Oct", 10},
 3901|  4.01k|            {"Nov", 11},
 3902|  4.01k|            {"Dec", 12},
 3903|  4.01k|        }};
 3904|  4.01k|        if (auto m = try_one_of_str_nocase(short_mapping)) {
  ------------------
  |  Branch (3904:18): [True: 648, False: 3.36k]
  ------------------
 3905|    648|            return setter::set_mon(*this, m_tm, m_st, *m);
 3906|    648|        }
 3907|  3.36k|        set_error({scan_error::invalid_scanned_value, "Invalid month name"});
 3908|  3.36k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE7set_monINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 3445|  7.49k|    {
 3446|  7.49k|        if (SCN_UNLIKELY(m < 1 || m > 12)) {
  ------------------
  |  | 1039|  8.58k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 6.46k, False: 1.03k]
  |  |  |  Branch (1039:45): [True: 6.41k, False: 1.08k]
  |  |  |  Branch (1039:45): [True: 54, False: 1.03k]
  |  |  ------------------
  ------------------
 3447|  6.46k|            return h.set_error(
 3448|  6.46k|                {scan_error::invalid_scanned_value, "Invalid value for mon"});
 3449|  6.46k|        }
 3450|  1.03k|        t.mon = month{static_cast<unsigned>(m)};
 3451|  1.03k|        st.set_mon(h);
 3452|  1.03k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE21try_one_of_str_nocaseIiLm12EEENSt3__18optionalIT_EERNSD_5arrayINSD_4pairINSD_17basic_string_viewIcNSD_11char_traitsIcEEEESF_EEXT0_EEE:
 4481|  4.03k|    {
 4482|  4.03k|        auto start_it = m_begin;
 4483|  4.03k|        std::size_t options_available = N;
 4484|  4.03k|        std::size_t chars_consumed = 0;
 4485|  10.1k|        while (options_available >= 1 &&
  ------------------
  |  Branch (4485:16): [True: 6.14k, False: 3.97k]
  ------------------
 4486|  10.1k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (4486:16): [True: 6.11k, False: 22]
  ------------------
 4487|  6.11k|            std::size_t i = 0;
 4488|  6.11k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (4488:17): [True: 42, False: 6.07k]
  ------------------
 4489|     42|                options_available = 0;
 4490|     42|                break;
 4491|     42|            }
 4492|  6.07k|            const auto ch = *m_begin;
 4493|  6.07k|            ++m_begin;
 4494|  57.9k|            while (i < options_available) {
  ------------------
  |  Branch (4494:20): [True: 51.8k, False: 6.07k]
  ------------------
 4495|  51.8k|                const auto cmp = static_cast<unsigned>(
 4496|  51.8k|                    ch ^ options[i].first[chars_consumed]);
 4497|  51.8k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (4497:21): [True: 0, False: 51.8k]
  ------------------
 4498|  51.8k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (4498:22): [True: 49.1k, False: 2.73k]
  |  Branch (4498:34): [True: 48.3k, False: 782]
  ------------------
 4499|  48.3k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 4500|  48.3k|                                options.end());
 4501|  48.3k|                    --options_available;
 4502|  48.3k|                    continue;
 4503|  48.3k|                }
 4504|  3.51k|                ++i;
 4505|  3.51k|            }
 4506|  6.07k|            ++chars_consumed;
 4507|  6.07k|        }
 4508|  4.03k|        if (options_available != 1) {
  ------------------
  |  Branch (4508:13): [True: 4.01k, False: 22]
  ------------------
 4509|  4.01k|            m_begin = start_it;
 4510|  4.01k|            return std::nullopt;
 4511|  4.01k|        }
 4512|     22|        return options.front().second;
 4513|  4.03k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE21try_one_of_str_nocaseIiLm11EEENSt3__18optionalIT_EERNSD_5arrayINSD_4pairINSD_17basic_string_viewIcNSD_11char_traitsIcEEEESF_EEXT0_EEE:
 4481|  4.01k|    {
 4482|  4.01k|        auto start_it = m_begin;
 4483|  4.01k|        std::size_t options_available = N;
 4484|  4.01k|        std::size_t chars_consumed = 0;
 4485|  9.39k|        while (options_available >= 1 &&
  ------------------
  |  Branch (4485:16): [True: 6.05k, False: 3.33k]
  ------------------
 4486|  9.39k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (4486:16): [True: 5.40k, False: 648]
  ------------------
 4487|  5.40k|            std::size_t i = 0;
 4488|  5.40k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (4488:17): [True: 30, False: 5.37k]
  ------------------
 4489|     30|                options_available = 0;
 4490|     30|                break;
 4491|     30|            }
 4492|  5.37k|            const auto ch = *m_begin;
 4493|  5.37k|            ++m_begin;
 4494|  50.9k|            while (i < options_available) {
  ------------------
  |  Branch (4494:20): [True: 45.5k, False: 5.37k]
  ------------------
 4495|  45.5k|                const auto cmp = static_cast<unsigned>(
 4496|  45.5k|                    ch ^ options[i].first[chars_consumed]);
 4497|  45.5k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (4497:21): [True: 0, False: 45.5k]
  ------------------
 4498|  45.5k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (4498:22): [True: 44.2k, False: 1.34k]
  |  Branch (4498:34): [True: 43.4k, False: 730]
  ------------------
 4499|  43.4k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 4500|  43.4k|                                options.end());
 4501|  43.4k|                    --options_available;
 4502|  43.4k|                    continue;
 4503|  43.4k|                }
 4504|  2.07k|                ++i;
 4505|  2.07k|            }
 4506|  5.37k|            ++chars_consumed;
 4507|  5.37k|        }
 4508|  4.01k|        if (options_available != 1) {
  ------------------
  |  Branch (4508:13): [True: 3.36k, False: 648]
  ------------------
 4509|  3.36k|            m_begin = start_it;
 4510|  3.36k|            return std::nullopt;
 4511|  3.36k|        }
 4512|    648|        return options.front().second;
 4513|  4.01k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE12on_dec_monthENS1_14numeric_systemE:
 3910|  6.82k|    {
 3911|  6.82k|#if !SCN_DISABLE_LOCALE
 3912|  6.82k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3912:13): [True: 0, False: 6.82k]
  |  Branch (3912:31): [True: 0, False: 0]
  ------------------
 3913|      0|            if (auto t = read_localized("%Om", L"%Om")) {
  ------------------
  |  Branch (3913:22): [True: 0, False: 0]
  ------------------
 3914|      0|                setter::set_mon(*this, m_tm, m_st, t->tm_mon + 1);
 3915|      0|            }
 3916|      0|            return;
 3917|      0|        }
 3918|  6.82k|#endif
 3919|       |
 3920|  6.82k|        int mon = read_classic_unsigned_integer(1, 2);
 3921|  6.82k|        setter::set_mon(*this, m_tm, m_st, mon);
 3922|  6.82k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE15on_day_of_monthENS1_14numeric_systemE:
 3942|  6.80k|    {
 3943|  6.80k|#if !SCN_DISABLE_LOCALE
 3944|  6.80k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (3944:13): [True: 0, False: 6.80k]
  |  Branch (3944:31): [True: 0, False: 0]
  ------------------
 3945|      0|            if (auto t = read_localized("%Od", L"%Od")) {
  ------------------
  |  Branch (3945:22): [True: 0, False: 0]
  ------------------
 3946|      0|                setter::set_mday(*this, m_tm, m_st, t->tm_mday);
 3947|      0|            }
 3948|      0|            return;
 3949|      0|        }
 3950|  6.80k|#endif
 3951|       |
 3952|  6.80k|        int mday = read_classic_unsigned_integer(1, 2);
 3953|  6.80k|        setter::set_mday(*this, m_tm, m_st, mday);
 3954|  6.80k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE8set_mdayINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 3432|  6.80k|    {
 3433|  6.80k|        if (SCN_UNLIKELY(d < 1 || d > 31)) {
  ------------------
  |  | 1039|  6.89k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 6.72k, False: 80]
  |  |  |  Branch (1039:45): [True: 6.71k, False: 90]
  |  |  |  Branch (1039:45): [True: 10, False: 80]
  |  |  ------------------
  ------------------
 3434|  6.72k|            return h.set_error(
 3435|  6.72k|                {scan_error::invalid_scanned_value, "Invalid value for mday"});
 3436|  6.72k|        }
 3437|     80|        t.mday = d;
 3438|     80|        st.set_mday(h);
 3439|     80|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE15on_weekday_nameEv:
 3957|  3.38k|    {
 3958|  3.38k|#if !SCN_DISABLE_LOCALE
 3959|  3.38k|        if (m_st.localized) {
  ------------------
  |  Branch (3959:13): [True: 0, False: 3.38k]
  ------------------
 3960|      0|            if (auto t = read_localized("%a", L"%a")) {
  ------------------
  |  Branch (3960:22): [True: 0, False: 0]
  ------------------
 3961|      0|                setter::set_wday(*this, m_tm, m_st, t->tm_wday);
 3962|      0|            }
 3963|      0|            return;
 3964|      0|        }
 3965|  3.38k|#endif
 3966|       |
 3967|  3.38k|        std::array<std::pair<std::string_view, int>, 7> long_mapping = {{
 3968|  3.38k|            {"Sunday", 0},
 3969|  3.38k|            {"Monday", 1},
 3970|  3.38k|            {"Tuesday", 2},
 3971|  3.38k|            {"Wednesday", 3},
 3972|  3.38k|            {"Thursday", 4},
 3973|  3.38k|            {"Friday", 5},
 3974|  3.38k|            {"Saturday", 6},
 3975|  3.38k|        }};
 3976|  3.38k|        if (auto d = try_one_of_str_nocase(long_mapping)) {
  ------------------
  |  Branch (3976:18): [True: 0, False: 3.38k]
  ------------------
 3977|      0|            return setter::set_wday(*this, m_tm, m_st, *d);
 3978|      0|        }
 3979|  3.38k|        std::array<std::pair<std::string_view, int>, 7> short_mapping = {{
 3980|  3.38k|            {"Sun", 0},
 3981|  3.38k|            {"Mon", 1},
 3982|  3.38k|            {"Tue", 2},
 3983|  3.38k|            {"Wed", 3},
 3984|  3.38k|            {"Thu", 4},
 3985|  3.38k|            {"Fri", 5},
 3986|  3.38k|            {"Sat", 6},
 3987|  3.38k|        }};
 3988|  3.38k|        if (auto d = try_one_of_str_nocase(short_mapping)) {
  ------------------
  |  Branch (3988:18): [True: 0, False: 3.38k]
  ------------------
 3989|      0|            return setter::set_wday(*this, m_tm, m_st, *d);
 3990|      0|        }
 3991|  3.38k|        return set_error(
 3992|  3.38k|            {scan_error::invalid_scanned_value, "Invalid weekday name"});
 3993|  3.38k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE21try_one_of_str_nocaseIiLm7EEENSt3__18optionalIT_EERNSD_5arrayINSD_4pairINSD_17basic_string_viewIcNSD_11char_traitsIcEEEESF_EEXT0_EEE:
 4481|  6.77k|    {
 4482|  6.77k|        auto start_it = m_begin;
 4483|  6.77k|        std::size_t options_available = N;
 4484|  6.77k|        std::size_t chars_consumed = 0;
 4485|  13.7k|        while (options_available >= 1 &&
  ------------------
  |  Branch (4485:16): [True: 6.96k, False: 6.75k]
  ------------------
 4486|  13.7k|               options.front().first.size() > chars_consumed) {
  ------------------
  |  Branch (4486:16): [True: 6.96k, False: 0]
  ------------------
 4487|  6.96k|            std::size_t i = 0;
 4488|  6.96k|            if (m_begin == m_range.end()) {
  ------------------
  |  Branch (4488:17): [True: 20, False: 6.94k]
  ------------------
 4489|     20|                options_available = 0;
 4490|     20|                break;
 4491|     20|            }
 4492|  6.94k|            const auto ch = *m_begin;
 4493|  6.94k|            ++m_begin;
 4494|  54.5k|            while (i < options_available) {
  ------------------
  |  Branch (4494:20): [True: 47.5k, False: 6.94k]
  ------------------
 4495|  47.5k|                const auto cmp = static_cast<unsigned>(
 4496|  47.5k|                    ch ^ options[i].first[chars_consumed]);
 4497|  47.5k|                if (options[i].first.size() <= chars_consumed ||
  ------------------
  |  Branch (4497:21): [True: 0, False: 47.5k]
  ------------------
 4498|  47.5k|                    (cmp != 0 && cmp != 32)) {
  ------------------
  |  Branch (4498:22): [True: 47.3k, False: 196]
  |  Branch (4498:34): [True: 47.3k, False: 16]
  ------------------
 4499|  47.3k|                    std::rotate(options.begin() + i, options.begin() + i + 1,
 4500|  47.3k|                                options.end());
 4501|  47.3k|                    --options_available;
 4502|  47.3k|                    continue;
 4503|  47.3k|                }
 4504|    212|                ++i;
 4505|    212|            }
 4506|  6.94k|            ++chars_consumed;
 4507|  6.94k|        }
 4508|  6.77k|        if (options_available != 1) {
  ------------------
  |  Branch (4508:13): [True: 6.77k, False: 0]
  ------------------
 4509|  6.77k|            m_begin = start_it;
 4510|  6.77k|            return std::nullopt;
 4511|  6.77k|        }
 4512|      0|        return options.front().second;
 4513|  6.77k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE10on_24_hourENS1_14numeric_systemE:
 4031|  13.1k|    {
 4032|  13.1k|#if !SCN_DISABLE_LOCALE
 4033|  13.1k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (4033:13): [True: 0, False: 13.1k]
  |  Branch (4033:31): [True: 0, False: 0]
  ------------------
 4034|      0|            if (auto t = read_localized("%OH", L"%OH")) {
  ------------------
  |  Branch (4034:22): [True: 0, False: 0]
  ------------------
 4035|      0|                setter::set_hour24(*this, m_tm, m_st, t->tm_hour);
 4036|      0|            }
 4037|      0|            return;
 4038|      0|        }
 4039|  13.1k|#endif
 4040|       |
 4041|  13.1k|        int hr = read_classic_unsigned_integer(1, 2);
 4042|  13.1k|        setter::set_hour24(*this, m_tm, m_st, hr);
 4043|  13.1k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE10set_hour24INS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 3406|  13.1k|    {
 3407|  13.1k|        if (SCN_UNLIKELY(h < 0 || h > 23)) {
  ------------------
  |  | 1039|  20.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 6.34k, False: 6.83k]
  |  |  |  Branch (1039:45): [True: 6.26k, False: 6.91k]
  |  |  |  Branch (1039:45): [True: 82, False: 6.83k]
  |  |  ------------------
  ------------------
 3408|  6.34k|            return hdl.set_error(
 3409|  6.34k|                {scan_error::invalid_scanned_value, "Invalid value for hours"});
 3410|  6.34k|        }
 3411|  6.83k|        t.hour = h;
 3412|  6.83k|        st.set_hour24(hdl);
 3413|  6.83k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE9on_minuteENS1_14numeric_systemE:
 4059|  13.1k|    {
 4060|  13.1k|#if !SCN_DISABLE_LOCALE
 4061|  13.1k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (4061:13): [True: 0, False: 13.1k]
  |  Branch (4061:31): [True: 0, False: 0]
  ------------------
 4062|      0|            if (auto t = read_localized("%OM", L"%OM")) {
  ------------------
  |  Branch (4062:22): [True: 0, False: 0]
  ------------------
 4063|      0|                setter::set_min(*this, m_tm, m_st, t->tm_min);
 4064|      0|            }
 4065|      0|            return;
 4066|      0|        }
 4067|  13.1k|#endif
 4068|       |
 4069|  13.1k|        int min = read_classic_unsigned_integer(1, 2);
 4070|  13.1k|        setter::set_min(*this, m_tm, m_st, min);
 4071|  13.1k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE7set_minINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 3393|  13.1k|    {
 3394|  13.1k|        if (SCN_UNLIKELY(m < 0 || m > 59)) {
  ------------------
  |  | 1039|  19.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 6.37k, False: 6.79k]
  |  |  |  Branch (1039:45): [True: 6.36k, False: 6.80k]
  |  |  |  Branch (1039:45): [True: 12, False: 6.79k]
  |  |  ------------------
  ------------------
 3395|  6.37k|            return h.set_error({scan_error::invalid_scanned_value,
 3396|  6.37k|                                "Invalid value for minutes"});
 3397|  6.37k|        }
 3398|  6.79k|        t.min = m;
 3399|  6.79k|        st.set_min(h);
 3400|  6.79k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE9on_secondENS1_14numeric_systemE:
 4073|  3.58k|    {
 4074|  3.58k|#if !SCN_DISABLE_LOCALE
 4075|  3.58k|        if (m_st.localized && sys != numeric_system::standard) {
  ------------------
  |  Branch (4075:13): [True: 0, False: 3.58k]
  |  Branch (4075:31): [True: 0, False: 0]
  ------------------
 4076|      0|            if (auto t = read_localized("%OS", L"%OS")) {
  ------------------
  |  Branch (4076:22): [True: 0, False: 0]
  ------------------
 4077|      0|                setter::set_sec(*this, m_tm, m_st, t->tm_sec);
 4078|      0|            }
 4079|      0|            return;
 4080|      0|        }
 4081|  3.58k|#endif
 4082|       |
 4083|  3.58k|        int sec = read_classic_unsigned_integer(1, 2);
 4084|  3.58k|        setter::set_sec(*this, m_tm, m_st, sec);
 4085|  3.58k|    }
_ZN3scn2v46detail15datetime_setterINS0_19datetime_componentsEE7set_secINS1_9tm_readerIS3_NS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEvRT_RS3_RNS1_12setter_stateEi:
 3380|  3.58k|    {
 3381|  3.58k|        if (SCN_UNLIKELY(s < 0 || s > 60)) {
  ------------------
  |  | 1039|  3.81k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 3.35k, False: 226]
  |  |  |  Branch (1039:45): [True: 3.35k, False: 228]
  |  |  |  Branch (1039:45): [True: 2, False: 226]
  |  |  ------------------
  ------------------
 3382|  3.35k|            return h.set_error({scan_error::invalid_scanned_value,
 3383|  3.35k|                                "Invalid value for seconds"});
 3384|  3.35k|        }
 3385|    226|        t.sec = s;
 3386|    226|        st.set_sec(h);
 3387|    226|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE10on_us_dateEv:
 4315|  3.39k|    {
 4316|       |        // %m/%d/%y
 4317|  3.39k|        constexpr CharT slash = '/';
 4318|  3.39k|        on_dec_month();
 4319|  3.39k|        on_text(&slash, &slash + 1);
 4320|  3.39k|        on_day_of_month();
 4321|  3.39k|        on_text(&slash, &slash + 1);
 4322|  3.39k|        on_short_year();
 4323|  3.39k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE11on_iso_dateEv:
 4325|  3.39k|    {
 4326|       |        // %Y-%m-%d
 4327|  3.39k|        constexpr CharT dash = '-';
 4328|  3.39k|        on_full_year();
 4329|  3.39k|        on_text(&dash, &dash + 1);
 4330|  3.39k|        on_dec_month();
 4331|  3.39k|        on_text(&dash, &dash + 1);
 4332|  3.39k|        on_day_of_month();
 4333|  3.39k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE15on_24_hour_timeEv:
 4357|  9.58k|    {
 4358|       |        // %H:%M
 4359|  9.58k|        constexpr CharT colon = ':';
 4360|  9.58k|        on_24_hour();
 4361|  9.58k|        on_text(&colon, &colon + 1);
 4362|  9.58k|        on_minute();
 4363|  9.58k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE11on_iso_timeEv:
 4365|  3.58k|    {
 4366|       |        // %H:%M:%S
 4367|  3.58k|        constexpr CharT colon = ':';
 4368|  3.58k|        on_24_hour();
 4369|  3.58k|        on_text(&colon, &colon + 1);
 4370|  3.58k|        on_minute();
 4371|  3.58k|        on_text(&colon, &colon + 1);
 4372|  3.58k|        on_second();
 4373|  3.58k|    }
_ZN3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE6verifyEv:
 4404|  7.13k|    {
 4405|  7.13k|        m_st.verify(*this);
 4406|  7.13k|        if (m_st.am_pm_set && m_st.hour12_set) {
  ------------------
  |  Branch (4406:13): [True: 0, False: 7.13k]
  |  Branch (4406:31): [True: 0, False: 0]
  ------------------
 4407|      0|            setter::handle_am_pm(m_tm, m_st);
 4408|      0|        }
 4409|  7.13k|        if (!m_st.full_year_set && (m_st.short_year_set || m_st.century_set)) {
  ------------------
  |  Branch (4409:13): [True: 7.12k, False: 12]
  |  Branch (4409:37): [True: 10, False: 7.11k]
  |  Branch (4409:60): [True: 0, False: 7.11k]
  ------------------
 4410|     10|            setter::handle_short_year_and_century(m_tm, m_st);
 4411|     10|        }
 4412|  7.13k|    }
_ZNK3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE9get_errorEv:
 4415|  61.6k|    {
 4416|  61.6k|        return m_error;
 4417|  61.6k|    }
_ZNK3scn2v46detail9tm_readerINS0_19datetime_componentsENS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwE12get_iteratorEv:
 4432|  7.13k|    {
 4433|  7.13k|        return m_begin;
 4434|  7.13k|    }

_ZN3scn2v44impl19transcode_to_stringIcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1461|    857|{
 1462|    857|    static_assert(sizeof(SourceCharT) != sizeof(DestCharT));
 1463|       |
 1464|    857|    if constexpr (sizeof(SourceCharT) == 1) {
 1465|       |        if constexpr (sizeof(DestCharT) == 2) {
 1466|       |            std::u32string tmp;
 1467|       |            transcode_to_string_impl_to32(src, tmp);
 1468|       |            return transcode_to_string_impl_32to16<false>(
 1469|       |                std::u32string_view{tmp}, dest);
 1470|       |        }
 1471|    857|        else if constexpr (sizeof(DestCharT) == 4) {
 1472|    857|            return transcode_to_string_impl_to32(src, dest);
 1473|    857|        }
 1474|       |    }
 1475|       |    else if constexpr (sizeof(SourceCharT) == 2) {
 1476|       |        if constexpr (sizeof(DestCharT) == 1) {
 1477|       |            std::u32string tmp;
 1478|       |            transcode_to_string_impl_to32(src, tmp);
 1479|       |            return transcode_to_string_impl_32to8<false>(
 1480|       |                std::u32string_view{tmp}, dest);
 1481|       |        }
 1482|       |        else if constexpr (sizeof(DestCharT) == 4) {
 1483|       |            return trasncode_to_string_impl_to32(src, dest);
 1484|       |        }
 1485|       |    }
 1486|       |    else if constexpr (sizeof(SourceCharT) == 4) {
 1487|       |        if constexpr (sizeof(DestCharT) == 1) {
 1488|       |            return transcode_to_string_impl_32to8<false>(src, dest);
 1489|       |        }
 1490|       |        else if constexpr (sizeof(DestCharT) == 2) {
 1491|       |            return transcode_to_string_impl_32to16<false>(src, dest);
 1492|       |        }
 1493|       |    }
 1494|       |
 1495|    857|    SCN_EXPECT(false);
  ------------------
  |  | 1104|    857|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|    857|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1496|      0|    SCN_UNREACHABLE;
  ------------------
  |  | 1067|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 1497|    857|}
_ZN3scn2v44impl29transcode_to_string_impl_to32IcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1354|    857|{
 1355|    857|    static_assert(sizeof(DestCharT) == 4);
 1356|       |
 1357|    857|    auto it = src.begin();
 1358|   219k|    while (it != src.end()) {
  ------------------
  |  Branch (1358:12): [True: 218k, False: 857]
  ------------------
 1359|   218k|        auto res = get_next_code_point(
 1360|   218k|            detail::make_string_view_from_iterators<SourceCharT>(it,
 1361|   218k|                                                                 src.end()));
 1362|   218k|        if (SCN_UNLIKELY(res.value == detail::invalid_code_point)) {
  ------------------
  |  | 1039|   218k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 5.79k, False: 212k]
  |  |  ------------------
  ------------------
 1363|  5.79k|            dest.push_back(DestCharT{0xfffd});
 1364|  5.79k|        }
 1365|   212k|        else {
 1366|   212k|            dest.push_back(res.value);
 1367|   212k|        }
 1368|   218k|        it = detail::make_string_view_iterator(src, res.iterator);
 1369|   218k|    }
 1370|    857|}
_ZN3scn2v44impl19get_next_code_pointIcEENS1_21iterator_value_resultINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEDiEES9_:
 1278|   235k|{
 1279|   235k|    SCN_EXPECT(!input.empty());
  ------------------
  |  | 1104|   235k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   235k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1280|       |
 1281|   235k|    const auto len = detail::code_point_length_by_starting_code_unit(input[0]);
 1282|   235k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  | 1039|   235k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 9.25k, False: 226k]
  |  |  ------------------
  ------------------
 1283|  9.25k|        return {get_start_for_next_code_point(input),
 1284|  9.25k|                detail::invalid_code_point};
 1285|  9.25k|    }
 1286|   226k|    if (SCN_UNLIKELY(len > input.size())) {
  ------------------
  |  | 1039|   226k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 277, False: 226k]
  |  |  ------------------
  ------------------
 1287|    277|        return {input.end(), detail::invalid_code_point};
 1288|    277|    }
 1289|       |
 1290|   226k|    return {input.begin() + len,
 1291|   226k|            detail::decode_code_point_exhaustive(input.substr(0, len))};
 1292|   226k|}
_ZN3scn2v44impl29get_start_for_next_code_pointINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_:
 1264|  9.25k|{
 1265|  9.25k|    auto it = input.begin();
 1266|   124k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (1266:12): [True: 123k, False: 576]
  ------------------
 1267|   123k|        if (detail::code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (1267:13): [True: 8.67k, False: 115k]
  ------------------
 1268|  8.67k|            break;
 1269|  8.67k|        }
 1270|   123k|    }
 1271|  9.25k|    return it;
 1272|  9.25k|}
_ZN3scn2v44impl14is_ascii_spaceEc:
  457|   155k|{
  458|   155k|    return is_ascii_space_lookup[static_cast<size_t>(
  459|   155k|        static_cast<unsigned char>(ch))];
  460|   155k|}
_ZN3scn2v44impl16has_byte_greaterEmh:
  538|  84.1k|{
  539|  84.1k|    return (word + ~0ull / 255 * (127 - n) | word) & ~0ull / 255 * 128;
  540|  84.1k|}
_ZN3scn2v44implntENS1_9eof_errorE:
  783|   359k|{
  784|   359k|    return e != eof_error::good;
  785|   359k|}
_ZN3scn2v44impl19make_eof_scan_errorENS1_9eof_errorE:
  797|  4.35k|{
  798|  4.35k|    SCN_EXPECT(err == eof_error::eof);
  ------------------
  |  | 1104|  4.35k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  4.35k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  799|  4.35k|    return scan_error{scan_error::end_of_input, "EOF"};
  800|  4.35k|}
_ZNK3scn2v46ranges9next_impl2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_NS1_20incrementable_traitsIS9_E15difference_typeE:
  303|  79.1k|    {
  304|  79.1k|        ranges::advance(x, n);
  305|  79.1k|        return x;
  306|  79.1k|    }
_ZNK3scn2v46ranges6detail8advance_2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeE:
  267|  79.1k|    {
  268|  79.1k|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  79.1k|    }
_ZN3scn2v46ranges6detail8advance_2fn8impl_i_nIPKcEENSt3__19enable_ifIX22random_access_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeENS0_6detail12priority_tagILm0EEE:
  150|  79.1k|    {
  151|  79.1k|        i += n;
  152|  79.1k|    }
_ZNK3scn2v46ranges6detail9distance_2fnclIPKcS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EENS1_20incrementable_traitsISA_E15difference_typeEE4typeESA_SB_:
  107|   207k|    {
  108|   207k|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|   207k|    }
_ZN3scn2v46ranges6detail9distance_2fn4implIPKcS7_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISB_E15difference_typeEE4typeESB_SA_NS0_6detail12priority_tagILm0EEE:
   86|   207k|    {
   87|   207k|        return s - i;
   88|   207k|    }
_ZNK3scn2v46ranges6detail9distance_2fnclIPKwS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EENS1_20incrementable_traitsISA_E15difference_typeEE4typeESA_SB_:
  107|   114k|    {
  108|   114k|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|   114k|    }
_ZN3scn2v46ranges6detail9distance_2fn4implIPKwS7_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISB_E15difference_typeEE4typeESB_SA_NS0_6detail12priority_tagILm0EEE:
   86|   114k|    {
   87|   114k|        return s - i;
   88|   114k|    }
_ZN3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcEC2INSt3__117basic_string_viewIcNSB_11char_traitsIcEEEETnPNSB_9enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE14borrowed_rangeISH_EEvE4typeELPv0EEEOSH_NS0_15basic_scan_argsINS1_INS0_6detail16buffer_range_tagEcEEEENSO_10locale_refE:
 3017|  79.1k|        : base(SCN_MOVE(a), loc),
  ------------------
  |  | 1108|  79.1k|    static_cast<    \
  |  | 1109|  79.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3018|  79.1k|          m_range(ranges::data(r), ranges::data(r) + ranges::size(r)),
 3019|  79.1k|          m_current(m_range.begin())
 3020|  79.1k|    {
 3021|  79.1k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcE5beginEv:
 3024|   437k|    {
 3025|   437k|        return m_current;
 3026|   437k|    }
_ZN3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwEC2INSt3__117basic_string_viewIwNSB_11char_traitsIwEEEETnPNSB_9enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE14borrowed_rangeISH_EEvE4typeELPv0EEEOSH_NS0_15basic_scan_argsINS1_INS0_6detail16buffer_range_tagEwEEEENSO_10locale_refE:
 3017|  93.3k|        : base(SCN_MOVE(a), loc),
  ------------------
  |  | 1108|  93.3k|    static_cast<    \
  |  | 1109|  93.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3018|  93.3k|          m_range(ranges::data(r), ranges::data(r) + ranges::size(r)),
 3019|  93.3k|          m_current(m_range.begin())
 3020|  93.3k|    {
 3021|  93.3k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwE5beginEv:
 3024|   487k|    {
 3025|   487k|        return m_current;
 3026|   487k|    }
_ZNK3scn2v44impl12function_refIFbDiES3_EclEDi:
  762|  1.08M|    {
  763|  1.08M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  | 1110|  1.08M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  1.08M|    }
_ZN3scn2v44impl12function_refIFbDiES3_EC2INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_:
  742|   280k|        : m_fptr([](storage fn,
  743|   280k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   280k|              cvref<T> obj = *get<T>(fn);
  745|   280k|              if constexpr (std::is_void_v<R>) {
  746|   280k|                  obj(static_cast<decltype(args)>(args)...);
  747|   280k|              }
  748|   280k|              else {
  749|   280k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   280k|              }
  751|   280k|          }),
  752|   280k|          m_storage(std::addressof(f))
  753|   280k|    {
  754|   280k|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_ENKUlNS1_12fnref_detail4base7storageEDiE_clESK_Di:
  743|   542k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   542k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   542k|              else {
  749|   542k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   542k|              }
  751|   542k|          }),
_ZN3scn2v44impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbDiES8_EEEEEEDaNS3_7storageE:
  683|   542k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   542k|        else if constexpr (std::is_object_v<T>) {
  688|   542k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   542k|    }
_ZN3scn2v44impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbDiES9_EEEETnPNS6_9enable_ifIXsr3stdE11is_object_vIT_EEvE4typeELPv0EEEPSD_:
  660|   280k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   280k|        {
  662|   280k|        }
_ZNK3scn2v46ranges6detail9distance_2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorES9_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SC_EENS1_20incrementable_traitsISC_E15difference_typeEE4typeESC_SD_:
  107|  57.5k|    {
  108|  57.5k|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|  57.5k|    }
_ZN3scn2v46ranges6detail9distance_2fn4implINS0_6detail17basic_scan_bufferIcE16forward_iteratorES9_EENSt3__19enable_ifIXnt18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeESD_SC_NS6_12priority_tagILm0EEE:
   93|  57.5k|    {
   94|  57.5k|        iter_difference_t<I> counter{0};
   95|   511k|        while (i != s) {
  ------------------
  |  Branch (95:16): [True: 453k, False: 57.5k]
  ------------------
   96|   453k|            ++i;
   97|   453k|            ++counter;
   98|   453k|        }
   99|  57.5k|        return counter;
  100|  57.5k|    }
_ZN3scn2v44impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_9eof_errorET_:
  950|  93.5k|{
  951|  93.5k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  | 1039|  93.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 1.44k, False: 92.1k]
  |  |  ------------------
  ------------------
  952|  1.44k|        return eof_error::eof;
  953|  1.44k|    }
  954|  92.1k|    return eof_error::good;
  955|  93.5k|}
_ZN3scn2v44impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  944|   306k|{
  945|   306k|    return is_range_eof(r.begin(), r.end());
  946|   306k|}
_ZN3scn2v44impl12is_range_eofINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_6ranges18default_sentinel_tEEEbT_T0_:
  928|   306k|{
  929|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  930|       |    if constexpr (ranges::contiguous_iterator<I> ||
  931|       |                  (ranges::random_access_iterator<I> &&
  932|       |                   detail::can_make_address_from_iterator<I>)) {
  933|       |        return detail::to_address(begin) == detail::to_address(end);
  934|       |    }
  935|       |    else
  936|       |#endif
  937|   306k|    {
  938|   306k|        return begin == end;
  939|   306k|    }
  940|   306k|}
_ZN3scn2v44impl9eof_checkINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_9eof_errorET_:
  950|  79.1k|{
  951|  79.1k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  | 1039|  79.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 738, False: 78.3k]
  |  |  ------------------
  ------------------
  952|    738|        return eof_error::eof;
  953|    738|    }
  954|  78.3k|    return eof_error::good;
  955|  79.1k|}
_ZN3scn2v44impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEbT_:
  944|  79.1k|{
  945|  79.1k|    return is_range_eof(r.begin(), r.end());
  946|  79.1k|}
_ZN3scn2v44impl12is_range_eofIPKcS4_EEbT_T0_:
  928|  79.1k|{
  929|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  930|       |    if constexpr (ranges::contiguous_iterator<I> ||
  931|       |                  (ranges::random_access_iterator<I> &&
  932|       |                   detail::can_make_address_from_iterator<I>)) {
  933|       |        return detail::to_address(begin) == detail::to_address(end);
  934|       |    }
  935|       |    else
  936|       |#endif
  937|  79.1k|    {
  938|  79.1k|        return begin == end;
  939|  79.1k|    }
  940|  79.1k|}
_ZNK3scn2v44impl19string_view_wrapperIcE4viewEv:
 1601|   158k|    {
 1602|   158k|        return sv;
 1603|   158k|    }
_ZN3scn2v44impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSD_b:
 3097|  79.1k|{
 3098|  79.1k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (3098:9): [True: 79.1k, False: 0]
  ------------------
 3099|  79.1k|        auto it = read_while_classic_space(range);
 3100|  79.1k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 3101|  79.1k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  | 1039|  79.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 738, False: 78.3k]
  |  |  ------------------
  ------------------
 3102|    738|            return unexpected(e);
 3103|    738|        }
 3104|       |
 3105|  78.3k|        return it;
 3106|  79.1k|    }
 3107|       |
 3108|      0|    return read_while_classic_space(range);
 3109|  79.1k|}
_ZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2248|  79.1k|{
 2249|       |    if constexpr (ranges::contiguous_range<Range> &&
 2250|       |                  ranges::sized_range<Range> &&
 2251|  79.1k|                  std::is_same_v<detail::char_t<Range>, char>) {
 2252|  79.1k|        auto buf = make_contiguous_buffer(range);
 2253|  79.1k|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2254|  79.1k|        return ranges::next(range.begin(),
 2255|  79.1k|                            ranges::distance(buf.view().begin(), it));
 2256|       |    }
 2257|       |    else {
 2258|       |        auto it = range.begin();
 2259|       |
 2260|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2261|       |            auto seg = get_contiguous_beginning(range);
 2262|       |            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2263|       |                seg_it != seg.end()) {
 2264|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2265|       |            }
 2266|       |            ranges::advance(it, seg.size());
 2267|       |        }
 2268|       |
 2269|       |        return read_while_code_point(range, [](char32_t cp) noexcept {
 2270|       |            return detail::is_cp_space(cp);
 2271|       |        });
 2272|       |    }
 2273|  79.1k|}
_ZN3scn2v44impl22make_contiguous_bufferIRNS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaOT_:
 1781|  79.1k|{
 1782|       |    if constexpr (ranges::borrowed_range<Range> &&
 1783|       |                  ranges::contiguous_range<Range> &&
 1784|  79.1k|                  ranges::sized_range<Range>) {
 1785|  79.1k|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  | 1110|  79.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1786|       |    }
 1787|       |    else {
 1788|       |        return contiguous_range_factory{SCN_FWD(range)};
 1789|       |    }
 1790|  79.1k|}
_ZN3scn2v44impl19string_view_wrapperIcEC2IRNS0_6ranges6detail9subrange_8subrangeIPKcSA_EETnPNSt3__19enable_ifIXaaaasr6rangesE14borrowed_rangeIT_Esr6rangesE16contiguous_rangeISF_Esr6rangesE11sized_rangeISF_EEvE4typeELPv0EEEOSF_:
 1587|  79.1k|    constexpr string_view_wrapper(Range&& r) : sv(ranges::data(r), r.size())
 1588|  79.1k|    {
 1589|  79.1k|    }
_ZNK3scn2v46ranges6detail8advance_2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeE:
  267|  93.5k|    {
  268|  93.5k|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  93.5k|    }
_ZN3scn2v46ranges6detail8advance_2fn8impl_i_nINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIXnt22bidirectional_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeENS6_12priority_tagILm0EEE:
  180|  93.5k|    {
  181|  93.5k|        while (n-- > iter_difference_t<I>{0}) {
  ------------------
  |  Branch (181:16): [True: 0, False: 93.5k]
  ------------------
  182|      0|            ++i;
  183|      0|        }
  184|  93.5k|    }
_ZN3scn2v44impl24get_contiguous_beginningINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDaT_:
 1039|  93.5k|{
 1040|       |    if constexpr (ranges::contiguous_range<Range> &&
 1041|       |                  ranges::sized_range<Range>) {
 1042|       |        return r;
 1043|       |    }
 1044|       |    else if constexpr (std::is_same_v<
 1045|       |                           ranges::const_iterator_t<Range>,
 1046|       |                           typename detail::basic_scan_buffer<
 1047|  93.5k|                               detail::char_t<Range>>::forward_iterator>) {
 1048|       |        if constexpr (ranges::common_range<Range>) {
 1049|       |            auto seg = r.begin().contiguous_segment();
 1050|       |            auto dist =
 1051|       |                static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1052|       |            return seg.substr(0, std::min(seg.size(), dist));
 1053|       |        }
 1054|  93.5k|        else {
 1055|  93.5k|            return r.begin().contiguous_segment();
 1056|  93.5k|        }
 1057|       |    }
 1058|       |    else {
 1059|       |        return std::basic_string_view<detail::char_t<Range>>{};
 1060|       |    }
 1061|  93.5k|}
_ZN3scn2v44impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2192|  93.5k|{
 2193|  93.5k|    auto it = range.begin();
 2194|   214k|    while (it != range.end()) {
  ------------------
  |  Branch (2194:12): [True: 212k, False: 1.44k]
  ------------------
 2195|   212k|        const auto val =
 2196|   212k|            read_code_point_into(ranges::subrange{it, range.end()});
 2197|   212k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  | 1038|   212k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 195k, False: 17.3k]
  |  |  ------------------
  ------------------
 2198|   195k|            const auto cp = detail::decode_code_point_exhaustive(
 2199|   195k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2200|   195k|            if (pred(cp)) {
  ------------------
  |  Branch (2200:17): [True: 92.1k, False: 103k]
  ------------------
 2201|  92.1k|                return it;
 2202|  92.1k|            }
 2203|   195k|        }
 2204|   120k|        it = val.iterator;
 2205|   120k|    }
 2206|       |
 2207|  1.44k|    return it;
 2208|  93.5k|}
_ZN3scn2v44impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISG_EEE4typeEEESG_:
 1997|   212k|{
 1998|   212k|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  | 1104|   212k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   212k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1999|   212k|    using string_type = std::basic_string<detail::char_t<Range>>;
 2000|       |
 2001|   212k|    auto it = range.begin();
 2002|   212k|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 2003|       |
 2004|   212k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  | 1039|   212k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 17.3k, False: 195k]
  |  |  ------------------
  ------------------
 2005|  17.3k|        ++it;
 2006|  17.3k|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 2007|  17.3k|        return {it, {}};
 2008|  17.3k|    }
 2009|       |
 2010|   195k|    if (len == 1) {
  ------------------
  |  Branch (2010:9): [True: 190k, False: 4.70k]
  ------------------
 2011|   190k|        ++it;
 2012|   190k|        return {it, string_type(1, *range.begin())};
 2013|   190k|    }
 2014|       |
 2015|  4.70k|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 2016|  4.70k|    return {it, string_type{range.begin(), it}};
 2017|   195k|}
_ZN3scn2v44impl29get_start_for_next_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 1264|  17.3k|{
 1265|  17.3k|    auto it = input.begin();
 1266|   220k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (1266:12): [True: 219k, False: 546]
  ------------------
 1267|   219k|        if (detail::code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (1267:13): [True: 16.7k, False: 202k]
  ------------------
 1268|  16.7k|            break;
 1269|  16.7k|        }
 1270|   219k|    }
 1271|  17.3k|    return it;
 1272|  17.3k|}
_ZNK3scn2v46ranges6detail8advance_2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SD_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeERSD_SH_SE_:
  282|  4.70k|    {
  283|  4.70k|        return n - fn::impl_i_n_s(i, n, bound);
  284|  4.70k|    }
_ZN3scn2v46ranges6detail8advance_2fn10impl_i_n_sINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEENSt3__19enable_ifIXaant22bidirectional_iteratorIT_Ent18sized_sentinel_forIT0_SD_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeERSD_SH_SE_:
  251|  4.70k|    {
  252|  4.70k|        constexpr iter_difference_t<I> zero{0};
  253|  4.70k|        iter_difference_t<I> counter{0};
  254|       |
  255|  14.9k|        while (n-- > zero && i != bound) {
  ------------------
  |  Branch (255:16): [True: 10.5k, False: 4.42k]
  |  Branch (255:30): [True: 10.2k, False: 282]
  ------------------
  256|  10.2k|            ++i;
  257|  10.2k|            ++counter;
  258|  10.2k|        }
  259|       |
  260|  4.70k|        return counter;
  261|  4.70k|    }
_ZNK3scn2v44impl27read_code_point_into_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEcE8is_validEv:
 1988|   212k|    {
 1989|   212k|        return !codepoint.empty();
 1990|   212k|    }
_ZN3scn2v44impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2213|  93.5k|{
 2214|  93.5k|    return read_until_code_point(range, std::not_fn(pred));
 2215|  93.5k|}
_ZN3scn2v44impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSG_b:
 3097|  93.5k|{
 3098|  93.5k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (3098:9): [True: 93.5k, False: 0]
  ------------------
 3099|  93.5k|        auto it = read_while_classic_space(range);
 3100|  93.5k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 3101|  93.5k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  | 1039|  93.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 1.44k, False: 92.1k]
  |  |  ------------------
  ------------------
 3102|  1.44k|            return unexpected(e);
 3103|  1.44k|        }
 3104|       |
 3105|  92.1k|        return it;
 3106|  93.5k|    }
 3107|       |
 3108|      0|    return read_while_classic_space(range);
 3109|  93.5k|}
_ZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2248|  93.5k|{
 2249|       |    if constexpr (ranges::contiguous_range<Range> &&
 2250|       |                  ranges::sized_range<Range> &&
 2251|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2252|       |        auto buf = make_contiguous_buffer(range);
 2253|       |        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2254|       |        return ranges::next(range.begin(),
 2255|       |                            ranges::distance(buf.view().begin(), it));
 2256|       |    }
 2257|  93.5k|    else {
 2258|  93.5k|        auto it = range.begin();
 2259|       |
 2260|  93.5k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2261|  93.5k|            auto seg = get_contiguous_beginning(range);
 2262|  93.5k|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2263|  93.5k|                seg_it != seg.end()) {
  ------------------
  |  Branch (2263:17): [True: 0, False: 93.5k]
  ------------------
 2264|      0|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2265|      0|            }
 2266|  93.5k|            ranges::advance(it, seg.size());
 2267|  93.5k|        }
 2268|       |
 2269|      0|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2270|  93.5k|            return detail::is_cp_space(cp);
 2271|  93.5k|        });
 2272|  93.5k|    }
 2273|  93.5k|}
_ZN3scn2v44impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_:
  742|  93.5k|        : m_fptr([](storage fn,
  743|  93.5k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  93.5k|              cvref<T> obj = *get<T>(fn);
  745|  93.5k|              if constexpr (std::is_void_v<R>) {
  746|  93.5k|                  obj(static_cast<decltype(args)>(args)...);
  747|  93.5k|              }
  748|  93.5k|              else {
  749|  93.5k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  93.5k|              }
  751|  93.5k|          }),
  752|  93.5k|          m_storage(std::addressof(f))
  753|  93.5k|    {
  754|  93.5k|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clESZ_Di:
  743|   195k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   195k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   195k|              else {
  749|   195k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   195k|              }
  751|   195k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  683|   195k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   195k|        else if constexpr (std::is_object_v<T>) {
  688|   195k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   195k|    }
_ZZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2269|   195k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2270|   195k|            return detail::is_cp_space(cp);
 2271|   195k|        });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  93.5k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  93.5k|        {
  662|  93.5k|        }
_ZNK3scn2v46ranges6detail9distance_2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorES9_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SC_EENS1_20incrementable_traitsISC_E15difference_typeEE4typeESC_SD_:
  107|  21.3k|    {
  108|  21.3k|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|  21.3k|    }
_ZN3scn2v46ranges6detail9distance_2fn4implINS0_6detail17basic_scan_bufferIwE16forward_iteratorES9_EENSt3__19enable_ifIXnt18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeESD_SC_NS6_12priority_tagILm0EEE:
   93|  21.3k|    {
   94|  21.3k|        iter_difference_t<I> counter{0};
   95|   148k|        while (i != s) {
  ------------------
  |  Branch (95:16): [True: 127k, False: 21.3k]
  ------------------
   96|   127k|            ++i;
   97|   127k|            ++counter;
   98|   127k|        }
   99|  21.3k|        return counter;
  100|  21.3k|    }
_ZN3scn2v44impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_9eof_errorET_:
  950|  93.3k|{
  951|  93.3k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  | 1039|  93.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 1.08k, False: 92.2k]
  |  |  ------------------
  ------------------
  952|  1.08k|        return eof_error::eof;
  953|  1.08k|    }
  954|  92.2k|    return eof_error::good;
  955|  93.3k|}
_ZN3scn2v44impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  944|   266k|{
  945|   266k|    return is_range_eof(r.begin(), r.end());
  946|   266k|}
_ZN3scn2v44impl12is_range_eofINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_6ranges18default_sentinel_tEEEbT_T0_:
  928|   266k|{
  929|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  930|       |    if constexpr (ranges::contiguous_iterator<I> ||
  931|       |                  (ranges::random_access_iterator<I> &&
  932|       |                   detail::can_make_address_from_iterator<I>)) {
  933|       |        return detail::to_address(begin) == detail::to_address(end);
  934|       |    }
  935|       |    else
  936|       |#endif
  937|   266k|    {
  938|   266k|        return begin == end;
  939|   266k|    }
  940|   266k|}
_ZN3scn2v44impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISD_EEE4typeEEESD_:
 1997|   173k|{
 1998|   173k|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  | 1104|   173k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   173k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1999|   173k|    using string_type = std::basic_string<detail::char_t<Range>>;
 2000|       |
 2001|   173k|    auto it = range.begin();
 2002|   173k|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 2003|       |
 2004|   173k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  | 1039|   173k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 173k]
  |  |  ------------------
  ------------------
 2005|      0|        ++it;
 2006|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 2007|      0|        return {it, {}};
 2008|      0|    }
 2009|       |
 2010|   173k|    if (len == 1) {
  ------------------
  |  Branch (2010:9): [True: 173k, False: 0]
  ------------------
 2011|   173k|        ++it;
 2012|   173k|        return {it, string_type(1, *range.begin())};
 2013|   173k|    }
 2014|       |
 2015|      0|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 2016|      0|    return {it, string_type{range.begin(), it}};
 2017|   173k|}
_ZN3scn2v44impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEbT_:
  944|   266k|{
  945|   266k|    return is_range_eof(r.begin(), r.end());
  946|   266k|}
_ZN3scn2v44impl12is_range_eofIPKwS4_EEbT_T0_:
  928|   266k|{
  929|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  930|       |    if constexpr (ranges::contiguous_iterator<I> ||
  931|       |                  (ranges::random_access_iterator<I> &&
  932|       |                   detail::can_make_address_from_iterator<I>)) {
  933|       |        return detail::to_address(begin) == detail::to_address(end);
  934|       |    }
  935|       |    else
  936|       |#endif
  937|   266k|    {
  938|   266k|        return begin == end;
  939|   266k|    }
  940|   266k|}
_ZNK3scn2v44impl27read_code_point_into_resultIPKwwE8is_validEv:
 1988|   173k|    {
 1989|   173k|        return !codepoint.empty();
 1990|   173k|    }
_ZN3scn2v44impl9eof_checkINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_9eof_errorET_:
  950|  93.3k|{
  951|  93.3k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  | 1039|  93.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 1.08k, False: 92.2k]
  |  |  ------------------
  ------------------
  952|  1.08k|        return eof_error::eof;
  953|  1.08k|    }
  954|  92.2k|    return eof_error::good;
  955|  93.3k|}
_ZN3scn2v44impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSD_b:
 3097|  93.3k|{
 3098|  93.3k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (3098:9): [True: 93.3k, False: 0]
  ------------------
 3099|  93.3k|        auto it = read_while_classic_space(range);
 3100|  93.3k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 3101|  93.3k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  | 1039|  93.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 1.08k, False: 92.2k]
  |  |  ------------------
  ------------------
 3102|  1.08k|            return unexpected(e);
 3103|  1.08k|        }
 3104|       |
 3105|  92.2k|        return it;
 3106|  93.3k|    }
 3107|       |
 3108|      0|    return read_while_classic_space(range);
 3109|  93.3k|}
_ZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2248|  93.3k|{
 2249|       |    if constexpr (ranges::contiguous_range<Range> &&
 2250|       |                  ranges::sized_range<Range> &&
 2251|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2252|       |        auto buf = make_contiguous_buffer(range);
 2253|       |        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2254|       |        return ranges::next(range.begin(),
 2255|       |                            ranges::distance(buf.view().begin(), it));
 2256|       |    }
 2257|  93.3k|    else {
 2258|  93.3k|        auto it = range.begin();
 2259|       |
 2260|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2261|       |            auto seg = get_contiguous_beginning(range);
 2262|       |            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2263|       |                seg_it != seg.end()) {
 2264|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2265|       |            }
 2266|       |            ranges::advance(it, seg.size());
 2267|       |        }
 2268|       |
 2269|  93.3k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2270|  93.3k|            return detail::is_cp_space(cp);
 2271|  93.3k|        });
 2272|  93.3k|    }
 2273|  93.3k|}
_ZN3scn2v44impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2213|  93.3k|{
 2214|  93.3k|    return read_until_code_point(range, std::not_fn(pred));
 2215|  93.3k|}
_ZN3scn2v44impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2192|  93.3k|{
 2193|  93.3k|    auto it = range.begin();
 2194|   174k|    while (it != range.end()) {
  ------------------
  |  Branch (2194:12): [True: 173k, False: 1.08k]
  ------------------
 2195|   173k|        const auto val =
 2196|   173k|            read_code_point_into(ranges::subrange{it, range.end()});
 2197|   173k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  | 1038|   173k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 173k, False: 0]
  |  |  ------------------
  ------------------
 2198|   173k|            const auto cp = detail::decode_code_point_exhaustive(
 2199|   173k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2200|   173k|            if (pred(cp)) {
  ------------------
  |  Branch (2200:17): [True: 92.2k, False: 81.1k]
  ------------------
 2201|  92.2k|                return it;
 2202|  92.2k|            }
 2203|   173k|        }
 2204|  81.1k|        it = val.iterator;
 2205|  81.1k|    }
 2206|       |
 2207|  1.08k|    return it;
 2208|  93.3k|}
_ZN3scn2v44impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_TnPNSE_9enable_ifIXaaaasr6detailE11is_not_selfISG_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSN_EEvE4typeELPv0EEEOSG_:
  742|  93.3k|        : m_fptr([](storage fn,
  743|  93.3k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  93.3k|              cvref<T> obj = *get<T>(fn);
  745|  93.3k|              if constexpr (std::is_void_v<R>) {
  746|  93.3k|                  obj(static_cast<decltype(args)>(args)...);
  747|  93.3k|              }
  748|  93.3k|              else {
  749|  93.3k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  93.3k|              }
  751|  93.3k|          }),
  752|  93.3k|          m_storage(std::addressof(f))
  753|  93.3k|    {
  754|  93.3k|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_TnPNSE_9enable_ifIXaaaasr6detailE11is_not_selfISG_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSN_EEvE4typeELPv0EEEOSG_ENKUlNS1_12fnref_detail4base7storageEDiE_clESW_Di:
  743|   173k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   173k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   173k|              else {
  749|   173k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   173k|              }
  751|   173k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_EUlDiE_EEDaNS3_7storageE:
  683|   173k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   173k|        else if constexpr (std::is_object_v<T>) {
  688|   173k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   173k|    }
_ZZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_ENKUlDiE_clEDi:
 2269|   173k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2270|   173k|            return detail::is_cp_space(cp);
 2271|   173k|        });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_TnPNSE_9enable_ifIXsr3stdE11is_object_vISG_EEvE4typeELPv0EEEPSG_:
  660|  93.3k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  93.3k|        {
  662|  93.3k|        }
_ZN3scn2v44impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2192|  93.3k|{
 2193|  93.3k|    auto it = range.begin();
 2194|   174k|    while (it != range.end()) {
  ------------------
  |  Branch (2194:12): [True: 173k, False: 1.08k]
  ------------------
 2195|   173k|        const auto val =
 2196|   173k|            read_code_point_into(ranges::subrange{it, range.end()});
 2197|   173k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  | 1038|   173k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 173k, False: 0]
  |  |  ------------------
  ------------------
 2198|   173k|            const auto cp = detail::decode_code_point_exhaustive(
 2199|   173k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2200|   173k|            if (pred(cp)) {
  ------------------
  |  Branch (2200:17): [True: 92.2k, False: 81.1k]
  ------------------
 2201|  92.2k|                return it;
 2202|  92.2k|            }
 2203|   173k|        }
 2204|  81.1k|        it = val.iterator;
 2205|  81.1k|    }
 2206|       |
 2207|  1.08k|    return it;
 2208|  93.3k|}
_ZN3scn2v44impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISG_EEE4typeEEESG_:
 1997|   173k|{
 1998|   173k|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  | 1104|   173k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   173k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1999|   173k|    using string_type = std::basic_string<detail::char_t<Range>>;
 2000|       |
 2001|   173k|    auto it = range.begin();
 2002|   173k|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 2003|       |
 2004|   173k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  | 1039|   173k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 173k]
  |  |  ------------------
  ------------------
 2005|      0|        ++it;
 2006|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 2007|      0|        return {it, {}};
 2008|      0|    }
 2009|       |
 2010|   173k|    if (len == 1) {
  ------------------
  |  Branch (2010:9): [True: 173k, False: 0]
  ------------------
 2011|   173k|        ++it;
 2012|   173k|        return {it, string_type(1, *range.begin())};
 2013|   173k|    }
 2014|       |
 2015|      0|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 2016|      0|    return {it, string_type{range.begin(), it}};
 2017|   173k|}
_ZNK3scn2v44impl27read_code_point_into_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEwE8is_validEv:
 1988|   173k|    {
 1989|   173k|        return !codepoint.empty();
 1990|   173k|    }
_ZN3scn2v44impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2213|  93.3k|{
 2214|  93.3k|    return read_until_code_point(range, std::not_fn(pred));
 2215|  93.3k|}
_ZN3scn2v44impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSG_b:
 3097|  93.3k|{
 3098|  93.3k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (3098:9): [True: 93.3k, False: 0]
  ------------------
 3099|  93.3k|        auto it = read_while_classic_space(range);
 3100|  93.3k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 3101|  93.3k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  | 1039|  93.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 1.08k, False: 92.2k]
  |  |  ------------------
  ------------------
 3102|  1.08k|            return unexpected(e);
 3103|  1.08k|        }
 3104|       |
 3105|  92.2k|        return it;
 3106|  93.3k|    }
 3107|       |
 3108|      0|    return read_while_classic_space(range);
 3109|  93.3k|}
_ZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2248|  93.3k|{
 2249|       |    if constexpr (ranges::contiguous_range<Range> &&
 2250|       |                  ranges::sized_range<Range> &&
 2251|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2252|       |        auto buf = make_contiguous_buffer(range);
 2253|       |        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2254|       |        return ranges::next(range.begin(),
 2255|       |                            ranges::distance(buf.view().begin(), it));
 2256|       |    }
 2257|  93.3k|    else {
 2258|  93.3k|        auto it = range.begin();
 2259|       |
 2260|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2261|       |            auto seg = get_contiguous_beginning(range);
 2262|       |            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2263|       |                seg_it != seg.end()) {
 2264|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2265|       |            }
 2266|       |            ranges::advance(it, seg.size());
 2267|       |        }
 2268|       |
 2269|  93.3k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2270|  93.3k|            return detail::is_cp_space(cp);
 2271|  93.3k|        });
 2272|  93.3k|    }
 2273|  93.3k|}
_ZN3scn2v44impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_:
  742|  93.3k|        : m_fptr([](storage fn,
  743|  93.3k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  93.3k|              cvref<T> obj = *get<T>(fn);
  745|  93.3k|              if constexpr (std::is_void_v<R>) {
  746|  93.3k|                  obj(static_cast<decltype(args)>(args)...);
  747|  93.3k|              }
  748|  93.3k|              else {
  749|  93.3k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  93.3k|              }
  751|  93.3k|          }),
  752|  93.3k|          m_storage(std::addressof(f))
  753|  93.3k|    {
  754|  93.3k|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clESZ_Di:
  743|   173k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   173k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   173k|              else {
  749|   173k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   173k|              }
  751|   173k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  683|   173k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   173k|        else if constexpr (std::is_object_v<T>) {
  688|   173k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   173k|    }
_ZZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2269|   173k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2270|   173k|            return detail::is_cp_space(cp);
 2271|   173k|        });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  93.3k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  93.3k|        {
  662|  93.3k|        }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclENS0_14basic_scan_argINS3_INS0_6detail16buffer_range_tagEcEEE6handleE:
 6022|  2.57k|    {
 6023|  2.57k|        if constexpr (!detail::is_type_disabled<void>) {
 6024|  2.57k|            basic_scan_parse_context<char_type> parse_ctx{
 6025|  2.57k|                source_tag<range_type>, {}};
 6026|  2.57k|            auto ctx = make_custom_ctx();
 6027|  2.57k|            SCN_TRY_DISCARD(h.scan(parse_ctx, ctx));
  ------------------
  |  | 3948|  2.57k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|  2.57k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 2.57k, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|  2.57k|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|  2.57k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|  2.57k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|  2.57k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|  2.57k|    }
  ------------------
 6028|       |
 6029|       |            if constexpr (std::is_same_v<
 6030|       |                              context_type,
 6031|      0|                              basic_contiguous_scan_context<char_type>>) {
 6032|      0|                return range.begin() + ctx.begin().position();
 6033|       |            }
 6034|       |            else {
 6035|       |                return ctx.begin();
 6036|       |            }
 6037|       |        }
 6038|       |        else {
 6039|       |            SCN_EXPECT(false);
 6040|       |            SCN_UNREACHABLE;
 6041|       |        }
 6042|  2.57k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE15make_custom_ctxEv:
 6004|  2.57k|    {
 6005|       |        if constexpr (std::is_same_v<
 6006|       |                          context_type,
 6007|  2.57k|                          basic_contiguous_scan_context<char_type>>) {
 6008|  2.57k|            auto it =
 6009|  2.57k|                typename detail::basic_scan_buffer<char_type>::forward_iterator{
 6010|  2.57k|                    std::basic_string_view<char_type>(range.data(),
 6011|  2.57k|                                                      range.size()),
 6012|  2.57k|                    0};
 6013|  2.57k|            return {it, args, loc};
 6014|       |        }
 6015|       |        else {
 6016|       |            return {range.begin(), args, loc};
 6017|       |        }
 6018|  2.57k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEclENS0_14basic_scan_argIS6_E6handleE:
 6022|  2.57k|    {
 6023|  2.57k|        if constexpr (!detail::is_type_disabled<void>) {
 6024|  2.57k|            basic_scan_parse_context<char_type> parse_ctx{
 6025|  2.57k|                source_tag<range_type>, {}};
 6026|  2.57k|            auto ctx = make_custom_ctx();
 6027|  2.57k|            SCN_TRY_DISCARD(h.scan(parse_ctx, ctx));
  ------------------
  |  | 3948|  2.57k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|  2.57k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 2.57k, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|  2.57k|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|  2.57k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|  2.57k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|  2.57k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|  2.57k|    }
  ------------------
 6028|       |
 6029|       |            if constexpr (std::is_same_v<
 6030|       |                              context_type,
 6031|       |                              basic_contiguous_scan_context<char_type>>) {
 6032|       |                return range.begin() + ctx.begin().position();
 6033|       |            }
 6034|      0|            else {
 6035|      0|                return ctx.begin();
 6036|      0|            }
 6037|       |        }
 6038|       |        else {
 6039|       |            SCN_EXPECT(false);
 6040|       |            SCN_UNREACHABLE;
 6041|       |        }
 6042|  2.57k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE15make_custom_ctxEv:
 6004|  2.57k|    {
 6005|       |        if constexpr (std::is_same_v<
 6006|       |                          context_type,
 6007|       |                          basic_contiguous_scan_context<char_type>>) {
 6008|       |            auto it =
 6009|       |                typename detail::basic_scan_buffer<char_type>::forward_iterator{
 6010|       |                    std::basic_string_view<char_type>(range.data(),
 6011|       |                                                      range.size()),
 6012|       |                    0};
 6013|       |            return {it, args, loc};
 6014|       |        }
 6015|  2.57k|        else {
 6016|  2.57k|            return {range.begin(), args, loc};
 6017|  2.57k|        }
 6018|  2.57k|    }
_ZN3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcEC2IRS8_TnPNSt3__19enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE14borrowed_rangeISE_EEvE4typeELPv0EEEOSE_NS0_15basic_scan_argsINS1_INS0_6detail16buffer_range_tagEcEEEENSL_10locale_refE:
 3017|  79.1k|        : base(SCN_MOVE(a), loc),
  ------------------
  |  | 1108|  79.1k|    static_cast<    \
  |  | 1109|  79.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3018|  79.1k|          m_range(ranges::data(r), ranges::data(r) + ranges::size(r)),
 3019|  79.1k|          m_current(m_range.begin())
 3020|  79.1k|    {
 3021|  79.1k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcE3endEv:
 3029|   235k|    {
 3030|   235k|        return m_range.end();
 3031|   235k|    }
_ZN3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcE10advance_toES7_:
 3044|  78.3k|    {
 3045|  78.3k|        SCN_EXPECT(it <= end());
  ------------------
  |  | 1104|  78.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  78.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3046|  78.3k|        if constexpr (detail::is_comparable_with_nullptr<iterator>) {
 3047|  78.3k|            if (it == nullptr) {
  ------------------
  |  Branch (3047:17): [True: 0, False: 78.3k]
  ------------------
 3048|      0|                it = end();
 3049|      0|            }
 3050|  78.3k|        }
 3051|  78.3k|        m_current = SCN_MOVE(it);
  ------------------
  |  | 1108|  78.3k|    static_cast<    \
  |  | 1109|  78.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3052|  78.3k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcE5rangeEv:
 3034|   157k|    {
 3035|   157k|        return ranges::subrange{begin(), end()};
 3036|   157k|    }
_ZNK3scn2v44impl13custom_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEclENS0_14basic_scan_argIS6_E6handleE:
 6354|   172k|    {
 6355|   172k|        SCN_TRY_DISCARD(h.scan(parse_ctx, ctx));
  ------------------
  |  | 3948|   172k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|   172k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 71.9k, False: 100k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|  71.9k|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|  71.9k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|  71.9k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|  71.9k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|  71.9k|    }
  ------------------
 6356|   100k|        return {ctx.begin()};
 6357|   172k|    }
_ZN3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcE10advance_toERKNS0_6detail17basic_scan_bufferIcE16forward_iteratorE:
 3055|  43.1k|    {
 3056|  43.1k|        SCN_EXPECT(it.position() <= m_range.size());
  ------------------
  |  | 1104|  43.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  43.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3057|  43.1k|        m_current = m_range.begin() + it.position();
 3058|  43.1k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcE16underlying_rangeEv:
 3039|   237k|    {
 3040|   237k|        return m_range;
 3041|   237k|    }
_ZN3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcE14begin_positionEv:
 3061|  79.1k|    {
 3062|  79.1k|        return ranges::distance(m_range.begin(), begin());
 3063|  79.1k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclENS0_14basic_scan_argINS3_INS0_6detail16buffer_range_tagEwEEE6handleE:
 6022|  5.14k|    {
 6023|  5.14k|        if constexpr (!detail::is_type_disabled<void>) {
 6024|  5.14k|            basic_scan_parse_context<char_type> parse_ctx{
 6025|  5.14k|                source_tag<range_type>, {}};
 6026|  5.14k|            auto ctx = make_custom_ctx();
 6027|  5.14k|            SCN_TRY_DISCARD(h.scan(parse_ctx, ctx));
  ------------------
  |  | 3948|  5.14k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|  5.14k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 5.14k, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|  5.14k|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|  5.14k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|  5.14k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|  5.14k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|  5.14k|    }
  ------------------
 6028|       |
 6029|       |            if constexpr (std::is_same_v<
 6030|       |                              context_type,
 6031|      0|                              basic_contiguous_scan_context<char_type>>) {
 6032|      0|                return range.begin() + ctx.begin().position();
 6033|       |            }
 6034|       |            else {
 6035|       |                return ctx.begin();
 6036|       |            }
 6037|       |        }
 6038|       |        else {
 6039|       |            SCN_EXPECT(false);
 6040|       |            SCN_UNREACHABLE;
 6041|       |        }
 6042|  5.14k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE15make_custom_ctxEv:
 6004|  5.14k|    {
 6005|       |        if constexpr (std::is_same_v<
 6006|       |                          context_type,
 6007|  5.14k|                          basic_contiguous_scan_context<char_type>>) {
 6008|  5.14k|            auto it =
 6009|  5.14k|                typename detail::basic_scan_buffer<char_type>::forward_iterator{
 6010|  5.14k|                    std::basic_string_view<char_type>(range.data(),
 6011|  5.14k|                                                      range.size()),
 6012|  5.14k|                    0};
 6013|  5.14k|            return {it, args, loc};
 6014|       |        }
 6015|       |        else {
 6016|       |            return {range.begin(), args, loc};
 6017|       |        }
 6018|  5.14k|    }
_ZN3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwEC2IRS8_TnPNSt3__19enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE14borrowed_rangeISE_EEvE4typeELPv0EEEOSE_NS0_15basic_scan_argsINS1_INS0_6detail16buffer_range_tagEwEEEENSL_10locale_refE:
 3017|  93.3k|        : base(SCN_MOVE(a), loc),
  ------------------
  |  | 1108|  93.3k|    static_cast<    \
  |  | 1109|  93.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3018|  93.3k|          m_range(ranges::data(r), ranges::data(r) + ranges::size(r)),
 3019|  93.3k|          m_current(m_range.begin())
 3020|  93.3k|    {
 3021|  93.3k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwE3endEv:
 3029|   277k|    {
 3030|   277k|        return m_range.end();
 3031|   277k|    }
_ZN3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwE10advance_toES7_:
 3044|  92.2k|    {
 3045|  92.2k|        SCN_EXPECT(it <= end());
  ------------------
  |  | 1104|  92.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  92.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3046|  92.2k|        if constexpr (detail::is_comparable_with_nullptr<iterator>) {
 3047|  92.2k|            if (it == nullptr) {
  ------------------
  |  Branch (3047:17): [True: 0, False: 92.2k]
  ------------------
 3048|      0|                it = end();
 3049|      0|            }
 3050|  92.2k|        }
 3051|  92.2k|        m_current = SCN_MOVE(it);
  ------------------
  |  | 1108|  92.2k|    static_cast<    \
  |  | 1109|  92.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3052|  92.2k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwE5rangeEv:
 3034|   185k|    {
 3035|   185k|        return ranges::subrange{begin(), end()};
 3036|   185k|    }
_ZNK3scn2v44impl13custom_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEclENS0_14basic_scan_argIS6_E6handleE:
 6354|   186k|    {
 6355|   186k|        SCN_TRY_DISCARD(h.scan(parse_ctx, ctx));
  ------------------
  |  | 3948|   186k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|   186k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 143k, False: 42.7k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|   143k|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|   143k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|   143k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|   143k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|   143k|    }
  ------------------
 6356|  42.7k|        return {ctx.begin()};
 6357|   186k|    }
_ZN3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwE10advance_toERKNS0_6detail17basic_scan_bufferIwE16forward_iteratorE:
 3055|  21.3k|    {
 3056|  21.3k|        SCN_EXPECT(it.position() <= m_range.size());
  ------------------
  |  | 1104|  21.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  21.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3057|  21.3k|        m_current = m_range.begin() + it.position();
 3058|  21.3k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwE16underlying_rangeEv:
 3039|   280k|    {
 3040|   280k|        return m_range;
 3041|   280k|    }
_ZN3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwE14begin_positionEv:
 3061|  93.3k|    {
 3062|  93.3k|        return ranges::distance(m_range.begin(), begin());
 3063|  93.3k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEclENS0_14basic_scan_argIS6_E6handleE:
 6022|  5.14k|    {
 6023|  5.14k|        if constexpr (!detail::is_type_disabled<void>) {
 6024|  5.14k|            basic_scan_parse_context<char_type> parse_ctx{
 6025|  5.14k|                source_tag<range_type>, {}};
 6026|  5.14k|            auto ctx = make_custom_ctx();
 6027|  5.14k|            SCN_TRY_DISCARD(h.scan(parse_ctx, ctx));
  ------------------
  |  | 3948|  5.14k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|  5.14k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 5.14k, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|  5.14k|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|  5.14k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|  5.14k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|  5.14k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|  5.14k|    }
  ------------------
 6028|       |
 6029|       |            if constexpr (std::is_same_v<
 6030|       |                              context_type,
 6031|       |                              basic_contiguous_scan_context<char_type>>) {
 6032|       |                return range.begin() + ctx.begin().position();
 6033|       |            }
 6034|      0|            else {
 6035|      0|                return ctx.begin();
 6036|      0|            }
 6037|       |        }
 6038|       |        else {
 6039|       |            SCN_EXPECT(false);
 6040|       |            SCN_UNREACHABLE;
 6041|       |        }
 6042|  5.14k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE15make_custom_ctxEv:
 6004|  5.14k|    {
 6005|       |        if constexpr (std::is_same_v<
 6006|       |                          context_type,
 6007|       |                          basic_contiguous_scan_context<char_type>>) {
 6008|       |            auto it =
 6009|       |                typename detail::basic_scan_buffer<char_type>::forward_iterator{
 6010|       |                    std::basic_string_view<char_type>(range.data(),
 6011|       |                                                      range.size()),
 6012|       |                    0};
 6013|       |            return {it, args, loc};
 6014|       |        }
 6015|  5.14k|        else {
 6016|  5.14k|            return {range.begin(), args, loc};
 6017|  5.14k|        }
 6018|  5.14k|    }

LLVMFuzzerTestOneInput:
   58|    857|{
   59|    857|    scn::fuzz::run(data, size);
   60|    857|    return 0;
   61|    857|}
chrono_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_13runEPKhm:
   34|    857|{
   35|    857|    if (size > max_input_bytes || size == 0) {
  ------------------
  |  Branch (35:9): [True: 0, False: 857]
  |  Branch (35:35): [True: 0, False: 857]
  ------------------
   36|      0|        return;
   37|      0|    }
   38|       |
   39|    857|    auto [sv, wsv_reinterpret, wsv_transcode] = make_input_views(data, size);
   40|       |
   41|    857|    const auto& f =
   42|    857|        get_format_strings<char>("{:%T}", "{:%R}", "{:%D}", "{:%F}",
   43|    857|                                 "{:%Y-%m-%dT%H:%M:%S%z}", "{:%a}", "{:%b}");
   44|    857|    do_basic_run(sv, f);
   45|       |
   46|    857|    const auto& wf = get_format_strings<wchar_t>(
   47|    857|        L"{:%T}", L"{:%R}", L"{:%D}", L"{:%F}", L"{:%Y-%m-%dT%H:%M:%S%z}",
   48|    857|        L"{:%a}", L"{:%b}");
   49|    857|    do_basic_run(wsv_reinterpret, wf);
   50|    857|    if (!wsv_transcode.empty()) {
  ------------------
  |  Branch (50:9): [True: 857, False: 0]
  ------------------
   51|    857|        do_basic_run(wsv_transcode, wf);
   52|    857|    }
   53|    857|}
_ZN3scn4fuzz23do_basic_run_for_sourceIcNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT0_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
   26|    857|{
   27|    857|    do_basic_run_for_type<CharT, std::tm>(source, format_strings);
   28|    857|    do_basic_run_for_type<CharT, tm_with_tz>(source, format_strings);
   29|    857|    do_basic_run_for_type<CharT, datetime_components>(source, format_strings);
   30|    857|}
_ZN3scn4fuzz23do_basic_run_for_sourceIcKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT0_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
   26|    857|{
   27|    857|    do_basic_run_for_type<CharT, std::tm>(source, format_strings);
   28|    857|    do_basic_run_for_type<CharT, tm_with_tz>(source, format_strings);
   29|    857|    do_basic_run_for_type<CharT, datetime_components>(source, format_strings);
   30|    857|}
_ZN3scn4fuzz23do_basic_run_for_sourceIwNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT0_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
   26|  1.71k|{
   27|  1.71k|    do_basic_run_for_type<CharT, std::tm>(source, format_strings);
   28|  1.71k|    do_basic_run_for_type<CharT, tm_with_tz>(source, format_strings);
   29|  1.71k|    do_basic_run_for_type<CharT, datetime_components>(source, format_strings);
   30|  1.71k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIwKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT0_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
   26|  1.71k|{
   27|  1.71k|    do_basic_run_for_type<CharT, std::tm>(source, format_strings);
   28|  1.71k|    do_basic_run_for_type<CharT, tm_with_tz>(source, format_strings);
   29|  1.71k|    do_basic_run_for_type<CharT, datetime_components>(source, format_strings);
   30|  1.71k|}

_ZN3scn4fuzz16make_input_viewsEPKhm:
   52|    857|{
   53|    857|    SCN_EXPECT(size <= max_input_bytes);
  ------------------
  |  | 1104|    857|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|    857|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   54|       |
   55|       |    // narrow
   56|    857|    string_buffer.resize(size);
   57|    857|    std::copy(data, data + size, reinterpret_cast<uint8_t*>(&string_buffer[0]));
   58|    857|    auto sv = std::string_view{string_buffer};
   59|       |
   60|       |    // wide, bitwise reinterpret
   61|    857|    const auto wsv_reinterpret_size =
   62|    857|        size < sizeof(wchar_t) ? 1 : (size / sizeof(wchar_t));
  ------------------
  |  Branch (62:9): [True: 75, False: 782]
  ------------------
   63|    857|    wstring_buffer_reinterpreted.resize(wsv_reinterpret_size);
   64|    857|    std::memcpy(wstring_buffer_reinterpreted.data(), data, size);
   65|    857|    auto wsv_reintepreted = std::wstring_view{wstring_buffer_reinterpreted};
   66|       |
   67|       |    // wide, transcode to correct encoding (utf16 or utf32)
   68|    857|    scn::impl::transcode_to_string(sv, wstring_buffer_transcoded_wide);
   69|    857|    std::wstring_view wsv_transcoded{wstring_buffer_transcoded_wide};
   70|       |
   71|    857|    return std::make_tuple(sv, wsv_reintepreted, wsv_transcoded);
   72|    857|}
_ZN3scn4fuzz18get_format_stringsIcJPKcS3_S3_S3_S3_S3_S3_EEERKNSt3__16vectorINS4_17basic_string_viewIT_NS4_11char_traitsIS7_EEEENS4_9allocatorISA_EEEEDpT0_:
  122|    857|{
  123|    857|    std::array<const CharT*, sizeof...(Args)> tmp = {{strings...}};
  124|    857|    auto& buf = get_format_string_view_buffer<CharT>();
  125|    857|    buf.resize(sizeof...(Args));
  126|    857|    std::copy(tmp.begin(), tmp.end(), buf.begin());
  127|    857|    return buf;
  128|    857|}
_ZN3scn4fuzz29get_format_string_view_bufferIcEERDav:
  108|    857|{
  109|    857|    if constexpr (std::is_same_v<CharT, char>) {
  110|    857|        return format_string_view_buffer;
  111|       |    }
  112|       |    else {
  113|       |        return wformat_string_view_buffer;
  114|       |    }
  115|    857|}
_ZN3scn4fuzz12do_basic_runIcNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvT0_RKNS2_6vectorINS3_IT_NS4_IS9_EEEENS2_9allocatorISB_EEEE:
  185|    857|{
  186|    857|    do_basic_run_for_source<CharT>(data, format_strings);
  187|    857|    do_basic_run_for_source<CharT>(populate_noncontiguous(data),
  188|    857|                                   format_strings);
  189|    857|}
_ZN3scn4fuzz21do_basic_run_for_typeIc2tmNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEvRT1_RKNS3_6vectorINS4_IT_NS5_ISB_EEEENS3_9allocatorISD_EEEE:
  133|    857|{
  134|       |    // Regular scan
  135|  5.99k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 5.99k, False: 857]
  ------------------
  136|  5.99k|        auto it = scn::ranges::begin(source);
  137|  13.1k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  13.1k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|  13.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  13.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  13.1k|            auto result = scn::scan<T>(
  140|  13.1k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  13.1k|                scn::runtime_format(f));
  142|  13.1k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 5.99k, False: 7.18k]
  ------------------
  143|  5.99k|                break;
  144|  5.99k|            }
  145|  7.18k|            it = result->begin();
  146|  7.18k|        }
  147|  5.99k|    }
  148|       |
  149|       |    // scan localized
  150|  5.99k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 5.99k, False: 857]
  ------------------
  151|  5.99k|        auto it = scn::ranges::begin(source);
  152|  13.1k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  13.1k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|  13.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  13.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  13.1k|            auto result = scn::scan<T>(
  155|  13.1k|                global_locale,
  156|  13.1k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  13.1k|                scn::runtime_format(f));
  158|  13.1k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 5.99k, False: 7.18k]
  ------------------
  159|  5.99k|                break;
  160|  5.99k|            }
  161|  7.18k|            it = result->begin();
  162|  7.18k|        }
  163|  5.99k|    }
  164|       |
  165|       |    // scan_value
  166|    857|    {
  167|    857|        auto it = scn::ranges::begin(source);
  168|    857|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|    857|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|    857|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|    857|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|    857|            auto result = scn::scan_value<T>(
  171|    857|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|    857|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 857, False: 0]
  ------------------
  173|    857|                break;
  174|    857|            }
  175|      0|            it = result->begin();
  176|      0|        }
  177|    857|    }
  178|    857|}
_ZN3scn4fuzz21do_basic_run_for_typeIcNS_2v410tm_with_tzENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEEvRT1_RKNS4_6vectorINS5_IT_NS6_ISC_EEEENS4_9allocatorISE_EEEE:
  133|    857|{
  134|       |    // Regular scan
  135|  5.99k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 5.99k, False: 857]
  ------------------
  136|  5.99k|        auto it = scn::ranges::begin(source);
  137|  13.1k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  13.1k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|  13.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  13.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  13.1k|            auto result = scn::scan<T>(
  140|  13.1k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  13.1k|                scn::runtime_format(f));
  142|  13.1k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 5.99k, False: 7.18k]
  ------------------
  143|  5.99k|                break;
  144|  5.99k|            }
  145|  7.18k|            it = result->begin();
  146|  7.18k|        }
  147|  5.99k|    }
  148|       |
  149|       |    // scan localized
  150|  5.99k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 5.99k, False: 857]
  ------------------
  151|  5.99k|        auto it = scn::ranges::begin(source);
  152|  13.1k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  13.1k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|  13.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  13.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  13.1k|            auto result = scn::scan<T>(
  155|  13.1k|                global_locale,
  156|  13.1k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  13.1k|                scn::runtime_format(f));
  158|  13.1k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 5.99k, False: 7.18k]
  ------------------
  159|  5.99k|                break;
  160|  5.99k|            }
  161|  7.18k|            it = result->begin();
  162|  7.18k|        }
  163|  5.99k|    }
  164|       |
  165|       |    // scan_value
  166|    857|    {
  167|    857|        auto it = scn::ranges::begin(source);
  168|    857|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|    857|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|    857|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|    857|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|    857|            auto result = scn::scan_value<T>(
  171|    857|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|    857|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 857, False: 0]
  ------------------
  173|    857|                break;
  174|    857|            }
  175|      0|            it = result->begin();
  176|      0|        }
  177|    857|    }
  178|    857|}
_ZN3scn4fuzz21do_basic_run_for_typeIcNS_2v419datetime_componentsENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEEvRT1_RKNS4_6vectorINS5_IT_NS6_ISC_EEEENS4_9allocatorISE_EEEE:
  133|    857|{
  134|       |    // Regular scan
  135|  5.99k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 5.99k, False: 857]
  ------------------
  136|  5.99k|        auto it = scn::ranges::begin(source);
  137|  13.1k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  13.1k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|  13.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  13.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  13.1k|            auto result = scn::scan<T>(
  140|  13.1k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  13.1k|                scn::runtime_format(f));
  142|  13.1k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 5.99k, False: 7.18k]
  ------------------
  143|  5.99k|                break;
  144|  5.99k|            }
  145|  7.18k|            it = result->begin();
  146|  7.18k|        }
  147|  5.99k|    }
  148|       |
  149|       |    // scan localized
  150|  5.99k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 5.99k, False: 857]
  ------------------
  151|  5.99k|        auto it = scn::ranges::begin(source);
  152|  13.1k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  13.1k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|  13.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  13.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  13.1k|            auto result = scn::scan<T>(
  155|  13.1k|                global_locale,
  156|  13.1k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  13.1k|                scn::runtime_format(f));
  158|  13.1k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 5.99k, False: 7.18k]
  ------------------
  159|  5.99k|                break;
  160|  5.99k|            }
  161|  7.18k|            it = result->begin();
  162|  7.18k|        }
  163|  5.99k|    }
  164|       |
  165|       |    // scan_value
  166|    857|    {
  167|    857|        auto it = scn::ranges::begin(source);
  168|    857|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|    857|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|    857|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|    857|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|    857|            auto result = scn::scan_value<T>(
  171|    857|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|    857|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 857, False: 0]
  ------------------
  173|    857|                break;
  174|    857|            }
  175|      0|            it = result->begin();
  176|      0|        }
  177|    857|    }
  178|    857|}
_ZN3scn4fuzz21do_basic_run_for_typeIc2tmKNSt3__15dequeIcNS3_9allocatorIcEEEEEEvRT1_RKNS3_6vectorINS3_17basic_string_viewIT_NS3_11char_traitsISD_EEEENS5_ISG_EEEE:
  133|    857|{
  134|       |    // Regular scan
  135|  5.99k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 5.99k, False: 857]
  ------------------
  136|  5.99k|        auto it = scn::ranges::begin(source);
  137|  15.5k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  15.5k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|  15.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  15.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  15.5k|            auto result = scn::scan<T>(
  140|  15.5k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  15.5k|                scn::runtime_format(f));
  142|  15.5k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 5.99k, False: 9.59k]
  ------------------
  143|  5.99k|                break;
  144|  5.99k|            }
  145|  9.59k|            it = result->begin();
  146|  9.59k|        }
  147|  5.99k|    }
  148|       |
  149|       |    // scan localized
  150|  5.99k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 5.99k, False: 857]
  ------------------
  151|  5.99k|        auto it = scn::ranges::begin(source);
  152|  15.5k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  15.5k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|  15.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  15.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  15.5k|            auto result = scn::scan<T>(
  155|  15.5k|                global_locale,
  156|  15.5k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  15.5k|                scn::runtime_format(f));
  158|  15.5k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 5.99k, False: 9.59k]
  ------------------
  159|  5.99k|                break;
  160|  5.99k|            }
  161|  9.59k|            it = result->begin();
  162|  9.59k|        }
  163|  5.99k|    }
  164|       |
  165|       |    // scan_value
  166|    857|    {
  167|    857|        auto it = scn::ranges::begin(source);
  168|    857|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|    857|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|    857|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|    857|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|    857|            auto result = scn::scan_value<T>(
  171|    857|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|    857|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 857, False: 0]
  ------------------
  173|    857|                break;
  174|    857|            }
  175|      0|            it = result->begin();
  176|      0|        }
  177|    857|    }
  178|    857|}
_ZN3scn4fuzz21do_basic_run_for_typeIcNS_2v410tm_with_tzEKNSt3__15dequeIcNS4_9allocatorIcEEEEEEvRT1_RKNS4_6vectorINS4_17basic_string_viewIT_NS4_11char_traitsISE_EEEENS6_ISH_EEEE:
  133|    857|{
  134|       |    // Regular scan
  135|  5.99k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 5.99k, False: 857]
  ------------------
  136|  5.99k|        auto it = scn::ranges::begin(source);
  137|  15.5k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  15.5k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|  15.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  15.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  15.5k|            auto result = scn::scan<T>(
  140|  15.5k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  15.5k|                scn::runtime_format(f));
  142|  15.5k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 5.99k, False: 9.59k]
  ------------------
  143|  5.99k|                break;
  144|  5.99k|            }
  145|  9.59k|            it = result->begin();
  146|  9.59k|        }
  147|  5.99k|    }
  148|       |
  149|       |    // scan localized
  150|  5.99k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 5.99k, False: 857]
  ------------------
  151|  5.99k|        auto it = scn::ranges::begin(source);
  152|  15.5k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  15.5k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|  15.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  15.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  15.5k|            auto result = scn::scan<T>(
  155|  15.5k|                global_locale,
  156|  15.5k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  15.5k|                scn::runtime_format(f));
  158|  15.5k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 5.99k, False: 9.59k]
  ------------------
  159|  5.99k|                break;
  160|  5.99k|            }
  161|  9.59k|            it = result->begin();
  162|  9.59k|        }
  163|  5.99k|    }
  164|       |
  165|       |    // scan_value
  166|    857|    {
  167|    857|        auto it = scn::ranges::begin(source);
  168|    857|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|    857|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|    857|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|    857|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|    857|            auto result = scn::scan_value<T>(
  171|    857|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|    857|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 857, False: 0]
  ------------------
  173|    857|                break;
  174|    857|            }
  175|      0|            it = result->begin();
  176|      0|        }
  177|    857|    }
  178|    857|}
_ZN3scn4fuzz21do_basic_run_for_typeIcNS_2v419datetime_componentsEKNSt3__15dequeIcNS4_9allocatorIcEEEEEEvRT1_RKNS4_6vectorINS4_17basic_string_viewIT_NS4_11char_traitsISE_EEEENS6_ISH_EEEE:
  133|    857|{
  134|       |    // Regular scan
  135|  5.99k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 5.99k, False: 857]
  ------------------
  136|  5.99k|        auto it = scn::ranges::begin(source);
  137|  15.5k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  15.5k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|  15.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  15.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  15.5k|            auto result = scn::scan<T>(
  140|  15.5k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  15.5k|                scn::runtime_format(f));
  142|  15.5k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 5.99k, False: 9.59k]
  ------------------
  143|  5.99k|                break;
  144|  5.99k|            }
  145|  9.59k|            it = result->begin();
  146|  9.59k|        }
  147|  5.99k|    }
  148|       |
  149|       |    // scan localized
  150|  5.99k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 5.99k, False: 857]
  ------------------
  151|  5.99k|        auto it = scn::ranges::begin(source);
  152|  15.5k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  15.5k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|  15.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  15.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  15.5k|            auto result = scn::scan<T>(
  155|  15.5k|                global_locale,
  156|  15.5k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  15.5k|                scn::runtime_format(f));
  158|  15.5k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 5.99k, False: 9.59k]
  ------------------
  159|  5.99k|                break;
  160|  5.99k|            }
  161|  9.59k|            it = result->begin();
  162|  9.59k|        }
  163|  5.99k|    }
  164|       |
  165|       |    // scan_value
  166|    857|    {
  167|    857|        auto it = scn::ranges::begin(source);
  168|    857|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|    857|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|    857|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|    857|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|    857|            auto result = scn::scan_value<T>(
  171|    857|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|    857|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 857, False: 0]
  ------------------
  173|    857|                break;
  174|    857|            }
  175|      0|            it = result->begin();
  176|      0|        }
  177|    857|    }
  178|    857|}
_ZN3scn4fuzz22populate_noncontiguousINSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEERKDaRT_:
   90|    857|{
   91|    857|    using char_type = ranges::range_value_t<Source>;
   92|    857|    auto& deque = get_noncontiguous_buffer<char_type>();
   93|    857|    deque.clear();
   94|    857|    std::copy(ranges::begin(source), ranges::end(source),
   95|    857|              std::back_inserter(deque));
   96|    857|    return deque;
   97|    857|}
_ZN3scn4fuzz24get_noncontiguous_bufferIcEERDav:
   79|    857|{
   80|    857|    if constexpr (std::is_same_v<CharT, char>) {
   81|    857|        return noncontiguous_buffer;
   82|       |    }
   83|       |    else {
   84|       |        return wnoncontiguous_buffer;
   85|       |    }
   86|    857|}
_ZN3scn4fuzz18get_format_stringsIwJPKwS3_S3_S3_S3_S3_S3_EEERKNSt3__16vectorINS4_17basic_string_viewIT_NS4_11char_traitsIS7_EEEENS4_9allocatorISA_EEEEDpT0_:
  122|    857|{
  123|    857|    std::array<const CharT*, sizeof...(Args)> tmp = {{strings...}};
  124|    857|    auto& buf = get_format_string_view_buffer<CharT>();
  125|    857|    buf.resize(sizeof...(Args));
  126|    857|    std::copy(tmp.begin(), tmp.end(), buf.begin());
  127|    857|    return buf;
  128|    857|}
_ZN3scn4fuzz29get_format_string_view_bufferIwEERDav:
  108|    857|{
  109|       |    if constexpr (std::is_same_v<CharT, char>) {
  110|       |        return format_string_view_buffer;
  111|       |    }
  112|    857|    else {
  113|    857|        return wformat_string_view_buffer;
  114|    857|    }
  115|    857|}
_ZN3scn4fuzz12do_basic_runIwNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvT0_RKNS2_6vectorINS3_IT_NS4_IS9_EEEENS2_9allocatorISB_EEEE:
  185|  1.71k|{
  186|  1.71k|    do_basic_run_for_source<CharT>(data, format_strings);
  187|  1.71k|    do_basic_run_for_source<CharT>(populate_noncontiguous(data),
  188|  1.71k|                                   format_strings);
  189|  1.71k|}
_ZN3scn4fuzz21do_basic_run_for_typeIw2tmNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEvRT1_RKNS3_6vectorINS4_IT_NS5_ISB_EEEENS3_9allocatorISD_EEEE:
  133|  1.71k|{
  134|       |    // Regular scan
  135|  11.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 11.9k, False: 1.71k]
  ------------------
  136|  11.9k|        auto it = scn::ranges::begin(source);
  137|  15.5k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  15.5k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|  15.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  15.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  15.5k|            auto result = scn::scan<T>(
  140|  15.5k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  15.5k|                scn::runtime_format(f));
  142|  15.5k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 11.9k, False: 3.56k]
  ------------------
  143|  11.9k|                break;
  144|  11.9k|            }
  145|  3.56k|            it = result->begin();
  146|  3.56k|        }
  147|  11.9k|    }
  148|       |
  149|       |    // scan localized
  150|  11.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 11.9k, False: 1.71k]
  ------------------
  151|  11.9k|        auto it = scn::ranges::begin(source);
  152|  15.5k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  15.5k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|  15.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  15.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  15.5k|            auto result = scn::scan<T>(
  155|  15.5k|                global_locale,
  156|  15.5k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  15.5k|                scn::runtime_format(f));
  158|  15.5k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 11.9k, False: 3.56k]
  ------------------
  159|  11.9k|                break;
  160|  11.9k|            }
  161|  3.56k|            it = result->begin();
  162|  3.56k|        }
  163|  11.9k|    }
  164|       |
  165|       |    // scan_value
  166|  1.71k|    {
  167|  1.71k|        auto it = scn::ranges::begin(source);
  168|  1.71k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  1.71k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|  1.71k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  1.71k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  1.71k|            auto result = scn::scan_value<T>(
  171|  1.71k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  1.71k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 1.71k, False: 0]
  ------------------
  173|  1.71k|                break;
  174|  1.71k|            }
  175|      0|            it = result->begin();
  176|      0|        }
  177|  1.71k|    }
  178|  1.71k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwNS_2v410tm_with_tzENSt3__117basic_string_viewIwNS4_11char_traitsIwEEEEEEvRT1_RKNS4_6vectorINS5_IT_NS6_ISC_EEEENS4_9allocatorISE_EEEE:
  133|  1.71k|{
  134|       |    // Regular scan
  135|  11.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 11.9k, False: 1.71k]
  ------------------
  136|  11.9k|        auto it = scn::ranges::begin(source);
  137|  15.5k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  15.5k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|  15.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  15.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  15.5k|            auto result = scn::scan<T>(
  140|  15.5k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  15.5k|                scn::runtime_format(f));
  142|  15.5k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 11.9k, False: 3.56k]
  ------------------
  143|  11.9k|                break;
  144|  11.9k|            }
  145|  3.56k|            it = result->begin();
  146|  3.56k|        }
  147|  11.9k|    }
  148|       |
  149|       |    // scan localized
  150|  11.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 11.9k, False: 1.71k]
  ------------------
  151|  11.9k|        auto it = scn::ranges::begin(source);
  152|  15.5k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  15.5k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|  15.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  15.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  15.5k|            auto result = scn::scan<T>(
  155|  15.5k|                global_locale,
  156|  15.5k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  15.5k|                scn::runtime_format(f));
  158|  15.5k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 11.9k, False: 3.56k]
  ------------------
  159|  11.9k|                break;
  160|  11.9k|            }
  161|  3.56k|            it = result->begin();
  162|  3.56k|        }
  163|  11.9k|    }
  164|       |
  165|       |    // scan_value
  166|  1.71k|    {
  167|  1.71k|        auto it = scn::ranges::begin(source);
  168|  1.71k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  1.71k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|  1.71k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  1.71k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  1.71k|            auto result = scn::scan_value<T>(
  171|  1.71k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  1.71k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 1.71k, False: 0]
  ------------------
  173|  1.71k|                break;
  174|  1.71k|            }
  175|      0|            it = result->begin();
  176|      0|        }
  177|  1.71k|    }
  178|  1.71k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwNS_2v419datetime_componentsENSt3__117basic_string_viewIwNS4_11char_traitsIwEEEEEEvRT1_RKNS4_6vectorINS5_IT_NS6_ISC_EEEENS4_9allocatorISE_EEEE:
  133|  1.71k|{
  134|       |    // Regular scan
  135|  11.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 11.9k, False: 1.71k]
  ------------------
  136|  11.9k|        auto it = scn::ranges::begin(source);
  137|  15.5k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  15.5k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|  15.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  15.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  15.5k|            auto result = scn::scan<T>(
  140|  15.5k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  15.5k|                scn::runtime_format(f));
  142|  15.5k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 11.9k, False: 3.56k]
  ------------------
  143|  11.9k|                break;
  144|  11.9k|            }
  145|  3.56k|            it = result->begin();
  146|  3.56k|        }
  147|  11.9k|    }
  148|       |
  149|       |    // scan localized
  150|  11.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 11.9k, False: 1.71k]
  ------------------
  151|  11.9k|        auto it = scn::ranges::begin(source);
  152|  15.5k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  15.5k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|  15.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  15.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  15.5k|            auto result = scn::scan<T>(
  155|  15.5k|                global_locale,
  156|  15.5k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  15.5k|                scn::runtime_format(f));
  158|  15.5k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 11.9k, False: 3.56k]
  ------------------
  159|  11.9k|                break;
  160|  11.9k|            }
  161|  3.56k|            it = result->begin();
  162|  3.56k|        }
  163|  11.9k|    }
  164|       |
  165|       |    // scan_value
  166|  1.71k|    {
  167|  1.71k|        auto it = scn::ranges::begin(source);
  168|  1.71k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  1.71k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|  1.71k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  1.71k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  1.71k|            auto result = scn::scan_value<T>(
  171|  1.71k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  1.71k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 1.71k, False: 0]
  ------------------
  173|  1.71k|                break;
  174|  1.71k|            }
  175|      0|            it = result->begin();
  176|      0|        }
  177|  1.71k|    }
  178|  1.71k|}
_ZN3scn4fuzz21do_basic_run_for_typeIw2tmKNSt3__15dequeIwNS3_9allocatorIwEEEEEEvRT1_RKNS3_6vectorINS3_17basic_string_viewIT_NS3_11char_traitsISD_EEEENS5_ISG_EEEE:
  133|  1.71k|{
  134|       |    // Regular scan
  135|  11.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 11.9k, False: 1.71k]
  ------------------
  136|  11.9k|        auto it = scn::ranges::begin(source);
  137|  15.5k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  15.5k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|  15.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  15.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  15.5k|            auto result = scn::scan<T>(
  140|  15.5k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  15.5k|                scn::runtime_format(f));
  142|  15.5k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 11.9k, False: 3.56k]
  ------------------
  143|  11.9k|                break;
  144|  11.9k|            }
  145|  3.56k|            it = result->begin();
  146|  3.56k|        }
  147|  11.9k|    }
  148|       |
  149|       |    // scan localized
  150|  11.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 11.9k, False: 1.71k]
  ------------------
  151|  11.9k|        auto it = scn::ranges::begin(source);
  152|  15.5k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  15.5k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|  15.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  15.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  15.5k|            auto result = scn::scan<T>(
  155|  15.5k|                global_locale,
  156|  15.5k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  15.5k|                scn::runtime_format(f));
  158|  15.5k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 11.9k, False: 3.56k]
  ------------------
  159|  11.9k|                break;
  160|  11.9k|            }
  161|  3.56k|            it = result->begin();
  162|  3.56k|        }
  163|  11.9k|    }
  164|       |
  165|       |    // scan_value
  166|  1.71k|    {
  167|  1.71k|        auto it = scn::ranges::begin(source);
  168|  1.71k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  1.71k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|  1.71k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  1.71k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  1.71k|            auto result = scn::scan_value<T>(
  171|  1.71k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  1.71k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 1.71k, False: 0]
  ------------------
  173|  1.71k|                break;
  174|  1.71k|            }
  175|      0|            it = result->begin();
  176|      0|        }
  177|  1.71k|    }
  178|  1.71k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwNS_2v410tm_with_tzEKNSt3__15dequeIwNS4_9allocatorIwEEEEEEvRT1_RKNS4_6vectorINS4_17basic_string_viewIT_NS4_11char_traitsISE_EEEENS6_ISH_EEEE:
  133|  1.71k|{
  134|       |    // Regular scan
  135|  11.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 11.9k, False: 1.71k]
  ------------------
  136|  11.9k|        auto it = scn::ranges::begin(source);
  137|  15.5k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  15.5k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|  15.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  15.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  15.5k|            auto result = scn::scan<T>(
  140|  15.5k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  15.5k|                scn::runtime_format(f));
  142|  15.5k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 11.9k, False: 3.56k]
  ------------------
  143|  11.9k|                break;
  144|  11.9k|            }
  145|  3.56k|            it = result->begin();
  146|  3.56k|        }
  147|  11.9k|    }
  148|       |
  149|       |    // scan localized
  150|  11.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 11.9k, False: 1.71k]
  ------------------
  151|  11.9k|        auto it = scn::ranges::begin(source);
  152|  15.5k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  15.5k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|  15.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  15.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  15.5k|            auto result = scn::scan<T>(
  155|  15.5k|                global_locale,
  156|  15.5k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  15.5k|                scn::runtime_format(f));
  158|  15.5k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 11.9k, False: 3.56k]
  ------------------
  159|  11.9k|                break;
  160|  11.9k|            }
  161|  3.56k|            it = result->begin();
  162|  3.56k|        }
  163|  11.9k|    }
  164|       |
  165|       |    // scan_value
  166|  1.71k|    {
  167|  1.71k|        auto it = scn::ranges::begin(source);
  168|  1.71k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  1.71k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|  1.71k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  1.71k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  1.71k|            auto result = scn::scan_value<T>(
  171|  1.71k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  1.71k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 1.71k, False: 0]
  ------------------
  173|  1.71k|                break;
  174|  1.71k|            }
  175|      0|            it = result->begin();
  176|      0|        }
  177|  1.71k|    }
  178|  1.71k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwNS_2v419datetime_componentsEKNSt3__15dequeIwNS4_9allocatorIwEEEEEEvRT1_RKNS4_6vectorINS4_17basic_string_viewIT_NS4_11char_traitsISE_EEEENS6_ISH_EEEE:
  133|  1.71k|{
  134|       |    // Regular scan
  135|  11.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 11.9k, False: 1.71k]
  ------------------
  136|  11.9k|        auto it = scn::ranges::begin(source);
  137|  15.5k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  15.5k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|  15.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  15.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  15.5k|            auto result = scn::scan<T>(
  140|  15.5k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  15.5k|                scn::runtime_format(f));
  142|  15.5k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 11.9k, False: 3.56k]
  ------------------
  143|  11.9k|                break;
  144|  11.9k|            }
  145|  3.56k|            it = result->begin();
  146|  3.56k|        }
  147|  11.9k|    }
  148|       |
  149|       |    // scan localized
  150|  11.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 11.9k, False: 1.71k]
  ------------------
  151|  11.9k|        auto it = scn::ranges::begin(source);
  152|  15.5k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  15.5k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|  15.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  15.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  15.5k|            auto result = scn::scan<T>(
  155|  15.5k|                global_locale,
  156|  15.5k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  15.5k|                scn::runtime_format(f));
  158|  15.5k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 11.9k, False: 3.56k]
  ------------------
  159|  11.9k|                break;
  160|  11.9k|            }
  161|  3.56k|            it = result->begin();
  162|  3.56k|        }
  163|  11.9k|    }
  164|       |
  165|       |    // scan_value
  166|  1.71k|    {
  167|  1.71k|        auto it = scn::ranges::begin(source);
  168|  1.71k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  1.71k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|  1.71k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  1.71k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  1.71k|            auto result = scn::scan_value<T>(
  171|  1.71k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  1.71k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 1.71k, False: 0]
  ------------------
  173|  1.71k|                break;
  174|  1.71k|            }
  175|      0|            it = result->begin();
  176|      0|        }
  177|  1.71k|    }
  178|  1.71k|}
_ZN3scn4fuzz22populate_noncontiguousINSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEERKDaRT_:
   90|  1.71k|{
   91|  1.71k|    using char_type = ranges::range_value_t<Source>;
   92|  1.71k|    auto& deque = get_noncontiguous_buffer<char_type>();
   93|  1.71k|    deque.clear();
   94|  1.71k|    std::copy(ranges::begin(source), ranges::end(source),
   95|  1.71k|              std::back_inserter(deque));
   96|  1.71k|    return deque;
   97|  1.71k|}
_ZN3scn4fuzz24get_noncontiguous_bufferIwEERDav:
   79|  1.71k|{
   80|       |    if constexpr (std::is_same_v<CharT, char>) {
   81|       |        return noncontiguous_buffer;
   82|       |    }
   83|  1.71k|    else {
   84|  1.71k|        return wnoncontiguous_buffer;
   85|  1.71k|    }
   86|  1.71k|}

